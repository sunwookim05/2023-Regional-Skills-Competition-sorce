
PARTS_DRAWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005794  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb8  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800650c  0800650c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006514  08006514  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800651c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c44  200000a4  080065c0  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce8  080065c0  00020ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae03  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c36  00000000  00000000  0003aecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00010f82  00000000  00000000  0003eb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  0004fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019c0  00000000  00000000  00050a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ee6  00000000  00000000  000523d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df5b  00000000  00000000  000682be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081012  00000000  00000000  00086219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010722b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003540  00000000  00000000  0010727c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a4 	.word	0x200000a4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800583c 	.word	0x0800583c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a8 	.word	0x200000a8
 8000104:	0800583c 	.word	0x0800583c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d111      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d10f      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000264:	2900      	cmp	r1, #0
 8000266:	d100      	bne.n	800026a <__aeabi_uldivmod+0xe>
 8000268:	2800      	cmp	r0, #0
 800026a:	d002      	beq.n	8000272 <__aeabi_uldivmod+0x16>
 800026c:	2100      	movs	r1, #0
 800026e:	43c9      	mvns	r1, r1
 8000270:	0008      	movs	r0, r1
 8000272:	b407      	push	{r0, r1, r2}
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__aeabi_uldivmod+0x24>)
 8000276:	a102      	add	r1, pc, #8	; (adr r1, 8000280 <__aeabi_uldivmod+0x24>)
 8000278:	1840      	adds	r0, r0, r1
 800027a:	9002      	str	r0, [sp, #8]
 800027c:	bd03      	pop	{r0, r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	ffffffd9 	.word	0xffffffd9
 8000284:	b403      	push	{r0, r1}
 8000286:	4668      	mov	r0, sp
 8000288:	b501      	push	{r0, lr}
 800028a:	9802      	ldr	r0, [sp, #8]
 800028c:	f000 f834 	bl	80002f8 <__udivmoddi4>
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	469e      	mov	lr, r3
 8000294:	b002      	add	sp, #8
 8000296:	bc0c      	pop	{r2, r3}
 8000298:	4770      	bx	lr
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	4699      	mov	r9, r3
 80002a8:	0c3b      	lsrs	r3, r7, #16
 80002aa:	469c      	mov	ip, r3
 80002ac:	0413      	lsls	r3, r2, #16
 80002ae:	0c1b      	lsrs	r3, r3, #16
 80002b0:	001d      	movs	r5, r3
 80002b2:	000e      	movs	r6, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	0400      	lsls	r0, r0, #16
 80002b8:	0c14      	lsrs	r4, r2, #16
 80002ba:	0c00      	lsrs	r0, r0, #16
 80002bc:	4345      	muls	r5, r0
 80002be:	434b      	muls	r3, r1
 80002c0:	4360      	muls	r0, r4
 80002c2:	4361      	muls	r1, r4
 80002c4:	18c0      	adds	r0, r0, r3
 80002c6:	0c2c      	lsrs	r4, r5, #16
 80002c8:	1820      	adds	r0, r4, r0
 80002ca:	468c      	mov	ip, r1
 80002cc:	4283      	cmp	r3, r0
 80002ce:	d903      	bls.n	80002d8 <__aeabi_lmul+0x3c>
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	025b      	lsls	r3, r3, #9
 80002d4:	4698      	mov	r8, r3
 80002d6:	44c4      	add	ip, r8
 80002d8:	4649      	mov	r1, r9
 80002da:	4379      	muls	r1, r7
 80002dc:	4372      	muls	r2, r6
 80002de:	0c03      	lsrs	r3, r0, #16
 80002e0:	4463      	add	r3, ip
 80002e2:	042d      	lsls	r5, r5, #16
 80002e4:	0c2d      	lsrs	r5, r5, #16
 80002e6:	18c9      	adds	r1, r1, r3
 80002e8:	0400      	lsls	r0, r0, #16
 80002ea:	1940      	adds	r0, r0, r5
 80002ec:	1889      	adds	r1, r1, r2
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f000 f8ba 	bl	8000490 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 f8b5 	bl	8000490 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f000 f807 	bl	80004a8 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f000 f802 	bl	80004a8 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	; (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <DS3231_set_time>:

void DS3231_set_time(uint8_t sec, uint8_t minute, uint8_t hour)
{
  uint8_t buffer[4];

  buffer[0] = SECONDS_AD;
 80004e4:	2300      	movs	r3, #0
{
 80004e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e8:	b087      	sub	sp, #28
  buffer[0] = SECONDS_AD;
 80004ea:	ac05      	add	r4, sp, #20
{
 80004ec:	000e      	movs	r6, r1
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004ee:	210a      	movs	r1, #10
{
 80004f0:	0015      	movs	r5, r2
 80004f2:	0007      	movs	r7, r0
  buffer[0] = SECONDS_AD;
 80004f4:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004f6:	f7ff fe25 	bl	8000144 <__udivsi3>
 80004fa:	210a      	movs	r1, #10
 80004fc:	0103      	lsls	r3, r0, #4
 80004fe:	0038      	movs	r0, r7
 8000500:	9303      	str	r3, [sp, #12]
 8000502:	f7ff fea5 	bl	8000250 <__aeabi_uidivmod>
 8000506:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000508:	0030      	movs	r0, r6
  buffer[1] = ((sec/10)<<4) + (sec%10);
 800050a:	1859      	adds	r1, r3, r1
 800050c:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 800050e:	210a      	movs	r1, #10
 8000510:	f7ff fe18 	bl	8000144 <__udivsi3>
 8000514:	210a      	movs	r1, #10
 8000516:	0107      	lsls	r7, r0, #4
 8000518:	0030      	movs	r0, r6
 800051a:	f7ff fe99 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800051e:	0028      	movs	r0, r5
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000520:	187f      	adds	r7, r7, r1
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000522:	210a      	movs	r1, #10
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000524:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000526:	f7ff fe0d 	bl	8000144 <__udivsi3>
 800052a:	0106      	lsls	r6, r0, #4
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	210a      	movs	r1, #10
 8000530:	4006      	ands	r6, r0
 8000532:	0028      	movs	r0, r5
 8000534:	f7ff fe8c 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000538:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800053a:	1876      	adds	r6, r6, r1
 800053c:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800053e:	0022      	movs	r2, r4
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	21d0      	movs	r1, #208	; 0xd0
 8000544:	3b60      	subs	r3, #96	; 0x60
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <DS3231_set_time+0x6c>)
 8000548:	f003 fa98 	bl	8003a7c <HAL_I2C_Master_Transmit>
}
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	200004fc 	.word	0x200004fc

08000554 <DS3231_get_time>:

void DS3231_get_time(uint8_t *get_second, uint8_t *get_minute, uint8_t *get_hour)
{
  uint8_t buffer;

  buffer = SECONDS_AD;
 8000554:	2300      	movs	r3, #0
{
 8000556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	0016      	movs	r6, r2
  buffer = SECONDS_AD;
 800055c:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800055e:	2564      	movs	r5, #100	; 0x64
  buffer = SECONDS_AD;
 8000560:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000562:	220f      	movs	r2, #15
 8000564:	4c29      	ldr	r4, [pc, #164]	; (800060c <DS3231_get_time+0xb8>)
{
 8000566:	9103      	str	r1, [sp, #12]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000568:	a902      	add	r1, sp, #8
{
 800056a:	9002      	str	r0, [sp, #8]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800056c:	1852      	adds	r2, r2, r1
 800056e:	0020      	movs	r0, r4
 8000570:	21d1      	movs	r1, #209	; 0xd1
 8000572:	9500      	str	r5, [sp, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	f003 fa81 	bl	8003a7c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_second, 1, 100);
 800057a:	9a02      	ldr	r2, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	21d1      	movs	r1, #209	; 0xd1
 8000580:	0020      	movs	r0, r4
 8000582:	9500      	str	r5, [sp, #0]
 8000584:	f003 fb0c 	bl	8003ba0 <HAL_I2C_Master_Receive>

  buffer = MINUTES_AD;
 8000588:	2701      	movs	r7, #1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058a:	220f      	movs	r2, #15
  buffer = MINUTES_AD;
 800058c:	ab02      	add	r3, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058e:	a902      	add	r1, sp, #8
  buffer = MINUTES_AD;
 8000590:	73df      	strb	r7, [r3, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000592:	1852      	adds	r2, r2, r1
 8000594:	003b      	movs	r3, r7
 8000596:	21d1      	movs	r1, #209	; 0xd1
 8000598:	0020      	movs	r0, r4
 800059a:	9500      	str	r5, [sp, #0]
 800059c:	f003 fa6e 	bl	8003a7c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_minute, 1, 100);
 80005a0:	003b      	movs	r3, r7
 80005a2:	9a03      	ldr	r2, [sp, #12]
 80005a4:	21d1      	movs	r1, #209	; 0xd1
 80005a6:	0020      	movs	r0, r4
 80005a8:	9500      	str	r5, [sp, #0]
 80005aa:	f003 faf9 	bl	8003ba0 <HAL_I2C_Master_Receive>

  buffer = HOURS_AD;
 80005ae:	2302      	movs	r3, #2
 80005b0:	aa02      	add	r2, sp, #8
 80005b2:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80005b4:	220f      	movs	r2, #15
 80005b6:	a902      	add	r1, sp, #8
 80005b8:	003b      	movs	r3, r7
 80005ba:	1852      	adds	r2, r2, r1
 80005bc:	0020      	movs	r0, r4
 80005be:	21d1      	movs	r1, #209	; 0xd1
 80005c0:	9500      	str	r5, [sp, #0]
 80005c2:	f003 fa5b 	bl	8003a7c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_hour, 1, 100);
 80005c6:	003b      	movs	r3, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	21d1      	movs	r1, #209	; 0xd1
 80005cc:	0020      	movs	r0, r4
 80005ce:	9500      	str	r5, [sp, #0]
 80005d0:	f003 fae6 	bl	8003ba0 <HAL_I2C_Master_Receive>

  *get_hour = (((*get_hour & 0x30) >> 4) * 10) + (*get_hour & 0x0f);
 80005d4:	230a      	movs	r3, #10
 80005d6:	210f      	movs	r1, #15
 80005d8:	7830      	ldrb	r0, [r6, #0]
 80005da:	0682      	lsls	r2, r0, #26
 80005dc:	0f92      	lsrs	r2, r2, #30
 80005de:	435a      	muls	r2, r3
 80005e0:	4008      	ands	r0, r1
 80005e2:	1812      	adds	r2, r2, r0
 80005e4:	7032      	strb	r2, [r6, #0]
  *get_minute = ((*get_minute >> 4) * 10) + (*get_minute & 0x0f);
 80005e6:	9a03      	ldr	r2, [sp, #12]
 80005e8:	7810      	ldrb	r0, [r2, #0]
 80005ea:	0902      	lsrs	r2, r0, #4
 80005ec:	435a      	muls	r2, r3
 80005ee:	4008      	ands	r0, r1
 80005f0:	1812      	adds	r2, r2, r0
 80005f2:	9803      	ldr	r0, [sp, #12]
 80005f4:	7002      	strb	r2, [r0, #0]
  *get_second = ((*get_second >> 4) * 10) + (*get_second & 0x0f);
 80005f6:	9a02      	ldr	r2, [sp, #8]
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	0910      	lsrs	r0, r2, #4
 80005fc:	4343      	muls	r3, r0
 80005fe:	400a      	ands	r2, r1
 8000600:	189b      	adds	r3, r3, r2
 8000602:	9a02      	ldr	r2, [sp, #8]
 8000604:	7013      	strb	r3, [r2, #0]
}
 8000606:	b007      	add	sp, #28
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	200004fc 	.word	0x200004fc

08000610 <DS3231_set_date>:

void DS3231_set_date(uint8_t day, uint8_t month, uint8_t year)
{
  uint8_t buffer[4];

  buffer[0] = DATE_AD;
 8000610:	2304      	movs	r3, #4
{
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	b087      	sub	sp, #28
  buffer[0] = DATE_AD;
 8000616:	ac05      	add	r4, sp, #20
{
 8000618:	000e      	movs	r6, r1
  buffer[1] = ((day/10)<<4) + (day%10);
 800061a:	210a      	movs	r1, #10
{
 800061c:	0015      	movs	r5, r2
 800061e:	0007      	movs	r7, r0
  buffer[0] = DATE_AD;
 8000620:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((day/10)<<4) + (day%10);
 8000622:	f7ff fd8f 	bl	8000144 <__udivsi3>
 8000626:	210a      	movs	r1, #10
 8000628:	0103      	lsls	r3, r0, #4
 800062a:	0038      	movs	r0, r7
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	f7ff fe0f 	bl	8000250 <__aeabi_uidivmod>
 8000632:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((month/10)<<4) + (month%10);
 8000634:	0030      	movs	r0, r6
  buffer[1] = ((day/10)<<4) + (day%10);
 8000636:	1859      	adds	r1, r3, r1
 8000638:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((month/10)<<4) + (month%10);
 800063a:	210a      	movs	r1, #10
 800063c:	f7ff fd82 	bl	8000144 <__udivsi3>
 8000640:	210a      	movs	r1, #10
 8000642:	0107      	lsls	r7, r0, #4
 8000644:	0030      	movs	r0, r6
 8000646:	f7ff fe03 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064a:	0028      	movs	r0, r5
  buffer[2] = ((month/10)<<4) + (month%10);
 800064c:	187f      	adds	r7, r7, r1
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064e:	210a      	movs	r1, #10
  buffer[2] = ((month/10)<<4) + (month%10);
 8000650:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000652:	f7ff fd77 	bl	8000144 <__udivsi3>
 8000656:	0106      	lsls	r6, r0, #4
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	210a      	movs	r1, #10
 800065c:	4006      	ands	r6, r0
 800065e:	0028      	movs	r0, r5
 8000660:	f7ff fdf6 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000664:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000666:	1876      	adds	r6, r6, r1
 8000668:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800066a:	0022      	movs	r2, r4
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	3b60      	subs	r3, #96	; 0x60
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <DS3231_set_date+0x6c>)
 8000674:	f003 fa02 	bl	8003a7c <HAL_I2C_Master_Transmit>
}
 8000678:	b007      	add	sp, #28
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	200004fc 	.word	0x200004fc

08000680 <DS3231_get_date>:

void DS3231_get_date(uint8_t *get_day, uint8_t *get_month, uint8_t *get_year)
{
  uint8_t buffer;

  buffer = DATE_AD;
 8000680:	2304      	movs	r3, #4
{
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b087      	sub	sp, #28
 8000686:	9203      	str	r2, [sp, #12]
  buffer = DATE_AD;
 8000688:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068a:	2564      	movs	r5, #100	; 0x64
  buffer = DATE_AD;
 800068c:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068e:	220f      	movs	r2, #15
{
 8000690:	0007      	movs	r7, r0
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000692:	4c28      	ldr	r4, [pc, #160]	; (8000734 <DS3231_get_date+0xb4>)
{
 8000694:	000e      	movs	r6, r1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000696:	a902      	add	r1, sp, #8
 8000698:	1852      	adds	r2, r2, r1
 800069a:	0020      	movs	r0, r4
 800069c:	21d1      	movs	r1, #209	; 0xd1
 800069e:	9500      	str	r5, [sp, #0]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	f003 f9eb 	bl	8003a7c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_day, 1, 100);
 80006a6:	003a      	movs	r2, r7
 80006a8:	2301      	movs	r3, #1
 80006aa:	21d1      	movs	r1, #209	; 0xd1
 80006ac:	0020      	movs	r0, r4
 80006ae:	9500      	str	r5, [sp, #0]
 80006b0:	f003 fa76 	bl	8003ba0 <HAL_I2C_Master_Receive>

  buffer = MONTH_AD;
 80006b4:	2305      	movs	r3, #5
 80006b6:	aa02      	add	r2, sp, #8
 80006b8:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006ba:	220f      	movs	r2, #15
 80006bc:	a902      	add	r1, sp, #8
 80006be:	1852      	adds	r2, r2, r1
 80006c0:	0020      	movs	r0, r4
 80006c2:	21d1      	movs	r1, #209	; 0xd1
 80006c4:	9500      	str	r5, [sp, #0]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	f003 f9d8 	bl	8003a7c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_month, 1, 100);
 80006cc:	0032      	movs	r2, r6
 80006ce:	2301      	movs	r3, #1
 80006d0:	21d1      	movs	r1, #209	; 0xd1
 80006d2:	0020      	movs	r0, r4
 80006d4:	9500      	str	r5, [sp, #0]
 80006d6:	f003 fa63 	bl	8003ba0 <HAL_I2C_Master_Receive>

  buffer = YEAR_AD;
 80006da:	2306      	movs	r3, #6
 80006dc:	aa02      	add	r2, sp, #8
 80006de:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006e0:	220f      	movs	r2, #15
 80006e2:	a902      	add	r1, sp, #8
 80006e4:	1852      	adds	r2, r2, r1
 80006e6:	0020      	movs	r0, r4
 80006e8:	21d1      	movs	r1, #209	; 0xd1
 80006ea:	9500      	str	r5, [sp, #0]
 80006ec:	3b05      	subs	r3, #5
 80006ee:	f003 f9c5 	bl	8003a7c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_year, 1, 100);
 80006f2:	9a03      	ldr	r2, [sp, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	21d1      	movs	r1, #209	; 0xd1
 80006f8:	0020      	movs	r0, r4
 80006fa:	9500      	str	r5, [sp, #0]
 80006fc:	f003 fa50 	bl	8003ba0 <HAL_I2C_Master_Receive>

  *get_day = ((*get_day >> 4) * 10) + (*get_day & 0x0f);
 8000700:	230a      	movs	r3, #10
 8000702:	210f      	movs	r1, #15
 8000704:	7838      	ldrb	r0, [r7, #0]
 8000706:	0902      	lsrs	r2, r0, #4
 8000708:	435a      	muls	r2, r3
 800070a:	4008      	ands	r0, r1
 800070c:	1812      	adds	r2, r2, r0
 800070e:	703a      	strb	r2, [r7, #0]
  *get_month = (((*get_month & 0x10) >> 4) * 10) + (*get_month & 0x0f);
 8000710:	7830      	ldrb	r0, [r6, #0]
 8000712:	06c2      	lsls	r2, r0, #27
 8000714:	0fd2      	lsrs	r2, r2, #31
 8000716:	435a      	muls	r2, r3
 8000718:	4008      	ands	r0, r1
 800071a:	1812      	adds	r2, r2, r0
 800071c:	7032      	strb	r2, [r6, #0]
  *get_year = ((*get_year >> 4) * 10) + (*get_year & 0x0f);
 800071e:	9a03      	ldr	r2, [sp, #12]
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0910      	lsrs	r0, r2, #4
 8000724:	4343      	muls	r3, r0
 8000726:	400a      	ands	r2, r1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	9a03      	ldr	r2, [sp, #12]
 800072c:	7013      	strb	r3, [r2, #0]
}
 800072e:	b007      	add	sp, #28
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	200004fc 	.word	0x200004fc

08000738 <led_color>:
		2290665676, 2357774540, 3364407500, 3431516364, 2290927820, 2358036684, 3364669644, 3431778508,
		2294859980, 2361968844, 3368601804, 3435710668, 2295122124, 2362230988, 3368863948, 3435972812,
		2290666700, 2357775564, 3364408524, 3431517388, 2290928844, 2358037708, 3364670668, 3431779532,
		2294861004, 2361969868, 3368602828, 3435711692, 2295123148, 2362232012, 3368864972, 3435973836
};
void led_color(uint8_t id, uint8_t r, uint8_t g, uint8_t b){
 8000738:	b530      	push	{r4, r5, lr}
	ledData[id][0]=g;
 800073a:	250c      	movs	r5, #12
 800073c:	4368      	muls	r0, r5
 800073e:	4c03      	ldr	r4, [pc, #12]	; (800074c <led_color+0x14>)
 8000740:	5022      	str	r2, [r4, r0]
	ledData[id][1]=r;
 8000742:	1824      	adds	r4, r4, r0
 8000744:	6061      	str	r1, [r4, #4]
	ledData[id][2]=b;
 8000746:	60a3      	str	r3, [r4, #8]
}
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000c0 	.word	0x200000c0

08000750 <led_update>:
void led_update(){
	for(int i=0; i<36; i++){
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <led_update+0x44>)
 8000752:	2000      	movs	r0, #0
 8000754:	0019      	movs	r1, r3
void led_update(){
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <led_update+0x48>)
		spiBf[(i*3)]=colLUT[ledData[i][0]];
 800075a:	4c10      	ldr	r4, [pc, #64]	; (800079c <led_update+0x4c>)
 800075c:	6815      	ldr	r5, [r2, #0]
	for(int i=0; i<36; i++){
 800075e:	3001      	adds	r0, #1
		spiBf[(i*3)]=colLUT[ledData[i][0]];
 8000760:	00ad      	lsls	r5, r5, #2
 8000762:	592d      	ldr	r5, [r5, r4]
 8000764:	601d      	str	r5, [r3, #0]
		spiBf[(i*3)+1]=colLUT[ledData[i][1]];
 8000766:	6855      	ldr	r5, [r2, #4]
 8000768:	00ad      	lsls	r5, r5, #2
 800076a:	592d      	ldr	r5, [r5, r4]
 800076c:	605d      	str	r5, [r3, #4]
		spiBf[(i*3)+2]=colLUT[ledData[i][2]];
 800076e:	6895      	ldr	r5, [r2, #8]
	for(int i=0; i<36; i++){
 8000770:	320c      	adds	r2, #12
		spiBf[(i*3)+2]=colLUT[ledData[i][2]];
 8000772:	00ad      	lsls	r5, r5, #2
 8000774:	592d      	ldr	r5, [r5, r4]
 8000776:	609d      	str	r5, [r3, #8]
	for(int i=0; i<36; i++){
 8000778:	330c      	adds	r3, #12
 800077a:	2824      	cmp	r0, #36	; 0x24
 800077c:	d1ee      	bne.n	800075c <led_update+0xc>
	}
	spiBf[108]=0;
 800077e:	23d8      	movs	r3, #216	; 0xd8
 8000780:	2200      	movs	r2, #0
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	50ca      	str	r2, [r1, r3]
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)spiBf, 436);
 8000786:	32b5      	adds	r2, #181	; 0xb5
 8000788:	32ff      	adds	r2, #255	; 0xff
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <led_update+0x50>)
 800078c:	f004 f8e2 	bl	8004954 <HAL_SPI_Transmit_DMA>
}
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000270 	.word	0x20000270
 8000798:	200000c0 	.word	0x200000c0
 800079c:	08005854 	.word	0x08005854
 80007a0:	20000548 	.word	0x20000548

080007a4 <led_clear>:
void led_clear(){
	memset(ledData,0,sizeof(ledData));
 80007a4:	22d8      	movs	r2, #216	; 0xd8
void led_clear(){
 80007a6:	b510      	push	{r4, lr}
	memset(ledData,0,sizeof(ledData));
 80007a8:	2100      	movs	r1, #0
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <led_clear+0x10>)
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	f004 fbc5 	bl	8004f3c <memset>
	//	led_update();
}
 80007b2:	bd10      	pop	{r4, pc}
 80007b4:	200000c0 	.word	0x200000c0

080007b8 <led_cmp>:
uint8_t led_cmp(uint8_t id, uint8_t r, uint8_t g, uint8_t b){
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t result = 0;

	if(ledData[id][0]==g){
 80007ba:	260c      	movs	r6, #12
 80007bc:	0037      	movs	r7, r6
 80007be:	4347      	muls	r7, r0
 80007c0:	4c08      	ldr	r4, [pc, #32]	; (80007e4 <led_cmp+0x2c>)
 80007c2:	5938      	ldr	r0, [r7, r4]
		result++;
	}
	if(ledData[id][1]==r){
 80007c4:	19e7      	adds	r7, r4, r7
	if(ledData[id][0]==g){
 80007c6:	1a80      	subs	r0, r0, r2
 80007c8:	4242      	negs	r2, r0
 80007ca:	4150      	adcs	r0, r2
	if(ledData[id][1]==r){
 80007cc:	687a      	ldr	r2, [r7, #4]
	uint8_t result = 0;
 80007ce:	b2c0      	uxtb	r0, r0
		result++;
 80007d0:	1a52      	subs	r2, r2, r1
 80007d2:	4251      	negs	r1, r2
 80007d4:	414a      	adcs	r2, r1
 80007d6:	1880      	adds	r0, r0, r2
	}
	if(ledData[id][2]==b){
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d101      	bne.n	80007e2 <led_cmp+0x2a>
		result++;
 80007de:	3001      	adds	r0, #1
 80007e0:	b2c0      	uxtb	r0, r0
	}

	return result;
}
 80007e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e4:	200000c0 	.word	0x200000c0

080007e8 <SSD1306_PutsXY>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SSD1306_PutsXY(uint8_t x, uint8_t y, String str, uint8_t color) {
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	001d      	movs	r5, r3
	SSD1306_GotoXY(x * 6, y * 8);
 80007ec:	2306      	movs	r3, #6
void SSD1306_PutsXY(uint8_t x, uint8_t y, String str, uint8_t color) {
 80007ee:	0014      	movs	r4, r2
	SSD1306_GotoXY(x * 6, y * 8);
 80007f0:	4358      	muls	r0, r3
 80007f2:	00c9      	lsls	r1, r1, #3
 80007f4:	f001 ff46 	bl	8002684 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_6x8, color);
 80007f8:	002a      	movs	r2, r5
 80007fa:	0020      	movs	r0, r4
 80007fc:	4901      	ldr	r1, [pc, #4]	; (8000804 <SSD1306_PutsXY+0x1c>)
 80007fe:	f001 ff7d 	bl	80026fc <SSD1306_Puts>
}
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	20000000 	.word	0x20000000

08000808 <basicScreen>:

void basicScreen(){
 8000808:	b507      	push	{r0, r1, r2, lr}
	SSD1306_Fill(0);
 800080a:	2000      	movs	r0, #0
 800080c:	f001 ff04 	bl	8002618 <SSD1306_Fill>
	SSD1306_DrawFilledRectangle(0, 0, 127, 7, 1);
 8000810:	2301      	movs	r3, #1
 8000812:	2100      	movs	r1, #0
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	227f      	movs	r2, #127	; 0x7f
 8000818:	0008      	movs	r0, r1
 800081a:	3306      	adds	r3, #6
 800081c:	f002 f81b 	bl	8002856 <SSD1306_DrawFilledRectangle>
}
 8000820:	bd07      	pop	{r0, r1, r2, pc}
	...

08000824 <swS>:

void swS(){
	oldsw = JOY_P ? true : false;
 8000824:	20a0      	movs	r0, #160	; 0xa0
void swS(){
 8000826:	b510      	push	{r4, lr}
	oldsw = JOY_P ? true : false;
 8000828:	2104      	movs	r1, #4
 800082a:	05c0      	lsls	r0, r0, #23
 800082c:	f002 ffa4 	bl	8003778 <HAL_GPIO_ReadPin>
 8000830:	4243      	negs	r3, r0
 8000832:	4158      	adcs	r0, r3
 8000834:	4b01      	ldr	r3, [pc, #4]	; (800083c <swS+0x18>)
 8000836:	7018      	strb	r0, [r3, #0]
}
 8000838:	bd10      	pop	{r4, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	2000001c 	.word	0x2000001c

08000840 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	static uint16_t buzC;
	if (htim->Instance == TIM2) {
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000844:	b570      	push	{r4, r5, r6, lr}
	if (htim->Instance == TIM2) {
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	429a      	cmp	r2, r3
 800084a:	d152      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0xb2>
		reC++;
 800084c:	4a2d      	ldr	r2, [pc, #180]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800084e:	492e      	ldr	r1, [pc, #184]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000850:	7813      	ldrb	r3, [r2, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	7013      	strb	r3, [r2, #0]

		if(modeFlag == FINDR || modeFlag == PARTITION) ledC++;
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000858:	781a      	ldrb	r2, [r3, #0]
		else ledC = 0;
 800085a:	2300      	movs	r3, #0
		if(modeFlag == FINDR || modeFlag == PARTITION) ledC++;
 800085c:	3a06      	subs	r2, #6
 800085e:	2a01      	cmp	r2, #1
 8000860:	d802      	bhi.n	8000868 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000862:	880b      	ldrh	r3, [r1, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	b29b      	uxth	r3, r3

		HAL_ADC_Start(&hadc);
 8000868:	4c29      	ldr	r4, [pc, #164]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800086a:	800b      	strh	r3, [r1, #0]
 800086c:	0020      	movs	r0, r4
 800086e:	f002 fbdf 	bl	8003030 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8000872:	210a      	movs	r1, #10
 8000874:	0020      	movs	r0, r4
 8000876:	f002 fc07 	bl	8003088 <HAL_ADC_PollForConversion>
		adc[0] = HAL_ADC_GetValue(&hadc);
 800087a:	0020      	movs	r0, r4
 800087c:	f002 fc68 	bl	8003150 <HAL_ADC_GetValue>
 8000880:	4d24      	ldr	r5, [pc, #144]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0xd4>)
		HAL_ADC_PollForConversion(&hadc, 10);
 8000882:	210a      	movs	r1, #10
		adc[0] = HAL_ADC_GetValue(&hadc);
 8000884:	8028      	strh	r0, [r5, #0]
		HAL_ADC_PollForConversion(&hadc, 10);
 8000886:	0020      	movs	r0, r4
 8000888:	f002 fbfe 	bl	8003088 <HAL_ADC_PollForConversion>
		adc[1] = HAL_ADC_GetValue(&hadc);
 800088c:	0020      	movs	r0, r4
 800088e:	f002 fc5f 	bl	8003150 <HAL_ADC_GetValue>
 8000892:	8068      	strh	r0, [r5, #2]

		swS();
 8000894:	f7ff ffc6 	bl	8000824 <swS>

		if(buzFlag)buzC++;
 8000898:	4c1f      	ldr	r4, [pc, #124]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800089a:	4d20      	ldr	r5, [pc, #128]	; (800091c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800089c:	7822      	ldrb	r2, [r4, #0]
 800089e:	2a00      	cmp	r2, #0
 80008a0:	d028      	beq.n	80008f4 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80008a2:	882b      	ldrh	r3, [r5, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	802b      	strh	r3, [r5, #0]
		else {
			buzC = 0;
			BUZ(0);
		}
		if(buzFlag==1){
 80008a8:	7823      	ldrb	r3, [r4, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d10c      	bne.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x88>
			if(buzC >= 500) buzFlag = 0;
 80008ae:	33f4      	adds	r3, #244	; 0xf4
 80008b0:	882a      	ldrh	r2, [r5, #0]
 80008b2:	33ff      	adds	r3, #255	; 0xff
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d301      	bcc.n	80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>
 80008b8:	2300      	movs	r3, #0
 80008ba:	7023      	strb	r3, [r4, #0]
			BUZ(1);
 80008bc:	20a0      	movs	r0, #160	; 0xa0
 80008be:	2201      	movs	r2, #1
 80008c0:	2108      	movs	r1, #8
 80008c2:	05c0      	lsls	r0, r0, #23
 80008c4:	f002 ff5e 	bl	8003784 <HAL_GPIO_WritePin>
		}
		if(buzFlag == 2){
 80008c8:	7823      	ldrb	r3, [r4, #0]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d111      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			if(buzC >= 100) buzFlag = 0;
 80008ce:	8828      	ldrh	r0, [r5, #0]
 80008d0:	2863      	cmp	r0, #99	; 0x63
 80008d2:	d901      	bls.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x98>
 80008d4:	2300      	movs	r3, #0
 80008d6:	7023      	strb	r3, [r4, #0]
			if(buzC % 50 > 25) BUZ(1);
 80008d8:	2132      	movs	r1, #50	; 0x32
 80008da:	f7ff fcb9 	bl	8000250 <__aeabi_uidivmod>
 80008de:	b289      	uxth	r1, r1
 80008e0:	2201      	movs	r2, #1
 80008e2:	2919      	cmp	r1, #25
 80008e4:	d800      	bhi.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0xa8>
			else BUZ(0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	20a0      	movs	r0, #160	; 0xa0
 80008ea:	2108      	movs	r1, #8
 80008ec:	05c0      	lsls	r0, r0, #23
 80008ee:	f002 ff49 	bl	8003784 <HAL_GPIO_WritePin>
		}
	}
}
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
			BUZ(0);
 80008f4:	20a0      	movs	r0, #160	; 0xa0
 80008f6:	2108      	movs	r1, #8
 80008f8:	05c0      	lsls	r0, r0, #23
			buzC = 0;
 80008fa:	802a      	strh	r2, [r5, #0]
			BUZ(0);
 80008fc:	f002 ff42 	bl	8003784 <HAL_GPIO_WritePin>
 8000900:	e7d2      	b.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	200008aa 	.word	0x200008aa
 8000908:	200005e0 	.word	0x200005e0
 800090c:	200005e4 	.word	0x200005e4
 8000910:	20000458 	.word	0x20000458
 8000914:	20000424 	.word	0x20000424
 8000918:	2000042a 	.word	0x2000042a
 800091c:	20000428 	.word	0x20000428

08000920 <logShift>:

void logShift(){
	logC++;
	for(uint8_t i = 0; i < 5; i++)
		pLog[5 - i] = pLog[4 - i];
 8000920:	4905      	ldr	r1, [pc, #20]	; (8000938 <logShift+0x18>)
void logShift(){
 8000922:	b510      	push	{r4, lr}
		pLog[5 - i] = pLog[4 - i];
 8000924:	0008      	movs	r0, r1
	logC++;
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <logShift+0x1c>)
		pLog[5 - i] = pLog[4 - i];
 8000928:	3014      	adds	r0, #20
	logC++;
 800092a:	7813      	ldrb	r3, [r2, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	7013      	strb	r3, [r2, #0]
		pLog[5 - i] = pLog[4 - i];
 8000930:	2264      	movs	r2, #100	; 0x64
 8000932:	f004 faf0 	bl	8004f16 <memmove>
}
 8000936:	bd10      	pop	{r4, pc}
 8000938:	200005e8 	.word	0x200005e8
 800093c:	200005e3 	.word	0x200005e3

08000940 <textIn>:

String textIn(boolean n, uint8_t lim){
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000942:	b08b      	sub	sp, #44	; 0x2c
 8000944:	9005      	str	r0, [sp, #20]
 8000946:	9107      	str	r1, [sp, #28]
	String bf = (String)calloc(0, sizeof(char) * 12);
 8000948:	2000      	movs	r0, #0
 800094a:	210c      	movs	r1, #12
 800094c:	f004 fa9c 	bl	8004e88 <calloc>
	volatile String resultArr = (String)calloc(0, sizeof(char) * 11);
 8000950:	210b      	movs	r1, #11
	String bf = (String)calloc(0, sizeof(char) * 12);
 8000952:	9004      	str	r0, [sp, #16]
	volatile String resultArr = (String)calloc(0, sizeof(char) * 11);
 8000954:	2000      	movs	r0, #0
 8000956:	f004 fa97 	bl	8004e88 <calloc>
	uint8_t keyX = 0, keyY = 0, limX = 0, tempColor;
	uint8_t cur = 0;
	udf = true;
 800095a:	2601      	movs	r6, #1
 800095c:	4b91      	ldr	r3, [pc, #580]	; (8000ba4 <textIn+0x264>)
	volatile String resultArr = (String)calloc(0, sizeof(char) * 11);
 800095e:	9009      	str	r0, [sp, #36]	; 0x24

	SSD1306_Fill(0);
 8000960:	2000      	movs	r0, #0
	udf = true;
 8000962:	701e      	strb	r6, [r3, #0]
	SSD1306_Fill(0);
 8000964:	f001 fe58 	bl	8002618 <SSD1306_Fill>
	uint8_t cur = 0;
 8000968:	2300      	movs	r3, #0
	uint8_t keyX = 0, keyY = 0, limX = 0, tempColor;
 800096a:	001f      	movs	r7, r3
 800096c:	001c      	movs	r4, r3
	uint8_t cur = 0;
 800096e:	9300      	str	r3, [sp, #0]
	uint8_t keyX = 0, keyY = 0, limX = 0, tempColor;
 8000970:	9301      	str	r3, [sp, #4]

	while(1){
		if(RE1){
 8000972:	4b8d      	ldr	r3, [pc, #564]	; (8000ba8 <textIn+0x268>)
 8000974:	781a      	ldrb	r2, [r3, #0]
 8000976:	2a63      	cmp	r2, #99	; 0x63
 8000978:	d922      	bls.n	80009c0 <textIn+0x80>
			reC = 0;
 800097a:	2100      	movs	r1, #0
			if(JOY_R)
 800097c:	20fa      	movs	r0, #250	; 0xfa
			reC = 0;
 800097e:	7019      	strb	r1, [r3, #0]
			if(JOY_R)
 8000980:	4b8a      	ldr	r3, [pc, #552]	; (8000bac <textIn+0x26c>)
 8000982:	0100      	lsls	r0, r0, #4
 8000984:	885a      	ldrh	r2, [r3, #2]
 8000986:	4282      	cmp	r2, r0
 8000988:	d945      	bls.n	8000a16 <textIn+0xd6>
				if(keyX < limX) keyX++;
 800098a:	9801      	ldr	r0, [sp, #4]
 800098c:	4284      	cmp	r4, r0
 800098e:	d24a      	bcs.n	8000a26 <textIn+0xe6>
 8000990:	3401      	adds	r4, #1
				else keyX = 0;
			if(JOY_L)
				if(keyX) keyX--;
 8000992:	b2e4      	uxtb	r4, r4
				else keyX = limX;
			if(JOY_U)
 8000994:	21fa      	movs	r1, #250	; 0xfa
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	0109      	lsls	r1, r1, #4
 800099a:	428b      	cmp	r3, r1
 800099c:	d947      	bls.n	8000a2e <textIn+0xee>
				if(keyY) keyY--;
 800099e:	2f00      	cmp	r7, #0
 80009a0:	d04d      	beq.n	8000a3e <textIn+0xfe>
 80009a2:	3f01      	subs	r7, #1
				else keyY = 3;
			if(JOY_D)
				if(keyY < 3) keyY++;
 80009a4:	b2ff      	uxtb	r7, r7
				else keyY = 0;
			if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 80009a6:	3a2d      	subs	r2, #45	; 0x2d
 80009a8:	3aff      	subs	r2, #255	; 0xff
 80009aa:	4981      	ldr	r1, [pc, #516]	; (8000bb0 <textIn+0x270>)
 80009ac:	b292      	uxth	r2, r2
 80009ae:	428a      	cmp	r2, r1
 80009b0:	d804      	bhi.n	80009bc <textIn+0x7c>
 80009b2:	3b2d      	subs	r3, #45	; 0x2d
 80009b4:	3bff      	subs	r3, #255	; 0xff
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	428b      	cmp	r3, r1
 80009ba:	d901      	bls.n	80009c0 <textIn+0x80>
 80009bc:	4b79      	ldr	r3, [pc, #484]	; (8000ba4 <textIn+0x264>)
 80009be:	701e      	strb	r6, [r3, #0]
		}
		if(JOY_P){
 80009c0:	20a0      	movs	r0, #160	; 0xa0
 80009c2:	2104      	movs	r1, #4
 80009c4:	05c0      	lsls	r0, r0, #23
 80009c6:	f002 fed7 	bl	8003778 <HAL_GPIO_ReadPin>
			if(!oldsw){
 80009ca:	4b7a      	ldr	r3, [pc, #488]	; (8000bb4 <textIn+0x274>)
 80009cc:	781d      	ldrb	r5, [r3, #0]
 80009ce:	4305      	orrs	r5, r0
 80009d0:	b2ed      	uxtb	r5, r5
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d110      	bne.n	80009f8 <textIn+0xb8>
				swS();
 80009d6:	f7ff ff25 	bl	8000824 <swS>
				udf = true;
 80009da:	4b72      	ldr	r3, [pc, #456]	; (8000ba4 <textIn+0x264>)
 80009dc:	701e      	strb	r6, [r3, #0]
				if(keyX < 10) resultArr[cur++] = keyboard[keyY][keyX];
 80009de:	2c09      	cmp	r4, #9
 80009e0:	d831      	bhi.n	8000a46 <textIn+0x106>
 80009e2:	4975      	ldr	r1, [pc, #468]	; (8000bb8 <textIn+0x278>)
 80009e4:	00b8      	lsls	r0, r7, #2
 80009e6:	5841      	ldr	r1, [r0, r1]
 80009e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009ea:	9b00      	ldr	r3, [sp, #0]
 80009ec:	5d09      	ldrb	r1, [r1, r4]
 80009ee:	9800      	ldr	r0, [sp, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	5411      	strb	r1, [r2, r0]
				else {
					if(keyY == 0) cur--;
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	9300      	str	r3, [sp, #0]
						return resultArr;
					}
				}
			}
		}
		if(lim - 1 == cur){
 80009f8:	9b07      	ldr	r3, [sp, #28]
 80009fa:	9a00      	ldr	r2, [sp, #0]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d134      	bne.n	8000a6c <textIn+0x12c>
			firstF = true;
 8000a02:	2001      	movs	r0, #1
			udf = true;

			resultArr[cur]='\0';
 8000a04:	2200      	movs	r2, #0
			firstF = true;
 8000a06:	4b6d      	ldr	r3, [pc, #436]	; (8000bbc <textIn+0x27c>)
			resultArr[cur]='\0';
 8000a08:	9900      	ldr	r1, [sp, #0]
			firstF = true;
 8000a0a:	7018      	strb	r0, [r3, #0]
			udf = true;
 8000a0c:	4b65      	ldr	r3, [pc, #404]	; (8000ba4 <textIn+0x264>)
 8000a0e:	7018      	strb	r0, [r3, #0]
			resultArr[cur]='\0';
 8000a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a12:	545a      	strb	r2, [r3, r1]
 8000a14:	e022      	b.n	8000a5c <textIn+0x11c>
			if(JOY_L)
 8000a16:	2196      	movs	r1, #150	; 0x96
 8000a18:	0049      	lsls	r1, r1, #1
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	d2ba      	bcs.n	8000994 <textIn+0x54>
				if(keyX) keyX--;
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d003      	beq.n	8000a2a <textIn+0xea>
 8000a22:	3c01      	subs	r4, #1
 8000a24:	e7b5      	b.n	8000992 <textIn+0x52>
				else keyX = 0;
 8000a26:	000c      	movs	r4, r1
 8000a28:	e7b4      	b.n	8000994 <textIn+0x54>
 8000a2a:	9c01      	ldr	r4, [sp, #4]
 8000a2c:	e7b2      	b.n	8000994 <textIn+0x54>
			if(JOY_D)
 8000a2e:	2196      	movs	r1, #150	; 0x96
 8000a30:	0049      	lsls	r1, r1, #1
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d2b7      	bcs.n	80009a6 <textIn+0x66>
				if(keyY < 3) keyY++;
 8000a36:	2f03      	cmp	r7, #3
 8000a38:	d003      	beq.n	8000a42 <textIn+0x102>
 8000a3a:	3701      	adds	r7, #1
 8000a3c:	e7b2      	b.n	80009a4 <textIn+0x64>
				else keyY = 3;
 8000a3e:	2703      	movs	r7, #3
 8000a40:	e7b1      	b.n	80009a6 <textIn+0x66>
				else keyY = 0;
 8000a42:	2700      	movs	r7, #0
 8000a44:	e7af      	b.n	80009a6 <textIn+0x66>
					if(keyY == 0) cur--;
 8000a46:	2f00      	cmp	r7, #0
 8000a48:	d102      	bne.n	8000a50 <textIn+0x110>
 8000a4a:	9b00      	ldr	r3, [sp, #0]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	e7d1      	b.n	80009f4 <textIn+0xb4>
					else if(keyY == 2){
 8000a50:	2f02      	cmp	r7, #2
 8000a52:	d1d1      	bne.n	80009f8 <textIn+0xb8>
						SSD1306_Fill(1);
 8000a54:	2001      	movs	r0, #1
						resultArr[cur] = '\0';
 8000a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a58:	9a00      	ldr	r2, [sp, #0]
 8000a5a:	549d      	strb	r5, [r3, r2]
			SSD1306_Fill(1);
 8000a5c:	f001 fddc 	bl	8002618 <SSD1306_Fill>

			free(bf);
 8000a60:	9804      	ldr	r0, [sp, #16]
 8000a62:	f004 fa45 	bl	8004ef0 <free>
			return resultArr;
 8000a66:	9809      	ldr	r0, [sp, #36]	; 0x24
			}

			SSD1306_UpdateScreen();
		}
	}
}
 8000a68:	b00b      	add	sp, #44	; 0x2c
 8000a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(keyY == 0 || keyY == 2) limX = 10;
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	2f00      	cmp	r7, #0
 8000a72:	d004      	beq.n	8000a7e <textIn+0x13e>
 8000a74:	1ebb      	subs	r3, r7, #2
 8000a76:	425a      	negs	r2, r3
 8000a78:	4153      	adcs	r3, r2
 8000a7a:	3309      	adds	r3, #9
 8000a7c:	9301      	str	r3, [sp, #4]
		if(keyX > limX) keyX = limX;
 8000a7e:	9a01      	ldr	r2, [sp, #4]
 8000a80:	1c23      	adds	r3, r4, #0
 8000a82:	4294      	cmp	r4, r2
 8000a84:	d901      	bls.n	8000a8a <textIn+0x14a>
 8000a86:	466b      	mov	r3, sp
 8000a88:	791b      	ldrb	r3, [r3, #4]
 8000a8a:	b2dc      	uxtb	r4, r3
		if(udf){
 8000a8c:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <textIn+0x264>)
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d100      	bne.n	8000a96 <textIn+0x156>
 8000a94:	e76d      	b.n	8000972 <textIn+0x32>
			udf = false;
 8000a96:	2500      	movs	r5, #0
 8000a98:	701d      	strb	r5, [r3, #0]
			basicScreen();
 8000a9a:	f7ff feb5 	bl	8000808 <basicScreen>
			if(!n) SSD1306_PutsXY(0, 0, "#input Name", 0);
 8000a9e:	9b05      	ldr	r3, [sp, #20]
 8000aa0:	42ab      	cmp	r3, r5
 8000aa2:	d168      	bne.n	8000b76 <textIn+0x236>
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	4a45      	ldr	r2, [pc, #276]	; (8000bc0 <textIn+0x280>)
			else  SSD1306_PutsXY(0, 0, "#input part name", 0);
 8000aaa:	f7ff fe9d 	bl	80007e8 <SSD1306_PutsXY>
					tempColor = !(keyX == i && keyY == j);
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9303      	str	r3, [sp, #12]
				for(uint8_t j = 0; j < 4; j++){
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	9a03      	ldr	r2, [sp, #12]
 8000ab6:	4353      	muls	r3, r2
 8000ab8:	330e      	adds	r3, #14
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	9306      	str	r3, [sp, #24]
		if(keyY == 0 || keyY == 2) limX = 10;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9302      	str	r3, [sp, #8]
					tempColor = !(keyX == i && keyY == j);
 8000ac2:	466b      	mov	r3, sp
 8000ac4:	7b1b      	ldrb	r3, [r3, #12]
 8000ac6:	0035      	movs	r5, r6
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	d104      	bne.n	8000ad6 <textIn+0x196>
 8000acc:	466b      	mov	r3, sp
 8000ace:	7a1d      	ldrb	r5, [r3, #8]
 8000ad0:	1bed      	subs	r5, r5, r7
 8000ad2:	1e6b      	subs	r3, r5, #1
 8000ad4:	419d      	sbcs	r5, r3
					SSD1306_GotoXY(14 + (i * 10), 31 + (j * 8));
 8000ad6:	9b02      	ldr	r3, [sp, #8]
 8000ad8:	9806      	ldr	r0, [sp, #24]
 8000ada:	00d9      	lsls	r1, r3, #3
 8000adc:	311f      	adds	r1, #31
 8000ade:	b289      	uxth	r1, r1
 8000ae0:	f001 fdd0 	bl	8002684 <SSD1306_GotoXY>
					SSD1306_Putc(keyboard[j][i], &Font_6x8, tempColor);
 8000ae4:	9b02      	ldr	r3, [sp, #8]
 8000ae6:	b2ea      	uxtb	r2, r5
 8000ae8:	0099      	lsls	r1, r3, #2
 8000aea:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <textIn+0x278>)
 8000aec:	58cb      	ldr	r3, [r1, r3]
 8000aee:	9903      	ldr	r1, [sp, #12]
 8000af0:	5c58      	ldrb	r0, [r3, r1]
 8000af2:	4934      	ldr	r1, [pc, #208]	; (8000bc4 <textIn+0x284>)
 8000af4:	f001 fdcc 	bl	8002690 <SSD1306_Putc>
				for(uint8_t j = 0; j < 4; j++){
 8000af8:	9b02      	ldr	r3, [sp, #8]
 8000afa:	3301      	adds	r3, #1
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d1df      	bne.n	8000ac2 <textIn+0x182>
			for(uint8_t i = 0; i < 10; i++){
 8000b02:	9b03      	ldr	r3, [sp, #12]
 8000b04:	3301      	adds	r3, #1
 8000b06:	9303      	str	r3, [sp, #12]
 8000b08:	2b0a      	cmp	r3, #10
 8000b0a:	d1d2      	bne.n	8000ab2 <textIn+0x172>
			SSD1306_GotoXY(115, 31);
 8000b0c:	211f      	movs	r1, #31
 8000b0e:	2073      	movs	r0, #115	; 0x73
 8000b10:	f001 fdb8 	bl	8002684 <SSD1306_GotoXY>
			SSD1306_Puts("&", &Font_6x8, !(keyX == 10 && keyY == 0));
 8000b14:	0032      	movs	r2, r6
 8000b16:	2c0a      	cmp	r4, #10
 8000b18:	d102      	bne.n	8000b20 <textIn+0x1e0>
 8000b1a:	003a      	movs	r2, r7
 8000b1c:	1e53      	subs	r3, r2, #1
 8000b1e:	419a      	sbcs	r2, r3
 8000b20:	4d28      	ldr	r5, [pc, #160]	; (8000bc4 <textIn+0x284>)
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	0029      	movs	r1, r5
 8000b26:	4828      	ldr	r0, [pc, #160]	; (8000bc8 <textIn+0x288>)
 8000b28:	f001 fde8 	bl	80026fc <SSD1306_Puts>
			SSD1306_GotoXY(115, 49);
 8000b2c:	2131      	movs	r1, #49	; 0x31
 8000b2e:	2073      	movs	r0, #115	; 0x73
 8000b30:	f001 fda8 	bl	8002684 <SSD1306_GotoXY>
			SSD1306_Puts("*", &Font_6x8, !(keyX == 10 && keyY == 2));
 8000b34:	0032      	movs	r2, r6
 8000b36:	2c0a      	cmp	r4, #10
 8000b38:	d102      	bne.n	8000b40 <textIn+0x200>
 8000b3a:	1eba      	subs	r2, r7, #2
 8000b3c:	1e53      	subs	r3, r2, #1
 8000b3e:	419a      	sbcs	r2, r3
 8000b40:	0029      	movs	r1, r5
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	4821      	ldr	r0, [pc, #132]	; (8000bcc <textIn+0x28c>)
 8000b46:	f001 fdd9 	bl	80026fc <SSD1306_Puts>
			SSD1306_PutsXY(cur, 2, " ^ ", 1);
 8000b4a:	0033      	movs	r3, r6
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <textIn+0x290>)
 8000b50:	9800      	ldr	r0, [sp, #0]
 8000b52:	f7ff fe49 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_PutsXY(0, 1, " > ", 1);
 8000b56:	0033      	movs	r3, r6
 8000b58:	0031      	movs	r1, r6
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <textIn+0x294>)
 8000b5e:	f7ff fe43 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < cur; i++){
 8000b62:	2300      	movs	r3, #0
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	466b      	mov	r3, sp
 8000b68:	7a1d      	ldrb	r5, [r3, #8]
 8000b6a:	9b00      	ldr	r3, [sp, #0]
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	d807      	bhi.n	8000b80 <textIn+0x240>
			SSD1306_UpdateScreen();
 8000b70:	f001 feca 	bl	8002908 <SSD1306_UpdateScreen>
 8000b74:	e6fd      	b.n	8000972 <textIn+0x32>
			else  SSD1306_PutsXY(0, 0, "#input part name", 0);
 8000b76:	002b      	movs	r3, r5
 8000b78:	0029      	movs	r1, r5
 8000b7a:	0028      	movs	r0, r5
 8000b7c:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <textIn+0x298>)
 8000b7e:	e794      	b.n	8000aaa <textIn+0x16a>
				sprintf(bf, "%c ", resultArr[i]);
 8000b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b82:	9a02      	ldr	r2, [sp, #8]
 8000b84:	4915      	ldr	r1, [pc, #84]	; (8000bdc <textIn+0x29c>)
 8000b86:	5c9a      	ldrb	r2, [r3, r2]
 8000b88:	9804      	ldr	r0, [sp, #16]
				SSD1306_PutsXY(1 + i, 1, bf, 1);
 8000b8a:	3501      	adds	r5, #1
				sprintf(bf, "%c ", resultArr[i]);
 8000b8c:	f004 fafe 	bl	800518c <siprintf>
				SSD1306_PutsXY(1 + i, 1, bf, 1);
 8000b90:	0033      	movs	r3, r6
 8000b92:	0031      	movs	r1, r6
 8000b94:	9a04      	ldr	r2, [sp, #16]
 8000b96:	b2e8      	uxtb	r0, r5
 8000b98:	f7ff fe26 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < cur; i++){
 8000b9c:	9b02      	ldr	r3, [sp, #8]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	e7e0      	b.n	8000b64 <textIn+0x224>
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	20000030 	.word	0x20000030
 8000ba8:	200008aa 	.word	0x200008aa
 8000bac:	20000424 	.word	0x20000424
 8000bb0:	00000e74 	.word	0x00000e74
 8000bb4:	2000001c 	.word	0x2000001c
 8000bb8:	2000000c 	.word	0x2000000c
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	08006244 	.word	0x08006244
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	08006261 	.word	0x08006261
 8000bcc:	08006263 	.word	0x08006263
 8000bd0:	08006265 	.word	0x08006265
 8000bd4:	08006269 	.word	0x08006269
 8000bd8:	08006250 	.word	0x08006250
 8000bdc:	0800626d 	.word	0x0800626d

08000be0 <timeSet>:

void timeSet(boolean firstOn){
 8000be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000be2:	9001      	str	r0, [sp, #4]
	DATE setDate = {.year = 2022, .month = 3, .day = 18};
	TIME setTime = {.hour = 0, .min = 0, .sec = 1};

	basicScreen();
 8000be4:	f7ff fe10 	bl	8000808 <basicScreen>
	DATE setDate = {.year = 2022, .month = 3, .day = 18};
 8000be8:	4c55      	ldr	r4, [pc, #340]	; (8000d40 <timeSet+0x160>)
	while(!firstOn){
		if(RE1){
 8000bea:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <timeSet+0x164>)
	while(!firstOn){
 8000bec:	9901      	ldr	r1, [sp, #4]
		if(RE1){
 8000bee:	781a      	ldrb	r2, [r3, #0]
	while(!firstOn){
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	d149      	bne.n	8000c88 <timeSet+0xa8>
		if(RE1){
 8000bf4:	2a63      	cmp	r2, #99	; 0x63
 8000bf6:	d9fd      	bls.n	8000bf4 <timeSet+0x14>
			reC = 0;
 8000bf8:	9a01      	ldr	r2, [sp, #4]
 8000bfa:	701a      	strb	r2, [r3, #0]
			if(JOY_R && sel < 5) sel++;
 8000bfc:	23fa      	movs	r3, #250	; 0xfa
 8000bfe:	4a52      	ldr	r2, [pc, #328]	; (8000d48 <timeSet+0x168>)
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	8851      	ldrh	r1, [r2, #2]
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d940      	bls.n	8000c8a <timeSet+0xaa>
 8000c08:	4850      	ldr	r0, [pc, #320]	; (8000d4c <timeSet+0x16c>)
 8000c0a:	7803      	ldrb	r3, [r0, #0]
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d801      	bhi.n	8000c14 <timeSet+0x34>
 8000c10:	3301      	adds	r3, #1
			if(JOY_L && sel) sel--;
 8000c12:	7003      	strb	r3, [r0, #0]
			if(JOY_U){
 8000c14:	8813      	ldrh	r3, [r2, #0]
 8000c16:	22fa      	movs	r2, #250	; 0xfa
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d93f      	bls.n	8000c9e <timeSet+0xbe>
				if(sel == 0) if(setDate.year < 2099) setDate.year++;
 8000c1e:	4a4b      	ldr	r2, [pc, #300]	; (8000d4c <timeSet+0x16c>)
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d104      	bne.n	8000c30 <timeSet+0x50>
 8000c26:	4a4a      	ldr	r2, [pc, #296]	; (8000d50 <timeSet+0x170>)
 8000c28:	4294      	cmp	r4, r2
 8000c2a:	d801      	bhi.n	8000c30 <timeSet+0x50>
 8000c2c:	3401      	adds	r4, #1
				else if(sel == 4) if(setTime.min < 59) setTime.min++;
				else if(sel == 5) if(setTime.sec < 59) setTime.sec++;
				else if(setDate.day > lastDay[setDate.month - 1]) setDate.day = lastDay[setDate.month - 1];
			}
			if(JOY_D){
				if(sel == 0) if(setDate.year > 2000) setDate.year--;
 8000c2e:	b2a4      	uxth	r4, r4
				else if(sel == 2) if(setDate.day > 1) setDate.day--;
				else if(sel == 3) if(setTime.hour) setTime.hour--;
				else if(sel == 4) if(setTime.min) setTime.min--;
				else if(sel == 5) if(setTime.sec) setTime.sec--;
			}
			if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 8000c30:	392d      	subs	r1, #45	; 0x2d
 8000c32:	39ff      	subs	r1, #255	; 0xff
 8000c34:	4a47      	ldr	r2, [pc, #284]	; (8000d54 <timeSet+0x174>)
 8000c36:	b289      	uxth	r1, r1
 8000c38:	4f47      	ldr	r7, [pc, #284]	; (8000d58 <timeSet+0x178>)
 8000c3a:	4291      	cmp	r1, r2
 8000c3c:	d804      	bhi.n	8000c48 <timeSet+0x68>
 8000c3e:	3b2d      	subs	r3, #45	; 0x2d
 8000c40:	3bff      	subs	r3, #255	; 0xff
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d901      	bls.n	8000c4c <timeSet+0x6c>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	703b      	strb	r3, [r7, #0]
			if(JOY_P){
 8000c4c:	20a0      	movs	r0, #160	; 0xa0
 8000c4e:	2104      	movs	r1, #4
 8000c50:	05c0      	lsls	r0, r0, #23
 8000c52:	f002 fd91 	bl	8003778 <HAL_GPIO_ReadPin>
				if(!oldsw){
 8000c56:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <timeSet+0x17c>)
 8000c58:	781d      	ldrb	r5, [r3, #0]
 8000c5a:	4305      	orrs	r5, r0
 8000c5c:	b2ed      	uxtb	r5, r5
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d12b      	bne.n	8000cba <timeSet+0xda>
					swS();
 8000c62:	f7ff fddf 	bl	8000824 <swS>
					DS3231_set_date(setDate.day, setDate.month, setDate.year);
 8000c66:	2103      	movs	r1, #3
 8000c68:	2012      	movs	r0, #18
 8000c6a:	b2e2      	uxtb	r2, r4
 8000c6c:	f7ff fcd0 	bl	8000610 <DS3231_set_date>
					DS3231_set_time(setTime.sec, setTime.min, setTime.hour);
 8000c70:	002a      	movs	r2, r5
 8000c72:	0029      	movs	r1, r5
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fc35 	bl	80004e4 <DS3231_set_time>
					udf = true;
 8000c7a:	2101      	movs	r1, #1
					eepWriteData(0, true);
 8000c7c:	0028      	movs	r0, r5
					udf = true;
 8000c7e:	7039      	strb	r1, [r7, #0]
					eepWriteData(0, true);
 8000c80:	f001 ff1a 	bl	8002ab8 <eepWriteData>
					SSD1306_Clear();
 8000c84:	f001 fe62 	bl	800294c <SSD1306_Clear>
				SSD1306_UpdateScreen();
				free(bf);
			}
		}
	}
}
 8000c88:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			if(JOY_L && sel) sel--;
 8000c8a:	2396      	movs	r3, #150	; 0x96
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	d2c0      	bcs.n	8000c14 <timeSet+0x34>
 8000c92:	482e      	ldr	r0, [pc, #184]	; (8000d4c <timeSet+0x16c>)
 8000c94:	7803      	ldrb	r3, [r0, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0bc      	beq.n	8000c14 <timeSet+0x34>
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	e7b9      	b.n	8000c12 <timeSet+0x32>
			if(JOY_D){
 8000c9e:	2296      	movs	r2, #150	; 0x96
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d2c4      	bcs.n	8000c30 <timeSet+0x50>
				if(sel == 0) if(setDate.year > 2000) setDate.year--;
 8000ca6:	4a29      	ldr	r2, [pc, #164]	; (8000d4c <timeSet+0x16c>)
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d1c0      	bne.n	8000c30 <timeSet+0x50>
 8000cae:	22fa      	movs	r2, #250	; 0xfa
 8000cb0:	00d2      	lsls	r2, r2, #3
 8000cb2:	4294      	cmp	r4, r2
 8000cb4:	d9bc      	bls.n	8000c30 <timeSet+0x50>
 8000cb6:	3c01      	subs	r4, #1
 8000cb8:	e7b9      	b.n	8000c2e <timeSet+0x4e>
			if(udf){
 8000cba:	783b      	ldrb	r3, [r7, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d100      	bne.n	8000cc2 <timeSet+0xe2>
 8000cc0:	e793      	b.n	8000bea <timeSet+0xa>
				String bf = (String)calloc(0, sizeof(char) * 12);
 8000cc2:	210c      	movs	r1, #12
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f004 f8df 	bl	8004e88 <calloc>
				udf = false;
 8000cca:	2600      	movs	r6, #0
				String bf = (String)calloc(0, sizeof(char) * 12);
 8000ccc:	0005      	movs	r5, r0
				udf = false;
 8000cce:	703e      	strb	r6, [r7, #0]
				basicScreen();
 8000cd0:	f7ff fd9a 	bl	8000808 <basicScreen>
				SSD1306_PutsXY(0, 0, "#Time Set", 0);
 8000cd4:	0033      	movs	r3, r6
 8000cd6:	0031      	movs	r1, r6
 8000cd8:	0030      	movs	r0, r6
 8000cda:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <timeSet+0x180>)
 8000cdc:	f7ff fd84 	bl	80007e8 <SSD1306_PutsXY>
				SSD1306_PutsXY(0, 2, "RTC Time setting.", 1);
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	0030      	movs	r0, r6
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <timeSet+0x184>)
 8000ce8:	f7ff fd7e 	bl	80007e8 <SSD1306_PutsXY>
				switch(sel){
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <timeSet+0x16c>)
 8000cee:	7818      	ldrb	r0, [r3, #0]
 8000cf0:	2805      	cmp	r0, #5
 8000cf2:	d809      	bhi.n	8000d08 <timeSet+0x128>
 8000cf4:	f7ff fa12 	bl	800011c <__gnu_thumb1_case_uqi>
 8000cf8:	1a171403 	.word	0x1a171403
 8000cfc:	201d      	.short	0x201d
				case 0: sprintf(bf, "Year=%04ld", setDate.year); break;
 8000cfe:	0022      	movs	r2, r4
 8000d00:	4919      	ldr	r1, [pc, #100]	; (8000d68 <timeSet+0x188>)
				case 5: sprintf(bf, "Sec=%02ld", setTime.sec); break;
 8000d02:	0028      	movs	r0, r5
 8000d04:	f004 fa42 	bl	800518c <siprintf>
				SSD1306_PutsXY(0, 4, bf, 1);
 8000d08:	2301      	movs	r3, #1
 8000d0a:	002a      	movs	r2, r5
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fd6a 	bl	80007e8 <SSD1306_PutsXY>
				SSD1306_UpdateScreen();
 8000d14:	f001 fdf8 	bl	8002908 <SSD1306_UpdateScreen>
				free(bf);
 8000d18:	0028      	movs	r0, r5
 8000d1a:	f004 f8e9 	bl	8004ef0 <free>
 8000d1e:	e764      	b.n	8000bea <timeSet+0xa>
				case 1: sprintf(bf, "Month=%02ld", setDate.month); break;
 8000d20:	2203      	movs	r2, #3
 8000d22:	4912      	ldr	r1, [pc, #72]	; (8000d6c <timeSet+0x18c>)
 8000d24:	e7ed      	b.n	8000d02 <timeSet+0x122>
				case 2: sprintf(bf, "Day=%02ld", setDate.day); break;
 8000d26:	2212      	movs	r2, #18
 8000d28:	4911      	ldr	r1, [pc, #68]	; (8000d70 <timeSet+0x190>)
 8000d2a:	e7ea      	b.n	8000d02 <timeSet+0x122>
				case 3: sprintf(bf, "Hour=%02ld", setTime.hour); break;
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4911      	ldr	r1, [pc, #68]	; (8000d74 <timeSet+0x194>)
 8000d30:	e7e7      	b.n	8000d02 <timeSet+0x122>
				case 4: sprintf(bf, "Min=%02ld", setTime.min); break;
 8000d32:	2200      	movs	r2, #0
 8000d34:	4910      	ldr	r1, [pc, #64]	; (8000d78 <timeSet+0x198>)
 8000d36:	e7e4      	b.n	8000d02 <timeSet+0x122>
				case 5: sprintf(bf, "Sec=%02ld", setTime.sec); break;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4910      	ldr	r1, [pc, #64]	; (8000d7c <timeSet+0x19c>)
 8000d3c:	e7e1      	b.n	8000d02 <timeSet+0x122>
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	000007e6 	.word	0x000007e6
 8000d44:	200008aa 	.word	0x200008aa
 8000d48:	20000424 	.word	0x20000424
 8000d4c:	200008ab 	.word	0x200008ab
 8000d50:	00000832 	.word	0x00000832
 8000d54:	00000e74 	.word	0x00000e74
 8000d58:	20000030 	.word	0x20000030
 8000d5c:	2000001c 	.word	0x2000001c
 8000d60:	08006271 	.word	0x08006271
 8000d64:	0800627b 	.word	0x0800627b
 8000d68:	0800628d 	.word	0x0800628d
 8000d6c:	08006298 	.word	0x08006298
 8000d70:	080062a4 	.word	0x080062a4
 8000d74:	080062ae 	.word	0x080062ae
 8000d78:	080062b9 	.word	0x080062b9
 8000d7c:	080062c3 	.word	0x080062c3

08000d80 <mainM>:

MODE mainM(){
 8000d80:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 8000d82:	4b78      	ldr	r3, [pc, #480]	; (8000f64 <mainM+0x1e4>)
MODE mainM(){
 8000d84:	b085      	sub	sp, #20
	if(firstF){
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d023      	beq.n	8000dd4 <mainM+0x54>
		firstF = false;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4a75      	ldr	r2, [pc, #468]	; (8000f64 <mainM+0x1e4>)
		basicScreen();
		for(uint8_t i = 0; i < 36; i++)
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8000d90:	2504      	movs	r5, #4
		firstF = false;
 8000d92:	7013      	strb	r3, [r2, #0]
		basicScreen();
 8000d94:	f7ff fd38 	bl	8000808 <basicScreen>
		for(uint8_t i = 0; i < 36; i++)
 8000d98:	2390      	movs	r3, #144	; 0x90
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	4c72      	ldr	r4, [pc, #456]	; (8000f68 <mainM+0x1e8>)
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	18e7      	adds	r7, r4, r3
 8000da2:	8963      	ldrh	r3, [r4, #10]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00d      	beq.n	8000dc4 <mainM+0x44>
 8000da8:	7921      	ldrb	r1, [r4, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	002b      	movs	r3, r5
 8000dae:	79a0      	ldrb	r0, [r4, #6]
 8000db0:	2901      	cmp	r1, #1
 8000db2:	d005      	beq.n	8000dc0 <mainM+0x40>
 8000db4:	2903      	cmp	r1, #3
 8000db6:	d000      	beq.n	8000dba <mainM+0x3a>
 8000db8:	e0cc      	b.n	8000f54 <mainM+0x1d4>
 8000dba:	002a      	movs	r2, r5
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	f7ff fcba 	bl	8000738 <led_color>
		for(uint8_t i = 0; i < 36; i++)
 8000dc4:	3410      	adds	r4, #16
 8000dc6:	42a7      	cmp	r7, r4
 8000dc8:	d1eb      	bne.n	8000da2 <mainM+0x22>
		led_update();
 8000dca:	f7ff fcc1 	bl	8000750 <led_update>
		sel = 0;
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4b66      	ldr	r3, [pc, #408]	; (8000f6c <mainM+0x1ec>)
 8000dd2:	701a      	strb	r2, [r3, #0]
	}
	if(RE1){
 8000dd4:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <mainM+0x1f0>)
 8000dd6:	4f67      	ldr	r7, [pc, #412]	; (8000f74 <mainM+0x1f4>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b63      	cmp	r3, #99	; 0x63
 8000ddc:	d959      	bls.n	8000e92 <mainM+0x112>
		if(JOY_U && sel)sel--;
 8000dde:	21fa      	movs	r1, #250	; 0xfa
 8000de0:	4b65      	ldr	r3, [pc, #404]	; (8000f78 <mainM+0x1f8>)
 8000de2:	0109      	lsls	r1, r1, #4
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	428a      	cmp	r2, r1
 8000de8:	d908      	bls.n	8000dfc <mainM+0x7c>
 8000dea:	4a60      	ldr	r2, [pc, #384]	; (8000f6c <mainM+0x1ec>)
 8000dec:	7813      	ldrb	r3, [r2, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <mainM+0x76>
 8000df2:	3b01      	subs	r3, #1
		if(JOY_D && sel < 4) sel++;
 8000df4:	7013      	strb	r3, [r2, #0]
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 8000df6:	2301      	movs	r3, #1
 8000df8:	703b      	strb	r3, [r7, #0]
 8000dfa:	e010      	b.n	8000e1e <mainM+0x9e>
		if(JOY_D && sel < 4) sel++;
 8000dfc:	2196      	movs	r1, #150	; 0x96
 8000dfe:	0049      	lsls	r1, r1, #1
 8000e00:	428a      	cmp	r2, r1
 8000e02:	d205      	bcs.n	8000e10 <mainM+0x90>
 8000e04:	4a59      	ldr	r2, [pc, #356]	; (8000f6c <mainM+0x1ec>)
 8000e06:	7813      	ldrb	r3, [r2, #0]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d8f4      	bhi.n	8000df6 <mainM+0x76>
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	e7f1      	b.n	8000df4 <mainM+0x74>
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 8000e10:	885b      	ldrh	r3, [r3, #2]
 8000e12:	4a5a      	ldr	r2, [pc, #360]	; (8000f7c <mainM+0x1fc>)
 8000e14:	3b2d      	subs	r3, #45	; 0x2d
 8000e16:	3bff      	subs	r3, #255	; 0xff
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d8eb      	bhi.n	8000df6 <mainM+0x76>

		date.year = 0;
 8000e1e:	2500      	movs	r5, #0
 8000e20:	4c57      	ldr	r4, [pc, #348]	; (8000f80 <mainM+0x200>)
		DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 8000e22:	0020      	movs	r0, r4
 8000e24:	1ca2      	adds	r2, r4, #2
 8000e26:	1c61      	adds	r1, r4, #1
		date.year = 0;
 8000e28:	8065      	strh	r5, [r4, #2]
		DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 8000e2a:	f7ff fc29 	bl	8000680 <DS3231_get_date>
		DS3231_get_time(&time.sec, &time.min, &time.hour);
 8000e2e:	4e55      	ldr	r6, [pc, #340]	; (8000f84 <mainM+0x204>)
 8000e30:	0032      	movs	r2, r6
 8000e32:	1c71      	adds	r1, r6, #1
 8000e34:	1cb0      	adds	r0, r6, #2
 8000e36:	f7ff fb8d 	bl	8000554 <DS3231_get_time>
		date.year += 1992;
 8000e3a:	22f9      	movs	r2, #249	; 0xf9
 8000e3c:	8863      	ldrh	r3, [r4, #2]
 8000e3e:	00d2      	lsls	r2, r2, #3
 8000e40:	189b      	adds	r3, r3, r2
 8000e42:	b29b      	uxth	r3, r3

		String bf = (String)calloc(0, sizeof(char) * 16);
 8000e44:	2110      	movs	r1, #16
 8000e46:	0028      	movs	r0, r5
		date.year += 1992;
 8000e48:	9303      	str	r3, [sp, #12]
 8000e4a:	8063      	strh	r3, [r4, #2]
		String bf = (String)calloc(0, sizeof(char) * 16);
 8000e4c:	f004 f81c 	bl	8004e88 <calloc>
 8000e50:	0005      	movs	r5, r0
		sprintf(bf, "%04d.%02d.%02d", date.year, date.month, date.day);
 8000e52:	7822      	ldrb	r2, [r4, #0]
 8000e54:	7863      	ldrb	r3, [r4, #1]
 8000e56:	494c      	ldr	r1, [pc, #304]	; (8000f88 <mainM+0x208>)
 8000e58:	9200      	str	r2, [sp, #0]
 8000e5a:	9a03      	ldr	r2, [sp, #12]
 8000e5c:	f004 f996 	bl	800518c <siprintf>
		SSD1306_PutsXY(11, 3, bf, 1);
 8000e60:	2301      	movs	r3, #1
 8000e62:	002a      	movs	r2, r5
 8000e64:	2103      	movs	r1, #3
 8000e66:	200b      	movs	r0, #11
 8000e68:	f7ff fcbe 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "%02d:%02d:%02d", time.hour, time.min, time.sec);
 8000e6c:	78b1      	ldrb	r1, [r6, #2]
 8000e6e:	7873      	ldrb	r3, [r6, #1]
 8000e70:	7832      	ldrb	r2, [r6, #0]
 8000e72:	0028      	movs	r0, r5
 8000e74:	9100      	str	r1, [sp, #0]
 8000e76:	4945      	ldr	r1, [pc, #276]	; (8000f8c <mainM+0x20c>)
 8000e78:	f004 f988 	bl	800518c <siprintf>
		SSD1306_PutsXY(13, 4, bf, 1);
 8000e7c:	200d      	movs	r0, #13
 8000e7e:	2301      	movs	r3, #1
 8000e80:	002a      	movs	r2, r5
 8000e82:	2104      	movs	r1, #4
 8000e84:	f7ff fcb0 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 8000e88:	f001 fd3e 	bl	8002908 <SSD1306_UpdateScreen>
		free(bf);
 8000e8c:	0028      	movs	r0, r5
 8000e8e:	f004 f82f 	bl	8004ef0 <free>
	}
	if(JOY_P){
 8000e92:	20a0      	movs	r0, #160	; 0xa0
 8000e94:	2104      	movs	r1, #4
 8000e96:	05c0      	lsls	r0, r0, #23
 8000e98:	f002 fc6e 	bl	8003778 <HAL_GPIO_ReadPin>
		if(!oldsw){
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <mainM+0x210>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4318      	orrs	r0, r3
 8000ea2:	b2c0      	uxtb	r0, r0
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d11f      	bne.n	8000ee8 <mainM+0x168>
			swS();
 8000ea8:	f7ff fcbc 	bl	8000824 <swS>
			if(ptC || !sel){
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <mainM+0x214>)
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <mainM+0x1ec>)
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d102      	bne.n	8000ebc <mainM+0x13c>
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d112      	bne.n	8000ee2 <mainM+0x162>
				udf = true;
 8000ebc:	2001      	movs	r0, #1
				firstF = true;
 8000ebe:	4a29      	ldr	r2, [pc, #164]	; (8000f64 <mainM+0x1e4>)
				return sel == 0 ? PSAVE : sel == 1 ? PUSE : sel == 2 ? PFIND : sel == 3 ? PARTITION : PLOG;
 8000ec0:	781b      	ldrb	r3, [r3, #0]
				udf = true;
 8000ec2:	7038      	strb	r0, [r7, #0]
				firstF = true;
 8000ec4:	7010      	strb	r0, [r2, #0]
				return sel == 0 ? PSAVE : sel == 1 ? PUSE : sel == 2 ? PFIND : sel == 3 ? PARTITION : PLOG;
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d009      	beq.n	8000ede <mainM+0x15e>
 8000eca:	1800      	adds	r0, r0, r0
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d006      	beq.n	8000ede <mainM+0x15e>
 8000ed0:	3003      	adds	r0, #3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d003      	beq.n	8000ede <mainM+0x15e>
 8000ed6:	1ed8      	subs	r0, r3, #3
 8000ed8:	1e43      	subs	r3, r0, #1
 8000eda:	4198      	sbcs	r0, r3
 8000edc:	3007      	adds	r0, #7
		SSD1306_PutsXY(1, 6, "Part log", 1);

		SSD1306_PutsXY(0, sel + 2, ">", 1);
	}
	return MAIN;
}
 8000ede:	b005      	add	sp, #20
 8000ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			}else buzFlag = 1;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <mainM+0x218>)
 8000ee6:	701a      	strb	r2, [r3, #0]
	if(udf){
 8000ee8:	7838      	ldrb	r0, [r7, #0]
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d0f7      	beq.n	8000ede <mainM+0x15e>
		udf = false;
 8000eee:	2400      	movs	r4, #0
 8000ef0:	703c      	strb	r4, [r7, #0]
		basicScreen();
 8000ef2:	f7ff fc89 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Menu", 0);
 8000ef6:	0023      	movs	r3, r4
 8000ef8:	0021      	movs	r1, r4
 8000efa:	0020      	movs	r0, r4
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <mainM+0x21c>)
 8000efe:	f7ff fc73 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 2, "Part save", 1);
 8000f02:	2301      	movs	r3, #1
 8000f04:	2102      	movs	r1, #2
 8000f06:	0018      	movs	r0, r3
 8000f08:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <mainM+0x220>)
 8000f0a:	f7ff fc6d 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 3, "Part use", 1);
 8000f0e:	2301      	movs	r3, #1
 8000f10:	2103      	movs	r1, #3
 8000f12:	0018      	movs	r0, r3
 8000f14:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <mainM+0x224>)
 8000f16:	f7ff fc67 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 4, "Part find", 1);
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	0018      	movs	r0, r3
 8000f20:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <mainM+0x228>)
 8000f22:	f7ff fc61 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 5, "Partition", 1);
 8000f26:	2301      	movs	r3, #1
 8000f28:	2105      	movs	r1, #5
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <mainM+0x22c>)
 8000f2e:	f7ff fc5b 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 6, "Part log", 1);
 8000f32:	2301      	movs	r3, #1
 8000f34:	2106      	movs	r1, #6
 8000f36:	0018      	movs	r0, r3
 8000f38:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <mainM+0x230>)
 8000f3a:	f7ff fc55 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, sel + 2, ">", 1);
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <mainM+0x1ec>)
 8000f40:	0020      	movs	r0, r4
 8000f42:	7819      	ldrb	r1, [r3, #0]
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <mainM+0x234>)
 8000f46:	3102      	adds	r1, #2
 8000f48:	2301      	movs	r3, #1
 8000f4a:	b2c9      	uxtb	r1, r1
 8000f4c:	f7ff fc4c 	bl	80007e8 <SSD1306_PutsXY>
	return MAIN;
 8000f50:	0020      	movs	r0, r4
 8000f52:	e7c4      	b.n	8000ede <mainM+0x15e>
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8000f54:	0032      	movs	r2, r6
 8000f56:	2902      	cmp	r1, #2
 8000f58:	d100      	bne.n	8000f5c <mainM+0x1dc>
 8000f5a:	002a      	movs	r2, r5
 8000f5c:	0029      	movs	r1, r5
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e72e      	b.n	8000dc0 <mainM+0x40>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000660 	.word	0x20000660
 8000f6c:	200008ab 	.word	0x200008ab
 8000f70:	200008aa 	.word	0x200008aa
 8000f74:	20000030 	.word	0x20000030
 8000f78:	20000424 	.word	0x20000424
 8000f7c:	00000e74 	.word	0x00000e74
 8000f80:	2000042c 	.word	0x2000042c
 8000f84:	200008af 	.word	0x200008af
 8000f88:	080062cd 	.word	0x080062cd
 8000f8c:	080062dc 	.word	0x080062dc
 8000f90:	2000001c 	.word	0x2000001c
 8000f94:	200008a0 	.word	0x200008a0
 8000f98:	2000042a 	.word	0x2000042a
 8000f9c:	080062eb 	.word	0x080062eb
 8000fa0:	080062f1 	.word	0x080062f1
 8000fa4:	080062fb 	.word	0x080062fb
 8000fa8:	08006304 	.word	0x08006304
 8000fac:	0800630e 	.word	0x0800630e
 8000fb0:	08006318 	.word	0x08006318
 8000fb4:	08006321 	.word	0x08006321

08000fb8 <partS>:

MODE partS(){
 8000fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(firstF){
 8000fba:	4bb4      	ldr	r3, [pc, #720]	; (800128c <partS+0x2d4>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d01a      	beq.n	8000ff8 <partS+0x40>
		firstF = false;
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4bb1      	ldr	r3, [pc, #708]	; (800128c <partS+0x2d4>)

		sel = 0;
		tempX = 1;
		tempY = 1;
		ledPos = 30;
 8000fc6:	201e      	movs	r0, #30
		firstF = false;
 8000fc8:	701a      	strb	r2, [r3, #0]
		sel = 0;
 8000fca:	4bb1      	ldr	r3, [pc, #708]	; (8001290 <partS+0x2d8>)
		tempX = 1;
 8000fcc:	49b1      	ldr	r1, [pc, #708]	; (8001294 <partS+0x2dc>)
		sel = 0;
 8000fce:	701a      	strb	r2, [r3, #0]
		tempX = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	700b      	strb	r3, [r1, #0]
		tempY = 1;
 8000fd4:	49b0      	ldr	r1, [pc, #704]	; (8001298 <partS+0x2e0>)
 8000fd6:	700b      	strb	r3, [r1, #0]
		ledPos = 30;
 8000fd8:	49b0      	ldr	r1, [pc, #704]	; (800129c <partS+0x2e4>)
 8000fda:	7008      	strb	r0, [r1, #0]

		ptInNum = 1;
 8000fdc:	49b0      	ldr	r1, [pc, #704]	; (80012a0 <partS+0x2e8>)
 8000fde:	700b      	strb	r3, [r1, #0]
		pt[ptC].cate = 0;
 8000fe0:	4bb0      	ldr	r3, [pc, #704]	; (80012a4 <partS+0x2ec>)
 8000fe2:	7819      	ldrb	r1, [r3, #0]
 8000fe4:	4bb0      	ldr	r3, [pc, #704]	; (80012a8 <partS+0x2f0>)
 8000fe6:	0109      	lsls	r1, r1, #4
 8000fe8:	185b      	adds	r3, r3, r1
 8000fea:	711a      	strb	r2, [r3, #4]
		pt[ptC].max = 200;
 8000fec:	32c8      	adds	r2, #200	; 0xc8
 8000fee:	819a      	strh	r2, [r3, #12]

		led_clear();
 8000ff0:	f7ff fbd8 	bl	80007a4 <led_clear>
		led_update();
 8000ff4:	f7ff fbac 	bl	8000750 <led_update>
	}
	if(RE1){
 8000ff8:	4bac      	ldr	r3, [pc, #688]	; (80012ac <partS+0x2f4>)
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	2a63      	cmp	r2, #99	; 0x63
 8000ffe:	d92b      	bls.n	8001058 <partS+0xa0>
		uint8_t i;
		reC = 0;
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
		if(ptSetPosF){
 8001004:	4aaa      	ldr	r2, [pc, #680]	; (80012b0 <partS+0x2f8>)
			if(JOY_R){
 8001006:	4cab      	ldr	r4, [pc, #684]	; (80012b4 <partS+0x2fc>)
		if(ptSetPosF){
 8001008:	7811      	ldrb	r1, [r2, #0]
 800100a:	22fa      	movs	r2, #250	; 0xfa
			if(JOY_R){
 800100c:	8863      	ldrh	r3, [r4, #2]
 800100e:	0112      	lsls	r2, r2, #4
		if(ptSetPosF){
 8001010:	2900      	cmp	r1, #0
 8001012:	d100      	bne.n	8001016 <partS+0x5e>
 8001014:	e0b8      	b.n	8001188 <partS+0x1d0>
			if(JOY_R){
 8001016:	4293      	cmp	r3, r2
 8001018:	d955      	bls.n	80010c6 <partS+0x10e>
				if(tempX < 6){
 800101a:	4e9e      	ldr	r6, [pc, #632]	; (8001294 <partS+0x2dc>)
 800101c:	7833      	ldrb	r3, [r6, #0]
 800101e:	2b05      	cmp	r3, #5
 8001020:	d96a      	bls.n	80010f8 <partS+0x140>
							break;
						}
					}
				}
			}
			if(JOY_U){
 8001022:	23fa      	movs	r3, #250	; 0xfa
 8001024:	8822      	ldrh	r2, [r4, #0]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	429a      	cmp	r2, r3
 800102a:	d800      	bhi.n	800102e <partS+0x76>
 800102c:	e084      	b.n	8001138 <partS+0x180>
				if(tempY < 6){
 800102e:	4e9a      	ldr	r6, [pc, #616]	; (8001298 <partS+0x2e0>)
 8001030:	7833      	ldrb	r3, [r6, #0]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d800      	bhi.n	8001038 <partS+0x80>
 8001036:	e09d      	b.n	8001174 <partS+0x1bc>
				if(sel == 3 && pt[ptC].pos) pt[ptC].pos--;
			}
			if(JOY_U && sel) sel--;
			if(JOY_D && sel < 4) sel++;
		}
		if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 8001038:	8863      	ldrh	r3, [r4, #2]
 800103a:	4a9f      	ldr	r2, [pc, #636]	; (80012b8 <partS+0x300>)
 800103c:	3b2d      	subs	r3, #45	; 0x2d
 800103e:	3bff      	subs	r3, #255	; 0xff
 8001040:	b29b      	uxth	r3, r3
 8001042:	4293      	cmp	r3, r2
 8001044:	d805      	bhi.n	8001052 <partS+0x9a>
 8001046:	8823      	ldrh	r3, [r4, #0]
 8001048:	3b2d      	subs	r3, #45	; 0x2d
 800104a:	3bff      	subs	r3, #255	; 0xff
 800104c:	b29b      	uxth	r3, r3
 800104e:	4293      	cmp	r3, r2
 8001050:	d902      	bls.n	8001058 <partS+0xa0>
 8001052:	2201      	movs	r2, #1
 8001054:	4b99      	ldr	r3, [pc, #612]	; (80012bc <partS+0x304>)
 8001056:	701a      	strb	r2, [r3, #0]
	}
	if(JOY_P){
 8001058:	20a0      	movs	r0, #160	; 0xa0
 800105a:	2104      	movs	r1, #4
 800105c:	05c0      	lsls	r0, r0, #23
 800105e:	f002 fb8b 	bl	8003778 <HAL_GPIO_ReadPin>
		if(!oldsw){
 8001062:	4b97      	ldr	r3, [pc, #604]	; (80012c0 <partS+0x308>)
 8001064:	4f95      	ldr	r7, [pc, #596]	; (80012bc <partS+0x304>)
 8001066:	781c      	ldrb	r4, [r3, #0]
 8001068:	4304      	orrs	r4, r0
 800106a:	b2e4      	uxtb	r4, r4
 800106c:	2c00      	cmp	r4, #0
 800106e:	d110      	bne.n	8001092 <partS+0xda>
			swS();
 8001070:	f7ff fbd8 	bl	8000824 <swS>
			if(sel == 1){
 8001074:	4b86      	ldr	r3, [pc, #536]	; (8001290 <partS+0x2d8>)
 8001076:	781e      	ldrb	r6, [r3, #0]
 8001078:	2e01      	cmp	r6, #1
 800107a:	d000      	beq.n	800107e <partS+0xc6>
 800107c:	e122      	b.n	80012c4 <partS+0x30c>
				udf = true;
				pt[ptC].name = textIn(false, 10);
 800107e:	4b89      	ldr	r3, [pc, #548]	; (80012a4 <partS+0x2ec>)
 8001080:	210a      	movs	r1, #10
 8001082:	0020      	movs	r0, r4
 8001084:	781d      	ldrb	r5, [r3, #0]
				udf = true;
 8001086:	703e      	strb	r6, [r7, #0]
				pt[ptC].name = textIn(false, 10);
 8001088:	f7ff fc5a 	bl	8000940 <textIn>
 800108c:	4b86      	ldr	r3, [pc, #536]	; (80012a8 <partS+0x2f0>)
 800108e:	012d      	lsls	r5, r5, #4
 8001090:	50e8      	str	r0, [r5, r3]
					return MAIN;
				}
			}
		}
	}
	if(udf){
 8001092:	783b      	ldrb	r3, [r7, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d000      	beq.n	800109a <partS+0xe2>
 8001098:	e11e      	b.n	80012d8 <partS+0x320>
		SSD1306_PutsXY(0, sel + 3, ">", 1);

		free(bf);
		SSD1306_UpdateScreen();
	}
	return PSAVE;
 800109a:	2401      	movs	r4, #1
 800109c:	e1b4      	b.n	8001408 <partS+0x450>
					for(i = 1; i <= (6 - tempX); i++){
 800109e:	3501      	adds	r5, #1
 80010a0:	b2ed      	uxtb	r5, r5
 80010a2:	7833      	ldrb	r3, [r6, #0]
 80010a4:	1afb      	subs	r3, r7, r3
 80010a6:	429d      	cmp	r5, r3
 80010a8:	dc0d      	bgt.n	80010c6 <partS+0x10e>
						if(led_cmp((ledPos + i), 0, 4, 0) == 3){
 80010aa:	4b7c      	ldr	r3, [pc, #496]	; (800129c <partS+0x2e4>)
 80010ac:	2204      	movs	r2, #4
 80010ae:	7818      	ldrb	r0, [r3, #0]
 80010b0:	2300      	movs	r3, #0
 80010b2:	1828      	adds	r0, r5, r0
 80010b4:	0019      	movs	r1, r3
 80010b6:	b2c0      	uxtb	r0, r0
 80010b8:	f7ff fb7e 	bl	80007b8 <led_cmp>
 80010bc:	2803      	cmp	r0, #3
 80010be:	d1ee      	bne.n	800109e <partS+0xe6>
							tempX += i;
 80010c0:	7833      	ldrb	r3, [r6, #0]
 80010c2:	18ed      	adds	r5, r5, r3
 80010c4:	7035      	strb	r5, [r6, #0]
			if(JOY_L){
 80010c6:	2396      	movs	r3, #150	; 0x96
 80010c8:	8862      	ldrh	r2, [r4, #2]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d2a8      	bcs.n	8001022 <partS+0x6a>
				if(tempX > 1){
 80010d0:	4e70      	ldr	r6, [pc, #448]	; (8001294 <partS+0x2dc>)
 80010d2:	7833      	ldrb	r3, [r6, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d9a4      	bls.n	8001022 <partS+0x6a>
					for(i = 1; i < tempX; i++){
 80010d8:	2501      	movs	r5, #1
						if(led_cmp((ledPos - i), 0, 4, 0) == 3){
 80010da:	4b70      	ldr	r3, [pc, #448]	; (800129c <partS+0x2e4>)
 80010dc:	2204      	movs	r2, #4
 80010de:	7818      	ldrb	r0, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	1b40      	subs	r0, r0, r5
 80010e4:	0019      	movs	r1, r3
 80010e6:	b2c0      	uxtb	r0, r0
 80010e8:	f7ff fb66 	bl	80007b8 <led_cmp>
 80010ec:	2803      	cmp	r0, #3
 80010ee:	d106      	bne.n	80010fe <partS+0x146>
							tempX -= i;
 80010f0:	7833      	ldrb	r3, [r6, #0]
 80010f2:	1b5d      	subs	r5, r3, r5
 80010f4:	7035      	strb	r5, [r6, #0]
							break;
 80010f6:	e794      	b.n	8001022 <partS+0x6a>
					for(i = 1; i <= (6 - tempX); i++){
 80010f8:	2501      	movs	r5, #1
 80010fa:	2706      	movs	r7, #6
 80010fc:	e7d1      	b.n	80010a2 <partS+0xea>
					for(i = 1; i < tempX; i++){
 80010fe:	3501      	adds	r5, #1
 8001100:	7833      	ldrb	r3, [r6, #0]
 8001102:	b2ed      	uxtb	r5, r5
 8001104:	42ab      	cmp	r3, r5
 8001106:	d8e8      	bhi.n	80010da <partS+0x122>
 8001108:	e78b      	b.n	8001022 <partS+0x6a>
					for(i = 1; i <= (6 - tempY); i++){
 800110a:	3501      	adds	r5, #1
 800110c:	b2ed      	uxtb	r5, r5
 800110e:	2206      	movs	r2, #6
 8001110:	7833      	ldrb	r3, [r6, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	429d      	cmp	r5, r3
 8001116:	dc0f      	bgt.n	8001138 <partS+0x180>
						if(led_cmp(ledPos - (6 * i), 0, 4, 0) == 3){
 8001118:	4b60      	ldr	r3, [pc, #384]	; (800129c <partS+0x2e4>)
 800111a:	2204      	movs	r2, #4
 800111c:	7818      	ldrb	r0, [r3, #0]
 800111e:	003b      	movs	r3, r7
 8001120:	436b      	muls	r3, r5
 8001122:	18c0      	adds	r0, r0, r3
 8001124:	2300      	movs	r3, #0
 8001126:	b2c0      	uxtb	r0, r0
 8001128:	0019      	movs	r1, r3
 800112a:	f7ff fb45 	bl	80007b8 <led_cmp>
 800112e:	2803      	cmp	r0, #3
 8001130:	d1eb      	bne.n	800110a <partS+0x152>
							tempY += i;
 8001132:	7833      	ldrb	r3, [r6, #0]
 8001134:	18ed      	adds	r5, r5, r3
 8001136:	7035      	strb	r5, [r6, #0]
			if(JOY_D){
 8001138:	2396      	movs	r3, #150	; 0x96
 800113a:	8822      	ldrh	r2, [r4, #0]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	429a      	cmp	r2, r3
 8001140:	d300      	bcc.n	8001144 <partS+0x18c>
 8001142:	e779      	b.n	8001038 <partS+0x80>
				if(tempY > 1){
 8001144:	4e54      	ldr	r6, [pc, #336]	; (8001298 <partS+0x2e0>)
 8001146:	7833      	ldrb	r3, [r6, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d800      	bhi.n	800114e <partS+0x196>
 800114c:	e774      	b.n	8001038 <partS+0x80>
					for(i = 1; i <=  tempY; i++){
 800114e:	2501      	movs	r5, #1
						if(led_cmp(ledPos +(6 * i), 0, 4, 0) == 3){
 8001150:	2706      	movs	r7, #6
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <partS+0x2e4>)
 8001154:	2204      	movs	r2, #4
 8001156:	7818      	ldrb	r0, [r3, #0]
 8001158:	003b      	movs	r3, r7
 800115a:	436b      	muls	r3, r5
 800115c:	18c0      	adds	r0, r0, r3
 800115e:	2300      	movs	r3, #0
 8001160:	b2c0      	uxtb	r0, r0
 8001162:	0019      	movs	r1, r3
 8001164:	f7ff fb28 	bl	80007b8 <led_cmp>
 8001168:	2803      	cmp	r0, #3
 800116a:	d107      	bne.n	800117c <partS+0x1c4>
							tempY -= i;
 800116c:	7833      	ldrb	r3, [r6, #0]
 800116e:	1b5d      	subs	r5, r3, r5
 8001170:	7035      	strb	r5, [r6, #0]
							break;
 8001172:	e761      	b.n	8001038 <partS+0x80>
						if(led_cmp(ledPos - (6 * i), 0, 4, 0) == 3){
 8001174:	2706      	movs	r7, #6
					for(i = 1; i <= (6 - tempY); i++){
 8001176:	2501      	movs	r5, #1
						if(led_cmp(ledPos - (6 * i), 0, 4, 0) == 3){
 8001178:	427f      	negs	r7, r7
 800117a:	e7c8      	b.n	800110e <partS+0x156>
					for(i = 1; i <=  tempY; i++){
 800117c:	3501      	adds	r5, #1
 800117e:	7833      	ldrb	r3, [r6, #0]
 8001180:	b2ed      	uxtb	r5, r5
 8001182:	42ab      	cmp	r3, r5
 8001184:	d2e5      	bcs.n	8001152 <partS+0x19a>
 8001186:	e757      	b.n	8001038 <partS+0x80>
			if(JOY_R){
 8001188:	4293      	cmp	r3, r2
 800118a:	d94c      	bls.n	8001226 <partS+0x26e>
				if(sel == 0){
 800118c:	4b40      	ldr	r3, [pc, #256]	; (8001290 <partS+0x2d8>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d11d      	bne.n	80011d0 <partS+0x218>
					if(pt[ptC].cate < 3) pt[ptC].cate++;
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <partS+0x2ec>)
 8001196:	4a44      	ldr	r2, [pc, #272]	; (80012a8 <partS+0x2f0>)
 8001198:	7819      	ldrb	r1, [r3, #0]
 800119a:	0109      	lsls	r1, r1, #4
 800119c:	1850      	adds	r0, r2, r1
 800119e:	7903      	ldrb	r3, [r0, #4]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d801      	bhi.n	80011a8 <partS+0x1f0>
 80011a4:	3301      	adds	r3, #1
					if(pt[ptC].cate) pt[ptC].cate--;
 80011a6:	7103      	strb	r3, [r0, #4]
					pt[ptC].max = PTMAX;
 80011a8:	1853      	adds	r3, r2, r1
 80011aa:	7918      	ldrb	r0, [r3, #4]
 80011ac:	23c8      	movs	r3, #200	; 0xc8
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d006      	beq.n	80011c0 <partS+0x208>
 80011b2:	3b64      	subs	r3, #100	; 0x64
 80011b4:	2801      	cmp	r0, #1
 80011b6:	d003      	beq.n	80011c0 <partS+0x208>
 80011b8:	3b32      	subs	r3, #50	; 0x32
 80011ba:	2802      	cmp	r0, #2
 80011bc:	d000      	beq.n	80011c0 <partS+0x208>
 80011be:	3b28      	subs	r3, #40	; 0x28
 80011c0:	1852      	adds	r2, r2, r1
 80011c2:	8193      	strh	r3, [r2, #12]
					if(ptInNum > pt[ptC].max) ptInNum = pt[ptC].max;
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <partS+0x2e8>)
 80011c6:	7811      	ldrb	r1, [r2, #0]
 80011c8:	4299      	cmp	r1, r3
 80011ca:	d905      	bls.n	80011d8 <partS+0x220>
				if(sel == 2 && ptInNum > 1) ptInNum--;
 80011cc:	7013      	strb	r3, [r2, #0]
 80011ce:	e003      	b.n	80011d8 <partS+0x220>
				if(sel == 2 && ptInNum < pt[ptC].max - pt[ptC].store) ptInNum++;
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d00e      	beq.n	80011f2 <partS+0x23a>
				if(sel == 3 && pt[ptC].pos < 35) pt[ptC].pos++;
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d01b      	beq.n	8001210 <partS+0x258>
			if(JOY_U && sel) sel--;
 80011d8:	22fa      	movs	r2, #250	; 0xfa
 80011da:	8823      	ldrh	r3, [r4, #0]
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	4293      	cmp	r3, r2
 80011e0:	d947      	bls.n	8001272 <partS+0x2ba>
 80011e2:	4a2b      	ldr	r2, [pc, #172]	; (8001290 <partS+0x2d8>)
 80011e4:	7813      	ldrb	r3, [r2, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <partS+0x234>
 80011ea:	e725      	b.n	8001038 <partS+0x80>
 80011ec:	3b01      	subs	r3, #1
			if(JOY_D && sel < 4) sel++;
 80011ee:	7013      	strb	r3, [r2, #0]
 80011f0:	e722      	b.n	8001038 <partS+0x80>
				if(sel == 2 && ptInNum < pt[ptC].max - pt[ptC].store) ptInNum++;
 80011f2:	4a2c      	ldr	r2, [pc, #176]	; (80012a4 <partS+0x2ec>)
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <partS+0x2e8>)
 80011f6:	7811      	ldrb	r1, [r2, #0]
 80011f8:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <partS+0x2f0>)
 80011fa:	0109      	lsls	r1, r1, #4
 80011fc:	1852      	adds	r2, r2, r1
 80011fe:	8991      	ldrh	r1, [r2, #12]
 8001200:	7803      	ldrb	r3, [r0, #0]
 8001202:	8952      	ldrh	r2, [r2, #10]
 8001204:	1a8a      	subs	r2, r1, r2
 8001206:	4293      	cmp	r3, r2
 8001208:	dae6      	bge.n	80011d8 <partS+0x220>
 800120a:	3301      	adds	r3, #1
 800120c:	7003      	strb	r3, [r0, #0]
 800120e:	e7e3      	b.n	80011d8 <partS+0x220>
				if(sel == 3 && pt[ptC].pos < 35) pt[ptC].pos++;
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <partS+0x2ec>)
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <partS+0x2f0>)
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	189b      	adds	r3, r3, r2
 800121a:	799a      	ldrb	r2, [r3, #6]
 800121c:	2a22      	cmp	r2, #34	; 0x22
 800121e:	d8db      	bhi.n	80011d8 <partS+0x220>
 8001220:	3201      	adds	r2, #1
				if(sel == 3 && pt[ptC].pos) pt[ptC].pos--;
 8001222:	719a      	strb	r2, [r3, #6]
 8001224:	e7d8      	b.n	80011d8 <partS+0x220>
			if(JOY_L){
 8001226:	2296      	movs	r2, #150	; 0x96
 8001228:	0052      	lsls	r2, r2, #1
 800122a:	4293      	cmp	r3, r2
 800122c:	d2d4      	bcs.n	80011d8 <partS+0x220>
				if(sel == 0){
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <partS+0x2d8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <partS+0x292>
					if(pt[ptC].cate) pt[ptC].cate--;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <partS+0x2ec>)
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <partS+0x2f0>)
 800123a:	7819      	ldrb	r1, [r3, #0]
 800123c:	0109      	lsls	r1, r1, #4
 800123e:	1850      	adds	r0, r2, r1
 8001240:	7903      	ldrb	r3, [r0, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0b0      	beq.n	80011a8 <partS+0x1f0>
 8001246:	3b01      	subs	r3, #1
 8001248:	e7ad      	b.n	80011a6 <partS+0x1ee>
				if(sel == 2 && ptInNum > 1) ptInNum--;
 800124a:	2b02      	cmp	r3, #2
 800124c:	d00b      	beq.n	8001266 <partS+0x2ae>
				if(sel == 3 && pt[ptC].pos) pt[ptC].pos--;
 800124e:	2b03      	cmp	r3, #3
 8001250:	d1c2      	bne.n	80011d8 <partS+0x220>
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <partS+0x2ec>)
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <partS+0x2f0>)
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	189b      	adds	r3, r3, r2
 800125c:	799a      	ldrb	r2, [r3, #6]
 800125e:	2a00      	cmp	r2, #0
 8001260:	d0ba      	beq.n	80011d8 <partS+0x220>
 8001262:	3a01      	subs	r2, #1
 8001264:	e7dd      	b.n	8001222 <partS+0x26a>
				if(sel == 2 && ptInNum > 1) ptInNum--;
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <partS+0x2e8>)
 8001268:	7813      	ldrb	r3, [r2, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d9b4      	bls.n	80011d8 <partS+0x220>
 800126e:	3b01      	subs	r3, #1
 8001270:	e7ac      	b.n	80011cc <partS+0x214>
			if(JOY_D && sel < 4) sel++;
 8001272:	2296      	movs	r2, #150	; 0x96
 8001274:	0052      	lsls	r2, r2, #1
 8001276:	4293      	cmp	r3, r2
 8001278:	d300      	bcc.n	800127c <partS+0x2c4>
 800127a:	e6dd      	b.n	8001038 <partS+0x80>
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <partS+0x2d8>)
 800127e:	7813      	ldrb	r3, [r2, #0]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d900      	bls.n	8001286 <partS+0x2ce>
 8001284:	e6d8      	b.n	8001038 <partS+0x80>
 8001286:	3301      	adds	r3, #1
 8001288:	e7b1      	b.n	80011ee <partS+0x236>
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	20000008 	.word	0x20000008
 8001290:	200008ab 	.word	0x200008ab
 8001294:	200008ad 	.word	0x200008ad
 8001298:	200008ae 	.word	0x200008ae
 800129c:	200005e2 	.word	0x200005e2
 80012a0:	200008a8 	.word	0x200008a8
 80012a4:	200008a0 	.word	0x200008a0
 80012a8:	20000660 	.word	0x20000660
 80012ac:	200008aa 	.word	0x200008aa
 80012b0:	200008a9 	.word	0x200008a9
 80012b4:	20000424 	.word	0x20000424
 80012b8:	00000e74 	.word	0x00000e74
 80012bc:	20000030 	.word	0x20000030
 80012c0:	2000001c 	.word	0x2000001c
			}else if(sel == 3){
 80012c4:	2e03      	cmp	r6, #3
 80012c6:	d143      	bne.n	8001350 <partS+0x398>
				udf = true;
 80012c8:	2301      	movs	r3, #1
				ptSetPosF ^= 1;
 80012ca:	4995      	ldr	r1, [pc, #596]	; (8001520 <partS+0x568>)
				udf = true;
 80012cc:	703b      	strb	r3, [r7, #0]
				ptSetPosF ^= 1;
 80012ce:	780a      	ldrb	r2, [r1, #0]
 80012d0:	4053      	eors	r3, r2
 80012d2:	700b      	strb	r3, [r1, #0]
				if(!ptSetPosF) led_clear();
 80012d4:	2a01      	cmp	r2, #1
 80012d6:	d038      	beq.n	800134a <partS+0x392>
		String bf = (String)calloc(0, sizeof(char) * 11);
 80012d8:	210b      	movs	r1, #11
 80012da:	2000      	movs	r0, #0
 80012dc:	f003 fdd4 	bl	8004e88 <calloc>
		udf = false;
 80012e0:	2400      	movs	r4, #0
		String bf = (String)calloc(0, sizeof(char) * 11);
 80012e2:	0005      	movs	r5, r0
		udf = false;
 80012e4:	703c      	strb	r4, [r7, #0]
		basicScreen();
 80012e6:	f7ff fa8f 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Save", 0);
 80012ea:	0023      	movs	r3, r4
 80012ec:	0021      	movs	r1, r4
 80012ee:	0020      	movs	r0, r4
 80012f0:	4a8c      	ldr	r2, [pc, #560]	; (8001524 <partS+0x56c>)
 80012f2:	f7ff fa79 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "Pls input inFormation", 1);
 80012f6:	2301      	movs	r3, #1
 80012f8:	0020      	movs	r0, r4
 80012fa:	0019      	movs	r1, r3
 80012fc:	4a8a      	ldr	r2, [pc, #552]	; (8001528 <partS+0x570>)
 80012fe:	f7ff fa73 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 3, "Cate:", 1);
 8001302:	2301      	movs	r3, #1
 8001304:	2103      	movs	r1, #3
 8001306:	0018      	movs	r0, r3
 8001308:	4a88      	ldr	r2, [pc, #544]	; (800152c <partS+0x574>)
 800130a:	f7ff fa6d 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_Puts(ptCate[pt[ptC].cate], &Font_6x8, 1);
 800130e:	4e88      	ldr	r6, [pc, #544]	; (8001530 <partS+0x578>)
 8001310:	4c88      	ldr	r4, [pc, #544]	; (8001534 <partS+0x57c>)
 8001312:	7833      	ldrb	r3, [r6, #0]
 8001314:	4f88      	ldr	r7, [pc, #544]	; (8001538 <partS+0x580>)
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	18e3      	adds	r3, r4, r3
 800131a:	791b      	ldrb	r3, [r3, #4]
 800131c:	4887      	ldr	r0, [pc, #540]	; (800153c <partS+0x584>)
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	2201      	movs	r2, #1
 8001322:	0039      	movs	r1, r7
 8001324:	5818      	ldr	r0, [r3, r0]
 8001326:	f001 f9e9 	bl	80026fc <SSD1306_Puts>
		SSD1306_PutsXY(1, 4, "Name:", 1);
 800132a:	2301      	movs	r3, #1
 800132c:	4a84      	ldr	r2, [pc, #528]	; (8001540 <partS+0x588>)
 800132e:	0018      	movs	r0, r3
 8001330:	2104      	movs	r1, #4
 8001332:	f7ff fa59 	bl	80007e8 <SSD1306_PutsXY>
		if(!pt[ptC].name[0])SSD1306_Puts("(NONE)", &Font_6x8, 1);
 8001336:	7833      	ldrb	r3, [r6, #0]
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	591a      	ldr	r2, [r3, r4]
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	2a00      	cmp	r2, #0
 8001340:	d064      	beq.n	800140c <partS+0x454>
		else SSD1306_Puts(pt[ptC].name, &Font_6x8, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	0039      	movs	r1, r7
 8001346:	5918      	ldr	r0, [r3, r4]
 8001348:	e063      	b.n	8001412 <partS+0x45a>
				if(!ptSetPosF) led_clear();
 800134a:	f7ff fa2b 	bl	80007a4 <led_clear>
 800134e:	e6a0      	b.n	8001092 <partS+0xda>
				if(!pt[ptC].name) buzFlag = 2;
 8001350:	4b77      	ldr	r3, [pc, #476]	; (8001530 <partS+0x578>)
 8001352:	4a78      	ldr	r2, [pc, #480]	; (8001534 <partS+0x57c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	589a      	ldr	r2, [r3, r2]
 800135a:	2a00      	cmp	r2, #0
 800135c:	d103      	bne.n	8001366 <partS+0x3ae>
 800135e:	4b79      	ldr	r3, [pc, #484]	; (8001544 <partS+0x58c>)
 8001360:	3202      	adds	r2, #2
 8001362:	701a      	strb	r2, [r3, #0]
 8001364:	e695      	b.n	8001092 <partS+0xda>
				else if(sel == 4){
 8001366:	2e04      	cmp	r6, #4
 8001368:	d000      	beq.n	800136c <partS+0x3b4>
 800136a:	e692      	b.n	8001092 <partS+0xda>
					udf = true;
 800136c:	2201      	movs	r2, #1
					firstF = 1;
 800136e:	4976      	ldr	r1, [pc, #472]	; (8001548 <partS+0x590>)
					udf = true;
 8001370:	703a      	strb	r2, [r7, #0]
					firstF = 1;
 8001372:	700a      	strb	r2, [r1, #0]
					pt[ptC].pos = ledPos;
 8001374:	4a75      	ldr	r2, [pc, #468]	; (800154c <partS+0x594>)
 8001376:	496f      	ldr	r1, [pc, #444]	; (8001534 <partS+0x57c>)
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	18cb      	adds	r3, r1, r3
 800137c:	719a      	strb	r2, [r3, #6]
					pt[ptC].store = ptInNum;
 800137e:	4a74      	ldr	r2, [pc, #464]	; (8001550 <partS+0x598>)
 8001380:	7812      	ldrb	r2, [r2, #0]
 8001382:	815a      	strh	r2, [r3, #10]
					logShift();
 8001384:	f7ff facc 	bl	8000920 <logShift>
					DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 8001388:	4b72      	ldr	r3, [pc, #456]	; (8001554 <partS+0x59c>)
 800138a:	0018      	movs	r0, r3
 800138c:	1c9a      	adds	r2, r3, #2
 800138e:	1c59      	adds	r1, r3, #1
 8001390:	f7ff f976 	bl	8000680 <DS3231_get_date>
					DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001394:	4f70      	ldr	r7, [pc, #448]	; (8001558 <partS+0x5a0>)
 8001396:	003a      	movs	r2, r7
 8001398:	1c79      	adds	r1, r7, #1
 800139a:	1cb8      	adds	r0, r7, #2
 800139c:	f7ff f8da 	bl	8000554 <DS3231_get_time>
					pLog[0].workCate = 1;
 80013a0:	4d6e      	ldr	r5, [pc, #440]	; (800155c <partS+0x5a4>)
 80013a2:	2201      	movs	r2, #1
					pLog[0].date = date;
 80013a4:	0028      	movs	r0, r5
 80013a6:	496b      	ldr	r1, [pc, #428]	; (8001554 <partS+0x59c>)
					pLog[0].workCate = 1;
 80013a8:	702a      	strb	r2, [r5, #0]
					pLog[0].date = date;
 80013aa:	3010      	adds	r0, #16
 80013ac:	0032      	movs	r2, r6
 80013ae:	f003 fda9 	bl	8004f04 <memcpy>
					pLog[0].time = time;
 80013b2:	0028      	movs	r0, r5
 80013b4:	2203      	movs	r2, #3
 80013b6:	0039      	movs	r1, r7
 80013b8:	300c      	adds	r0, #12
 80013ba:	f003 fda3 	bl	8004f04 <memcpy>
					sprintf(pLog[0].content[0], "%s/%s", pt[ptC].name, ptCate[pt[ptC].cate]);
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <partS+0x578>)
 80013c0:	495c      	ldr	r1, [pc, #368]	; (8001534 <partS+0x57c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4a5b      	ldr	r2, [pc, #364]	; (8001534 <partS+0x57c>)
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	589a      	ldr	r2, [r3, r2]
 80013ca:	18cb      	adds	r3, r1, r3
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	495b      	ldr	r1, [pc, #364]	; (800153c <partS+0x584>)
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	585b      	ldr	r3, [r3, r1]
 80013d4:	6868      	ldr	r0, [r5, #4]
 80013d6:	4962      	ldr	r1, [pc, #392]	; (8001560 <partS+0x5a8>)
 80013d8:	f003 fed8 	bl	800518c <siprintf>
					sprintf(pLog[0].content[1], "%dpcs (%d,%d)", pt[ptC].store, tempX, tempY);
 80013dc:	4a54      	ldr	r2, [pc, #336]	; (8001530 <partS+0x578>)
 80013de:	4955      	ldr	r1, [pc, #340]	; (8001534 <partS+0x57c>)
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	4b60      	ldr	r3, [pc, #384]	; (8001564 <partS+0x5ac>)
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	188a      	adds	r2, r1, r2
 80013e8:	495f      	ldr	r1, [pc, #380]	; (8001568 <partS+0x5b0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	7809      	ldrb	r1, [r1, #0]
 80013ee:	8952      	ldrh	r2, [r2, #10]
 80013f0:	9100      	str	r1, [sp, #0]
 80013f2:	68a8      	ldr	r0, [r5, #8]
 80013f4:	495d      	ldr	r1, [pc, #372]	; (800156c <partS+0x5b4>)
 80013f6:	f003 fec9 	bl	800518c <siprintf>
					ptC++;
 80013fa:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <partS+0x578>)
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <partS+0x578>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	7013      	strb	r3, [r2, #0]
					sel = 0;
 8001404:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <partS+0x5b8>)
 8001406:	701c      	strb	r4, [r3, #0]
}
 8001408:	0020      	movs	r0, r4
 800140a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(!pt[ptC].name[0])SSD1306_Puts("(NONE)", &Font_6x8, 1);
 800140c:	2201      	movs	r2, #1
 800140e:	0039      	movs	r1, r7
 8001410:	4858      	ldr	r0, [pc, #352]	; (8001574 <partS+0x5bc>)
		else SSD1306_Puts(pt[ptC].name, &Font_6x8, 1);
 8001412:	f001 f973 	bl	80026fc <SSD1306_Puts>
		if(pt[ptC].ptionC < 1) pt[ptC].ptionC = 1;
 8001416:	7833      	ldrb	r3, [r6, #0]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	18e3      	adds	r3, r4, r3
 800141c:	7a1a      	ldrb	r2, [r3, #8]
 800141e:	2a00      	cmp	r2, #0
 8001420:	d101      	bne.n	8001426 <partS+0x46e>
 8001422:	3201      	adds	r2, #1
 8001424:	721a      	strb	r2, [r3, #8]
		SSD1306_PutsXY(1, 5, "Store:", 1);
 8001426:	2301      	movs	r3, #1
 8001428:	2105      	movs	r1, #5
 800142a:	0018      	movs	r0, r3
 800142c:	4a52      	ldr	r2, [pc, #328]	; (8001578 <partS+0x5c0>)
 800142e:	f7ff f9db 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "%d/%d", ptInNum, pt[ptC].max * pt[ptC].ptionC);
 8001432:	7832      	ldrb	r2, [r6, #0]
 8001434:	0028      	movs	r0, r5
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	18a2      	adds	r2, r4, r2
 800143a:	8991      	ldrh	r1, [r2, #12]
 800143c:	7a13      	ldrb	r3, [r2, #8]
 800143e:	4a44      	ldr	r2, [pc, #272]	; (8001550 <partS+0x598>)
 8001440:	434b      	muls	r3, r1
 8001442:	7812      	ldrb	r2, [r2, #0]
 8001444:	494d      	ldr	r1, [pc, #308]	; (800157c <partS+0x5c4>)
 8001446:	f003 fea1 	bl	800518c <siprintf>
		SSD1306_Puts(bf, &Font_6x8, 1);
 800144a:	2201      	movs	r2, #1
 800144c:	0039      	movs	r1, r7
 800144e:	0028      	movs	r0, r5
 8001450:	f001 f954 	bl	80026fc <SSD1306_Puts>
		if(ptSetPosF){
 8001454:	4b32      	ldr	r3, [pc, #200]	; (8001520 <partS+0x568>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d031      	beq.n	80014c0 <partS+0x508>
			led_clear();
 800145c:	f7ff f9a2 	bl	80007a4 <led_clear>
			for(uint8_t i = 0; i < 36; i++){
 8001460:	2600      	movs	r6, #0
				if(pt[i].store) led_color(pt[i].pos, 4, 0, 0);
 8001462:	8963      	ldrh	r3, [r4, #10]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <partS+0x4bc>
 8001468:	2300      	movs	r3, #0
 800146a:	2104      	movs	r1, #4
 800146c:	001a      	movs	r2, r3
 800146e:	79a0      	ldrb	r0, [r4, #6]
 8001470:	f7ff f962 	bl	8000738 <led_color>
				if(led_cmp(i, 0, 0, 0) == 3) led_color(i, 0, 4, 0);
 8001474:	2300      	movs	r3, #0
 8001476:	0030      	movs	r0, r6
 8001478:	001a      	movs	r2, r3
 800147a:	0019      	movs	r1, r3
 800147c:	f7ff f99c 	bl	80007b8 <led_cmp>
 8001480:	2803      	cmp	r0, #3
 8001482:	d105      	bne.n	8001490 <partS+0x4d8>
 8001484:	2300      	movs	r3, #0
 8001486:	2204      	movs	r2, #4
 8001488:	0019      	movs	r1, r3
 800148a:	0030      	movs	r0, r6
 800148c:	f7ff f954 	bl	8000738 <led_color>
			for(uint8_t i = 0; i < 36; i++){
 8001490:	3601      	adds	r6, #1
 8001492:	b2f6      	uxtb	r6, r6
 8001494:	3410      	adds	r4, #16
 8001496:	2e24      	cmp	r6, #36	; 0x24
 8001498:	d1e3      	bne.n	8001462 <partS+0x4aa>
			ledPos = (6 - tempY) * 6 + tempX - 1;
 800149a:	2006      	movs	r0, #6
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <partS+0x5b0>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	1ac3      	subs	r3, r0, r3
 80014a2:	4358      	muls	r0, r3
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <partS+0x5ac>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	18c0      	adds	r0, r0, r3
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <partS+0x594>)
 80014ae:	b2c0      	uxtb	r0, r0
 80014b0:	7018      	strb	r0, [r3, #0]
			led_color(ledPos, 4, 4, 4);
 80014b2:	2304      	movs	r3, #4
 80014b4:	001a      	movs	r2, r3
 80014b6:	0019      	movs	r1, r3
 80014b8:	f7ff f93e 	bl	8000738 <led_color>
			led_update();
 80014bc:	f7ff f948 	bl	8000750 <led_update>
		SSD1306_PutsXY(1, 6, "Position ", !ptSetPosF);
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <partS+0x568>)
 80014c2:	2106      	movs	r1, #6
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2001      	movs	r0, #1
 80014c8:	425a      	negs	r2, r3
 80014ca:	4153      	adcs	r3, r2
 80014cc:	4a2c      	ldr	r2, [pc, #176]	; (8001580 <partS+0x5c8>)
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f7ff f98a 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "(%d, %d)", tempX, tempY);
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <partS+0x5b0>)
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <partS+0x5ac>)
 80014d8:	0028      	movs	r0, r5
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	7812      	ldrb	r2, [r2, #0]
 80014de:	4929      	ldr	r1, [pc, #164]	; (8001584 <partS+0x5cc>)
 80014e0:	f003 fe54 	bl	800518c <siprintf>
		SSD1306_Puts(bf, &Font_6x8, !ptSetPosF);
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <partS+0x568>)
 80014e6:	0039      	movs	r1, r7
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	0028      	movs	r0, r5
 80014ec:	4253      	negs	r3, r2
 80014ee:	415a      	adcs	r2, r3
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	f001 f903 	bl	80026fc <SSD1306_Puts>
		SSD1306_PutsXY(1, 7, "Enter", 1);
 80014f6:	2301      	movs	r3, #1
 80014f8:	2107      	movs	r1, #7
 80014fa:	0018      	movs	r0, r3
 80014fc:	4a22      	ldr	r2, [pc, #136]	; (8001588 <partS+0x5d0>)
 80014fe:	f7ff f973 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, sel + 3, ">", 1);
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <partS+0x5b8>)
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <partS+0x5d4>)
 8001506:	7819      	ldrb	r1, [r3, #0]
 8001508:	2000      	movs	r0, #0
 800150a:	3103      	adds	r1, #3
 800150c:	2301      	movs	r3, #1
 800150e:	b2c9      	uxtb	r1, r1
 8001510:	f7ff f96a 	bl	80007e8 <SSD1306_PutsXY>
		free(bf);
 8001514:	0028      	movs	r0, r5
 8001516:	f003 fceb 	bl	8004ef0 <free>
		SSD1306_UpdateScreen();
 800151a:	f001 f9f5 	bl	8002908 <SSD1306_UpdateScreen>
 800151e:	e5bc      	b.n	800109a <partS+0xe2>
 8001520:	200008a9 	.word	0x200008a9
 8001524:	08006323 	.word	0x08006323
 8001528:	08006329 	.word	0x08006329
 800152c:	0800633f 	.word	0x0800633f
 8001530:	200008a0 	.word	0x200008a0
 8001534:	20000660 	.word	0x20000660
 8001538:	20000000 	.word	0x20000000
 800153c:	20000020 	.word	0x20000020
 8001540:	08006345 	.word	0x08006345
 8001544:	2000042a 	.word	0x2000042a
 8001548:	20000008 	.word	0x20000008
 800154c:	200005e2 	.word	0x200005e2
 8001550:	200008a8 	.word	0x200008a8
 8001554:	2000042c 	.word	0x2000042c
 8001558:	200008af 	.word	0x200008af
 800155c:	200005e8 	.word	0x200005e8
 8001560:	0800634b 	.word	0x0800634b
 8001564:	200008ad 	.word	0x200008ad
 8001568:	200008ae 	.word	0x200008ae
 800156c:	08006351 	.word	0x08006351
 8001570:	200008ab 	.word	0x200008ab
 8001574:	0800635f 	.word	0x0800635f
 8001578:	08006366 	.word	0x08006366
 800157c:	0800636d 	.word	0x0800636d
 8001580:	08006373 	.word	0x08006373
 8001584:	0800637d 	.word	0x0800637d
 8001588:	08006386 	.word	0x08006386
 800158c:	08006321 	.word	0x08006321

08001590 <pUseM>:

MODE pUseM(){
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(firstF){
 8001592:	4d89      	ldr	r5, [pc, #548]	; (80017b8 <pUseM+0x228>)
 8001594:	782b      	ldrb	r3, [r5, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <pUseM+0x18>
		firstF = false;
 800159a:	2300      	movs	r3, #0
		tempX = 1;
 800159c:	4a87      	ldr	r2, [pc, #540]	; (80017bc <pUseM+0x22c>)
		firstF = false;
 800159e:	702b      	strb	r3, [r5, #0]
		tempX = 1;
 80015a0:	3301      	adds	r3, #1
 80015a2:	7013      	strb	r3, [r2, #0]
		tempY = 1;
 80015a4:	4a86      	ldr	r2, [pc, #536]	; (80017c0 <pUseM+0x230>)
 80015a6:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 80015a8:	4b86      	ldr	r3, [pc, #536]	; (80017c4 <pUseM+0x234>)
 80015aa:	4c87      	ldr	r4, [pc, #540]	; (80017c8 <pUseM+0x238>)
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	2a63      	cmp	r2, #99	; 0x63
 80015b0:	d925      	bls.n	80015fe <pUseM+0x6e>
		reC = 0;
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
		if(JOY_R && tempX < 6) tempX++;
 80015b6:	23fa      	movs	r3, #250	; 0xfa
 80015b8:	4984      	ldr	r1, [pc, #528]	; (80017cc <pUseM+0x23c>)
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	884a      	ldrh	r2, [r1, #2]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d933      	bls.n	800162a <pUseM+0x9a>
 80015c2:	487e      	ldr	r0, [pc, #504]	; (80017bc <pUseM+0x22c>)
 80015c4:	7803      	ldrb	r3, [r0, #0]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d801      	bhi.n	80015ce <pUseM+0x3e>
 80015ca:	3301      	adds	r3, #1
		if(JOY_L && tempX > 1) tempX--;
 80015cc:	7003      	strb	r3, [r0, #0]
		if(JOY_U && tempY < 6) tempY++;
 80015ce:	880b      	ldrh	r3, [r1, #0]
 80015d0:	21fa      	movs	r1, #250	; 0xfa
 80015d2:	0109      	lsls	r1, r1, #4
 80015d4:	428b      	cmp	r3, r1
 80015d6:	d932      	bls.n	800163e <pUseM+0xae>
 80015d8:	4879      	ldr	r0, [pc, #484]	; (80017c0 <pUseM+0x230>)
 80015da:	7801      	ldrb	r1, [r0, #0]
 80015dc:	2905      	cmp	r1, #5
 80015de:	d801      	bhi.n	80015e4 <pUseM+0x54>
 80015e0:	3101      	adds	r1, #1
		if(JOY_D && tempY > 1) tempY--;
 80015e2:	7001      	strb	r1, [r0, #0]
		if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 80015e4:	3a2d      	subs	r2, #45	; 0x2d
 80015e6:	3aff      	subs	r2, #255	; 0xff
 80015e8:	4979      	ldr	r1, [pc, #484]	; (80017d0 <pUseM+0x240>)
 80015ea:	b292      	uxth	r2, r2
 80015ec:	428a      	cmp	r2, r1
 80015ee:	d804      	bhi.n	80015fa <pUseM+0x6a>
 80015f0:	3b2d      	subs	r3, #45	; 0x2d
 80015f2:	3bff      	subs	r3, #255	; 0xff
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	428b      	cmp	r3, r1
 80015f8:	d901      	bls.n	80015fe <pUseM+0x6e>
 80015fa:	2301      	movs	r3, #1
 80015fc:	7023      	strb	r3, [r4, #0]
	}
	if(JOY_P){
 80015fe:	20a0      	movs	r0, #160	; 0xa0
 8001600:	2104      	movs	r1, #4
 8001602:	05c0      	lsls	r0, r0, #23
 8001604:	f002 f8b8 	bl	8003778 <HAL_GPIO_ReadPin>
		if(!oldsw){
 8001608:	4b72      	ldr	r3, [pc, #456]	; (80017d4 <pUseM+0x244>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4318      	orrs	r0, r3
 800160e:	b2c0      	uxtb	r0, r0
 8001610:	2800      	cmp	r0, #0
 8001612:	d121      	bne.n	8001658 <pUseM+0xc8>
			swS();
 8001614:	f7ff f906 	bl	8000824 <swS>
			if(usePos != 255){
 8001618:	4b6f      	ldr	r3, [pc, #444]	; (80017d8 <pUseM+0x248>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2bff      	cmp	r3, #255	; 0xff
 800161e:	d018      	beq.n	8001652 <pUseM+0xc2>
				firstF = true;
 8001620:	2301      	movs	r3, #1
				udf = true;
				return USE;
 8001622:	2003      	movs	r0, #3
				firstF = true;
 8001624:	702b      	strb	r3, [r5, #0]
				udf = true;
 8001626:	7023      	strb	r3, [r4, #0]
		led_update();
		SSD1306_UpdateScreen();
	}

	return PUSE;
}
 8001628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(JOY_L && tempX > 1) tempX--;
 800162a:	2396      	movs	r3, #150	; 0x96
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	429a      	cmp	r2, r3
 8001630:	d2cd      	bcs.n	80015ce <pUseM+0x3e>
 8001632:	4862      	ldr	r0, [pc, #392]	; (80017bc <pUseM+0x22c>)
 8001634:	7803      	ldrb	r3, [r0, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d9c9      	bls.n	80015ce <pUseM+0x3e>
 800163a:	3b01      	subs	r3, #1
 800163c:	e7c6      	b.n	80015cc <pUseM+0x3c>
		if(JOY_D && tempY > 1) tempY--;
 800163e:	2196      	movs	r1, #150	; 0x96
 8001640:	0049      	lsls	r1, r1, #1
 8001642:	428b      	cmp	r3, r1
 8001644:	d2ce      	bcs.n	80015e4 <pUseM+0x54>
 8001646:	485e      	ldr	r0, [pc, #376]	; (80017c0 <pUseM+0x230>)
 8001648:	7801      	ldrb	r1, [r0, #0]
 800164a:	2901      	cmp	r1, #1
 800164c:	d9ca      	bls.n	80015e4 <pUseM+0x54>
 800164e:	3901      	subs	r1, #1
 8001650:	e7c7      	b.n	80015e2 <pUseM+0x52>
			}else buzFlag = 2;
 8001652:	2202      	movs	r2, #2
 8001654:	4b61      	ldr	r3, [pc, #388]	; (80017dc <pUseM+0x24c>)
 8001656:	701a      	strb	r2, [r3, #0]
	if(udf){
 8001658:	7823      	ldrb	r3, [r4, #0]
	return PUSE;
 800165a:	2002      	movs	r0, #2
	if(udf){
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0e3      	beq.n	8001628 <pUseM+0x98>
		udf = false;
 8001660:	2700      	movs	r7, #0
 8001662:	7027      	strb	r7, [r4, #0]
		basicScreen();
 8001664:	f7ff f8d0 	bl	8000808 <basicScreen>
		ledPos = (6 - tempY) * 6 + tempX - 1;
 8001668:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <pUseM+0x230>)
 800166a:	4e5d      	ldr	r6, [pc, #372]	; (80017e0 <pUseM+0x250>)
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	2306      	movs	r3, #6
 8001670:	1a9a      	subs	r2, r3, r2
 8001672:	4353      	muls	r3, r2
 8001674:	4a51      	ldr	r2, [pc, #324]	; (80017bc <pUseM+0x22c>)
		SSD1306_PutsXY(0, 0, "#Use", 0);
 8001676:	0039      	movs	r1, r7
		ledPos = (6 - tempY) * 6 + tempX - 1;
 8001678:	7812      	ldrb	r2, [r2, #0]
		SSD1306_PutsXY(0, 0, "#Use", 0);
 800167a:	0038      	movs	r0, r7
		ledPos = (6 - tempY) * 6 + tempX - 1;
 800167c:	3a01      	subs	r2, #1
 800167e:	189b      	adds	r3, r3, r2
 8001680:	7033      	strb	r3, [r6, #0]
		SSD1306_PutsXY(0, 0, "#Use", 0);
 8001682:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <pUseM+0x254>)
 8001684:	003b      	movs	r3, r7
 8001686:	f7ff f8af 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "Select part", 1);
 800168a:	2301      	movs	r3, #1
 800168c:	0038      	movs	r0, r7
 800168e:	0019      	movs	r1, r3
 8001690:	4a55      	ldr	r2, [pc, #340]	; (80017e8 <pUseM+0x258>)
 8001692:	f7ff f8a9 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 8001696:	4c55      	ldr	r4, [pc, #340]	; (80017ec <pUseM+0x25c>)
		SSD1306_PutsXY(0, 1, "Select part", 1);
 8001698:	0025      	movs	r5, r4
			if(pt[i].pos == ledPos && pt[i].store){
 800169a:	79aa      	ldrb	r2, [r5, #6]
 800169c:	7833      	ldrb	r3, [r6, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d174      	bne.n	800178c <pUseM+0x1fc>
 80016a2:	896b      	ldrh	r3, [r5, #10]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d071      	beq.n	800178c <pUseM+0x1fc>
				String bf = (String)calloc(0, sizeof(char) * 4);
 80016a8:	2104      	movs	r1, #4
 80016aa:	2000      	movs	r0, #0
 80016ac:	f003 fbec 	bl	8004e88 <calloc>
				SSD1306_PutsXY(1, 3, "Cate:", 1);
 80016b0:	2301      	movs	r3, #1
				usePos = i;
 80016b2:	4e49      	ldr	r6, [pc, #292]	; (80017d8 <pUseM+0x248>)
				String bf = (String)calloc(0, sizeof(char) * 4);
 80016b4:	0005      	movs	r5, r0
				SSD1306_PutsXY(1, 3, "Cate:", 1);
 80016b6:	2103      	movs	r1, #3
 80016b8:	0018      	movs	r0, r3
 80016ba:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <pUseM+0x260>)
				usePos = i;
 80016bc:	7037      	strb	r7, [r6, #0]
				SSD1306_PutsXY(1, 3, "Cate:", 1);
 80016be:	f7ff f893 	bl	80007e8 <SSD1306_PutsXY>
				SSD1306_Puts(ptCate[pt[usePos].cate], &Font_6x8, 1);
 80016c2:	7833      	ldrb	r3, [r6, #0]
 80016c4:	4a49      	ldr	r2, [pc, #292]	; (80017ec <pUseM+0x25c>)
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	18d3      	adds	r3, r2, r3
 80016ca:	791b      	ldrb	r3, [r3, #4]
 80016cc:	4f49      	ldr	r7, [pc, #292]	; (80017f4 <pUseM+0x264>)
 80016ce:	484a      	ldr	r0, [pc, #296]	; (80017f8 <pUseM+0x268>)
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	2201      	movs	r2, #1
 80016d4:	0039      	movs	r1, r7
 80016d6:	5818      	ldr	r0, [r3, r0]
 80016d8:	f001 f810 	bl	80026fc <SSD1306_Puts>
				SSD1306_PutsXY(1, 4, "Name:", 1);
 80016dc:	2301      	movs	r3, #1
 80016de:	2104      	movs	r1, #4
 80016e0:	0018      	movs	r0, r3
 80016e2:	4a46      	ldr	r2, [pc, #280]	; (80017fc <pUseM+0x26c>)
 80016e4:	f7ff f880 	bl	80007e8 <SSD1306_PutsXY>
				SSD1306_Puts(pt[usePos].name, &Font_6x8, 1);
 80016e8:	7833      	ldrb	r3, [r6, #0]
 80016ea:	4a40      	ldr	r2, [pc, #256]	; (80017ec <pUseM+0x25c>)
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	5898      	ldr	r0, [r3, r2]
 80016f0:	0039      	movs	r1, r7
 80016f2:	2201      	movs	r2, #1
 80016f4:	f001 f802 	bl	80026fc <SSD1306_Puts>
				SSD1306_PutsXY(1, 5, "Store:", 1);
 80016f8:	2301      	movs	r3, #1
 80016fa:	2105      	movs	r1, #5
 80016fc:	0018      	movs	r0, r3
 80016fe:	4a40      	ldr	r2, [pc, #256]	; (8001800 <pUseM+0x270>)
 8001700:	f7ff f872 	bl	80007e8 <SSD1306_PutsXY>
				sprintf(bf, "%d ", pt[usePos].store);
 8001704:	7833      	ldrb	r3, [r6, #0]
 8001706:	4a39      	ldr	r2, [pc, #228]	; (80017ec <pUseM+0x25c>)
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	18d3      	adds	r3, r2, r3
 800170c:	895a      	ldrh	r2, [r3, #10]
 800170e:	493d      	ldr	r1, [pc, #244]	; (8001804 <pUseM+0x274>)
 8001710:	0028      	movs	r0, r5
 8001712:	f003 fd3b 	bl	800518c <siprintf>
				SSD1306_Puts(bf, &Font_6x8, 1);
 8001716:	2201      	movs	r2, #1
 8001718:	0039      	movs	r1, r7
 800171a:	0028      	movs	r0, r5
 800171c:	f000 ffee 	bl	80026fc <SSD1306_Puts>
				free(bf);
 8001720:	0028      	movs	r0, r5
 8001722:	f003 fbe5 	bl	8004ef0 <free>
		led_clear();
 8001726:	f7ff f83d 	bl	80007a4 <led_clear>
		for(uint8_t i = 0; i < 36; i++){
 800172a:	2500      	movs	r5, #0
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 800172c:	2604      	movs	r6, #4
 800172e:	8963      	ldrh	r3, [r4, #10]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00c      	beq.n	800174e <pUseM+0x1be>
 8001734:	7921      	ldrb	r1, [r4, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	0033      	movs	r3, r6
 800173a:	79a0      	ldrb	r0, [r4, #6]
 800173c:	2901      	cmp	r1, #1
 800173e:	d004      	beq.n	800174a <pUseM+0x1ba>
 8001740:	0032      	movs	r2, r6
 8001742:	2903      	cmp	r1, #3
 8001744:	d132      	bne.n	80017ac <pUseM+0x21c>
 8001746:	2100      	movs	r1, #0
 8001748:	2304      	movs	r3, #4
 800174a:	f7fe fff5 	bl	8000738 <led_color>
			if(!led_cmp(i, 0, 0, 0)) led_color(i, 0, 4, 0);
 800174e:	2300      	movs	r3, #0
 8001750:	0028      	movs	r0, r5
 8001752:	0019      	movs	r1, r3
 8001754:	001a      	movs	r2, r3
 8001756:	f7ff f82f 	bl	80007b8 <led_cmp>
 800175a:	1e01      	subs	r1, r0, #0
 800175c:	d104      	bne.n	8001768 <pUseM+0x1d8>
 800175e:	0003      	movs	r3, r0
 8001760:	0032      	movs	r2, r6
 8001762:	0028      	movs	r0, r5
 8001764:	f7fe ffe8 	bl	8000738 <led_color>
		for(uint8_t i = 0; i < 36; i++){
 8001768:	3501      	adds	r5, #1
 800176a:	b2ed      	uxtb	r5, r5
 800176c:	3410      	adds	r4, #16
 800176e:	2d24      	cmp	r5, #36	; 0x24
 8001770:	d1dd      	bne.n	800172e <pUseM+0x19e>
		led_color(ledPos, 4, 4, 4);
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <pUseM+0x250>)
 8001774:	7818      	ldrb	r0, [r3, #0]
 8001776:	2304      	movs	r3, #4
 8001778:	001a      	movs	r2, r3
 800177a:	0019      	movs	r1, r3
 800177c:	f7fe ffdc 	bl	8000738 <led_color>
		led_update();
 8001780:	f7fe ffe6 	bl	8000750 <led_update>
		SSD1306_UpdateScreen();
 8001784:	f001 f8c0 	bl	8002908 <SSD1306_UpdateScreen>
	return PUSE;
 8001788:	2002      	movs	r0, #2
 800178a:	e74d      	b.n	8001628 <pUseM+0x98>
				usePos = 255;
 800178c:	22ff      	movs	r2, #255	; 0xff
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <pUseM+0x248>)
		for(uint8_t i = 0; i < 36; i++){
 8001790:	3701      	adds	r7, #1
				usePos = 255;
 8001792:	701a      	strb	r2, [r3, #0]
				SSD1306_PutsXY(1, 3, "(Empty)", 1);
 8001794:	2301      	movs	r3, #1
 8001796:	2103      	movs	r1, #3
 8001798:	0018      	movs	r0, r3
 800179a:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <pUseM+0x278>)
		for(uint8_t i = 0; i < 36; i++){
 800179c:	b2ff      	uxtb	r7, r7
				SSD1306_PutsXY(1, 3, "(Empty)", 1);
 800179e:	f7ff f823 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 80017a2:	3510      	adds	r5, #16
 80017a4:	2f24      	cmp	r7, #36	; 0x24
 80017a6:	d000      	beq.n	80017aa <pUseM+0x21a>
 80017a8:	e777      	b.n	800169a <pUseM+0x10a>
 80017aa:	e7bc      	b.n	8001726 <pUseM+0x196>
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 80017ac:	2902      	cmp	r1, #2
 80017ae:	d000      	beq.n	80017b2 <pUseM+0x222>
 80017b0:	2201      	movs	r2, #1
 80017b2:	0031      	movs	r1, r6
 80017b4:	2300      	movs	r3, #0
 80017b6:	e7c8      	b.n	800174a <pUseM+0x1ba>
 80017b8:	20000008 	.word	0x20000008
 80017bc:	200008ad 	.word	0x200008ad
 80017c0:	200008ae 	.word	0x200008ae
 80017c4:	200008aa 	.word	0x200008aa
 80017c8:	20000030 	.word	0x20000030
 80017cc:	20000424 	.word	0x20000424
 80017d0:	00000e74 	.word	0x00000e74
 80017d4:	2000001c 	.word	0x2000001c
 80017d8:	20000031 	.word	0x20000031
 80017dc:	2000042a 	.word	0x2000042a
 80017e0:	200005e2 	.word	0x200005e2
 80017e4:	0800638c 	.word	0x0800638c
 80017e8:	08006391 	.word	0x08006391
 80017ec:	20000660 	.word	0x20000660
 80017f0:	0800633f 	.word	0x0800633f
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000020 	.word	0x20000020
 80017fc:	08006345 	.word	0x08006345
 8001800:	08006366 	.word	0x08006366
 8001804:	0800639d 	.word	0x0800639d
 8001808:	080063a1 	.word	0x080063a1

0800180c <use>:

MODE use(){
 800180c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(firstF){
 800180e:	4d5a      	ldr	r5, [pc, #360]	; (8001978 <use+0x16c>)
 8001810:	782b      	ldrb	r3, [r5, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <use+0x12>
		firstF = false;
 8001816:	2300      	movs	r3, #0
		ptInNum = 0;
 8001818:	4a58      	ldr	r2, [pc, #352]	; (800197c <use+0x170>)
		firstF = false;
 800181a:	702b      	strb	r3, [r5, #0]
		ptInNum = 0;
 800181c:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 800181e:	4b58      	ldr	r3, [pc, #352]	; (8001980 <use+0x174>)
 8001820:	4f58      	ldr	r7, [pc, #352]	; (8001984 <use+0x178>)
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	2a63      	cmp	r2, #99	; 0x63
 8001826:	d915      	bls.n	8001854 <use+0x48>
		reC = 0;
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
		if(JOY_U && ptInNum < pt[usePos].store) ptInNum++;
 800182c:	22fa      	movs	r2, #250	; 0xfa
 800182e:	4b56      	ldr	r3, [pc, #344]	; (8001988 <use+0x17c>)
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	4293      	cmp	r3, r2
 8001836:	d960      	bls.n	80018fa <use+0xee>
 8001838:	4a54      	ldr	r2, [pc, #336]	; (800198c <use+0x180>)
 800183a:	4850      	ldr	r0, [pc, #320]	; (800197c <use+0x170>)
 800183c:	7811      	ldrb	r1, [r2, #0]
 800183e:	4a54      	ldr	r2, [pc, #336]	; (8001990 <use+0x184>)
 8001840:	0109      	lsls	r1, r1, #4
 8001842:	1852      	adds	r2, r2, r1
 8001844:	7803      	ldrb	r3, [r0, #0]
 8001846:	8952      	ldrh	r2, [r2, #10]
 8001848:	429a      	cmp	r2, r3
 800184a:	d901      	bls.n	8001850 <use+0x44>
 800184c:	3301      	adds	r3, #1
 800184e:	7003      	strb	r3, [r0, #0]
		if(JOY_D && ptInNum > 1) ptInNum--;
		if(JOY_U || JOY_D) udf = 1;
 8001850:	2301      	movs	r3, #1
 8001852:	703b      	strb	r3, [r7, #0]
	}
	if(JOY_P){
 8001854:	20a0      	movs	r0, #160	; 0xa0
 8001856:	2104      	movs	r1, #4
 8001858:	05c0      	lsls	r0, r0, #23
 800185a:	f001 ff8d 	bl	8003778 <HAL_GPIO_ReadPin>
		if(!oldsw){
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <use+0x188>)
 8001860:	781c      	ldrb	r4, [r3, #0]
 8001862:	4304      	orrs	r4, r0
 8001864:	b2e4      	uxtb	r4, r4
 8001866:	2c00      	cmp	r4, #0
 8001868:	d152      	bne.n	8001910 <use+0x104>
			swS();
 800186a:	f7fe ffdb 	bl	8000824 <swS>
			firstF = 1;
 800186e:	2301      	movs	r3, #1
			udf = 1;
 8001870:	4a44      	ldr	r2, [pc, #272]	; (8001984 <use+0x178>)
			firstF = 1;
 8001872:	702b      	strb	r3, [r5, #0]
			udf = 1;
 8001874:	7013      	strb	r3, [r2, #0]

			logShift();
 8001876:	f7ff f853 	bl	8000920 <logShift>
			DS3231_get_date(&date.day, &date.month, (uint8_t*)&date.year);
 800187a:	4f47      	ldr	r7, [pc, #284]	; (8001998 <use+0x18c>)
 800187c:	0038      	movs	r0, r7
 800187e:	1cba      	adds	r2, r7, #2
 8001880:	1c79      	adds	r1, r7, #1
 8001882:	f7fe fefd 	bl	8000680 <DS3231_get_date>
			DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001886:	4d45      	ldr	r5, [pc, #276]	; (800199c <use+0x190>)
 8001888:	002a      	movs	r2, r5
 800188a:	1c69      	adds	r1, r5, #1
 800188c:	1ca8      	adds	r0, r5, #2
 800188e:	f7fe fe61 	bl	8000554 <DS3231_get_time>
			pLog[0].workCate = 2;
 8001892:	4e43      	ldr	r6, [pc, #268]	; (80019a0 <use+0x194>)
 8001894:	2302      	movs	r3, #2
			pLog[0].date = date;
 8001896:	0030      	movs	r0, r6
 8001898:	0039      	movs	r1, r7
			pLog[0].workCate = 2;
 800189a:	7033      	strb	r3, [r6, #0]
			pLog[0].date = date;
 800189c:	2204      	movs	r2, #4
 800189e:	3010      	adds	r0, #16
 80018a0:	f003 fb30 	bl	8004f04 <memcpy>
			pLog[0].time = time ;
 80018a4:	0030      	movs	r0, r6
 80018a6:	0029      	movs	r1, r5
 80018a8:	2203      	movs	r2, #3
 80018aa:	300c      	adds	r0, #12
 80018ac:	f003 fb2a 	bl	8004f04 <memcpy>
			sprintf(pLog[0].content[0], "%s/%s", pt[usePos].name, ptCate[pt[usePos].cate]);
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <use+0x180>)
 80018b2:	4d37      	ldr	r5, [pc, #220]	; (8001990 <use+0x184>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	493b      	ldr	r1, [pc, #236]	; (80019a4 <use+0x198>)
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	595a      	ldr	r2, [r3, r5]
 80018bc:	18eb      	adds	r3, r5, r3
 80018be:	791b      	ldrb	r3, [r3, #4]
 80018c0:	6870      	ldr	r0, [r6, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	585b      	ldr	r3, [r3, r1]
 80018c6:	4938      	ldr	r1, [pc, #224]	; (80019a8 <use+0x19c>)
 80018c8:	f003 fc60 	bl	800518c <siprintf>
			sprintf(pLog[0].content[1], "%dpcs (%d,%d)", ptInNum, tempX, tempY);
 80018cc:	4937      	ldr	r1, [pc, #220]	; (80019ac <use+0x1a0>)
 80018ce:	4f2b      	ldr	r7, [pc, #172]	; (800197c <use+0x170>)
 80018d0:	7809      	ldrb	r1, [r1, #0]
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <use+0x1a4>)
 80018d4:	783a      	ldrb	r2, [r7, #0]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	9100      	str	r1, [sp, #0]
 80018da:	68b0      	ldr	r0, [r6, #8]
 80018dc:	4935      	ldr	r1, [pc, #212]	; (80019b4 <use+0x1a8>)
 80018de:	f003 fc55 	bl	800518c <siprintf>
			if(ptInNum == pt[usePos].store) return REFILL;
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <use+0x180>)
 80018e4:	7839      	ldrb	r1, [r7, #0]
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	18ad      	adds	r5, r5, r2
 80018ec:	896b      	ldrh	r3, [r5, #10]
 80018ee:	4299      	cmp	r1, r3
 80018f0:	d03f      	beq.n	8001972 <use+0x166>
			else {
				pt[usePos].store -= ptInNum;
 80018f2:	1a5b      	subs	r3, r3, r1
 80018f4:	816b      	strh	r3, [r5, #10]
		SSD1306_PutsXY(0, 3, bf, 1);
		SSD1306_UpdateScreen();
		free(bf);
	}
	return USE;
}
 80018f6:	0020      	movs	r0, r4
 80018f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(JOY_D && ptInNum > 1) ptInNum--;
 80018fa:	2296      	movs	r2, #150	; 0x96
 80018fc:	0052      	lsls	r2, r2, #1
 80018fe:	4293      	cmp	r3, r2
 8001900:	d2a8      	bcs.n	8001854 <use+0x48>
 8001902:	4a1e      	ldr	r2, [pc, #120]	; (800197c <use+0x170>)
 8001904:	7813      	ldrb	r3, [r2, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d9a2      	bls.n	8001850 <use+0x44>
 800190a:	3b01      	subs	r3, #1
 800190c:	7013      	strb	r3, [r2, #0]
 800190e:	e79f      	b.n	8001850 <use+0x44>
	if(udf){
 8001910:	783b      	ldrb	r3, [r7, #0]
	return USE;
 8001912:	2403      	movs	r4, #3
	if(udf){
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ee      	beq.n	80018f6 <use+0xea>
		String bf = (String)calloc(0, sizeof(char) * 12);
 8001918:	210c      	movs	r1, #12
 800191a:	2000      	movs	r0, #0
 800191c:	f003 fab4 	bl	8004e88 <calloc>
		udf = false;
 8001920:	2500      	movs	r5, #0
		String bf = (String)calloc(0, sizeof(char) * 12);
 8001922:	0006      	movs	r6, r0
		udf = false;
 8001924:	703d      	strb	r5, [r7, #0]
		basicScreen();
 8001926:	f7fe ff6f 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Use", 0);
 800192a:	002b      	movs	r3, r5
 800192c:	0029      	movs	r1, r5
 800192e:	0028      	movs	r0, r5
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <use+0x1ac>)
 8001932:	f7fe ff59 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "How Many use?", 1);
 8001936:	2301      	movs	r3, #1
 8001938:	0028      	movs	r0, r5
 800193a:	0019      	movs	r1, r3
 800193c:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <use+0x1b0>)
 800193e:	f7fe ff53 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "(%d / %d)", ptInNum, pt[usePos].store);
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <use+0x180>)
 8001944:	0030      	movs	r0, r6
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <use+0x184>)
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	189b      	adds	r3, r3, r2
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <use+0x170>)
 8001950:	895b      	ldrh	r3, [r3, #10]
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	491a      	ldr	r1, [pc, #104]	; (80019c0 <use+0x1b4>)
 8001956:	f003 fc19 	bl	800518c <siprintf>
		SSD1306_PutsXY(0, 3, bf, 1);
 800195a:	0028      	movs	r0, r5
 800195c:	2301      	movs	r3, #1
 800195e:	0032      	movs	r2, r6
 8001960:	0021      	movs	r1, r4
 8001962:	f7fe ff41 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 8001966:	f000 ffcf 	bl	8002908 <SSD1306_UpdateScreen>
		free(bf);
 800196a:	0030      	movs	r0, r6
 800196c:	f003 fac0 	bl	8004ef0 <free>
 8001970:	e7c1      	b.n	80018f6 <use+0xea>
			if(ptInNum == pt[usePos].store) return REFILL;
 8001972:	2404      	movs	r4, #4
 8001974:	e7bf      	b.n	80018f6 <use+0xea>
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	20000008 	.word	0x20000008
 800197c:	200008a8 	.word	0x200008a8
 8001980:	200008aa 	.word	0x200008aa
 8001984:	20000030 	.word	0x20000030
 8001988:	20000424 	.word	0x20000424
 800198c:	20000031 	.word	0x20000031
 8001990:	20000660 	.word	0x20000660
 8001994:	2000001c 	.word	0x2000001c
 8001998:	2000042c 	.word	0x2000042c
 800199c:	200008af 	.word	0x200008af
 80019a0:	200005e8 	.word	0x200005e8
 80019a4:	20000020 	.word	0x20000020
 80019a8:	0800634b 	.word	0x0800634b
 80019ac:	200008ae 	.word	0x200008ae
 80019b0:	200008ad 	.word	0x200008ad
 80019b4:	08006351 	.word	0x08006351
 80019b8:	0800638c 	.word	0x0800638c
 80019bc:	080063a9 	.word	0x080063a9
 80019c0:	080063b7 	.word	0x080063b7

080019c4 <refill>:

MODE refill(){
 80019c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(firstF){
 80019c6:	4c6b      	ldr	r4, [pc, #428]	; (8001b74 <refill+0x1b0>)
 80019c8:	7823      	ldrb	r3, [r4, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <refill+0x12>
		firstF = false;
 80019ce:	2300      	movs	r3, #0
		ptInNum = 0;
 80019d0:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <refill+0x1b4>)
		firstF = false;
 80019d2:	7023      	strb	r3, [r4, #0]
		ptInNum = 0;
 80019d4:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 80019d6:	4b69      	ldr	r3, [pc, #420]	; (8001b7c <refill+0x1b8>)
 80019d8:	4e69      	ldr	r6, [pc, #420]	; (8001b80 <refill+0x1bc>)
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	2a63      	cmp	r2, #99	; 0x63
 80019de:	d916      	bls.n	8001a0e <refill+0x4a>
		reC = 0;
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
		if(JOY_U && ptInNum < pt[usePos].max){
 80019e4:	22fa      	movs	r2, #250	; 0xfa
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <refill+0x1c0>)
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d800      	bhi.n	80019f2 <refill+0x2e>
 80019f0:	e078      	b.n	8001ae4 <refill+0x120>
 80019f2:	4a65      	ldr	r2, [pc, #404]	; (8001b88 <refill+0x1c4>)
 80019f4:	4860      	ldr	r0, [pc, #384]	; (8001b78 <refill+0x1b4>)
 80019f6:	7811      	ldrb	r1, [r2, #0]
 80019f8:	4a64      	ldr	r2, [pc, #400]	; (8001b8c <refill+0x1c8>)
 80019fa:	0109      	lsls	r1, r1, #4
 80019fc:	1852      	adds	r2, r2, r1
 80019fe:	7803      	ldrb	r3, [r0, #0]
 8001a00:	8992      	ldrh	r2, [r2, #12]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d903      	bls.n	8001a0e <refill+0x4a>
			ptInNum++;
 8001a06:	3301      	adds	r3, #1
 8001a08:	7003      	strb	r3, [r0, #0]
			udf = true;
		}
		if(JOY_D && ptInNum){
			ptInNum--;
			udf = true;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	7033      	strb	r3, [r6, #0]
		}
	}
	if(JOY_P){
 8001a0e:	20a0      	movs	r0, #160	; 0xa0
 8001a10:	2104      	movs	r1, #4
 8001a12:	05c0      	lsls	r0, r0, #23
 8001a14:	f001 feb0 	bl	8003778 <HAL_GPIO_ReadPin>
		if(!oldsw){
 8001a18:	4b5d      	ldr	r3, [pc, #372]	; (8001b90 <refill+0x1cc>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4318      	orrs	r0, r3
 8001a1e:	b2c0      	uxtb	r0, r0
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d000      	beq.n	8001a26 <refill+0x62>
 8001a24:	e06b      	b.n	8001afe <refill+0x13a>
			swS();
 8001a26:	f7fe fefd 	bl	8000824 <swS>
			firstF = true;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	7023      	strb	r3, [r4, #0]
			udf = true;
 8001a2e:	7033      	strb	r3, [r6, #0]
			if(ptInNum){
 8001a30:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <refill+0x1b4>)
 8001a32:	4c56      	ldr	r4, [pc, #344]	; (8001b8c <refill+0x1c8>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d034      	beq.n	8001aa4 <refill+0xe0>
				logShift();
 8001a3a:	f7fe ff71 	bl	8000920 <logShift>
				DS3231_get_date(&date.day, &date.month, (uint8_t*)&date.year);
 8001a3e:	4f55      	ldr	r7, [pc, #340]	; (8001b94 <refill+0x1d0>)
 8001a40:	0038      	movs	r0, r7
 8001a42:	1cba      	adds	r2, r7, #2
 8001a44:	1c79      	adds	r1, r7, #1
 8001a46:	f7fe fe1b 	bl	8000680 <DS3231_get_date>
				DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001a4a:	4e53      	ldr	r6, [pc, #332]	; (8001b98 <refill+0x1d4>)
 8001a4c:	0032      	movs	r2, r6
 8001a4e:	1c71      	adds	r1, r6, #1
 8001a50:	1cb0      	adds	r0, r6, #2
 8001a52:	f7fe fd7f 	bl	8000554 <DS3231_get_time>
				pLog[0].workCate = 1;
 8001a56:	4d51      	ldr	r5, [pc, #324]	; (8001b9c <refill+0x1d8>)
 8001a58:	2301      	movs	r3, #1
				pLog[0].date = date;
 8001a5a:	0028      	movs	r0, r5
				pLog[0].workCate = 1;
 8001a5c:	702b      	strb	r3, [r5, #0]
				pLog[0].date = date;
 8001a5e:	2204      	movs	r2, #4
 8001a60:	0039      	movs	r1, r7
 8001a62:	3010      	adds	r0, #16
 8001a64:	f003 fa4e 	bl	8004f04 <memcpy>
				pLog[0].time = time;
 8001a68:	0028      	movs	r0, r5
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	0031      	movs	r1, r6
 8001a6e:	300c      	adds	r0, #12
 8001a70:	f003 fa48 	bl	8004f04 <memcpy>
				sprintf(pLog[0].content[0], "%s/%s", pt[usePos].name, ptCate[pt[usePos].cate]);
 8001a74:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <refill+0x1c4>)
 8001a76:	494a      	ldr	r1, [pc, #296]	; (8001ba0 <refill+0x1dc>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	6868      	ldr	r0, [r5, #4]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	58e2      	ldr	r2, [r4, r3]
 8001a80:	18e3      	adds	r3, r4, r3
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	585b      	ldr	r3, [r3, r1]
 8001a88:	4946      	ldr	r1, [pc, #280]	; (8001ba4 <refill+0x1e0>)
 8001a8a:	f003 fb7f 	bl	800518c <siprintf>
				sprintf(pLog[0].content[1], "%dpcs (%d,%d)", ptInNum, tempX, tempY);
 8001a8e:	4946      	ldr	r1, [pc, #280]	; (8001ba8 <refill+0x1e4>)
 8001a90:	4b46      	ldr	r3, [pc, #280]	; (8001bac <refill+0x1e8>)
 8001a92:	7809      	ldrb	r1, [r1, #0]
 8001a94:	4a38      	ldr	r2, [pc, #224]	; (8001b78 <refill+0x1b4>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	9100      	str	r1, [sp, #0]
 8001a9c:	68a8      	ldr	r0, [r5, #8]
 8001a9e:	4944      	ldr	r1, [pc, #272]	; (8001bb0 <refill+0x1ec>)
 8001aa0:	f003 fb74 	bl	800518c <siprintf>
			}
			pt[usePos].store = ptInNum;
 8001aa4:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <refill+0x1c4>)
 8001aa6:	4a34      	ldr	r2, [pc, #208]	; (8001b78 <refill+0x1b4>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	18e3      	adds	r3, r4, r3
 8001ab0:	815a      	strh	r2, [r3, #10]
			for(uint8_t i = 0; i < 36; i++){
				if(pt[usePos].ptionID == pt[i].ptionID && pt[usePos].ptionID) pt[i] = pt[usePos];
 8001ab2:	1dda      	adds	r2, r3, #7
			pt[usePos].store = ptInNum;
 8001ab4:	2524      	movs	r5, #36	; 0x24
				if(pt[usePos].ptionID == pt[i].ptionID && pt[usePos].ptionID) pt[i] = pt[usePos];
 8001ab6:	4694      	mov	ip, r2
 8001ab8:	4662      	mov	r2, ip
 8001aba:	7810      	ldrb	r0, [r2, #0]
 8001abc:	79e2      	ldrb	r2, [r4, #7]
 8001abe:	4282      	cmp	r2, r0
 8001ac0:	d107      	bne.n	8001ad2 <refill+0x10e>
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	d005      	beq.n	8001ad2 <refill+0x10e>
 8001ac6:	0022      	movs	r2, r4
 8001ac8:	0018      	movs	r0, r3
 8001aca:	c8c2      	ldmia	r0!, {r1, r6, r7}
 8001acc:	c2c2      	stmia	r2!, {r1, r6, r7}
 8001ace:	6800      	ldr	r0, [r0, #0]
 8001ad0:	6010      	str	r0, [r2, #0]
			for(uint8_t i = 0; i < 36; i++){
 8001ad2:	3d01      	subs	r5, #1
 8001ad4:	b2ed      	uxtb	r5, r5
 8001ad6:	3410      	adds	r4, #16
 8001ad8:	2d00      	cmp	r5, #0
 8001ada:	d1ed      	bne.n	8001ab8 <refill+0xf4>
			}
			led_clear();
 8001adc:	f7fe fe62 	bl	80007a4 <led_clear>
		SSD1306_PutsXY(0, 3, bf, 1);
		SSD1306_UpdateScreen();
		free(bf);
	}
	return REFILL;
}
 8001ae0:	0028      	movs	r0, r5
 8001ae2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(JOY_D && ptInNum){
 8001ae4:	2296      	movs	r2, #150	; 0x96
 8001ae6:	0052      	lsls	r2, r2, #1
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d300      	bcc.n	8001aee <refill+0x12a>
 8001aec:	e78f      	b.n	8001a0e <refill+0x4a>
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <refill+0x1b4>)
 8001af0:	7813      	ldrb	r3, [r2, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d100      	bne.n	8001af8 <refill+0x134>
 8001af6:	e78a      	b.n	8001a0e <refill+0x4a>
			ptInNum--;
 8001af8:	3b01      	subs	r3, #1
 8001afa:	7013      	strb	r3, [r2, #0]
 8001afc:	e785      	b.n	8001a0a <refill+0x46>
	if(udf){
 8001afe:	7833      	ldrb	r3, [r6, #0]
	return REFILL;
 8001b00:	2504      	movs	r5, #4
	if(udf){
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ec      	beq.n	8001ae0 <refill+0x11c>
		String bf = (String)calloc(0, sizeof(char) * 11);
 8001b06:	210b      	movs	r1, #11
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f003 f9bd 	bl	8004e88 <calloc>
		udf = false;
 8001b0e:	2500      	movs	r5, #0
		String bf = (String)calloc(0, sizeof(char) * 11);
 8001b10:	0004      	movs	r4, r0
		udf = false;
 8001b12:	7035      	strb	r5, [r6, #0]
		basicScreen();
 8001b14:	f7fe fe78 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#refill", 0);
 8001b18:	002b      	movs	r3, r5
 8001b1a:	0029      	movs	r1, r5
 8001b1c:	0028      	movs	r0, r5
 8001b1e:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <refill+0x1f0>)
 8001b20:	f7fe fe62 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "Part has all used.", 1);
 8001b24:	2301      	movs	r3, #1
 8001b26:	0028      	movs	r0, r5
 8001b28:	0019      	movs	r1, r3
 8001b2a:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <refill+0x1f4>)
 8001b2c:	f7fe fe5c 	bl	80007e8 <SSD1306_PutsXY>
		if(pt[usePos].ptionC < 1)pt[usePos].ptionC = 1;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <refill+0x1c4>)
 8001b32:	4a16      	ldr	r2, [pc, #88]	; (8001b8c <refill+0x1c8>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	18d1      	adds	r1, r2, r3
 8001b3a:	7a08      	ldrb	r0, [r1, #8]
 8001b3c:	42a8      	cmp	r0, r5
 8001b3e:	d101      	bne.n	8001b44 <refill+0x180>
 8001b40:	2001      	movs	r0, #1
 8001b42:	7208      	strb	r0, [r1, #8]
		sprintf(bf, "IN:%u/%u", ptInNum, pt[usePos].max * pt[usePos].ptionC);
 8001b44:	18d2      	adds	r2, r2, r3
 8001b46:	8991      	ldrh	r1, [r2, #12]
 8001b48:	7a13      	ldrb	r3, [r2, #8]
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <refill+0x1b4>)
 8001b4c:	434b      	muls	r3, r1
 8001b4e:	7812      	ldrb	r2, [r2, #0]
 8001b50:	491a      	ldr	r1, [pc, #104]	; (8001bbc <refill+0x1f8>)
 8001b52:	0020      	movs	r0, r4
 8001b54:	f003 fb1a 	bl	800518c <siprintf>
		SSD1306_PutsXY(0, 3, bf, 1);
 8001b58:	2301      	movs	r3, #1
 8001b5a:	0022      	movs	r2, r4
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7fe fe42 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 8001b64:	f000 fed0 	bl	8002908 <SSD1306_UpdateScreen>
		free(bf);
 8001b68:	0020      	movs	r0, r4
 8001b6a:	f003 f9c1 	bl	8004ef0 <free>
	return REFILL;
 8001b6e:	2504      	movs	r5, #4
 8001b70:	e7b6      	b.n	8001ae0 <refill+0x11c>
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	20000008 	.word	0x20000008
 8001b78:	200008a8 	.word	0x200008a8
 8001b7c:	200008aa 	.word	0x200008aa
 8001b80:	20000030 	.word	0x20000030
 8001b84:	20000424 	.word	0x20000424
 8001b88:	20000031 	.word	0x20000031
 8001b8c:	20000660 	.word	0x20000660
 8001b90:	2000001c 	.word	0x2000001c
 8001b94:	2000042c 	.word	0x2000042c
 8001b98:	200008af 	.word	0x200008af
 8001b9c:	200005e8 	.word	0x200005e8
 8001ba0:	20000020 	.word	0x20000020
 8001ba4:	0800634b 	.word	0x0800634b
 8001ba8:	200008ae 	.word	0x200008ae
 8001bac:	200008ad 	.word	0x200008ad
 8001bb0:	08006351 	.word	0x08006351
 8001bb4:	080063c1 	.word	0x080063c1
 8001bb8:	080063c9 	.word	0x080063c9
 8001bbc:	080063dc 	.word	0x080063dc

08001bc0 <pFind>:

MODE pFind(){
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 8001bc2:	4d3c      	ldr	r5, [pc, #240]	; (8001cb4 <pFind+0xf4>)
MODE pFind(){
 8001bc4:	b085      	sub	sp, #20
	if(firstF){
 8001bc6:	782b      	ldrb	r3, [r5, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <pFind+0x14>
		firstF = false;
 8001bcc:	2300      	movs	r3, #0
		findC = 0;
 8001bce:	4a3a      	ldr	r2, [pc, #232]	; (8001cb8 <pFind+0xf8>)
		firstF = false;
 8001bd0:	702b      	strb	r3, [r5, #0]
		findC = 0;
 8001bd2:	7013      	strb	r3, [r2, #0]
	}
	if(RE1 && (JOY_R || JOY_L || JOY_U || JOY_D)) udf = true;
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <pFind+0xfc>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b63      	cmp	r3, #99	; 0x63
 8001bda:	d910      	bls.n	8001bfe <pFind+0x3e>
 8001bdc:	4938      	ldr	r1, [pc, #224]	; (8001cc0 <pFind+0x100>)
 8001bde:	4a39      	ldr	r2, [pc, #228]	; (8001cc4 <pFind+0x104>)
 8001be0:	884b      	ldrh	r3, [r1, #2]
 8001be2:	3b2d      	subs	r3, #45	; 0x2d
 8001be4:	3bff      	subs	r3, #255	; 0xff
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d805      	bhi.n	8001bf8 <pFind+0x38>
 8001bec:	880b      	ldrh	r3, [r1, #0]
 8001bee:	3b2d      	subs	r3, #45	; 0x2d
 8001bf0:	3bff      	subs	r3, #255	; 0xff
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d902      	bls.n	8001bfe <pFind+0x3e>
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <pFind+0x108>)
 8001bfc:	701a      	strb	r2, [r3, #0]
	if(JOY_P){
 8001bfe:	20a0      	movs	r0, #160	; 0xa0
 8001c00:	2104      	movs	r1, #4
 8001c02:	05c0      	lsls	r0, r0, #23
 8001c04:	f001 fdb8 	bl	8003778 <HAL_GPIO_ReadPin>
		if(!oldsw){
 8001c08:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <pFind+0x10c>)
 8001c0a:	781c      	ldrb	r4, [r3, #0]
 8001c0c:	4304      	orrs	r4, r0
 8001c0e:	b2e4      	uxtb	r4, r4
 8001c10:	2c00      	cmp	r4, #0
 8001c12:	d126      	bne.n	8001c62 <pFind+0xa2>
			swS();
 8001c14:	f7fe fe06 	bl	8000824 <swS>
			if(!ptFindName[0]) ptFindName = textIn(true, 10);
 8001c18:	4f2d      	ldr	r7, [pc, #180]	; (8001cd0 <pFind+0x110>)
 8001c1a:	683e      	ldr	r6, [r7, #0]
 8001c1c:	7833      	ldrb	r3, [r6, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01a      	beq.n	8001c58 <pFind+0x98>
			else{
				for(uint8_t i = 0; i < 36; i++)
					if(!strcmp(ptFindName, pt[i].name))
						findArr[findC++] = i;
 8001c22:	4f25      	ldr	r7, [pc, #148]	; (8001cb8 <pFind+0xf8>)
 8001c24:	b2e3      	uxtb	r3, r4
					if(!strcmp(ptFindName, pt[i].name))
 8001c26:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <pFind+0x114>)
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	0123      	lsls	r3, r4, #4
 8001c2c:	5899      	ldr	r1, [r3, r2]
 8001c2e:	0030      	movs	r0, r6
 8001c30:	f7fe fa6a 	bl	8000108 <strcmp>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d105      	bne.n	8001c44 <pFind+0x84>
						findArr[findC++] = i;
 8001c38:	783b      	ldrb	r3, [r7, #0]
 8001c3a:	b2e1      	uxtb	r1, r4
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	703a      	strb	r2, [r7, #0]
 8001c40:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <pFind+0x118>)
 8001c42:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i = 0; i < 36; i++)
 8001c44:	3401      	adds	r4, #1
 8001c46:	2c24      	cmp	r4, #36	; 0x24
 8001c48:	d1ec      	bne.n	8001c24 <pFind+0x64>
				firstF = true;
 8001c4a:	2301      	movs	r3, #1
				udf = true;
				return FINDR;
 8001c4c:	2006      	movs	r0, #6
				udf = true;
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <pFind+0x108>)
				firstF = true;
 8001c50:	702b      	strb	r3, [r5, #0]
				udf = true;
 8001c52:	7013      	strb	r3, [r2, #0]
		if(!ptFindName[0]) SSD1306_Puts("input find name", &Font_6x8, 1);
		else SSD1306_Puts(ptFindName, &Font_6x8, 1);
		SSD1306_UpdateScreen();
	}
	return PFIND;
}
 8001c54:	b005      	add	sp, #20
 8001c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(!ptFindName[0]) ptFindName = textIn(true, 10);
 8001c58:	210a      	movs	r1, #10
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7fe fe70 	bl	8000940 <textIn>
 8001c60:	6038      	str	r0, [r7, #0]
	if(udf){
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <pFind+0x108>)
	return PFIND;
 8001c64:	2005      	movs	r0, #5
	if(udf){
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d0f3      	beq.n	8001c54 <pFind+0x94>
		udf = false;
 8001c6c:	2400      	movs	r4, #0
 8001c6e:	701c      	strb	r4, [r3, #0]
		basicScreen();
 8001c70:	f7fe fdca 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Find", 0);
 8001c74:	0023      	movs	r3, r4
 8001c76:	0021      	movs	r1, r4
 8001c78:	0020      	movs	r0, r4
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <pFind+0x11c>)
		SSD1306_DrawFilledRectangle(18, 34, 92, 10, 1);
 8001c7c:	3401      	adds	r4, #1
		SSD1306_PutsXY(0, 0, "#Find", 0);
 8001c7e:	f7fe fdb3 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_DrawFilledRectangle(18, 34, 92, 10, 1);
 8001c82:	230a      	movs	r3, #10
 8001c84:	225c      	movs	r2, #92	; 0x5c
 8001c86:	2122      	movs	r1, #34	; 0x22
 8001c88:	2012      	movs	r0, #18
 8001c8a:	9400      	str	r4, [sp, #0]
 8001c8c:	f000 fde3 	bl	8002856 <SSD1306_DrawFilledRectangle>
		SSD1306_GotoXY(19, 36);
 8001c90:	2124      	movs	r1, #36	; 0x24
 8001c92:	2013      	movs	r0, #19
 8001c94:	f000 fcf6 	bl	8002684 <SSD1306_GotoXY>
		if(!ptFindName[0]) SSD1306_Puts("input find name", &Font_6x8, 1);
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <pFind+0x110>)
 8001c9a:	0022      	movs	r2, r4
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	4910      	ldr	r1, [pc, #64]	; (8001ce0 <pFind+0x120>)
 8001ca0:	7803      	ldrb	r3, [r0, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d100      	bne.n	8001ca8 <pFind+0xe8>
 8001ca6:	480f      	ldr	r0, [pc, #60]	; (8001ce4 <pFind+0x124>)
		else SSD1306_Puts(ptFindName, &Font_6x8, 1);
 8001ca8:	f000 fd28 	bl	80026fc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001cac:	f000 fe2c 	bl	8002908 <SSD1306_UpdateScreen>
	return PFIND;
 8001cb0:	2005      	movs	r0, #5
 8001cb2:	e7cf      	b.n	8001c54 <pFind+0x94>
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000454 	.word	0x20000454
 8001cbc:	200008aa 	.word	0x200008aa
 8001cc0:	20000424 	.word	0x20000424
 8001cc4:	00000e74 	.word	0x00000e74
 8001cc8:	20000030 	.word	0x20000030
 8001ccc:	2000001c 	.word	0x2000001c
 8001cd0:	200008a4 	.word	0x200008a4
 8001cd4:	20000660 	.word	0x20000660
 8001cd8:	20000430 	.word	0x20000430
 8001cdc:	080063e5 	.word	0x080063e5
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	080063eb 	.word	0x080063eb

08001ce8 <findR>:

MODE findR(){
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF) firstF = false;
 8001cea:	4e8e      	ldr	r6, [pc, #568]	; (8001f24 <findR+0x23c>)
MODE findR(){
 8001cec:	b085      	sub	sp, #20
	if(firstF) firstF = false;
 8001cee:	7833      	ldrb	r3, [r6, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <findR+0x10>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	7033      	strb	r3, [r6, #0]
	if(ledC >= 1000) ledC = 0;
 8001cf8:	21fa      	movs	r1, #250	; 0xfa
 8001cfa:	4a8b      	ldr	r2, [pc, #556]	; (8001f28 <findR+0x240>)
 8001cfc:	4f8b      	ldr	r7, [pc, #556]	; (8001f2c <findR+0x244>)
 8001cfe:	8813      	ldrh	r3, [r2, #0]
 8001d00:	0089      	lsls	r1, r1, #2
 8001d02:	428b      	cmp	r3, r1
 8001d04:	d200      	bcs.n	8001d08 <findR+0x20>
 8001d06:	e075      	b.n	8001df4 <findR+0x10c>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	8013      	strh	r3, [r2, #0]
MODE findR(){
 8001d0c:	2500      	movs	r5, #0
	if(ledC < 500)
		for(uint8_t i = 0; i < 36; i++)
			led_color(pt[findArr[i]].pos, PTRF, PTGF, PTBF);
 8001d0e:	2404      	movs	r4, #4
 8001d10:	4b87      	ldr	r3, [pc, #540]	; (8001f30 <findR+0x248>)
 8001d12:	4a88      	ldr	r2, [pc, #544]	; (8001f34 <findR+0x24c>)
 8001d14:	5d5b      	ldrb	r3, [r3, r5]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	18d3      	adds	r3, r2, r3
 8001d1a:	7998      	ldrb	r0, [r3, #6]
 8001d1c:	4a84      	ldr	r2, [pc, #528]	; (8001f30 <findR+0x248>)
 8001d1e:	783b      	ldrb	r3, [r7, #0]
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	4a84      	ldr	r2, [pc, #528]	; (8001f34 <findR+0x24c>)
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	18d3      	adds	r3, r2, r3
 8001d28:	7919      	ldrb	r1, [r3, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	0023      	movs	r3, r4
 8001d2e:	2901      	cmp	r1, #1
 8001d30:	d005      	beq.n	8001d3e <findR+0x56>
 8001d32:	0022      	movs	r2, r4
 8001d34:	2903      	cmp	r1, #3
 8001d36:	d000      	beq.n	8001d3a <findR+0x52>
 8001d38:	e0ee      	b.n	8001f18 <findR+0x230>
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2304      	movs	r3, #4
		for(uint8_t i = 0; i < 36; i++)
 8001d3e:	3501      	adds	r5, #1
			led_color(pt[findArr[i]].pos, PTRF, PTGF, PTBF);
 8001d40:	f7fe fcfa 	bl	8000738 <led_color>
		for(uint8_t i = 0; i < 36; i++)
 8001d44:	2d24      	cmp	r5, #36	; 0x24
 8001d46:	d1e3      	bne.n	8001d10 <findR+0x28>
	else led_color(pt[findArr[sel]].pos, 0, 0, 0);
	if(reC >= 250){
 8001d48:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <findR+0x250>)
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	2af9      	cmp	r2, #249	; 0xf9
 8001d4e:	d90e      	bls.n	8001d6e <findR+0x86>
		reC = 0;
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
		led_update();
 8001d54:	f7fe fcfc 	bl	8000750 <led_update>
		if(JOY_U && sel)sel--;
 8001d58:	22fa      	movs	r2, #250	; 0xfa
 8001d5a:	4b78      	ldr	r3, [pc, #480]	; (8001f3c <findR+0x254>)
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d959      	bls.n	8001e18 <findR+0x130>
 8001d64:	783b      	ldrb	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <findR+0x86>
 8001d6a:	3b01      	subs	r3, #1
		if(JOY_D && sel < (findC - 1)) sel++;
 8001d6c:	703b      	strb	r3, [r7, #0]
	}
	if(JOY_P){
 8001d6e:	20a0      	movs	r0, #160	; 0xa0
 8001d70:	2104      	movs	r1, #4
 8001d72:	05c0      	lsls	r0, r0, #23
 8001d74:	f001 fd00 	bl	8003778 <HAL_GPIO_ReadPin>
 8001d78:	1e01      	subs	r1, r0, #0
 8001d7a:	d000      	beq.n	8001d7e <findR+0x96>
 8001d7c:	e08e      	b.n	8001e9c <findR+0x1b4>
		if(!oldsw){
 8001d7e:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <findR+0x258>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d154      	bne.n	8001e30 <findR+0x148>
			swS();
 8001d86:	f7fe fd4d 	bl	8000824 <swS>
			logShift();
 8001d8a:	f7fe fdc9 	bl	8000920 <logShift>
			DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 8001d8e:	4e6d      	ldr	r6, [pc, #436]	; (8001f44 <findR+0x25c>)
 8001d90:	0030      	movs	r0, r6
 8001d92:	1cb2      	adds	r2, r6, #2
 8001d94:	1c71      	adds	r1, r6, #1
 8001d96:	f7fe fc73 	bl	8000680 <DS3231_get_date>
			DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001d9a:	4d6b      	ldr	r5, [pc, #428]	; (8001f48 <findR+0x260>)
 8001d9c:	002a      	movs	r2, r5
 8001d9e:	1c69      	adds	r1, r5, #1
 8001da0:	1ca8      	adds	r0, r5, #2
 8001da2:	f7fe fbd7 	bl	8000554 <DS3231_get_time>
			pLog[0].workCate = 3;
 8001da6:	4c69      	ldr	r4, [pc, #420]	; (8001f4c <findR+0x264>)
 8001da8:	2303      	movs	r3, #3
			pLog[0].date = date;
 8001daa:	0020      	movs	r0, r4
			pLog[0].workCate = 3;
 8001dac:	7023      	strb	r3, [r4, #0]
			pLog[0].date = date;
 8001dae:	2204      	movs	r2, #4
 8001db0:	0031      	movs	r1, r6
 8001db2:	3010      	adds	r0, #16
 8001db4:	f003 f8a6 	bl	8004f04 <memcpy>
			pLog[0].time = time;
 8001db8:	0020      	movs	r0, r4
 8001dba:	2203      	movs	r2, #3
 8001dbc:	0029      	movs	r1, r5
 8001dbe:	300c      	adds	r0, #12
 8001dc0:	f003 f8a0 	bl	8004f04 <memcpy>
			sprintf(pLog[0].content[0], "Sear:%s", ptFindName);
 8001dc4:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <findR+0x268>)
 8001dc6:	4963      	ldr	r1, [pc, #396]	; (8001f54 <findR+0x26c>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	6860      	ldr	r0, [r4, #4]
 8001dcc:	f003 f9de 	bl	800518c <siprintf>
			sprintf(pLog[0].content[0], "Num of Find:%u", findC);
 8001dd0:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <findR+0x270>)
 8001dd2:	4962      	ldr	r1, [pc, #392]	; (8001f5c <findR+0x274>)
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	6860      	ldr	r0, [r4, #4]
 8001dd8:	f003 f9d8 	bl	800518c <siprintf>
			if(findC){
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <findR+0x270>)
 8001dde:	7818      	ldrb	r0, [r3, #0]
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d005      	beq.n	8001df0 <findR+0x108>
				usePos = findArr[sel];
				return USE;
 8001de4:	2003      	movs	r0, #3
				usePos = findArr[sel];
 8001de6:	783b      	ldrb	r3, [r7, #0]
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <findR+0x248>)
 8001dea:	5cd2      	ldrb	r2, [r2, r3]
 8001dec:	4b5c      	ldr	r3, [pc, #368]	; (8001f60 <findR+0x278>)
 8001dee:	701a      	strb	r2, [r3, #0]
			free(bf);
		}else SSD1306_PutsXY(0, 1, "Not Found..", 1);
		SSD1306_UpdateScreen();
	}
	return FINDR;
}
 8001df0:	b005      	add	sp, #20
 8001df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(ledC < 500)
 8001df4:	22fa      	movs	r2, #250	; 0xfa
 8001df6:	0052      	lsls	r2, r2, #1
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d200      	bcs.n	8001dfe <findR+0x116>
 8001dfc:	e786      	b.n	8001d0c <findR+0x24>
	else led_color(pt[findArr[sel]].pos, 0, 0, 0);
 8001dfe:	783b      	ldrb	r3, [r7, #0]
 8001e00:	4a4b      	ldr	r2, [pc, #300]	; (8001f30 <findR+0x248>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	4a4b      	ldr	r2, [pc, #300]	; (8001f34 <findR+0x24c>)
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	18d3      	adds	r3, r2, r3
 8001e0a:	7998      	ldrb	r0, [r3, #6]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	001a      	movs	r2, r3
 8001e10:	0019      	movs	r1, r3
 8001e12:	f7fe fc91 	bl	8000738 <led_color>
 8001e16:	e797      	b.n	8001d48 <findR+0x60>
		if(JOY_D && sel < (findC - 1)) sel++;
 8001e18:	2296      	movs	r2, #150	; 0x96
 8001e1a:	0052      	lsls	r2, r2, #1
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d2a6      	bcs.n	8001d6e <findR+0x86>
 8001e20:	4a4d      	ldr	r2, [pc, #308]	; (8001f58 <findR+0x270>)
 8001e22:	783b      	ldrb	r3, [r7, #0]
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	3a01      	subs	r2, #1
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	daa0      	bge.n	8001d6e <findR+0x86>
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	e79d      	b.n	8001d6c <findR+0x84>
		findC = 0;
 8001e30:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <findR+0x270>)
		memset(ptFindName, 0, (size_t)sizeof(ptFindName));
 8001e32:	2204      	movs	r2, #4
		findC = 0;
 8001e34:	7018      	strb	r0, [r3, #0]
		memset(ptFindName, 0, (size_t)sizeof(ptFindName));
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <findR+0x268>)
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	f003 f87f 	bl	8004f3c <memset>
		firstF = true;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	7033      	strb	r3, [r6, #0]
		udf = false;
 8001e42:	2400      	movs	r4, #0
 8001e44:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <findR+0x27c>)
 8001e46:	701c      	strb	r4, [r3, #0]
		basicScreen();
 8001e48:	f7fe fcde 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Find result", 0);
 8001e4c:	0023      	movs	r3, r4
 8001e4e:	0020      	movs	r0, r4
 8001e50:	0021      	movs	r1, r4
 8001e52:	4a45      	ldr	r2, [pc, #276]	; (8001f68 <findR+0x280>)
 8001e54:	f7fe fcc8 	bl	80007e8 <SSD1306_PutsXY>
		if(findC){
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <findR+0x270>)
 8001e5a:	7818      	ldrb	r0, [r3, #0]
 8001e5c:	42a0      	cmp	r0, r4
 8001e5e:	d055      	beq.n	8001f0c <findR+0x224>
			String bf = (String)calloc(0, sizeof(char) * 31);
 8001e60:	211f      	movs	r1, #31
 8001e62:	0020      	movs	r0, r4
 8001e64:	f003 f810 	bl	8004e88 <calloc>
			SSD1306_PutsXY(0, sel + 2, ">", 1);
 8001e68:	7839      	ldrb	r1, [r7, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	3102      	adds	r1, #2
 8001e6e:	4a3f      	ldr	r2, [pc, #252]	; (8001f6c <findR+0x284>)
 8001e70:	b2c9      	uxtb	r1, r1
			String bf = (String)calloc(0, sizeof(char) * 31);
 8001e72:	0005      	movs	r5, r0
			SSD1306_PutsXY(0, sel + 2, ">", 1);
 8001e74:	0020      	movs	r0, r4
 8001e76:	f7fe fcb7 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_PutsXY(0, 1, "Find some Parts!", 1);
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	0020      	movs	r0, r4
 8001e7e:	0019      	movs	r1, r3
 8001e80:	4a3b      	ldr	r2, [pc, #236]	; (8001f70 <findR+0x288>)
 8001e82:	f7fe fcb1 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < findC; i++){
 8001e86:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <findR+0x270>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	42a3      	cmp	r3, r4
 8001e8c:	d80c      	bhi.n	8001ea8 <findR+0x1c0>
			free(bf);
 8001e8e:	0028      	movs	r0, r5
 8001e90:	f003 f82e 	bl	8004ef0 <free>
		SSD1306_UpdateScreen();
 8001e94:	f000 fd38 	bl	8002908 <SSD1306_UpdateScreen>
	return FINDR;
 8001e98:	2006      	movs	r0, #6
 8001e9a:	e7a9      	b.n	8001df0 <findR+0x108>
	if(udf){
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <findR+0x27c>)
	return FINDR;
 8001e9e:	2006      	movs	r0, #6
	if(udf){
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0a4      	beq.n	8001df0 <findR+0x108>
 8001ea6:	e7cc      	b.n	8001e42 <findR+0x15a>
				tempX = (pt[findArr[i]].pos) % 6 + 1;
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <findR+0x248>)
 8001eaa:	2106      	movs	r1, #6
 8001eac:	5d1e      	ldrb	r6, [r3, r4]
 8001eae:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <findR+0x24c>)
 8001eb0:	0136      	lsls	r6, r6, #4
 8001eb2:	199b      	adds	r3, r3, r6
 8001eb4:	799f      	ldrb	r7, [r3, #6]
 8001eb6:	9303      	str	r3, [sp, #12]
 8001eb8:	0038      	movs	r0, r7
 8001eba:	f7fe f9c9 	bl	8000250 <__aeabi_uidivmod>
 8001ebe:	3101      	adds	r1, #1
 8001ec0:	b2cb      	uxtb	r3, r1
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	9a02      	ldr	r2, [sp, #8]
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <findR+0x28c>)
				tempY = 6 - (pt[findArr[i]].pos) / 6;
 8001ec8:	2106      	movs	r1, #6
				tempX = (pt[findArr[i]].pos) % 6 + 1;
 8001eca:	701a      	strb	r2, [r3, #0]
				tempY = 6 - (pt[findArr[i]].pos) / 6;
 8001ecc:	0038      	movs	r0, r7
 8001ece:	f7fe f939 	bl	8000144 <__udivsi3>
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	1a18      	subs	r0, r3, r0
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <findR+0x290>)
 8001ed8:	b2c0      	uxtb	r0, r0
 8001eda:	7018      	strb	r0, [r3, #0]
				sprintf(bf, "%s(%s/%d,%d)", pt[findArr[i]].name, ptCate[pt[findArr[i]].cate], tempX, tempY);
 8001edc:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <findR+0x24c>)
 8001ede:	9902      	ldr	r1, [sp, #8]
 8001ee0:	599a      	ldr	r2, [r3, r6]
 8001ee2:	9b03      	ldr	r3, [sp, #12]
 8001ee4:	791b      	ldrb	r3, [r3, #4]
 8001ee6:	9100      	str	r1, [sp, #0]
 8001ee8:	4924      	ldr	r1, [pc, #144]	; (8001f7c <findR+0x294>)
 8001eea:	9001      	str	r0, [sp, #4]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	585b      	ldr	r3, [r3, r1]
 8001ef0:	0028      	movs	r0, r5
 8001ef2:	4923      	ldr	r1, [pc, #140]	; (8001f80 <findR+0x298>)
 8001ef4:	f003 f94a 	bl	800518c <siprintf>
				SSD1306_PutsXY(1, i + 2, bf, 1);
 8001ef8:	2301      	movs	r3, #1
 8001efa:	1ca1      	adds	r1, r4, #2
 8001efc:	002a      	movs	r2, r5
 8001efe:	0018      	movs	r0, r3
 8001f00:	b2c9      	uxtb	r1, r1
			for(uint8_t i = 0; i < findC; i++){
 8001f02:	3401      	adds	r4, #1
				SSD1306_PutsXY(1, i + 2, bf, 1);
 8001f04:	f7fe fc70 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < findC; i++){
 8001f08:	b2e4      	uxtb	r4, r4
 8001f0a:	e7bc      	b.n	8001e86 <findR+0x19e>
		}else SSD1306_PutsXY(0, 1, "Not Found..", 1);
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <findR+0x29c>)
 8001f10:	0019      	movs	r1, r3
 8001f12:	f7fe fc69 	bl	80007e8 <SSD1306_PutsXY>
 8001f16:	e7bd      	b.n	8001e94 <findR+0x1ac>
			led_color(pt[findArr[i]].pos, PTRF, PTGF, PTBF);
 8001f18:	2902      	cmp	r1, #2
 8001f1a:	d000      	beq.n	8001f1e <findR+0x236>
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	0021      	movs	r1, r4
 8001f20:	2300      	movs	r3, #0
 8001f22:	e70c      	b.n	8001d3e <findR+0x56>
 8001f24:	20000008 	.word	0x20000008
 8001f28:	200005e0 	.word	0x200005e0
 8001f2c:	200008ab 	.word	0x200008ab
 8001f30:	20000430 	.word	0x20000430
 8001f34:	20000660 	.word	0x20000660
 8001f38:	200008aa 	.word	0x200008aa
 8001f3c:	20000424 	.word	0x20000424
 8001f40:	2000001c 	.word	0x2000001c
 8001f44:	2000042c 	.word	0x2000042c
 8001f48:	200008af 	.word	0x200008af
 8001f4c:	200005e8 	.word	0x200005e8
 8001f50:	200008a4 	.word	0x200008a4
 8001f54:	080063fb 	.word	0x080063fb
 8001f58:	20000454 	.word	0x20000454
 8001f5c:	08006403 	.word	0x08006403
 8001f60:	20000031 	.word	0x20000031
 8001f64:	20000030 	.word	0x20000030
 8001f68:	08006412 	.word	0x08006412
 8001f6c:	08006321 	.word	0x08006321
 8001f70:	0800641f 	.word	0x0800641f
 8001f74:	200008ad 	.word	0x200008ad
 8001f78:	200008ae 	.word	0x200008ae
 8001f7c:	20000020 	.word	0x20000020
 8001f80:	08006430 	.word	0x08006430
 8001f84:	0800643d 	.word	0x0800643d

08001f88 <logM>:
MODE partition(){

	return PARTITION;
}

MODE logM(){
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 8001f8a:	4c4c      	ldr	r4, [pc, #304]	; (80020bc <logM+0x134>)
MODE logM(){
 8001f8c:	b085      	sub	sp, #20
	if(firstF){
 8001f8e:	7823      	ldrb	r3, [r4, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <logM+0x14>
		firstF = false;
 8001f94:	2300      	movs	r3, #0
		sel = 0;
 8001f96:	4a4a      	ldr	r2, [pc, #296]	; (80020c0 <logM+0x138>)
		firstF = false;
 8001f98:	7023      	strb	r3, [r4, #0]
		sel = 0;
 8001f9a:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 8001f9c:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <logM+0x13c>)
 8001f9e:	4d4a      	ldr	r5, [pc, #296]	; (80020c8 <logM+0x140>)
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	2a63      	cmp	r2, #99	; 0x63
 8001fa4:	d91a      	bls.n	8001fdc <logM+0x54>
		reC = 0;
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	7018      	strb	r0, [r3, #0]
		if(JOY_L){
 8001faa:	2396      	movs	r3, #150	; 0x96
 8001fac:	4a47      	ldr	r2, [pc, #284]	; (80020cc <logM+0x144>)
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	8851      	ldrh	r1, [r2, #2]
 8001fb2:	4299      	cmp	r1, r3
 8001fb4:	d205      	bcs.n	8001fc2 <logM+0x3a>
			firstF = true;
 8001fb6:	3b2c      	subs	r3, #44	; 0x2c
 8001fb8:	3bff      	subs	r3, #255	; 0xff
 8001fba:	7023      	strb	r3, [r4, #0]
			udf = true;
 8001fbc:	702b      	strb	r3, [r5, #0]
		}
		SSD1306_PutsXY(0, sel + 2, ">", 1);
		SSD1306_UpdateScreen();
	}
	return PLOG;
}
 8001fbe:	b005      	add	sp, #20
 8001fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_U && sel) sel--;
 8001fc2:	21fa      	movs	r1, #250	; 0xfa
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	0109      	lsls	r1, r1, #4
 8001fc8:	428a      	cmp	r2, r1
 8001fca:	d91d      	bls.n	8002008 <logM+0x80>
 8001fcc:	4a3c      	ldr	r2, [pc, #240]	; (80020c0 <logM+0x138>)
 8001fce:	7813      	ldrb	r3, [r2, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <logM+0x50>
 8001fd4:	3b01      	subs	r3, #1
		if(JOY_D && (sel < ((logC > 6) ? 5 : logC - 1))) sel++;
 8001fd6:	7013      	strb	r3, [r2, #0]
		if(JOY_U || JOY_D) udf = true;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	702b      	strb	r3, [r5, #0]
	if(JOY_P){
 8001fdc:	20a0      	movs	r0, #160	; 0xa0
 8001fde:	2104      	movs	r1, #4
 8001fe0:	05c0      	lsls	r0, r0, #23
 8001fe2:	f001 fbc9 	bl	8003778 <HAL_GPIO_ReadPin>
		if(!oldsw){
 8001fe6:	4b3a      	ldr	r3, [pc, #232]	; (80020d0 <logM+0x148>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4318      	orrs	r0, r3
 8001fec:	b2c0      	uxtb	r0, r0
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	d118      	bne.n	8002024 <logM+0x9c>
			swS();
 8001ff2:	f7fe fc17 	bl	8000824 <swS>
			firstF = true;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	7023      	strb	r3, [r4, #0]
			udf = true;
 8001ffa:	702b      	strb	r3, [r5, #0]
			selLog = sel;
 8001ffc:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <logM+0x138>)
			return LOGD;
 8001ffe:	2009      	movs	r0, #9
			selLog = sel;
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <logM+0x14c>)
 8002004:	701a      	strb	r2, [r3, #0]
			return LOGD;
 8002006:	e7da      	b.n	8001fbe <logM+0x36>
		if(JOY_D && (sel < ((logC > 6) ? 5 : logC - 1))) sel++;
 8002008:	429a      	cmp	r2, r3
 800200a:	d2e7      	bcs.n	8001fdc <logM+0x54>
 800200c:	4932      	ldr	r1, [pc, #200]	; (80020d8 <logM+0x150>)
 800200e:	4a2c      	ldr	r2, [pc, #176]	; (80020c0 <logM+0x138>)
 8002010:	7808      	ldrb	r0, [r1, #0]
 8002012:	7813      	ldrb	r3, [r2, #0]
 8002014:	2105      	movs	r1, #5
 8002016:	2806      	cmp	r0, #6
 8002018:	d800      	bhi.n	800201c <logM+0x94>
 800201a:	1e41      	subs	r1, r0, #1
 800201c:	428b      	cmp	r3, r1
 800201e:	dadb      	bge.n	8001fd8 <logM+0x50>
 8002020:	3301      	adds	r3, #1
 8002022:	e7d8      	b.n	8001fd6 <logM+0x4e>
	if(udf){
 8002024:	782b      	ldrb	r3, [r5, #0]
	return PLOG;
 8002026:	2008      	movs	r0, #8
	if(udf){
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0c8      	beq.n	8001fbe <logM+0x36>
		udf = false;
 800202c:	2400      	movs	r4, #0
 800202e:	702c      	strb	r4, [r5, #0]
		basicScreen();
 8002030:	f7fe fbea 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Log", 0);
 8002034:	0023      	movs	r3, r4
 8002036:	0021      	movs	r1, r4
 8002038:	0020      	movs	r0, r4
 800203a:	4a28      	ldr	r2, [pc, #160]	; (80020dc <logM+0x154>)
 800203c:	f7fe fbd4 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < ((logC > 6) ? 6 : logC); i++){
 8002040:	4d27      	ldr	r5, [pc, #156]	; (80020e0 <logM+0x158>)
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <logM+0x150>)
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	1c13      	adds	r3, r2, #0
 8002048:	2a06      	cmp	r2, #6
 800204a:	d900      	bls.n	800204e <logM+0xc6>
 800204c:	2306      	movs	r3, #6
 800204e:	b2db      	uxtb	r3, r3
 8002050:	42a3      	cmp	r3, r4
 8002052:	d80c      	bhi.n	800206e <logM+0xe6>
		SSD1306_PutsXY(0, sel + 2, ">", 1);
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <logM+0x138>)
 8002056:	2000      	movs	r0, #0
 8002058:	7819      	ldrb	r1, [r3, #0]
 800205a:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <logM+0x15c>)
 800205c:	3102      	adds	r1, #2
 800205e:	2301      	movs	r3, #1
 8002060:	b2c9      	uxtb	r1, r1
 8002062:	f7fe fbc1 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 8002066:	f000 fc4f 	bl	8002908 <SSD1306_UpdateScreen>
	return PLOG;
 800206a:	2008      	movs	r0, #8
 800206c:	e7a7      	b.n	8001fbe <logM+0x36>
			if(pLog[i].date.year){
 800206e:	8a6f      	ldrh	r7, [r5, #18]
 8002070:	2f00      	cmp	r7, #0
 8002072:	d0ef      	beq.n	8002054 <logM+0xcc>
				String bf = (String)calloc(0, sizeof(char) * 30);
 8002074:	211e      	movs	r1, #30
 8002076:	2000      	movs	r0, #0
 8002078:	f002 ff06 	bl	8004e88 <calloc>
				sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[i].date.year, pLog[i].date.month, pLog[i].date.day, pLog[i].time.hour, pLog[i].time.min, ptCate[pLog[i].workCate]);
 800207c:	782a      	ldrb	r2, [r5, #0]
 800207e:	491a      	ldr	r1, [pc, #104]	; (80020e8 <logM+0x160>)
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	5852      	ldr	r2, [r2, r1]
 8002084:	7c6b      	ldrb	r3, [r5, #17]
 8002086:	9203      	str	r2, [sp, #12]
 8002088:	7b6a      	ldrb	r2, [r5, #13]
 800208a:	4918      	ldr	r1, [pc, #96]	; (80020ec <logM+0x164>)
 800208c:	9202      	str	r2, [sp, #8]
 800208e:	7b2a      	ldrb	r2, [r5, #12]
				String bf = (String)calloc(0, sizeof(char) * 30);
 8002090:	0006      	movs	r6, r0
				sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[i].date.year, pLog[i].date.month, pLog[i].date.day, pLog[i].time.hour, pLog[i].time.min, ptCate[pLog[i].workCate]);
 8002092:	9201      	str	r2, [sp, #4]
 8002094:	7c2a      	ldrb	r2, [r5, #16]
 8002096:	3514      	adds	r5, #20
 8002098:	9200      	str	r2, [sp, #0]
 800209a:	003a      	movs	r2, r7
 800209c:	f003 f876 	bl	800518c <siprintf>
				SSD1306_PutsXY(1, i + 2, bf, 1);
 80020a0:	2301      	movs	r3, #1
 80020a2:	1ca1      	adds	r1, r4, #2
 80020a4:	0018      	movs	r0, r3
 80020a6:	0032      	movs	r2, r6
 80020a8:	b2c9      	uxtb	r1, r1
 80020aa:	f7fe fb9d 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < ((logC > 6) ? 6 : logC); i++){
 80020ae:	3401      	adds	r4, #1
				free(bf);
 80020b0:	0030      	movs	r0, r6
 80020b2:	f002 ff1d 	bl	8004ef0 <free>
		for(uint8_t i = 0; i < ((logC > 6) ? 6 : logC); i++){
 80020b6:	b2e4      	uxtb	r4, r4
 80020b8:	e7c3      	b.n	8002042 <logM+0xba>
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	20000008 	.word	0x20000008
 80020c0:	200008ab 	.word	0x200008ab
 80020c4:	200008aa 	.word	0x200008aa
 80020c8:	20000030 	.word	0x20000030
 80020cc:	20000424 	.word	0x20000424
 80020d0:	2000001c 	.word	0x2000001c
 80020d4:	200008ac 	.word	0x200008ac
 80020d8:	200005e3 	.word	0x200005e3
 80020dc:	08006449 	.word	0x08006449
 80020e0:	200005e8 	.word	0x200005e8
 80020e4:	08006321 	.word	0x08006321
 80020e8:	20000020 	.word	0x20000020
 80020ec:	0800644e 	.word	0x0800644e

080020f0 <logD>:

MODE logD(){
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF) firstF = false;
 80020f2:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <logD+0xd4>)
MODE logD(){
 80020f4:	b087      	sub	sp, #28
	if(firstF) firstF = false;
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	2a00      	cmp	r2, #0
 80020fa:	d001      	beq.n	8002100 <logD+0x10>
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
	if(JOY_P){
 8002100:	20a0      	movs	r0, #160	; 0xa0
 8002102:	2104      	movs	r1, #4
 8002104:	05c0      	lsls	r0, r0, #23
 8002106:	f001 fb37 	bl	8003778 <HAL_GPIO_ReadPin>
		if(!oldsw){
 800210a:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <logD+0xd8>)
 800210c:	4d2f      	ldr	r5, [pc, #188]	; (80021cc <logD+0xdc>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4318      	orrs	r0, r3
 8002112:	b2c0      	uxtb	r0, r0
 8002114:	2800      	cmp	r0, #0
 8002116:	d108      	bne.n	800212a <logD+0x3a>
			swS();
 8002118:	f7fe fb84 	bl	8000824 <swS>
			udf = true;
 800211c:	2301      	movs	r3, #1
 800211e:	702b      	strb	r3, [r5, #0]
			return PLOG;
 8002120:	3307      	adds	r3, #7
 8002122:	9304      	str	r3, [sp, #16]
		SSD1306_PutsXY(0, 5, pLog[selLog].content[1], 1);
		free(bf);
		SSD1306_UpdateScreen();
	}
	return LOGD;
}
 8002124:	9804      	ldr	r0, [sp, #16]
 8002126:	b007      	add	sp, #28
 8002128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return LOGD;
 800212a:	2209      	movs	r2, #9
	if(udf){
 800212c:	782b      	ldrb	r3, [r5, #0]
	return LOGD;
 800212e:	9204      	str	r2, [sp, #16]
	if(udf){
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f7      	beq.n	8002124 <logD+0x34>
		String bf = (String)calloc(0, sizeof(char) * 30);
 8002134:	211e      	movs	r1, #30
 8002136:	2000      	movs	r0, #0
 8002138:	f002 fea6 	bl	8004e88 <calloc>
		udf = false;
 800213c:	2400      	movs	r4, #0
		sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[selLog].date.year, pLog[selLog].date.month, pLog[selLog].date.day, pLog[selLog].time.hour, pLog[selLog].time.min, ptCate[pLog[selLog].workCate]);
 800213e:	2714      	movs	r7, #20
		String bf = (String)calloc(0, sizeof(char) * 30);
 8002140:	0006      	movs	r6, r0
		udf = false;
 8002142:	702c      	strb	r4, [r5, #0]
		basicScreen();
 8002144:	f7fe fb60 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Log detail", 0);
 8002148:	0023      	movs	r3, r4
 800214a:	0021      	movs	r1, r4
 800214c:	0020      	movs	r0, r4
 800214e:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <logD+0xe0>)
 8002150:	f7fe fb4a 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[selLog].date.year, pLog[selLog].date.month, pLog[selLog].date.day, pLog[selLog].time.hour, pLog[selLog].time.min, ptCate[pLog[selLog].workCate]);
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <logD+0xe4>)
 8002156:	4d20      	ldr	r5, [pc, #128]	; (80021d8 <logD+0xe8>)
 8002158:	7818      	ldrb	r0, [r3, #0]
 800215a:	4378      	muls	r0, r7
 800215c:	1829      	adds	r1, r5, r0
 800215e:	7c4b      	ldrb	r3, [r1, #17]
 8002160:	5d40      	ldrb	r0, [r0, r5]
 8002162:	9305      	str	r3, [sp, #20]
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <logD+0xec>)
 8002166:	0080      	lsls	r0, r0, #2
 8002168:	58c3      	ldr	r3, [r0, r3]
 800216a:	8a4a      	ldrh	r2, [r1, #18]
 800216c:	9303      	str	r3, [sp, #12]
 800216e:	7b48      	ldrb	r0, [r1, #13]
 8002170:	9b05      	ldr	r3, [sp, #20]
 8002172:	9002      	str	r0, [sp, #8]
 8002174:	7b08      	ldrb	r0, [r1, #12]
 8002176:	9001      	str	r0, [sp, #4]
 8002178:	7c09      	ldrb	r1, [r1, #16]
 800217a:	0030      	movs	r0, r6
 800217c:	9100      	str	r1, [sp, #0]
 800217e:	4918      	ldr	r1, [pc, #96]	; (80021e0 <logD+0xf0>)
 8002180:	f003 f804 	bl	800518c <siprintf>
		SSD1306_PutsXY(0, 2, bf, 1);
 8002184:	0032      	movs	r2, r6
 8002186:	0020      	movs	r0, r4
 8002188:	2301      	movs	r3, #1
 800218a:	2102      	movs	r1, #2
 800218c:	f7fe fb2c 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 4, pLog[selLog].content[0], 1);
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <logD+0xe4>)
 8002192:	0020      	movs	r0, r4
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	2104      	movs	r1, #4
 8002198:	437a      	muls	r2, r7
 800219a:	18aa      	adds	r2, r5, r2
 800219c:	2301      	movs	r3, #1
 800219e:	6852      	ldr	r2, [r2, #4]
 80021a0:	f7fe fb22 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 5, pLog[selLog].content[1], 1);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <logD+0xe4>)
 80021a6:	2105      	movs	r1, #5
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	0020      	movs	r0, r4
 80021ac:	437b      	muls	r3, r7
 80021ae:	18ed      	adds	r5, r5, r3
 80021b0:	68aa      	ldr	r2, [r5, #8]
 80021b2:	2301      	movs	r3, #1
 80021b4:	f7fe fb18 	bl	80007e8 <SSD1306_PutsXY>
		free(bf);
 80021b8:	0030      	movs	r0, r6
 80021ba:	f002 fe99 	bl	8004ef0 <free>
		SSD1306_UpdateScreen();
 80021be:	f000 fba3 	bl	8002908 <SSD1306_UpdateScreen>
 80021c2:	e7af      	b.n	8002124 <logD+0x34>
 80021c4:	20000008 	.word	0x20000008
 80021c8:	2000001c 	.word	0x2000001c
 80021cc:	20000030 	.word	0x20000030
 80021d0:	0800646a 	.word	0x0800646a
 80021d4:	200008ac 	.word	0x200008ac
 80021d8:	200005e8 	.word	0x200005e8
 80021dc:	20000020 	.word	0x20000020
 80021e0:	0800644e 	.word	0x0800644e

080021e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021e4:	b510      	push	{r4, lr}
 80021e6:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021e8:	2224      	movs	r2, #36	; 0x24
 80021ea:	2100      	movs	r1, #0
 80021ec:	a80f      	add	r0, sp, #60	; 0x3c
 80021ee:	f002 fea5 	bl	8004f3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021f2:	2214      	movs	r2, #20
 80021f4:	2100      	movs	r1, #0
 80021f6:	a801      	add	r0, sp, #4
 80021f8:	f002 fea0 	bl	8004f3c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80021fc:	2220      	movs	r2, #32
 80021fe:	2100      	movs	r1, #0
 8002200:	a806      	add	r0, sp, #24
 8002202:	f002 fe9b 	bl	8004f3c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002206:	491b      	ldr	r1, [pc, #108]	; (8002274 <SystemClock_Config+0x90>)
 8002208:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <SystemClock_Config+0x94>)
 800220a:	680b      	ldr	r3, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800220c:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800220e:	401a      	ands	r2, r3
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002218:	2302      	movs	r3, #2
 800221a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221c:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800221e:	2300      	movs	r3, #0
 8002220:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8002222:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002224:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002226:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002228:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800222a:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800222c:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800222e:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002230:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002232:	f001 fe7d 	bl	8003f30 <HAL_RCC_OscConfig>
 8002236:	2800      	cmp	r0, #0
 8002238:	d001      	beq.n	800223e <SystemClock_Config+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800223a:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800223c:	e7fe      	b.n	800223c <SystemClock_Config+0x58>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800223e:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002240:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002242:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002244:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002246:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002248:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800224a:	0021      	movs	r1, r4
 800224c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224e:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002250:	f002 f8f0 	bl	8004434 <HAL_RCC_ClockConfig>
 8002254:	2800      	cmp	r0, #0
 8002256:	d001      	beq.n	800225c <SystemClock_Config+0x78>
 8002258:	b672      	cpsid	i
	while (1) {
 800225a:	e7fe      	b.n	800225a <SystemClock_Config+0x76>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800225c:	2308      	movs	r3, #8
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800225e:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002260:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002262:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002264:	f002 f9b4 	bl	80045d0 <HAL_RCCEx_PeriphCLKConfig>
 8002268:	2800      	cmp	r0, #0
 800226a:	d001      	beq.n	8002270 <SystemClock_Config+0x8c>
 800226c:	b672      	cpsid	i
	while (1) {
 800226e:	e7fe      	b.n	800226e <SystemClock_Config+0x8a>
}
 8002270:	b01c      	add	sp, #112	; 0x70
 8002272:	bd10      	pop	{r4, pc}
 8002274:	40007000 	.word	0x40007000
 8002278:	ffffe7ff 	.word	0xffffe7ff

0800227c <main>:
int main(void) {
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2601      	movs	r6, #1
int main(void) {
 8002280:	b08b      	sub	sp, #44	; 0x2c
 	HAL_Init();
 8002282:	f000 fd71 	bl	8002d68 <HAL_Init>
	SystemClock_Config();
 8002286:	f7ff ffad 	bl	80021e4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800228a:	2214      	movs	r2, #20
 800228c:	2100      	movs	r1, #0
 800228e:	a805      	add	r0, sp, #20
 8002290:	f002 fe54 	bl	8004f3c <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	2102      	movs	r1, #2
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002296:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002298:	4fcc      	ldr	r7, [pc, #816]	; (80025cc <main+0x350>)
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 800229a:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229e:	2500      	movs	r5, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022a0:	4333      	orrs	r3, r6
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	4033      	ands	r3, r6
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ae:	430a      	orrs	r2, r1
 80022b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	400b      	ands	r3, r1
 80022b8:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80022ba:	3106      	adds	r1, #6
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80022be:	f001 fa61 	bl	8003784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_DATA_GPIO_Port, RGB_DATA_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	0031      	movs	r1, r6
 80022c6:	48c2      	ldr	r0, [pc, #776]	; (80025d0 <main+0x354>)
 80022c8:	f001 fa5c 	bl	8003784 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 80022cc:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = JOY_SW_Pin;
 80022ce:	2304      	movs	r3, #4
	HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 80022d0:	a905      	add	r1, sp, #20
 80022d2:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = JOY_SW_Pin;
 80022d4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d6:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d8:	9607      	str	r6, [sp, #28]
	HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 80022da:	f001 f98d 	bl	80035f8 <HAL_GPIO_Init>
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80022de:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = BUZ_Pin;
 80022e0:	2208      	movs	r2, #8
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80022e2:	a905      	add	r1, sp, #20
 80022e4:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = BUZ_Pin;
 80022e6:	9205      	str	r2, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80022ee:	f001 f983 	bl	80035f8 <HAL_GPIO_Init>
	HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 80022f2:	48b7      	ldr	r0, [pc, #732]	; (80025d0 <main+0x354>)
 80022f4:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = RGB_DATA_Pin;
 80022f6:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f8:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f001 f97b 	bl	80035f8 <HAL_GPIO_Init>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002302:	2208      	movs	r2, #8
 8002304:	0029      	movs	r1, r5
 8002306:	a805      	add	r0, sp, #20
 8002308:	f002 fe18 	bl	8004f3c <memset>
	hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 800230c:	2306      	movs	r3, #6
	hadc.Init.OversamplingMode = DISABLE;
 800230e:	4cb1      	ldr	r4, [pc, #708]	; (80025d4 <main+0x358>)
	hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8002310:	63a3      	str	r3, [r4, #56]	; 0x38
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002312:	23c2      	movs	r3, #194	; 0xc2
 8002314:	33ff      	adds	r3, #255	; 0xff
 8002316:	6263      	str	r3, [r4, #36]	; 0x24
	hadc.Instance = ADC1;
 8002318:	4baf      	ldr	r3, [pc, #700]	; (80025d8 <main+0x35c>)
	hadc.Init.DMAContinuousRequests = DISABLE;
 800231a:	0022      	movs	r2, r4
	hadc.Instance = ADC1;
 800231c:	6023      	str	r3, [r4, #0]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800231e:	2304      	movs	r3, #4
	hadc.Init.DMAContinuousRequests = DISABLE;
 8002320:	322c      	adds	r2, #44	; 0x2c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8002322:	0020      	movs	r0, r4
	hadc.Init.ContinuousConvMode = DISABLE;
 8002324:	8425      	strh	r5, [r4, #32]
	hadc.Init.OversamplingMode = DISABLE;
 8002326:	63e5      	str	r5, [r4, #60]	; 0x3c
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002328:	62a5      	str	r5, [r4, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 800232a:	7015      	strb	r5, [r2, #0]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800232c:	6325      	str	r5, [r4, #48]	; 0x30
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 800232e:	6365      	str	r5, [r4, #52]	; 0x34
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002330:	6065      	str	r5, [r4, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002332:	60a5      	str	r5, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002334:	60e5      	str	r5, [r4, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002336:	6126      	str	r6, [r4, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002338:	6163      	str	r3, [r4, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800233a:	61a5      	str	r5, [r4, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800233c:	61e5      	str	r5, [r4, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800233e:	f000 fd9d 	bl	8002e7c <HAL_ADC_Init>
 8002342:	42a8      	cmp	r0, r5
 8002344:	d001      	beq.n	800234a <main+0xce>
 8002346:	b672      	cpsid	i
	while (1) {
 8002348:	e7fe      	b.n	8002348 <main+0xcc>
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800234a:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800234c:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800234e:	015b      	lsls	r3, r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002350:	a905      	add	r1, sp, #20
	sConfig.Channel = ADC_CHANNEL_0;
 8002352:	9605      	str	r6, [sp, #20]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002354:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002356:	f000 feff 	bl	8003158 <HAL_ADC_ConfigChannel>
 800235a:	2800      	cmp	r0, #0
 800235c:	d001      	beq.n	8002362 <main+0xe6>
 800235e:	b672      	cpsid	i
	while (1) {
 8002360:	e7fe      	b.n	8002360 <main+0xe4>
	sConfig.Channel = ADC_CHANNEL_1;
 8002362:	4b9e      	ldr	r3, [pc, #632]	; (80025dc <main+0x360>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002364:	0020      	movs	r0, r4
 8002366:	a905      	add	r1, sp, #20
	sConfig.Channel = ADC_CHANNEL_1;
 8002368:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800236a:	f000 fef5 	bl	8003158 <HAL_ADC_ConfigChannel>
 800236e:	1e04      	subs	r4, r0, #0
 8002370:	d001      	beq.n	8002376 <main+0xfa>
 8002372:	b672      	cpsid	i
	while (1) {
 8002374:	e7fe      	b.n	8002374 <main+0xf8>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002378:	0001      	movs	r1, r0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800237a:	4333      	orrs	r3, r6
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002380:	0002      	movs	r2, r0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002382:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002384:	200a      	movs	r0, #10
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800238a:	f000 ff39 	bl	8003200 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800238e:	200a      	movs	r0, #10
 8002390:	f000 ff60 	bl	8003254 <HAL_NVIC_EnableIRQ>
	hi2c1.Instance = I2C1;
 8002394:	4d92      	ldr	r5, [pc, #584]	; (80025e0 <main+0x364>)
 8002396:	4b93      	ldr	r3, [pc, #588]	; (80025e4 <main+0x368>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002398:	0028      	movs	r0, r5
	hi2c1.Instance = I2C1;
 800239a:	602b      	str	r3, [r5, #0]
	hi2c1.Init.Timing = 0x00200C28;
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <main+0x36c>)
	hi2c1.Init.OwnAddress1 = 0;
 800239e:	60ac      	str	r4, [r5, #8]
	hi2c1.Init.Timing = 0x00200C28;
 80023a0:	606b      	str	r3, [r5, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a2:	60ee      	str	r6, [r5, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a4:	612c      	str	r4, [r5, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80023a6:	616c      	str	r4, [r5, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023a8:	61ac      	str	r4, [r5, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023aa:	61ec      	str	r4, [r5, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ac:	622c      	str	r4, [r5, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80023ae:	f001 fb0f 	bl	80039d0 <HAL_I2C_Init>
 80023b2:	1e01      	subs	r1, r0, #0
 80023b4:	d001      	beq.n	80023ba <main+0x13e>
 80023b6:	b672      	cpsid	i
	while (1) {
 80023b8:	e7fe      	b.n	80023b8 <main+0x13c>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80023ba:	0028      	movs	r0, r5
 80023bc:	f001 fd26 	bl	8003e0c <HAL_I2CEx_ConfigAnalogFilter>
 80023c0:	1e01      	subs	r1, r0, #0
 80023c2:	d001      	beq.n	80023c8 <main+0x14c>
 80023c4:	b672      	cpsid	i
	while (1) {
 80023c6:	e7fe      	b.n	80023c6 <main+0x14a>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80023c8:	0028      	movs	r0, r5
 80023ca:	f001 fd45 	bl	8003e58 <HAL_I2CEx_ConfigDigitalFilter>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d001      	beq.n	80023d6 <main+0x15a>
 80023d2:	b672      	cpsid	i
	while (1) {
 80023d4:	e7fe      	b.n	80023d4 <main+0x158>
	hspi1.Instance = SPI1;
 80023d6:	4885      	ldr	r0, [pc, #532]	; (80025ec <main+0x370>)
 80023d8:	4a85      	ldr	r2, [pc, #532]	; (80025f0 <main+0x374>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023da:	6083      	str	r3, [r0, #8]
	hspi1.Instance = SPI1;
 80023dc:	6002      	str	r2, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80023de:	2282      	movs	r2, #130	; 0x82
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e0:	60c3      	str	r3, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e2:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023e4:	6143      	str	r3, [r0, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e6:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e8:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ea:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023ec:	2410      	movs	r4, #16
	hspi1.Init.CRCPolynomial = 7;
 80023ee:	2307      	movs	r3, #7
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80023f0:	0052      	lsls	r2, r2, #1
 80023f2:	6042      	str	r2, [r0, #4]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80023f4:	32fc      	adds	r2, #252	; 0xfc
 80023f6:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023f8:	61c4      	str	r4, [r0, #28]
	hspi1.Init.CRCPolynomial = 7;
 80023fa:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80023fc:	f002 fa48 	bl	8004890 <HAL_SPI_Init>
 8002400:	1e05      	subs	r5, r0, #0
 8002402:	d001      	beq.n	8002408 <main+0x18c>
 8002404:	b672      	cpsid	i
	while (1) {
 8002406:	e7fe      	b.n	8002406 <main+0x18a>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002408:	0022      	movs	r2, r4
 800240a:	0001      	movs	r1, r0
 800240c:	a805      	add	r0, sp, #20
 800240e:	f002 fd95 	bl	8004f3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002412:	2208      	movs	r2, #8
 8002414:	0029      	movs	r1, r5
 8002416:	a803      	add	r0, sp, #12
 8002418:	f002 fd90 	bl	8004f3c <memset>
	htim2.Instance = TIM2;
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	4c75      	ldr	r4, [pc, #468]	; (80025f4 <main+0x378>)
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 32 - 1;
 8002424:	231f      	movs	r3, #31
 8002426:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 1000 - 1;
 8002428:	4b73      	ldr	r3, [pc, #460]	; (80025f8 <main+0x37c>)
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800242a:	0020      	movs	r0, r4
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	60a5      	str	r5, [r4, #8]
	htim2.Init.Period = 1000 - 1;
 800242e:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002430:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002432:	6165      	str	r5, [r4, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002434:	f002 fb72 	bl	8004b1c <HAL_TIM_Base_Init>
 8002438:	2800      	cmp	r0, #0
 800243a:	d001      	beq.n	8002440 <main+0x1c4>
 800243c:	b672      	cpsid	i
	while (1) {
 800243e:	e7fe      	b.n	800243e <main+0x1c2>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002440:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002442:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002444:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002446:	a905      	add	r1, sp, #20
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002448:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800244a:	f002 fbb7 	bl	8004bbc <HAL_TIM_ConfigClockSource>
 800244e:	2800      	cmp	r0, #0
 8002450:	d001      	beq.n	8002456 <main+0x1da>
 8002452:	b672      	cpsid	i
	while (1) {
 8002454:	e7fe      	b.n	8002454 <main+0x1d8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002456:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002458:	9004      	str	r0, [sp, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800245a:	a903      	add	r1, sp, #12
 800245c:	0020      	movs	r0, r4
 800245e:	f002 fce7 	bl	8004e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002462:	2800      	cmp	r0, #0
 8002464:	d001      	beq.n	800246a <main+0x1ee>
 8002466:	b672      	cpsid	i
	while (1) {
 8002468:	e7fe      	b.n	8002468 <main+0x1ec>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	200f      	movs	r0, #15
 800246e:	0011      	movs	r1, r2
 8002470:	f000 fec6 	bl	8003200 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002474:	200f      	movs	r0, #15
 8002476:	f000 feed 	bl	8003254 <HAL_NVIC_EnableIRQ>
	SSD1306_Init();
 800247a:	f000 fa6f 	bl	800295c <SSD1306_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800247e:	0020      	movs	r0, r4
 8002480:	f002 fb70 	bl	8004b64 <HAL_TIM_Base_Start_IT>
	pLog[0].content[0] = (String)calloc(0, sizeof(char) * 22);
 8002484:	2116      	movs	r1, #22
 8002486:	2000      	movs	r0, #0
 8002488:	f002 fcfe 	bl	8004e88 <calloc>
 800248c:	4c5b      	ldr	r4, [pc, #364]	; (80025fc <main+0x380>)
	pLog[0].content[1] = (String)calloc(0, sizeof(char) * 22);
 800248e:	2116      	movs	r1, #22
	pLog[0].content[0] = (String)calloc(0, sizeof(char) * 22);
 8002490:	6060      	str	r0, [r4, #4]
	pLog[0].content[1] = (String)calloc(0, sizeof(char) * 22);
 8002492:	2000      	movs	r0, #0
 8002494:	f002 fcf8 	bl	8004e88 <calloc>
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 8002498:	2104      	movs	r1, #4
	pLog[0].content[1] = (String)calloc(0, sizeof(char) * 22);
 800249a:	60a0      	str	r0, [r4, #8]
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 800249c:	000d      	movs	r5, r1
	for (uint8_t i = 0; i < 36; i++)
 800249e:	2400      	movs	r4, #0
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 80024a0:	1fa3      	subs	r3, r4, #6
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	002a      	movs	r2, r5
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d906      	bls.n	80024b8 <main+0x23c>
 80024aa:	0023      	movs	r3, r4
 80024ac:	3b18      	subs	r3, #24
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2200      	movs	r2, #0
 80024b2:	2b05      	cmp	r3, #5
 80024b4:	d800      	bhi.n	80024b8 <main+0x23c>
 80024b6:	002a      	movs	r2, r5
 80024b8:	0020      	movs	r0, r4
 80024ba:	380c      	subs	r0, #12
 80024bc:	b2c0      	uxtb	r0, r0
 80024be:	002b      	movs	r3, r5
 80024c0:	2805      	cmp	r0, #5
 80024c2:	d906      	bls.n	80024d2 <main+0x256>
 80024c4:	0020      	movs	r0, r4
 80024c6:	381e      	subs	r0, #30
 80024c8:	b2c0      	uxtb	r0, r0
 80024ca:	2300      	movs	r3, #0
 80024cc:	2805      	cmp	r0, #5
 80024ce:	d800      	bhi.n	80024d2 <main+0x256>
 80024d0:	002b      	movs	r3, r5
 80024d2:	0020      	movs	r0, r4
 80024d4:	f7fe f930 	bl	8000738 <led_color>
	for (uint8_t i = 0; i < 36; i++)
 80024d8:	1c63      	adds	r3, r4, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b24      	cmp	r3, #36	; 0x24
 80024de:	d140      	bne.n	8002562 <main+0x2e6>
	led_update();
 80024e0:	f7fe f936 	bl	8000750 <led_update>
 80024e4:	241c      	movs	r4, #28
		SSD1306_Fill(0);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 f896 	bl	8002618 <SSD1306_Fill>
		SSD1306_GotoXY(46, 28 + i);
 80024ec:	0021      	movs	r1, r4
 80024ee:	202e      	movs	r0, #46	; 0x2e
 80024f0:	f000 f8c8 	bl	8002684 <SSD1306_GotoXY>
		SSD1306_Puts("Drawer", &Font_6x8, 0);
 80024f4:	4d42      	ldr	r5, [pc, #264]	; (8002600 <main+0x384>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	0029      	movs	r1, r5
 80024fa:	4842      	ldr	r0, [pc, #264]	; (8002604 <main+0x388>)
 80024fc:	f000 f8fe 	bl	80026fc <SSD1306_Puts>
		SSD1306_GotoXY(43, 28);
 8002500:	211c      	movs	r1, #28
 8002502:	202b      	movs	r0, #43	; 0x2b
 8002504:	f000 f8be 	bl	8002684 <SSD1306_GotoXY>
	for (uint8_t i = 0; i < 8; i++) {
 8002508:	3401      	adds	r4, #1
		SSD1306_Puts(" Parts ", &Font_6x8, 1);
 800250a:	2201      	movs	r2, #1
 800250c:	0029      	movs	r1, r5
 800250e:	483e      	ldr	r0, [pc, #248]	; (8002608 <main+0x38c>)
 8002510:	f000 f8f4 	bl	80026fc <SSD1306_Puts>
	for (uint8_t i = 0; i < 8; i++) {
 8002514:	b2a4      	uxth	r4, r4
		SSD1306_UpdateScreen();
 8002516:	f000 f9f7 	bl	8002908 <SSD1306_UpdateScreen>
		HAL_Delay(200);
 800251a:	20c8      	movs	r0, #200	; 0xc8
 800251c:	f000 fc4a 	bl	8002db4 <HAL_Delay>
	for (uint8_t i = 0; i < 8; i++) {
 8002520:	2c24      	cmp	r4, #36	; 0x24
 8002522:	d1e0      	bne.n	80024e6 <main+0x26a>
	HAL_Delay(1000);
 8002524:	20fa      	movs	r0, #250	; 0xfa
 8002526:	0080      	lsls	r0, r0, #2
 8002528:	f000 fc44 	bl	8002db4 <HAL_Delay>
	memset(pt, 0, sizeof(pt));
 800252c:	2290      	movs	r2, #144	; 0x90
 800252e:	2100      	movs	r1, #0
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4836      	ldr	r0, [pc, #216]	; (800260c <main+0x390>)
 8002534:	f002 fd02 	bl	8004f3c <memset>
	SSD1306_Clear();
 8002538:	f000 fa08 	bl	800294c <SSD1306_Clear>
	led_clear();
 800253c:	f7fe f932 	bl	80007a4 <led_clear>
	UPDATE;
 8002540:	f000 f9e2 	bl	8002908 <SSD1306_UpdateScreen>
 8002544:	f7fe f904 	bl	8000750 <led_update>
	firstOn = eepReadData(0);
 8002548:	2000      	movs	r0, #0
 800254a:	f000 fac5 	bl	8002ad8 <eepReadData>
	timeSet(firstOn);
 800254e:	f7fe fb47 	bl	8000be0 <timeSet>
		if(modeFlag == MAIN) modeFlag = mainM();
 8002552:	4c2f      	ldr	r4, [pc, #188]	; (8002610 <main+0x394>)
 8002554:	7823      	ldrb	r3, [r4, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10e      	bne.n	8002578 <main+0x2fc>
 800255a:	f7fe fc11 	bl	8000d80 <mainM>
		else if(modeFlag == LOGD) modeFlag = logD();
 800255e:	7020      	strb	r0, [r4, #0]
 8002560:	e7f7      	b.n	8002552 <main+0x2d6>
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 8002562:	0029      	movs	r1, r5
 8002564:	2b05      	cmp	r3, #5
 8002566:	d905      	bls.n	8002574 <main+0x2f8>
 8002568:	3c11      	subs	r4, #17
 800256a:	b2e4      	uxtb	r4, r4
 800256c:	2100      	movs	r1, #0
 800256e:	2c05      	cmp	r4, #5
 8002570:	d800      	bhi.n	8002574 <main+0x2f8>
 8002572:	0029      	movs	r1, r5
 8002574:	001c      	movs	r4, r3
 8002576:	e793      	b.n	80024a0 <main+0x224>
		else if(modeFlag == PSAVE) modeFlag = partS();
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <main+0x306>
 800257c:	f7fe fd1c 	bl	8000fb8 <partS>
 8002580:	e7ed      	b.n	800255e <main+0x2e2>
		else if(modeFlag == PUSE) modeFlag = pUseM();
 8002582:	2b02      	cmp	r3, #2
 8002584:	d102      	bne.n	800258c <main+0x310>
 8002586:	f7ff f803 	bl	8001590 <pUseM>
 800258a:	e7e8      	b.n	800255e <main+0x2e2>
		else if(modeFlag == USE) modeFlag = use();
 800258c:	2b03      	cmp	r3, #3
 800258e:	d102      	bne.n	8002596 <main+0x31a>
 8002590:	f7ff f93c 	bl	800180c <use>
 8002594:	e7e3      	b.n	800255e <main+0x2e2>
		else if(modeFlag == REFILL) modeFlag = refill();
 8002596:	2b04      	cmp	r3, #4
 8002598:	d102      	bne.n	80025a0 <main+0x324>
 800259a:	f7ff fa13 	bl	80019c4 <refill>
 800259e:	e7de      	b.n	800255e <main+0x2e2>
		else if(modeFlag == PFIND) modeFlag = pFind();
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d102      	bne.n	80025aa <main+0x32e>
 80025a4:	f7ff fb0c 	bl	8001bc0 <pFind>
 80025a8:	e7d9      	b.n	800255e <main+0x2e2>
		else if(modeFlag == FINDR) modeFlag = findR();
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d102      	bne.n	80025b4 <main+0x338>
 80025ae:	f7ff fb9b 	bl	8001ce8 <findR>
 80025b2:	e7d4      	b.n	800255e <main+0x2e2>
		else if(modeFlag == PARTITION) modeFlag = partition();
 80025b4:	2b07      	cmp	r3, #7
 80025b6:	d0cc      	beq.n	8002552 <main+0x2d6>
		else if(modeFlag == PLOG) modeFlag = logM();
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d102      	bne.n	80025c2 <main+0x346>
 80025bc:	f7ff fce4 	bl	8001f88 <logM>
 80025c0:	e7cd      	b.n	800255e <main+0x2e2>
		else if(modeFlag == LOGD) modeFlag = logD();
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	d1c5      	bne.n	8002552 <main+0x2d6>
 80025c6:	f7ff fd93 	bl	80020f0 <logD>
 80025ca:	e7c8      	b.n	800255e <main+0x2e2>
 80025cc:	40021000 	.word	0x40021000
 80025d0:	50000400 	.word	0x50000400
 80025d4:	20000458 	.word	0x20000458
 80025d8:	40012400 	.word	0x40012400
 80025dc:	04000002 	.word	0x04000002
 80025e0:	200004fc 	.word	0x200004fc
 80025e4:	40005400 	.word	0x40005400
 80025e8:	00200c28 	.word	0x00200c28
 80025ec:	20000548 	.word	0x20000548
 80025f0:	40013000 	.word	0x40013000
 80025f4:	200005a0 	.word	0x200005a0
 80025f8:	000003e7 	.word	0x000003e7
 80025fc:	200005e8 	.word	0x200005e8
 8002600:	20000000 	.word	0x20000000
 8002604:	08006476 	.word	0x08006476
 8002608:	0800647d 	.word	0x0800647d
 800260c:	20000660 	.word	0x20000660
 8002610:	200005e4 	.word	0x200005e4

08002614 <Error_Handler>:
 8002614:	b672      	cpsid	i
	while (1) {
 8002616:	e7fe      	b.n	8002616 <Error_Handler+0x2>

08002618 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002618:	2100      	movs	r1, #0
void SSD1306_Fill(SSD1306_COLOR_t color) {
 800261a:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800261c:	4288      	cmp	r0, r1
 800261e:	d000      	beq.n	8002622 <SSD1306_Fill+0xa>
 8002620:	31ff      	adds	r1, #255	; 0xff
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <SSD1306_Fill+0x18>)
 8002626:	00d2      	lsls	r2, r2, #3
 8002628:	f002 fc88 	bl	8004f3c <memset>
}
 800262c:	bd10      	pop	{r4, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	200008b8 	.word	0x200008b8

08002634 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002634:	b530      	push	{r4, r5, lr}
 8002636:	0004      	movs	r4, r0
	if (
 8002638:	287f      	cmp	r0, #127	; 0x7f
 800263a:	d812      	bhi.n	8002662 <SSD1306_DrawPixel+0x2e>
			x >= SSD1306_WIDTH ||
 800263c:	293f      	cmp	r1, #63	; 0x3f
 800263e:	d810      	bhi.n	8002662 <SSD1306_DrawPixel+0x2e>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <SSD1306_DrawPixel+0x48>)
 8002642:	4d0f      	ldr	r5, [pc, #60]	; (8002680 <SSD1306_DrawPixel+0x4c>)
 8002644:	7918      	ldrb	r0, [r3, #4]
 8002646:	08cb      	lsrs	r3, r1, #3
 8002648:	2800      	cmp	r0, #0
 800264a:	d00b      	beq.n	8002664 <SSD1306_DrawPixel+0x30>
		color = (SSD1306_COLOR_t)!color;
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800264c:	2a00      	cmp	r2, #0
 800264e:	d10b      	bne.n	8002668 <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002650:	01d8      	lsls	r0, r3, #7
 8002652:	2307      	movs	r3, #7
 8002654:	4019      	ands	r1, r3
 8002656:	3b06      	subs	r3, #6
 8002658:	408b      	lsls	r3, r1
 800265a:	1900      	adds	r0, r0, r4
 800265c:	5c2a      	ldrb	r2, [r5, r0]
 800265e:	4313      	orrs	r3, r2
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002660:	542b      	strb	r3, [r5, r0]
	}
}
 8002662:	bd30      	pop	{r4, r5, pc}
	if (color == SSD1306_COLOR_WHITE) {
 8002664:	2a01      	cmp	r2, #1
 8002666:	d0f3      	beq.n	8002650 <SSD1306_DrawPixel+0x1c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002668:	01d8      	lsls	r0, r3, #7
 800266a:	2307      	movs	r3, #7
 800266c:	2201      	movs	r2, #1
 800266e:	4019      	ands	r1, r3
 8002670:	408a      	lsls	r2, r1
 8002672:	1900      	adds	r0, r0, r4
 8002674:	5c2b      	ldrb	r3, [r5, r0]
 8002676:	4393      	bics	r3, r2
 8002678:	e7f2      	b.n	8002660 <SSD1306_DrawPixel+0x2c>
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	200008b2 	.word	0x200008b2
 8002680:	200008b8 	.word	0x200008b8

08002684 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002684:	4b01      	ldr	r3, [pc, #4]	; (800268c <SSD1306_GotoXY+0x8>)
 8002686:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002688:	8059      	strh	r1, [r3, #2]
}
 800268a:	4770      	bx	lr
 800268c:	200008b2 	.word	0x200008b2

08002690 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002692:	0007      	movs	r7, r0
 8002694:	000c      	movs	r4, r1
	//		/* Error */
	//		return 0;
	//	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002696:	2500      	movs	r5, #0
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002698:	9200      	str	r2, [sp, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 800269a:	7863      	ldrb	r3, [r4, #1]
 800269c:	42ab      	cmp	r3, r5
 800269e:	d806      	bhi.n	80026ae <SSD1306_Putc+0x1e>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80026a0:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <SSD1306_Putc+0x68>)
 80026a2:	7823      	ldrb	r3, [r4, #0]
 80026a4:	8811      	ldrh	r1, [r2, #0]

	/* Return character written */
	return ch;
}
 80026a6:	0038      	movs	r0, r7
	SSD1306.CurrentX += Font->FontWidth;
 80026a8:	185b      	adds	r3, r3, r1
 80026aa:	8013      	strh	r3, [r2, #0]
}
 80026ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80026ae:	003a      	movs	r2, r7
		for (j = 0; j < Font->FontWidth; j++) {
 80026b0:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80026b2:	3a20      	subs	r2, #32
 80026b4:	4353      	muls	r3, r2
 80026b6:	6862      	ldr	r2, [r4, #4]
 80026b8:	195b      	adds	r3, r3, r5
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	5a9b      	ldrh	r3, [r3, r2]
 80026be:	9301      	str	r3, [sp, #4]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <SSD1306_Putc+0x68>)
		for (j = 0; j < Font->FontWidth; j++) {
 80026c2:	7822      	ldrb	r2, [r4, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80026c4:	8818      	ldrh	r0, [r3, #0]
		for (j = 0; j < Font->FontWidth; j++) {
 80026c6:	42b2      	cmp	r2, r6
 80026c8:	d801      	bhi.n	80026ce <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80026ca:	3501      	adds	r5, #1
 80026cc:	e7e5      	b.n	800269a <SSD1306_Putc+0xa>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80026ce:	8859      	ldrh	r1, [r3, #2]
			if ((b << j) & 0x8000) {
 80026d0:	9b01      	ldr	r3, [sp, #4]
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	40b3      	lsls	r3, r6
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80026d6:	1980      	adds	r0, r0, r6
 80026d8:	1949      	adds	r1, r1, r5
			if ((b << j) & 0x8000) {
 80026da:	0212      	lsls	r2, r2, #8
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80026dc:	b280      	uxth	r0, r0
 80026de:	b289      	uxth	r1, r1
			if ((b << j) & 0x8000) {
 80026e0:	4213      	tst	r3, r2
 80026e2:	d004      	beq.n	80026ee <SSD1306_Putc+0x5e>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80026e4:	9a00      	ldr	r2, [sp, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80026e6:	f7ff ffa5 	bl	8002634 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7e8      	b.n	80026c0 <SSD1306_Putc+0x30>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80026ee:	9b00      	ldr	r3, [sp, #0]
 80026f0:	425a      	negs	r2, r3
 80026f2:	415a      	adcs	r2, r3
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	e7f6      	b.n	80026e6 <SSD1306_Putc+0x56>
 80026f8:	200008b2 	.word	0x200008b2

080026fc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	0004      	movs	r4, r0
 8002700:	000d      	movs	r5, r1
 8002702:	0016      	movs	r6, r2
	/* Write characters */
	while (*str) {
 8002704:	7820      	ldrb	r0, [r4, #0]
 8002706:	2800      	cmp	r0, #0
 8002708:	d100      	bne.n	800270c <SSD1306_Puts+0x10>
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
}
 800270a:	bd70      	pop	{r4, r5, r6, pc}
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800270c:	0032      	movs	r2, r6
 800270e:	0029      	movs	r1, r5
 8002710:	f7ff ffbe 	bl	8002690 <SSD1306_Putc>
 8002714:	0003      	movs	r3, r0
 8002716:	7820      	ldrb	r0, [r4, #0]
 8002718:	4283      	cmp	r3, r0
 800271a:	d1f6      	bne.n	800270a <SSD1306_Puts+0xe>
		str++;
 800271c:	3401      	adds	r4, #1
 800271e:	e7f1      	b.n	8002704 <SSD1306_Puts+0x8>

08002720 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002722:	b087      	sub	sp, #28
 8002724:	ac0c      	add	r4, sp, #48	; 0x30
 8002726:	7824      	ldrb	r4, [r4, #0]
 8002728:	9405      	str	r4, [sp, #20]
 800272a:	1c04      	adds	r4, r0, #0
 800272c:	287f      	cmp	r0, #127	; 0x7f
 800272e:	d900      	bls.n	8002732 <SSD1306_DrawLine+0x12>
 8002730:	247f      	movs	r4, #127	; 0x7f
 8002732:	b2a4      	uxth	r4, r4

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8002734:	1c16      	adds	r6, r2, #0
 8002736:	2a7f      	cmp	r2, #127	; 0x7f
 8002738:	d900      	bls.n	800273c <SSD1306_DrawLine+0x1c>
 800273a:	267f      	movs	r6, #127	; 0x7f
 800273c:	b2b6      	uxth	r6, r6
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 800273e:	1c0d      	adds	r5, r1, #0
 8002740:	293f      	cmp	r1, #63	; 0x3f
 8002742:	d900      	bls.n	8002746 <SSD1306_DrawLine+0x26>
 8002744:	253f      	movs	r5, #63	; 0x3f
 8002746:	b2ad      	uxth	r5, r5
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002748:	1c1f      	adds	r7, r3, #0
 800274a:	2b3f      	cmp	r3, #63	; 0x3f
 800274c:	d900      	bls.n	8002750 <SSD1306_DrawLine+0x30>
 800274e:	273f      	movs	r7, #63	; 0x3f
 8002750:	b2bf      	uxth	r7, r7
		y1 = SSD1306_HEIGHT - 1;
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002752:	1b33      	subs	r3, r6, r4
 8002754:	42a6      	cmp	r6, r4
 8002756:	d800      	bhi.n	800275a <SSD1306_DrawLine+0x3a>
 8002758:	1ba3      	subs	r3, r4, r6
 800275a:	b21b      	sxth	r3, r3
 800275c:	9300      	str	r3, [sp, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800275e:	42bd      	cmp	r5, r7
 8002760:	d224      	bcs.n	80027ac <SSD1306_DrawLine+0x8c>
 8002762:	1b7b      	subs	r3, r7, r5
 8002764:	b21b      	sxth	r3, r3
 8002766:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 8002768:	2301      	movs	r3, #1
 800276a:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 800276c:	9304      	str	r3, [sp, #16]
	sx = (x0 < x1) ? 1 : -1; 
 800276e:	42a6      	cmp	r6, r4
 8002770:	d801      	bhi.n	8002776 <SSD1306_DrawLine+0x56>
 8002772:	3b02      	subs	r3, #2
 8002774:	9303      	str	r3, [sp, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002776:	9b00      	ldr	r3, [sp, #0]
 8002778:	9a01      	ldr	r2, [sp, #4]
 800277a:	4293      	cmp	r3, r2
 800277c:	dd23      	ble.n	80027c6 <SSD1306_DrawLine+0xa6>
 800277e:	9a00      	ldr	r2, [sp, #0]
 8002780:	0fdb      	lsrs	r3, r3, #31
 8002782:	189b      	adds	r3, r3, r2
 8002784:	105b      	asrs	r3, r3, #1
 8002786:	9302      	str	r3, [sp, #8]

	if (dx == 0) {
 8002788:	9b00      	ldr	r3, [sp, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d12b      	bne.n	80027e6 <SSD1306_DrawLine+0xc6>
		if (y1 < y0) {
 800278e:	42bd      	cmp	r5, r7
 8002790:	d902      	bls.n	8002798 <SSD1306_DrawLine+0x78>
 8002792:	002b      	movs	r3, r5
 8002794:	003d      	movs	r5, r7
 8002796:	001f      	movs	r7, r3
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}

		if (x1 < x0) {
 8002798:	1c33      	adds	r3, r6, #0
 800279a:	42a6      	cmp	r6, r4
 800279c:	d900      	bls.n	80027a0 <SSD1306_DrawLine+0x80>
 800279e:	1c23      	adds	r3, r4, #0
 80027a0:	b29c      	uxth	r4, r3
			x1 = x0;
			x0 = tmp;
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80027a2:	b22d      	sxth	r5, r5
 80027a4:	42bd      	cmp	r5, r7
 80027a6:	dd16      	ble.n	80027d6 <SSD1306_DrawLine+0xb6>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 80027a8:	b007      	add	sp, #28
 80027aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80027ac:	1beb      	subs	r3, r5, r7
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 80027b2:	2301      	movs	r3, #1
 80027b4:	42a6      	cmp	r6, r4
 80027b6:	d903      	bls.n	80027c0 <SSD1306_DrawLine+0xa0>
 80027b8:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 80027ba:	3b02      	subs	r3, #2
 80027bc:	9304      	str	r3, [sp, #16]
 80027be:	e7da      	b.n	8002776 <SSD1306_DrawLine+0x56>
	sx = (x0 < x1) ? 1 : -1; 
 80027c0:	425b      	negs	r3, r3
 80027c2:	9303      	str	r3, [sp, #12]
 80027c4:	e7fa      	b.n	80027bc <SSD1306_DrawLine+0x9c>
	err = ((dx > dy) ? dx : -dy) / 2; 
 80027c6:	9b01      	ldr	r3, [sp, #4]
 80027c8:	9a01      	ldr	r2, [sp, #4]
 80027ca:	0fdb      	lsrs	r3, r3, #31
 80027cc:	189b      	adds	r3, r3, r2
 80027ce:	105b      	asrs	r3, r3, #1
 80027d0:	425b      	negs	r3, r3
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	e7d7      	b.n	8002786 <SSD1306_DrawLine+0x66>
			SSD1306_DrawPixel(x0, i, c);
 80027d6:	b2ad      	uxth	r5, r5
 80027d8:	0029      	movs	r1, r5
 80027da:	0020      	movs	r0, r4
 80027dc:	9a05      	ldr	r2, [sp, #20]
 80027de:	f7ff ff29 	bl	8002634 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80027e2:	3501      	adds	r5, #1
 80027e4:	e7dd      	b.n	80027a2 <SSD1306_DrawLine+0x82>
	if (dy == 0) {
 80027e6:	9b01      	ldr	r3, [sp, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d115      	bne.n	8002818 <SSD1306_DrawLine+0xf8>
		if (y1 < y0) {
 80027ec:	1c2b      	adds	r3, r5, #0
 80027ee:	42bd      	cmp	r5, r7
 80027f0:	d900      	bls.n	80027f4 <SSD1306_DrawLine+0xd4>
 80027f2:	1c3b      	adds	r3, r7, #0
 80027f4:	b29d      	uxth	r5, r3
		if (x1 < x0) {
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d202      	bcs.n	8002800 <SSD1306_DrawLine+0xe0>
 80027fa:	0023      	movs	r3, r4
 80027fc:	0034      	movs	r4, r6
 80027fe:	001e      	movs	r6, r3
		for (i = x0; i <= x1; i++) {
 8002800:	b224      	sxth	r4, r4
 8002802:	42b4      	cmp	r4, r6
 8002804:	dcd0      	bgt.n	80027a8 <SSD1306_DrawLine+0x88>
			SSD1306_DrawPixel(i, y0, c);
 8002806:	b2a4      	uxth	r4, r4
 8002808:	0020      	movs	r0, r4
 800280a:	0029      	movs	r1, r5
 800280c:	9a05      	ldr	r2, [sp, #20]
 800280e:	f7ff ff11 	bl	8002634 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002812:	3401      	adds	r4, #1
 8002814:	e7f4      	b.n	8002800 <SSD1306_DrawLine+0xe0>
		if (x1 < x0) {
 8002816:	9302      	str	r3, [sp, #8]
		SSD1306_DrawPixel(x0, y0, c);
 8002818:	0029      	movs	r1, r5
 800281a:	0020      	movs	r0, r4
 800281c:	9a05      	ldr	r2, [sp, #20]
 800281e:	f7ff ff09 	bl	8002634 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002822:	42a6      	cmp	r6, r4
 8002824:	d101      	bne.n	800282a <SSD1306_DrawLine+0x10a>
 8002826:	42bd      	cmp	r5, r7
 8002828:	d0be      	beq.n	80027a8 <SSD1306_DrawLine+0x88>
		if (e2 > -dx) {
 800282a:	9b00      	ldr	r3, [sp, #0]
 800282c:	425a      	negs	r2, r3
 800282e:	9b02      	ldr	r3, [sp, #8]
 8002830:	4293      	cmp	r3, r2
 8002832:	dd05      	ble.n	8002840 <SSD1306_DrawLine+0x120>
			err -= dy;
 8002834:	9a01      	ldr	r2, [sp, #4]
 8002836:	1a9b      	subs	r3, r3, r2
			x0 += sx;
 8002838:	9a03      	ldr	r2, [sp, #12]
			err -= dy;
 800283a:	b21b      	sxth	r3, r3
			x0 += sx;
 800283c:	18a4      	adds	r4, r4, r2
 800283e:	b2a4      	uxth	r4, r4
		if (e2 < dy) {
 8002840:	9a02      	ldr	r2, [sp, #8]
 8002842:	9901      	ldr	r1, [sp, #4]
 8002844:	428a      	cmp	r2, r1
 8002846:	dae6      	bge.n	8002816 <SSD1306_DrawLine+0xf6>
			err += dx;
 8002848:	9a00      	ldr	r2, [sp, #0]
 800284a:	189b      	adds	r3, r3, r2
			y0 += sy;
 800284c:	9a04      	ldr	r2, [sp, #16]
			err += dx;
 800284e:	b21b      	sxth	r3, r3
			y0 += sy;
 8002850:	18ad      	adds	r5, r5, r2
 8002852:	b2ad      	uxth	r5, r5
 8002854:	e7df      	b.n	8002816 <SSD1306_DrawLine+0xf6>

08002856 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002858:	b085      	sub	sp, #20
 800285a:	9302      	str	r3, [sp, #8]
 800285c:	ab0a      	add	r3, sp, #40	; 0x28
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	0005      	movs	r5, r0
 8002862:	000f      	movs	r7, r1
 8002864:	0014      	movs	r4, r2
 8002866:	9303      	str	r3, [sp, #12]
	uint8_t i;

	/* Check input parameters */
	if (
 8002868:	287f      	cmp	r0, #127	; 0x7f
 800286a:	d814      	bhi.n	8002896 <SSD1306_DrawFilledRectangle+0x40>
			x >= SSD1306_WIDTH ||
 800286c:	293f      	cmp	r1, #63	; 0x3f
 800286e:	d812      	bhi.n	8002896 <SSD1306_DrawFilledRectangle+0x40>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002870:	1883      	adds	r3, r0, r2
 8002872:	2b7f      	cmp	r3, #127	; 0x7f
 8002874:	dd02      	ble.n	800287c <SSD1306_DrawFilledRectangle+0x26>
		w = SSD1306_WIDTH - x;
 8002876:	2480      	movs	r4, #128	; 0x80
 8002878:	1a24      	subs	r4, r4, r0
 800287a:	b2a4      	uxth	r4, r4
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800287c:	9b02      	ldr	r3, [sp, #8]
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2b3f      	cmp	r3, #63	; 0x3f
 8002882:	dd03      	ble.n	800288c <SSD1306_DrawFilledRectangle+0x36>
		h = SSD1306_HEIGHT - y;
 8002884:	2340      	movs	r3, #64	; 0x40
 8002886:	1bdb      	subs	r3, r3, r7
 8002888:	b29b      	uxth	r3, r3
 800288a:	9302      	str	r3, [sp, #8]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800288c:	2600      	movs	r6, #0
 800288e:	9b02      	ldr	r3, [sp, #8]
 8002890:	b2b1      	uxth	r1, r6
 8002892:	429e      	cmp	r6, r3
 8002894:	d901      	bls.n	800289a <SSD1306_DrawFilledRectangle+0x44>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}
 8002896:	b005      	add	sp, #20
 8002898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 800289a:	9b03      	ldr	r3, [sp, #12]
 800289c:	19c9      	adds	r1, r1, r7
 800289e:	b289      	uxth	r1, r1
 80028a0:	1962      	adds	r2, r4, r5
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	0028      	movs	r0, r5
 80028a6:	000b      	movs	r3, r1
 80028a8:	b292      	uxth	r2, r2
	for (i = 0; i <= h; i++) {
 80028aa:	3601      	adds	r6, #1
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80028ac:	f7ff ff38 	bl	8002720 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80028b0:	b2f6      	uxtb	r6, r6
 80028b2:	e7ec      	b.n	800288e <SSD1306_DrawFilledRectangle+0x38>

080028b4 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80028b4:	b570      	push	{r4, r5, r6, lr}
	uint8_t dt[256];
	dt[0] = reg;
	uint8_t i;
	for(i = 0; i < count; i++)
 80028b6:	2400      	movs	r4, #0
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80028b8:	b0c2      	sub	sp, #264	; 0x108
 80028ba:	0015      	movs	r5, r2
	dt[0] = reg;
 80028bc:	aa02      	add	r2, sp, #8
 80028be:	7011      	strb	r1, [r2, #0]
	for(i = 0; i < count; i++)
 80028c0:	429c      	cmp	r4, r3
 80028c2:	d309      	bcc.n	80028d8 <ssd1306_I2C_WriteMulti+0x24>
		dt[i+1] = data[i];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80028c4:	b281      	uxth	r1, r0
 80028c6:	200a      	movs	r0, #10
 80028c8:	3301      	adds	r3, #1
 80028ca:	9000      	str	r0, [sp, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <ssd1306_I2C_WriteMulti+0x30>)
 80028d0:	f001 f8d4 	bl	8003a7c <HAL_I2C_Master_Transmit>
}
 80028d4:	b042      	add	sp, #264	; 0x108
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
		dt[i+1] = data[i];
 80028d8:	5d2e      	ldrb	r6, [r5, r4]
 80028da:	1911      	adds	r1, r2, r4
	for(i = 0; i < count; i++)
 80028dc:	3401      	adds	r4, #1
		dt[i+1] = data[i];
 80028de:	704e      	strb	r6, [r1, #1]
	for(i = 0; i < count; i++)
 80028e0:	b2e4      	uxtb	r4, r4
 80028e2:	e7ed      	b.n	80028c0 <ssd1306_I2C_WriteMulti+0xc>
 80028e4:	200004fc 	.word	0x200004fc

080028e8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80028e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
 80028ea:	466b      	mov	r3, sp
 80028ec:	7319      	strb	r1, [r3, #12]
	dt[1] = data;
 80028ee:	735a      	strb	r2, [r3, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80028f0:	230a      	movs	r3, #10
 80028f2:	0001      	movs	r1, r0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	aa03      	add	r2, sp, #12
 80028f8:	3b08      	subs	r3, #8
 80028fa:	4802      	ldr	r0, [pc, #8]	; (8002904 <ssd1306_I2C_Write+0x1c>)
 80028fc:	f001 f8be 	bl	8003a7c <HAL_I2C_Master_Transmit>
}
 8002900:	b005      	add	sp, #20
 8002902:	bd00      	pop	{pc}
 8002904:	200004fc 	.word	0x200004fc

08002908 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 800290c:	2578      	movs	r5, #120	; 0x78
 800290e:	4e0e      	ldr	r6, [pc, #56]	; (8002948 <SSD1306_UpdateScreen+0x40>)
 8002910:	0022      	movs	r2, r4
 8002912:	2100      	movs	r1, #0
 8002914:	0028      	movs	r0, r5
 8002916:	f7ff ffe7 	bl	80028e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800291a:	2200      	movs	r2, #0
 800291c:	0028      	movs	r0, r5
 800291e:	0011      	movs	r1, r2
 8002920:	f7ff ffe2 	bl	80028e8 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 8002924:	3401      	adds	r4, #1
		SSD1306_WRITECOMMAND(0x10);
 8002926:	2210      	movs	r2, #16
 8002928:	2100      	movs	r1, #0
 800292a:	0028      	movs	r0, r5
 800292c:	f7ff ffdc 	bl	80028e8 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 8002930:	b2e4      	uxtb	r4, r4
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002932:	0032      	movs	r2, r6
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	2140      	movs	r1, #64	; 0x40
 8002938:	0028      	movs	r0, r5
 800293a:	f7ff ffbb 	bl	80028b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800293e:	3680      	adds	r6, #128	; 0x80
 8002940:	2cb8      	cmp	r4, #184	; 0xb8
 8002942:	d1e5      	bne.n	8002910 <SSD1306_UpdateScreen+0x8>
}
 8002944:	bd70      	pop	{r4, r5, r6, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	200008b8 	.word	0x200008b8

0800294c <SSD1306_Clear>:
{
 800294c:	b510      	push	{r4, lr}
	SSD1306_Fill (0);
 800294e:	2000      	movs	r0, #0
 8002950:	f7ff fe62 	bl	8002618 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002954:	f7ff ffd8 	bl	8002908 <SSD1306_UpdateScreen>
}
 8002958:	bd10      	pop	{r4, pc}
	...

0800295c <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 800295c:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800295e:	2201      	movs	r2, #1
 8002960:	2178      	movs	r1, #120	; 0x78
 8002962:	4b52      	ldr	r3, [pc, #328]	; (8002aac <SSD1306_Init+0x150>)
 8002964:	4852      	ldr	r0, [pc, #328]	; (8002ab0 <SSD1306_Init+0x154>)
 8002966:	f001 f9ad 	bl	8003cc4 <HAL_I2C_IsDeviceReady>
		return 0;
 800296a:	2400      	movs	r4, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800296c:	42a0      	cmp	r0, r4
 800296e:	d000      	beq.n	8002972 <SSD1306_Init+0x16>
 8002970:	e09a      	b.n	8002aa8 <SSD1306_Init+0x14c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002972:	0021      	movs	r1, r4
 8002974:	22ae      	movs	r2, #174	; 0xae
 8002976:	2078      	movs	r0, #120	; 0x78
 8002978:	f7ff ffb6 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800297c:	0021      	movs	r1, r4
 800297e:	2220      	movs	r2, #32
 8002980:	2078      	movs	r0, #120	; 0x78
 8002982:	f7ff ffb1 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002986:	0021      	movs	r1, r4
 8002988:	2210      	movs	r2, #16
 800298a:	2078      	movs	r0, #120	; 0x78
 800298c:	f7ff ffac 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002990:	0021      	movs	r1, r4
 8002992:	22b0      	movs	r2, #176	; 0xb0
 8002994:	2078      	movs	r0, #120	; 0x78
 8002996:	f7ff ffa7 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800299a:	0021      	movs	r1, r4
 800299c:	22c8      	movs	r2, #200	; 0xc8
 800299e:	2078      	movs	r0, #120	; 0x78
 80029a0:	f7ff ffa2 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80029a4:	0022      	movs	r2, r4
 80029a6:	0021      	movs	r1, r4
 80029a8:	2078      	movs	r0, #120	; 0x78
 80029aa:	f7ff ff9d 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80029ae:	0021      	movs	r1, r4
 80029b0:	2210      	movs	r2, #16
 80029b2:	2078      	movs	r0, #120	; 0x78
 80029b4:	f7ff ff98 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80029b8:	0021      	movs	r1, r4
 80029ba:	2240      	movs	r2, #64	; 0x40
 80029bc:	2078      	movs	r0, #120	; 0x78
 80029be:	f7ff ff93 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80029c2:	0021      	movs	r1, r4
 80029c4:	2281      	movs	r2, #129	; 0x81
 80029c6:	2078      	movs	r0, #120	; 0x78
 80029c8:	f7ff ff8e 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80029cc:	0021      	movs	r1, r4
 80029ce:	22ff      	movs	r2, #255	; 0xff
 80029d0:	2078      	movs	r0, #120	; 0x78
 80029d2:	f7ff ff89 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80029d6:	0021      	movs	r1, r4
 80029d8:	22a1      	movs	r2, #161	; 0xa1
 80029da:	2078      	movs	r0, #120	; 0x78
 80029dc:	f7ff ff84 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80029e0:	0021      	movs	r1, r4
 80029e2:	22a6      	movs	r2, #166	; 0xa6
 80029e4:	2078      	movs	r0, #120	; 0x78
 80029e6:	f7ff ff7f 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80029ea:	0021      	movs	r1, r4
 80029ec:	22a8      	movs	r2, #168	; 0xa8
 80029ee:	2078      	movs	r0, #120	; 0x78
 80029f0:	f7ff ff7a 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80029f4:	0021      	movs	r1, r4
 80029f6:	223f      	movs	r2, #63	; 0x3f
 80029f8:	2078      	movs	r0, #120	; 0x78
 80029fa:	f7ff ff75 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80029fe:	0021      	movs	r1, r4
 8002a00:	22a4      	movs	r2, #164	; 0xa4
 8002a02:	2078      	movs	r0, #120	; 0x78
 8002a04:	f7ff ff70 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002a08:	0021      	movs	r1, r4
 8002a0a:	22d3      	movs	r2, #211	; 0xd3
 8002a0c:	2078      	movs	r0, #120	; 0x78
 8002a0e:	f7ff ff6b 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002a12:	0022      	movs	r2, r4
 8002a14:	0021      	movs	r1, r4
 8002a16:	2078      	movs	r0, #120	; 0x78
 8002a18:	f7ff ff66 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a1c:	0021      	movs	r1, r4
 8002a1e:	22d5      	movs	r2, #213	; 0xd5
 8002a20:	2078      	movs	r0, #120	; 0x78
 8002a22:	f7ff ff61 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002a26:	0021      	movs	r1, r4
 8002a28:	22f0      	movs	r2, #240	; 0xf0
 8002a2a:	2078      	movs	r0, #120	; 0x78
 8002a2c:	f7ff ff5c 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002a30:	0021      	movs	r1, r4
 8002a32:	22d9      	movs	r2, #217	; 0xd9
 8002a34:	2078      	movs	r0, #120	; 0x78
 8002a36:	f7ff ff57 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002a3a:	0021      	movs	r1, r4
 8002a3c:	2222      	movs	r2, #34	; 0x22
 8002a3e:	2078      	movs	r0, #120	; 0x78
 8002a40:	f7ff ff52 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002a44:	0021      	movs	r1, r4
 8002a46:	22da      	movs	r2, #218	; 0xda
 8002a48:	2078      	movs	r0, #120	; 0x78
 8002a4a:	f7ff ff4d 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002a4e:	0021      	movs	r1, r4
 8002a50:	2212      	movs	r2, #18
 8002a52:	2078      	movs	r0, #120	; 0x78
 8002a54:	f7ff ff48 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002a58:	0021      	movs	r1, r4
 8002a5a:	22db      	movs	r2, #219	; 0xdb
 8002a5c:	2078      	movs	r0, #120	; 0x78
 8002a5e:	f7ff ff43 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002a62:	0021      	movs	r1, r4
 8002a64:	2220      	movs	r2, #32
 8002a66:	2078      	movs	r0, #120	; 0x78
 8002a68:	f7ff ff3e 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002a6c:	0021      	movs	r1, r4
 8002a6e:	228d      	movs	r2, #141	; 0x8d
 8002a70:	2078      	movs	r0, #120	; 0x78
 8002a72:	f7ff ff39 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002a76:	0021      	movs	r1, r4
 8002a78:	2214      	movs	r2, #20
 8002a7a:	2078      	movs	r0, #120	; 0x78
 8002a7c:	f7ff ff34 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002a80:	0021      	movs	r1, r4
 8002a82:	22af      	movs	r2, #175	; 0xaf
 8002a84:	2078      	movs	r0, #120	; 0x78
 8002a86:	f7ff ff2f 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002a8a:	0021      	movs	r1, r4
 8002a8c:	222e      	movs	r2, #46	; 0x2e
 8002a8e:	2078      	movs	r0, #120	; 0x78
 8002a90:	f7ff ff2a 	bl	80028e8 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a94:	0020      	movs	r0, r4
 8002a96:	f7ff fdbf 	bl	8002618 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002a9a:	f7ff ff35 	bl	8002908 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <SSD1306_Init+0x158>)
 8002aa0:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8002aa2:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 8002aa4:	3401      	adds	r4, #1
 8002aa6:	715c      	strb	r4, [r3, #5]
}
 8002aa8:	0020      	movs	r0, r4
 8002aaa:	bd10      	pop	{r4, pc}
 8002aac:	00004e20 	.word	0x00004e20
 8002ab0:	200004fc 	.word	0x200004fc
 8002ab4:	200008b2 	.word	0x200008b2

08002ab8 <eepWriteData>:
 */
#include "stm32l0xx_EEPROM.h"
#include "stm32l052xx.h"

void eepWriteData(uint16_t addr, uint8_t inData)
{
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	000d      	movs	r5, r1
 8002abc:	0004      	movs	r4, r0
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8002abe:	f000 fd4f 	bl	8003560 <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE,(DATA_EEPROM_BASE+addr),inData);
 8002ac2:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <eepWriteData+0x1c>)
 8002ac4:	002a      	movs	r2, r5
 8002ac6:	18e1      	adds	r1, r4, r3
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f000 fd6b 	bl	80035a4 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002ace:	f000 fd5f 	bl	8003590 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
 8002ad4:	08080000 	.word	0x08080000

08002ad8 <eepReadData>:
uint8_t eepReadData(uint16_t addr)
{
	//return (*(__IO uint32_t *)(EEP_START_ADRESS+addr));
	return (*(__IO uint8_t*)(DATA_EEPROM_BASE+addr));
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <eepReadData+0xc>)
 8002ada:	18c0      	adds	r0, r0, r3
 8002adc:	7800      	ldrb	r0, [r0, #0]
 8002ade:	b2c0      	uxtb	r0, r0
}
 8002ae0:	4770      	bx	lr
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	08080000 	.word	0x08080000

08002ae8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_MspInit+0x18>)
 8002aec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aee:	430a      	orrs	r2, r1
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2280      	movs	r2, #128	; 0x80
 8002af4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002af6:	0552      	lsls	r2, r2, #21
 8002af8:	430a      	orrs	r2, r1
 8002afa:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afc:	4770      	bx	lr
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	40021000 	.word	0x40021000

08002b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b04:	b510      	push	{r4, lr}
 8002b06:	0004      	movs	r4, r0
 8002b08:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0a:	2214      	movs	r2, #20
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	a801      	add	r0, sp, #4
 8002b10:	f002 fa14 	bl	8004f3c <memset>
  if(hadc->Instance==ADC1)
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <HAL_ADC_MspInit+0x48>)
 8002b16:	6822      	ldr	r2, [r4, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d115      	bne.n	8002b48 <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_ADC_MspInit+0x4c>)
 8002b20:	0092      	lsls	r2, r2, #2
 8002b22:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b26:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b28:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b2a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	430a      	orrs	r2, r1
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	400b      	ands	r3, r1
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 8002b3c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 8002b40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b42:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	f000 fd58 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b48:	b006      	add	sp, #24
 8002b4a:	bd10      	pop	{r4, pc}
 8002b4c:	40012400 	.word	0x40012400
 8002b50:	40021000 	.word	0x40021000

08002b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b54:	b510      	push	{r4, lr}
 8002b56:	0004      	movs	r4, r0
 8002b58:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5a:	2214      	movs	r2, #20
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	a801      	add	r0, sp, #4
 8002b60:	f002 f9ec 	bl	8004f3c <memset>
  if(hi2c->Instance==I2C1)
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_I2C_MspInit+0x50>)
 8002b66:	6822      	ldr	r2, [r4, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d119      	bne.n	8002ba0 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4c0e      	ldr	r4, [pc, #56]	; (8002ba8 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	480e      	ldr	r0, [pc, #56]	; (8002bac <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b74:	430a      	orrs	r2, r1
 8002b76:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002b78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b80:	23c0      	movs	r3, #192	; 0xc0
 8002b82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b84:	3bae      	subs	r3, #174	; 0xae
 8002b86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b88:	3b0f      	subs	r3, #15
 8002b8a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002b8e:	3b02      	subs	r3, #2
 8002b90:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b92:	f000 fd31 	bl	80035f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b9a:	039b      	lsls	r3, r3, #14
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ba0:	b006      	add	sp, #24
 8002ba2:	bd10      	pop	{r4, pc}
 8002ba4:	40005400 	.word	0x40005400
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	50000400 	.word	0x50000400

08002bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	0005      	movs	r5, r0
 8002bb4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	2214      	movs	r2, #20
 8002bb8:	2100      	movs	r1, #0
 8002bba:	a801      	add	r0, sp, #4
 8002bbc:	f002 f9be 	bl	8004f3c <memset>
  if(hspi->Instance==SPI1)
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_SPI_MspInit+0x7c>)
 8002bc2:	682a      	ldr	r2, [r5, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d12f      	bne.n	8002c28 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bc8:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	2601      	movs	r6, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bcc:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <HAL_SPI_MspInit+0x80>)
 8002bce:	0152      	lsls	r2, r2, #5
 8002bd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bdc:	4332      	orrs	r2, r6
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be4:	4033      	ands	r3, r6
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002bea:	23a0      	movs	r3, #160	; 0xa0
 8002bec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	3b9e      	subs	r3, #158	; 0x9e
 8002bf0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	199b      	adds	r3, r3, r6
 8002bf4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf6:	f000 fcff 	bl	80035f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002bfa:	4c0e      	ldr	r4, [pc, #56]	; (8002c34 <HAL_SPI_MspInit+0x84>)
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_SPI_MspInit+0x88>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfe:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002c00:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c02:	2310      	movs	r3, #16
 8002c04:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c06:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002c08:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002c0a:	6066      	str	r6, [r4, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0c:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c0e:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c10:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c12:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002c14:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c16:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002c18:	f000 fb42 	bl	80032a0 <HAL_DMA_Init>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8002c20:	f7ff fcf8 	bl	8002614 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002c24:	64ac      	str	r4, [r5, #72]	; 0x48
 8002c26:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c28:	b006      	add	sp, #24
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	40013000 	.word	0x40013000
 8002c30:	40021000 	.word	0x40021000
 8002c34:	200004b4 	.word	0x200004b4
 8002c38:	40020030 	.word	0x40020030

08002c3c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	6802      	ldr	r2, [r0, #0]
 8002c40:	05db      	lsls	r3, r3, #23
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d104      	bne.n	8002c50 <HAL_TIM_Base_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c46:	2301      	movs	r3, #1
 8002c48:	4a02      	ldr	r2, [pc, #8]	; (8002c54 <HAL_TIM_Base_MspInit+0x18>)
 8002c4a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c50:	4770      	bx	lr
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	40021000 	.word	0x40021000

08002c58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c58:	e7fe      	b.n	8002c58 <NMI_Handler>

08002c5a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5a:	e7fe      	b.n	8002c5a <HardFault_Handler>

08002c5c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c5c:	4770      	bx	lr

08002c5e <PendSV_Handler>:
 8002c5e:	4770      	bx	lr

08002c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c62:	f000 f895 	bl	8002d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c66:	bd10      	pop	{r4, pc}

08002c68 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002c68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c6a:	4802      	ldr	r0, [pc, #8]	; (8002c74 <DMA1_Channel2_3_IRQHandler+0xc>)
 8002c6c:	f000 fb9c 	bl	80033a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002c70:	bd10      	pop	{r4, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	200004b4 	.word	0x200004b4

08002c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c78:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c7a:	4802      	ldr	r0, [pc, #8]	; (8002c84 <TIM2_IRQHandler+0xc>)
 8002c7c:	f002 f850 	bl	8004d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c80:	bd10      	pop	{r4, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	200005a0 	.word	0x200005a0

08002c88 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c88:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <_sbrk+0x30>)
 8002c8a:	490c      	ldr	r1, [pc, #48]	; (8002cbc <_sbrk+0x34>)
{
 8002c8c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c8e:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c90:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <_sbrk+0x38>)
{
 8002c92:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002c94:	6810      	ldr	r0, [r2, #0]
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d101      	bne.n	8002c9e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002c9a:	480a      	ldr	r0, [pc, #40]	; (8002cc4 <_sbrk+0x3c>)
 8002c9c:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9e:	6810      	ldr	r0, [r2, #0]
 8002ca0:	18c3      	adds	r3, r0, r3
 8002ca2:	428b      	cmp	r3, r1
 8002ca4:	d906      	bls.n	8002cb4 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002ca6:	f002 f8f9 	bl	8004e9c <__errno>
 8002caa:	230c      	movs	r3, #12
 8002cac:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002cae:	2001      	movs	r0, #1
 8002cb0:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002cb2:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002cb4:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002cb6:	e7fc      	b.n	8002cb2 <_sbrk+0x2a>
 8002cb8:	00000400 	.word	0x00000400
 8002cbc:	20002000 	.word	0x20002000
 8002cc0:	20000cb8 	.word	0x20000cb8
 8002cc4:	20000ce8 	.word	0x20000ce8

08002cc8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc8:	4770      	bx	lr
	...

08002ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002cce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cd0:	480d      	ldr	r0, [pc, #52]	; (8002d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cd2:	490e      	ldr	r1, [pc, #56]	; (8002d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <LoopForever+0xe>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd8:	e002      	b.n	8002ce0 <LoopCopyDataInit>

08002cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cde:	3304      	adds	r3, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce4:	d3f9      	bcc.n	8002cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ce8:	4c0b      	ldr	r4, [pc, #44]	; (8002d18 <LoopForever+0x16>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cec:	e001      	b.n	8002cf2 <LoopFillZerobss>

08002cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf0:	3204      	adds	r2, #4

08002cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf4:	d3fb      	bcc.n	8002cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cf6:	f7ff ffe7 	bl	8002cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f002 f8d5 	bl	8004ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cfe:	f7ff fabd 	bl	800227c <main>

08002d02 <LoopForever>:

LoopForever:
    b LoopForever
 8002d02:	e7fe      	b.n	8002d02 <LoopForever>
   ldr   r0, =_estack
 8002d04:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d0c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002d10:	0800651c 	.word	0x0800651c
  ldr r2, =_sbss
 8002d14:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002d18:	20000ce8 	.word	0x20000ce8

08002d1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC1_COMP_IRQHandler>
	...

08002d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d24:	20fa      	movs	r0, #250	; 0xfa
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_InitTick+0x3c>)
 8002d28:	0080      	lsls	r0, r0, #2
 8002d2a:	7819      	ldrb	r1, [r3, #0]
 8002d2c:	f7fd fa0a 	bl	8000144 <__udivsi3>
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_InitTick+0x40>)
 8002d32:	0001      	movs	r1, r0
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	f7fd fa05 	bl	8000144 <__udivsi3>
 8002d3a:	f000 fa97 	bl	800326c <HAL_SYSTICK_Config>
 8002d3e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002d40:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d42:	2c00      	cmp	r4, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d46:	2d03      	cmp	r5, #3
 8002d48:	d807      	bhi.n	8002d5a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d4a:	3802      	subs	r0, #2
 8002d4c:	0022      	movs	r2, r4
 8002d4e:	0029      	movs	r1, r5
 8002d50:	f000 fa56 	bl	8003200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d54:	0020      	movs	r0, r4
 8002d56:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_InitTick+0x44>)
 8002d58:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	20000038 	.word	0x20000038
 8002d60:	20000034 	.word	0x20000034
 8002d64:	2000003c 	.word	0x2000003c

08002d68 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d68:	2340      	movs	r3, #64	; 0x40
 8002d6a:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <HAL_Init+0x24>)
{
 8002d6c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d6e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d70:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d72:	430b      	orrs	r3, r1
 8002d74:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d76:	f7ff ffd3 	bl	8002d20 <HAL_InitTick>
 8002d7a:	1e04      	subs	r4, r0, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_Init+0x1e>
    HAL_MspInit();
 8002d7e:	f7ff feb3 	bl	8002ae8 <HAL_MspInit>
}
 8002d82:	0020      	movs	r0, r4
 8002d84:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002d86:	2401      	movs	r4, #1
 8002d88:	e7fb      	b.n	8002d82 <HAL_Init+0x1a>
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	40022000 	.word	0x40022000

08002d90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002d90:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <HAL_IncTick+0x10>)
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <HAL_IncTick+0x14>)
 8002d94:	6811      	ldr	r1, [r2, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	185b      	adds	r3, r3, r1
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	4770      	bx	lr
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000cbc 	.word	0x20000cbc
 8002da4:	20000038 	.word	0x20000038

08002da8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002da8:	4b01      	ldr	r3, [pc, #4]	; (8002db0 <HAL_GetTick+0x8>)
 8002daa:	6818      	ldr	r0, [r3, #0]
}
 8002dac:	4770      	bx	lr
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	20000cbc 	.word	0x20000cbc

08002db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff fff6 	bl	8002da8 <HAL_GetTick>
 8002dbc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dbe:	1c63      	adds	r3, r4, #1
 8002dc0:	d002      	beq.n	8002dc8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <HAL_Delay+0x20>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc8:	f7ff ffee 	bl	8002da8 <HAL_GetTick>
 8002dcc:	1b40      	subs	r0, r0, r5
 8002dce:	42a0      	cmp	r0, r4
 8002dd0:	d3fa      	bcc.n	8002dc8 <HAL_Delay+0x14>
  {
  }
}
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
 8002dd4:	20000038 	.word	0x20000038

08002dd8 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <ADC_DelayMicroSecond+0x24>)
{
 8002dda:	b513      	push	{r0, r1, r4, lr}
 8002ddc:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002dde:	4908      	ldr	r1, [pc, #32]	; (8002e00 <ADC_DelayMicroSecond+0x28>)
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	f7fd f9af 	bl	8000144 <__udivsi3>
 8002de6:	4344      	muls	r4, r0
 8002de8:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002dea:	9b01      	ldr	r3, [sp, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d100      	bne.n	8002df2 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8002df0:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8002df2:	9b01      	ldr	r3, [sp, #4]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	e7f7      	b.n	8002dea <ADC_DelayMicroSecond+0x12>
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	20000034 	.word	0x20000034
 8002e00:	000f4240 	.word	0x000f4240

08002e04 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e04:	2103      	movs	r1, #3
 8002e06:	6803      	ldr	r3, [r0, #0]
{
 8002e08:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e0a:	689a      	ldr	r2, [r3, #8]
{
 8002e0c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e0e:	400a      	ands	r2, r1
 8002e10:	2a01      	cmp	r2, #1
 8002e12:	d104      	bne.n	8002e1e <ADC_Enable+0x1a>
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	4211      	tst	r1, r2
 8002e18:	d001      	beq.n	8002e1e <ADC_Enable+0x1a>
  return HAL_OK;
 8002e1a:	2000      	movs	r0, #0
}
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <ADC_Enable+0x74>)
 8002e22:	4211      	tst	r1, r2
 8002e24:	d008      	beq.n	8002e38 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e26:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e28:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e32:	4303      	orrs	r3, r0
 8002e34:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002e36:	e7f1      	b.n	8002e1c <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8002e38:	2501      	movs	r5, #1
 8002e3a:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002e3c:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8002e3e:	432a      	orrs	r2, r5
 8002e40:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002e42:	f7ff ffc9 	bl	8002dd8 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8002e46:	f7ff ffaf 	bl	8002da8 <HAL_GetTick>
 8002e4a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	422b      	tst	r3, r5
 8002e52:	d1e2      	bne.n	8002e1a <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e54:	f7ff ffa8 	bl	8002da8 <HAL_GetTick>
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	280a      	cmp	r0, #10
 8002e5c:	d9f6      	bls.n	8002e4c <ADC_Enable+0x48>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	422b      	tst	r3, r5
 8002e64:	d1f2      	bne.n	8002e4c <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e66:	2310      	movs	r3, #16
 8002e68:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8002e6a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e72:	431d      	orrs	r5, r3
 8002e74:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002e76:	e7d1      	b.n	8002e1c <ADC_Enable+0x18>
 8002e78:	80000017 	.word	0x80000017

08002e7c <HAL_ADC_Init>:
{
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002e82:	2c00      	cmp	r4, #0
 8002e84:	d01b      	beq.n	8002ebe <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002e8c:	0022      	movs	r2, r4
 8002e8e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8002e90:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8002e92:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002e94:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002e96:	f7ff fe35 	bl	8002b04 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002e9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e9c:	06db      	lsls	r3, r3, #27
 8002e9e:	d406      	bmi.n	8002eae <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	6899      	ldr	r1, [r3, #8]
 8002ea6:	0008      	movs	r0, r1
 8002ea8:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002eaa:	4211      	tst	r1, r2
 8002eac:	d008      	beq.n	8002ec0 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eae:	2310      	movs	r3, #16
 8002eb0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002eb2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	3450      	adds	r4, #80	; 0x50
 8002ebc:	7023      	strb	r3, [r4, #0]
}
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002ec2:	4955      	ldr	r1, [pc, #340]	; (8003018 <HAL_ADC_Init+0x19c>)
 8002ec4:	4011      	ands	r1, r2
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ecc:	2203      	movs	r2, #3
 8002ece:	6899      	ldr	r1, [r3, #8]
 8002ed0:	4011      	ands	r1, r2
 8002ed2:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_ADC_Init+0x1a0>)
 8002ed4:	2901      	cmp	r1, #1
 8002ed6:	d102      	bne.n	8002ede <HAL_ADC_Init+0x62>
 8002ed8:	681d      	ldr	r5, [r3, #0]
 8002eda:	420d      	tst	r5, r1
 8002edc:	d119      	bne.n	8002f12 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002ede:	2680      	movs	r6, #128	; 0x80
 8002ee0:	6861      	ldr	r1, [r4, #4]
 8002ee2:	05f6      	lsls	r6, r6, #23
 8002ee4:	004d      	lsls	r5, r1, #1
 8002ee6:	086d      	lsrs	r5, r5, #1
 8002ee8:	42b5      	cmp	r5, r6
 8002eea:	d003      	beq.n	8002ef4 <HAL_ADC_Init+0x78>
 8002eec:	2580      	movs	r5, #128	; 0x80
 8002eee:	062d      	lsls	r5, r5, #24
 8002ef0:	42a9      	cmp	r1, r5
 8002ef2:	d176      	bne.n	8002fe2 <HAL_ADC_Init+0x166>
 8002ef4:	691d      	ldr	r5, [r3, #16]
 8002ef6:	00ad      	lsls	r5, r5, #2
 8002ef8:	08ad      	lsrs	r5, r5, #2
 8002efa:	611d      	str	r5, [r3, #16]
 8002efc:	691d      	ldr	r5, [r3, #16]
 8002efe:	4329      	orrs	r1, r5
 8002f00:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002f02:	2518      	movs	r5, #24
 8002f04:	68d9      	ldr	r1, [r3, #12]
 8002f06:	43a9      	bics	r1, r5
 8002f08:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	68a5      	ldr	r5, [r4, #8]
 8002f0e:	4329      	orrs	r1, r5
 8002f10:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002f12:	6811      	ldr	r1, [r2, #0]
 8002f14:	4d42      	ldr	r5, [pc, #264]	; (8003020 <HAL_ADC_Init+0x1a4>)
 8002f16:	4029      	ands	r1, r5
 8002f18:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f1c:	6815      	ldr	r5, [r2, #0]
 8002f1e:	0649      	lsls	r1, r1, #25
 8002f20:	4329      	orrs	r1, r5
 8002f22:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	0552      	lsls	r2, r2, #21
 8002f2a:	4211      	tst	r1, r2
 8002f2c:	d102      	bne.n	8002f34 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002f2e:	6899      	ldr	r1, [r3, #8]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	493b      	ldr	r1, [pc, #236]	; (8003024 <HAL_ADC_Init+0x1a8>)
 8002f38:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002f3a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002f3c:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f3e:	68dd      	ldr	r5, [r3, #12]
 8002f40:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002f42:	2902      	cmp	r1, #2
 8002f44:	d100      	bne.n	8002f48 <HAL_ADC_Init+0xcc>
 8002f46:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f48:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f4a:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f4c:	4332      	orrs	r2, r6
 8002f4e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002f50:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f52:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002f54:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f56:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002f58:	69e5      	ldr	r5, [r4, #28]
 8002f5a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f5c:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f5e:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f60:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002f62:	0025      	movs	r5, r4
 8002f64:	352c      	adds	r5, #44	; 0x2c
 8002f66:	782d      	ldrb	r5, [r5, #0]
 8002f68:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f6a:	432a      	orrs	r2, r5
 8002f6c:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f6e:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f70:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f74:	30ff      	adds	r0, #255	; 0xff
 8002f76:	4282      	cmp	r2, r0
 8002f78:	d004      	beq.n	8002f84 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002f7a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002f7c:	68d8      	ldr	r0, [r3, #12]
 8002f7e:	432a      	orrs	r2, r5
 8002f80:	4302      	orrs	r2, r0
 8002f82:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f84:	1ca2      	adds	r2, r4, #2
 8002f86:	7fd2      	ldrb	r2, [r2, #31]
 8002f88:	2a01      	cmp	r2, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f8c:	2900      	cmp	r1, #0
 8002f8e:	d134      	bne.n	8002ffa <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	68d9      	ldr	r1, [r3, #12]
 8002f94:	0252      	lsls	r2, r2, #9
 8002f96:	430a      	orrs	r2, r1
 8002f98:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002f9a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002f9c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002f9e:	2901      	cmp	r1, #1
 8002fa0:	d133      	bne.n	800300a <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002fa2:	4821      	ldr	r0, [pc, #132]	; (8003028 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002fa4:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002fa6:	4002      	ands	r2, r0
 8002fa8:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002faa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002fac:	6918      	ldr	r0, [r3, #16]
 8002fae:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8002fb0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002fb2:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002fb4:	4302      	orrs	r2, r0
 8002fb6:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	4311      	orrs	r1, r2
 8002fbc:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002fbe:	2107      	movs	r1, #7
 8002fc0:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8002fc2:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8002fd0:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8002fd2:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002fd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fd6:	4393      	bics	r3, r2
 8002fd8:	001a      	movs	r2, r3
 8002fda:	2301      	movs	r3, #1
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002fe0:	e76d      	b.n	8002ebe <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002fe2:	691d      	ldr	r5, [r3, #16]
 8002fe4:	4e11      	ldr	r6, [pc, #68]	; (800302c <HAL_ADC_Init+0x1b0>)
 8002fe6:	00ad      	lsls	r5, r5, #2
 8002fe8:	08ad      	lsrs	r5, r5, #2
 8002fea:	611d      	str	r5, [r3, #16]
 8002fec:	6815      	ldr	r5, [r2, #0]
 8002fee:	4035      	ands	r5, r6
 8002ff0:	6015      	str	r5, [r2, #0]
 8002ff2:	6815      	ldr	r5, [r2, #0]
 8002ff4:	4329      	orrs	r1, r5
 8002ff6:	6011      	str	r1, [r2, #0]
 8002ff8:	e783      	b.n	8002f02 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ffe:	4301      	orrs	r1, r0
 8003000:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003002:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003004:	430a      	orrs	r2, r1
 8003006:	65a2      	str	r2, [r4, #88]	; 0x58
 8003008:	e7c7      	b.n	8002f9a <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800300a:	2101      	movs	r1, #1
 800300c:	420a      	tst	r2, r1
 800300e:	d0d6      	beq.n	8002fbe <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	438a      	bics	r2, r1
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e7d2      	b.n	8002fbe <HAL_ADC_Init+0x142>
 8003018:	fffffefd 	.word	0xfffffefd
 800301c:	40012708 	.word	0x40012708
 8003020:	fdffffff 	.word	0xfdffffff
 8003024:	fffe0219 	.word	0xfffe0219
 8003028:	fffffc03 	.word	0xfffffc03
 800302c:	ffc3ffff 	.word	0xffc3ffff

08003030 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003030:	6803      	ldr	r3, [r0, #0]
{
 8003032:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003034:	689b      	ldr	r3, [r3, #8]
{
 8003036:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8003038:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800303a:	075b      	lsls	r3, r3, #29
 800303c:	d41a      	bmi.n	8003074 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800303e:	0025      	movs	r5, r4
 8003040:	3550      	adds	r5, #80	; 0x50
 8003042:	782b      	ldrb	r3, [r5, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d015      	beq.n	8003074 <HAL_ADC_Start+0x44>
 8003048:	2301      	movs	r3, #1
 800304a:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800304c:	69e3      	ldr	r3, [r4, #28]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d111      	bne.n	8003076 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8003052:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003054:	4a0b      	ldr	r2, [pc, #44]	; (8003084 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8003056:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003058:	401a      	ands	r2, r3
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003060:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8003062:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8003064:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8003066:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	3a18      	subs	r2, #24
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003076:	0020      	movs	r0, r4
 8003078:	f7ff fec4 	bl	8002e04 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800307c:	2800      	cmp	r0, #0
 800307e:	d0e8      	beq.n	8003052 <HAL_ADC_Start+0x22>
 8003080:	e7f8      	b.n	8003074 <HAL_ADC_Start+0x44>
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	fffff0fe 	.word	0xfffff0fe

08003088 <HAL_ADC_PollForConversion>:
{
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800308a:	6945      	ldr	r5, [r0, #20]
{
 800308c:	0004      	movs	r4, r0
 800308e:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003090:	2d08      	cmp	r5, #8
 8003092:	d00d      	beq.n	80030b0 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003094:	6803      	ldr	r3, [r0, #0]
 8003096:	2001      	movs	r0, #1
 8003098:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800309a:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800309c:	4203      	tst	r3, r0
 800309e:	d007      	beq.n	80030b0 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a0:	2320      	movs	r3, #32
 80030a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 80030a4:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a6:	4313      	orrs	r3, r2
 80030a8:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 80030aa:	2300      	movs	r3, #0
 80030ac:	7023      	strb	r3, [r4, #0]
}
 80030ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80030b0:	f7ff fe7a 	bl	8002da8 <HAL_GetTick>
 80030b4:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4215      	tst	r5, r2
 80030bc:	d024      	beq.n	8003108 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80030c2:	0092      	lsls	r2, r2, #2
 80030c4:	430a      	orrs	r2, r1
 80030c6:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030c8:	22c0      	movs	r2, #192	; 0xc0
 80030ca:	68d9      	ldr	r1, [r3, #12]
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	4211      	tst	r1, r2
 80030d0:	d113      	bne.n	80030fa <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030d2:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030d4:	7fd2      	ldrb	r2, [r2, #31]
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	0712      	lsls	r2, r2, #28
 80030de:	d50c      	bpl.n	80030fa <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	0752      	lsls	r2, r2, #29
 80030e4:	d428      	bmi.n	8003138 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030e6:	210c      	movs	r1, #12
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	438a      	bics	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80030ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80030f0:	4916      	ldr	r1, [pc, #88]	; (800314c <HAL_ADC_PollForConversion+0xc4>)
 80030f2:	4011      	ands	r1, r2
 80030f4:	2201      	movs	r2, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80030fa:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80030fc:	69a2      	ldr	r2, [r4, #24]
 80030fe:	4282      	cmp	r2, r0
 8003100:	d1d5      	bne.n	80030ae <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003102:	220c      	movs	r2, #12
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e7d2      	b.n	80030ae <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8003108:	1c72      	adds	r2, r6, #1
 800310a:	d0d5      	beq.n	80030b8 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800310c:	2e00      	cmp	r6, #0
 800310e:	d10d      	bne.n	800312c <HAL_ADC_PollForConversion+0xa4>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003110:	002a      	movs	r2, r5
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	401a      	ands	r2, r3
 8003118:	421d      	tst	r5, r3
 800311a:	d1cc      	bne.n	80030b6 <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800311c:	2304      	movs	r3, #4
 800311e:	6d61      	ldr	r1, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8003120:	3450      	adds	r4, #80	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003122:	430b      	orrs	r3, r1
 8003124:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 8003126:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8003128:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 800312a:	e7c0      	b.n	80030ae <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800312c:	f7ff fe3c 	bl	8002da8 <HAL_GetTick>
 8003130:	1bc0      	subs	r0, r0, r7
 8003132:	42b0      	cmp	r0, r6
 8003134:	d8ec      	bhi.n	8003110 <HAL_ADC_PollForConversion+0x88>
 8003136:	e7be      	b.n	80030b6 <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003138:	2220      	movs	r2, #32
 800313a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800313c:	430a      	orrs	r2, r1
 800313e:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003140:	2201      	movs	r2, #1
 8003142:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003144:	430a      	orrs	r2, r1
 8003146:	65a2      	str	r2, [r4, #88]	; 0x58
 8003148:	e7d7      	b.n	80030fa <HAL_ADC_PollForConversion+0x72>
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	fffffefe 	.word	0xfffffefe

08003150 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8003150:	6803      	ldr	r3, [r0, #0]
 8003152:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003154:	4770      	bx	lr
	...

08003158 <HAL_ADC_ConfigChannel>:
{
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800315a:	0004      	movs	r4, r0
 800315c:	3450      	adds	r4, #80	; 0x50
 800315e:	7822      	ldrb	r2, [r4, #0]
{
 8003160:	0003      	movs	r3, r0
 8003162:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8003164:	2002      	movs	r0, #2
 8003166:	2a01      	cmp	r2, #1
 8003168:	d00b      	beq.n	8003182 <HAL_ADC_ConfigChannel+0x2a>
 800316a:	3801      	subs	r0, #1
 800316c:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	6891      	ldr	r1, [r2, #8]
 8003172:	0749      	lsls	r1, r1, #29
 8003174:	d506      	bpl.n	8003184 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003176:	2220      	movs	r2, #32
 8003178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800317a:	430a      	orrs	r2, r1
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800317e:	2300      	movs	r3, #0
 8003180:	7023      	strb	r3, [r4, #0]
}
 8003182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003184:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003186:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8003188:	4e19      	ldr	r6, [pc, #100]	; (80031f0 <HAL_ADC_ConfigChannel+0x98>)
 800318a:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800318c:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800318e:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003190:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003192:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 8003194:	42b7      	cmp	r7, r6
 8003196:	d019      	beq.n	80031cc <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003198:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800319a:	4301      	orrs	r1, r0
 800319c:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <HAL_ADC_ConfigChannel+0x9c>)
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80031aa:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80031b0:	f7ff fe12 	bl	8002dd8 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	039b      	lsls	r3, r3, #14
 80031b8:	d505      	bpl.n	80031c6 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <HAL_ADC_ConfigChannel+0x9c>)
 80031be:	03db      	lsls	r3, r3, #15
 80031c0:	6811      	ldr	r1, [r2, #0]
 80031c2:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80031c4:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80031c6:	2000      	movs	r0, #0
 80031c8:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80031ca:	e7da      	b.n	8003182 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80031cc:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80031ce:	438d      	bics	r5, r1
 80031d0:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80031d6:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <HAL_ADC_ConfigChannel+0x9c>)
 80031d8:	4907      	ldr	r1, [pc, #28]	; (80031f8 <HAL_ADC_ConfigChannel+0xa0>)
 80031da:	6813      	ldr	r3, [r2, #0]
 80031dc:	400b      	ands	r3, r1
 80031de:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80031e0:	0383      	lsls	r3, r0, #14
 80031e2:	d5f0      	bpl.n	80031c6 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80031e4:	4a03      	ldr	r2, [pc, #12]	; (80031f4 <HAL_ADC_ConfigChannel+0x9c>)
 80031e6:	4905      	ldr	r1, [pc, #20]	; (80031fc <HAL_ADC_ConfigChannel+0xa4>)
 80031e8:	6813      	ldr	r3, [r2, #0]
 80031ea:	400b      	ands	r3, r1
 80031ec:	e7ea      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x6c>
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	00001001 	.word	0x00001001
 80031f4:	40012708 	.word	0x40012708
 80031f8:	ff7fffff 	.word	0xff7fffff
 80031fc:	ffbfffff 	.word	0xffbfffff

08003200 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003200:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003202:	25ff      	movs	r5, #255	; 0xff
 8003204:	2403      	movs	r4, #3
 8003206:	002a      	movs	r2, r5
 8003208:	4004      	ands	r4, r0
 800320a:	00e4      	lsls	r4, r4, #3
 800320c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800320e:	0189      	lsls	r1, r1, #6
 8003210:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003212:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003214:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003216:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003218:	2800      	cmp	r0, #0
 800321a:	db0a      	blt.n	8003232 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800321c:	24c0      	movs	r4, #192	; 0xc0
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_NVIC_SetPriority+0x4c>)
 8003220:	0880      	lsrs	r0, r0, #2
 8003222:	0080      	lsls	r0, r0, #2
 8003224:	18c0      	adds	r0, r0, r3
 8003226:	00a4      	lsls	r4, r4, #2
 8003228:	5903      	ldr	r3, [r0, r4]
 800322a:	401a      	ands	r2, r3
 800322c:	4311      	orrs	r1, r2
 800322e:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003230:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003232:	200f      	movs	r0, #15
 8003234:	4003      	ands	r3, r0
 8003236:	3b08      	subs	r3, #8
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <HAL_NVIC_SetPriority+0x50>)
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	181b      	adds	r3, r3, r0
 8003240:	69d8      	ldr	r0, [r3, #28]
 8003242:	4002      	ands	r2, r0
 8003244:	4311      	orrs	r1, r2
 8003246:	61d9      	str	r1, [r3, #28]
 8003248:	e7f2      	b.n	8003230 <HAL_NVIC_SetPriority+0x30>
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	e000e100 	.word	0xe000e100
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003254:	2800      	cmp	r0, #0
 8003256:	db05      	blt.n	8003264 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003258:	231f      	movs	r3, #31
 800325a:	4018      	ands	r0, r3
 800325c:	3b1e      	subs	r3, #30
 800325e:	4083      	lsls	r3, r0
 8003260:	4a01      	ldr	r2, [pc, #4]	; (8003268 <HAL_NVIC_EnableIRQ+0x14>)
 8003262:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003264:	4770      	bx	lr
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	e000e100 	.word	0xe000e100

0800326c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	1e43      	subs	r3, r0, #1
 8003270:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003272:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	4293      	cmp	r3, r2
 8003276:	d20d      	bcs.n	8003294 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003278:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800327c:	4807      	ldr	r0, [pc, #28]	; (800329c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003280:	6a03      	ldr	r3, [r0, #32]
 8003282:	0609      	lsls	r1, r1, #24
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	430b      	orrs	r3, r1
 800328a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800328c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800328e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003292:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003294:	4770      	bx	lr
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	e000e010 	.word	0xe000e010
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80032a4:	2001      	movs	r0, #1
  if(hdma == NULL)
 80032a6:	2c00      	cmp	r4, #0
 80032a8:	d035      	beq.n	8003316 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032aa:	6825      	ldr	r5, [r4, #0]
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_DMA_Init+0x78>)
 80032ae:	2114      	movs	r1, #20
 80032b0:	18e8      	adds	r0, r5, r3
 80032b2:	f7fc ff47 	bl	8000144 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032b8:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80032ba:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032bc:	2302      	movs	r3, #2
 80032be:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032c0:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80032c2:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032c4:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032c8:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032ca:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80032cc:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ce:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80032d0:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	433b      	orrs	r3, r7
 80032d4:	6967      	ldr	r7, [r4, #20]
 80032d6:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d8:	69a7      	ldr	r7, [r4, #24]
 80032da:	433b      	orrs	r3, r7
 80032dc:	69e7      	ldr	r7, [r4, #28]
 80032de:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e0:	6a27      	ldr	r7, [r4, #32]
 80032e2:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80032e4:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032e6:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	01db      	lsls	r3, r3, #7
 80032ec:	4299      	cmp	r1, r3
 80032ee:	d00c      	beq.n	800330a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032f0:	251c      	movs	r5, #28
 80032f2:	4028      	ands	r0, r5
 80032f4:	3d0d      	subs	r5, #13
 80032f6:	4085      	lsls	r5, r0
 80032f8:	490a      	ldr	r1, [pc, #40]	; (8003324 <HAL_DMA_Init+0x84>)
 80032fa:	680b      	ldr	r3, [r1, #0]
 80032fc:	43ab      	bics	r3, r5
 80032fe:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003300:	6863      	ldr	r3, [r4, #4]
 8003302:	680d      	ldr	r5, [r1, #0]
 8003304:	4083      	lsls	r3, r0
 8003306:	432b      	orrs	r3, r5
 8003308:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800330a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800330c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800330e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003310:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003312:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003314:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003318:	bffdfff8 	.word	0xbffdfff8
 800331c:	40020000 	.word	0x40020000
 8003320:	ffff800f 	.word	0xffff800f
 8003324:	400200a8 	.word	0x400200a8

08003328 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800332a:	1d45      	adds	r5, r0, #5
{
 800332c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800332e:	7feb      	ldrb	r3, [r5, #31]
{
 8003330:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003332:	2002      	movs	r0, #2
 8003334:	2b01      	cmp	r3, #1
 8003336:	d029      	beq.n	800338c <HAL_DMA_Start_IT+0x64>
 8003338:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800333a:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 800333c:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800333e:	7ffb      	ldrb	r3, [r7, #31]
 8003340:	2600      	movs	r6, #0
 8003342:	469c      	mov	ip, r3
 8003344:	4660      	mov	r0, ip
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2801      	cmp	r0, #1
 800334a:	d12a      	bne.n	80033a2 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800334c:	3001      	adds	r0, #1
 800334e:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003350:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003352:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003354:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003356:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003358:	361c      	adds	r6, #28
 800335a:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 800335c:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800335e:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8003360:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003362:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003364:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003366:	9b01      	ldr	r3, [sp, #4]
 8003368:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800336a:	68a3      	ldr	r3, [r4, #8]
 800336c:	2b10      	cmp	r3, #16
 800336e:	d10e      	bne.n	800338e <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003370:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003372:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003374:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800337a:	230e      	movs	r3, #14
 800337c:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800337e:	4313      	orrs	r3, r2
 8003380:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8003382:	2301      	movs	r3, #1
 8003384:	6802      	ldr	r2, [r0, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338a:	2000      	movs	r0, #0
}
 800338c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800338e:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003390:	60c2      	str	r2, [r0, #12]
 8003392:	e7ef      	b.n	8003374 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003394:	2204      	movs	r2, #4
 8003396:	6803      	ldr	r3, [r0, #0]
 8003398:	4393      	bics	r3, r2
 800339a:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800339c:	6802      	ldr	r2, [r0, #0]
 800339e:	230a      	movs	r3, #10
 80033a0:	e7ed      	b.n	800337e <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 80033a2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 80033a4:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 80033a6:	e7f1      	b.n	800338c <HAL_DMA_Start_IT+0x64>

080033a8 <HAL_DMA_IRQHandler>:
{
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80033aa:	221c      	movs	r2, #28
 80033ac:	2704      	movs	r7, #4
 80033ae:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033b0:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80033b2:	4032      	ands	r2, r6
 80033b4:	003e      	movs	r6, r7
 80033b6:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033b8:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80033ba:	6803      	ldr	r3, [r0, #0]
 80033bc:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80033be:	4235      	tst	r5, r6
 80033c0:	d00d      	beq.n	80033de <HAL_DMA_IRQHandler+0x36>
 80033c2:	423c      	tst	r4, r7
 80033c4:	d00b      	beq.n	80033de <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	0692      	lsls	r2, r2, #26
 80033ca:	d402      	bmi.n	80033d2 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	43ba      	bics	r2, r7
 80033d0:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80033d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80033d4:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d019      	beq.n	800340e <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80033da:	4798      	blx	r3
  return;
 80033dc:	e017      	b.n	800340e <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80033de:	2702      	movs	r7, #2
 80033e0:	003e      	movs	r6, r7
 80033e2:	4096      	lsls	r6, r2
 80033e4:	4235      	tst	r5, r6
 80033e6:	d013      	beq.n	8003410 <HAL_DMA_IRQHandler+0x68>
 80033e8:	423c      	tst	r4, r7
 80033ea:	d011      	beq.n	8003410 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	0692      	lsls	r2, r2, #26
 80033f0:	d406      	bmi.n	8003400 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033f2:	240a      	movs	r4, #10
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	43a2      	bics	r2, r4
 80033f8:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80033fa:	2201      	movs	r2, #1
 80033fc:	1d83      	adds	r3, r0, #6
 80033fe:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003400:	2200      	movs	r2, #0
 8003402:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003404:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003406:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003408:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800340a:	4293      	cmp	r3, r2
 800340c:	d1e5      	bne.n	80033da <HAL_DMA_IRQHandler+0x32>
}
 800340e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003410:	2608      	movs	r6, #8
 8003412:	0037      	movs	r7, r6
 8003414:	4097      	lsls	r7, r2
 8003416:	423d      	tst	r5, r7
 8003418:	d0f9      	beq.n	800340e <HAL_DMA_IRQHandler+0x66>
 800341a:	4234      	tst	r4, r6
 800341c:	d0f7      	beq.n	800340e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800341e:	250e      	movs	r5, #14
 8003420:	681c      	ldr	r4, [r3, #0]
 8003422:	43ac      	bics	r4, r5
 8003424:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003426:	2301      	movs	r3, #1
 8003428:	001c      	movs	r4, r3
 800342a:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800342c:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800342e:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003430:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003432:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003434:	2200      	movs	r2, #0
 8003436:	1d43      	adds	r3, r0, #5
 8003438:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800343a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800343c:	e7e5      	b.n	800340a <HAL_DMA_IRQHandler+0x62>
	...

08003440 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <FLASH_SetErrorCode+0xa4>)
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	6990      	ldr	r0, [r2, #24]
 8003446:	0049      	lsls	r1, r1, #1
 8003448:	0003      	movs	r3, r0
{
 800344a:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800344c:	400b      	ands	r3, r1
 800344e:	4208      	tst	r0, r1
 8003450:	d005      	beq.n	800345e <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003452:	2302      	movs	r3, #2
 8003454:	4824      	ldr	r0, [pc, #144]	; (80034e8 <FLASH_SetErrorCode+0xa8>)
 8003456:	6944      	ldr	r4, [r0, #20]
 8003458:	4323      	orrs	r3, r4
 800345a:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800345c:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800345e:	2080      	movs	r0, #128	; 0x80
 8003460:	6991      	ldr	r1, [r2, #24]
 8003462:	0080      	lsls	r0, r0, #2
 8003464:	4201      	tst	r1, r0
 8003466:	d005      	beq.n	8003474 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003468:	2101      	movs	r1, #1
 800346a:	4c1f      	ldr	r4, [pc, #124]	; (80034e8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 800346c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800346e:	6965      	ldr	r5, [r4, #20]
 8003470:	4329      	orrs	r1, r5
 8003472:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003474:	2080      	movs	r0, #128	; 0x80
 8003476:	6991      	ldr	r1, [r2, #24]
 8003478:	00c0      	lsls	r0, r0, #3
 800347a:	4201      	tst	r1, r0
 800347c:	d005      	beq.n	800348a <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800347e:	2108      	movs	r1, #8
 8003480:	4c19      	ldr	r4, [pc, #100]	; (80034e8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8003482:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003484:	6965      	ldr	r5, [r4, #20]
 8003486:	4329      	orrs	r1, r5
 8003488:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800348a:	2080      	movs	r0, #128	; 0x80
 800348c:	6991      	ldr	r1, [r2, #24]
 800348e:	0100      	lsls	r0, r0, #4
 8003490:	4201      	tst	r1, r0
 8003492:	d005      	beq.n	80034a0 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003494:	2104      	movs	r1, #4
 8003496:	4c14      	ldr	r4, [pc, #80]	; (80034e8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8003498:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800349a:	6965      	ldr	r5, [r4, #20]
 800349c:	4329      	orrs	r1, r5
 800349e:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80034a0:	2080      	movs	r0, #128	; 0x80
 80034a2:	6991      	ldr	r1, [r2, #24]
 80034a4:	0180      	lsls	r0, r0, #6
 80034a6:	4201      	tst	r1, r0
 80034a8:	d005      	beq.n	80034b6 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80034aa:	2110      	movs	r1, #16
 80034ac:	4c0e      	ldr	r4, [pc, #56]	; (80034e8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 80034ae:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80034b0:	6965      	ldr	r5, [r4, #20]
 80034b2:	4329      	orrs	r1, r5
 80034b4:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80034b6:	6991      	ldr	r1, [r2, #24]
 80034b8:	0389      	lsls	r1, r1, #14
 80034ba:	d505      	bpl.n	80034c8 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80034bc:	2020      	movs	r0, #32
 80034be:	4c0a      	ldr	r4, [pc, #40]	; (80034e8 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 80034c0:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80034c2:	6961      	ldr	r1, [r4, #20]
 80034c4:	4301      	orrs	r1, r0
 80034c6:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80034c8:	2080      	movs	r0, #128	; 0x80
 80034ca:	6991      	ldr	r1, [r2, #24]
 80034cc:	0240      	lsls	r0, r0, #9
 80034ce:	4201      	tst	r1, r0
 80034d0:	d005      	beq.n	80034de <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80034d2:	2140      	movs	r1, #64	; 0x40
 80034d4:	4c04      	ldr	r4, [pc, #16]	; (80034e8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80034d6:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80034d8:	6965      	ldr	r5, [r4, #20]
 80034da:	4329      	orrs	r1, r5
 80034dc:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80034de:	6193      	str	r3, [r2, #24]
}  
 80034e0:	bd30      	pop	{r4, r5, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	40022000 	.word	0x40022000
 80034e8:	20000cc0 	.word	0x20000cc0

080034ec <FLASH_WaitForLastOperation>:
{
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7ff fc5a 	bl	8002da8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80034f4:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80034f6:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80034f8:	4b18      	ldr	r3, [pc, #96]	; (800355c <FLASH_WaitForLastOperation+0x70>)
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	4232      	tst	r2, r6
 80034fe:	d121      	bne.n	8003544 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003500:	2202      	movs	r2, #2
 8003502:	6999      	ldr	r1, [r3, #24]
 8003504:	4211      	tst	r1, r2
 8003506:	d000      	beq.n	800350a <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003508:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	05d2      	lsls	r2, r2, #23
 800350e:	d415      	bmi.n	800353c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003510:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003512:	0592      	lsls	r2, r2, #22
 8003514:	d412      	bmi.n	800353c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003516:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003518:	0552      	lsls	r2, r2, #21
 800351a:	d40f      	bmi.n	800353c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800351c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800351e:	0512      	lsls	r2, r2, #20
 8003520:	d40c      	bmi.n	800353c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003522:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003524:	0492      	lsls	r2, r2, #18
 8003526:	d409      	bmi.n	800353c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003528:	6999      	ldr	r1, [r3, #24]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	0008      	movs	r0, r1
 800352e:	0292      	lsls	r2, r2, #10
 8003530:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003532:	4211      	tst	r1, r2
 8003534:	d102      	bne.n	800353c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003536:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003538:	03db      	lsls	r3, r3, #15
 800353a:	d508      	bpl.n	800354e <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 800353c:	f7ff ff80 	bl	8003440 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003540:	2001      	movs	r0, #1
 8003542:	e004      	b.n	800354e <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8003544:	1c62      	adds	r2, r4, #1
 8003546:	d0d8      	beq.n	80034fa <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003548:	2c00      	cmp	r4, #0
 800354a:	d101      	bne.n	8003550 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 800354c:	2003      	movs	r0, #3
}
 800354e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003550:	f7ff fc2a 	bl	8002da8 <HAL_GetTick>
 8003554:	1b40      	subs	r0, r0, r5
 8003556:	42a0      	cmp	r0, r4
 8003558:	d9ce      	bls.n	80034f8 <FLASH_WaitForLastOperation+0xc>
 800355a:	e7f7      	b.n	800354c <FLASH_WaitForLastOperation+0x60>
 800355c:	40022000 	.word	0x40022000

08003560 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003560:	2201      	movs	r2, #1
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8003564:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	4211      	tst	r1, r2
 800356a:	d00a      	beq.n	8003582 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003570:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 8003572:	4805      	ldr	r0, [pc, #20]	; (8003588 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003574:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003578:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357a:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800357e:	6858      	ldr	r0, [r3, #4]
 8003580:	4010      	ands	r0, r2
}
 8003582:	4770      	bx	lr
 8003584:	40022000 	.word	0x40022000
 8003588:	89abcdef 	.word	0x89abcdef
 800358c:	02030405 	.word	0x02030405

08003590 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003590:	2301      	movs	r3, #1
 8003592:	4a03      	ldr	r2, [pc, #12]	; (80035a0 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8003594:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003596:	6851      	ldr	r1, [r2, #4]
 8003598:	430b      	orrs	r3, r1
 800359a:	6053      	str	r3, [r2, #4]
}
 800359c:	4770      	bx	lr
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	40022000 	.word	0x40022000

080035a4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035a6:	4f12      	ldr	r7, [pc, #72]	; (80035f0 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 80035a8:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 80035aa:	7c3b      	ldrb	r3, [r7, #16]
{
 80035ac:	000d      	movs	r5, r1
 80035ae:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 80035b0:	2002      	movs	r0, #2
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d00c      	beq.n	80035d0 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 80035b6:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035b8:	480e      	ldr	r0, [pc, #56]	; (80035f4 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 80035ba:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035bc:	f7ff ff96 	bl	80034ec <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d103      	bne.n	80035cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035c4:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80035c6:	2e02      	cmp	r6, #2
 80035c8:	d103      	bne.n	80035d2 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80035ca:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80035cc:	2300      	movs	r3, #0
 80035ce:	743b      	strb	r3, [r7, #16]

  return status;
}
 80035d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80035d2:	2e01      	cmp	r6, #1
 80035d4:	d102      	bne.n	80035dc <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80035d6:	b2a4      	uxth	r4, r4
 80035d8:	802c      	strh	r4, [r5, #0]
 80035da:	e7f7      	b.n	80035cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80035dc:	2e00      	cmp	r6, #0
 80035de:	d003      	beq.n	80035e8 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035e0:	4804      	ldr	r0, [pc, #16]	; (80035f4 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 80035e2:	f7ff ff83 	bl	80034ec <FLASH_WaitForLastOperation>
 80035e6:	e7f1      	b.n	80035cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80035e8:	b2e4      	uxtb	r4, r4
 80035ea:	702c      	strb	r4, [r5, #0]
 80035ec:	e7ee      	b.n	80035cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20000cc0 	.word	0x20000cc0
 80035f4:	0000c350 	.word	0x0000c350

080035f8 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035f8:	4a58      	ldr	r2, [pc, #352]	; (800375c <HAL_GPIO_Init+0x164>)
{
 80035fa:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035fc:	1882      	adds	r2, r0, r2
 80035fe:	1e54      	subs	r4, r2, #1
 8003600:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003602:	2300      	movs	r3, #0
{
 8003604:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003606:	3205      	adds	r2, #5
{
 8003608:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800360a:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800360c:	9a03      	ldr	r2, [sp, #12]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	0014      	movs	r4, r2
 8003612:	40dc      	lsrs	r4, r3
 8003614:	d101      	bne.n	800361a <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003616:	b007      	add	sp, #28
 8003618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800361a:	2101      	movs	r1, #1
 800361c:	000d      	movs	r5, r1
 800361e:	0014      	movs	r4, r2
 8003620:	409d      	lsls	r5, r3
 8003622:	402c      	ands	r4, r5
 8003624:	468c      	mov	ip, r1
 8003626:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8003628:	422a      	tst	r2, r5
 800362a:	d100      	bne.n	800362e <HAL_GPIO_Init+0x36>
 800362c:	e094      	b.n	8003758 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800362e:	2403      	movs	r4, #3
 8003630:	9a03      	ldr	r2, [sp, #12]
 8003632:	005e      	lsls	r6, r3, #1
 8003634:	6852      	ldr	r2, [r2, #4]
 8003636:	9201      	str	r2, [sp, #4]
 8003638:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800363a:	40b4      	lsls	r4, r6
 800363c:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800363e:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003640:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003642:	4564      	cmp	r4, ip
 8003644:	d82a      	bhi.n	800369c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8003646:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003648:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 800364a:	9903      	ldr	r1, [sp, #12]
 800364c:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800364e:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003650:	40b4      	lsls	r4, r6
 8003652:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8003654:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003656:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003658:	43ac      	bics	r4, r5
 800365a:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800365c:	090c      	lsrs	r4, r1, #4
 800365e:	4661      	mov	r1, ip
 8003660:	400c      	ands	r4, r1
 8003662:	409c      	lsls	r4, r3
 8003664:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003666:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003668:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800366a:	9904      	ldr	r1, [sp, #16]
 800366c:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800366e:	9903      	ldr	r1, [sp, #12]
 8003670:	688c      	ldr	r4, [r1, #8]
 8003672:	40b4      	lsls	r4, r6
 8003674:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003676:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003678:	2a02      	cmp	r2, #2
 800367a:	d111      	bne.n	80036a0 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800367c:	2507      	movs	r5, #7
 800367e:	210f      	movs	r1, #15
 8003680:	401d      	ands	r5, r3
 8003682:	00ad      	lsls	r5, r5, #2
 8003684:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8003686:	08dc      	lsrs	r4, r3, #3
 8003688:	00a4      	lsls	r4, r4, #2
 800368a:	1904      	adds	r4, r0, r4
 800368c:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800368e:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003690:	9903      	ldr	r1, [sp, #12]
 8003692:	6909      	ldr	r1, [r1, #16]
 8003694:	40a9      	lsls	r1, r5
 8003696:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003698:	6227      	str	r7, [r4, #32]
 800369a:	e001      	b.n	80036a0 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800369c:	2a03      	cmp	r2, #3
 800369e:	d1e3      	bne.n	8003668 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a0:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 80036a2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036a4:	9904      	ldr	r1, [sp, #16]
 80036a6:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a8:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80036aa:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ac:	22c0      	movs	r2, #192	; 0xc0
 80036ae:	9901      	ldr	r1, [sp, #4]
 80036b0:	0292      	lsls	r2, r2, #10
 80036b2:	4211      	tst	r1, r2
 80036b4:	d050      	beq.n	8003758 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b6:	2701      	movs	r7, #1
 80036b8:	4c29      	ldr	r4, [pc, #164]	; (8003760 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80036ba:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80036be:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c0:	433a      	orrs	r2, r7
 80036c2:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_GPIO_Init+0x16c>)
 80036c6:	089c      	lsrs	r4, r3, #2
 80036c8:	00a4      	lsls	r4, r4, #2
 80036ca:	18a4      	adds	r4, r4, r2
 80036cc:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80036ce:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80036d0:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80036d2:	220f      	movs	r2, #15
 80036d4:	00ad      	lsls	r5, r5, #2
 80036d6:	40aa      	lsls	r2, r5
 80036d8:	4661      	mov	r1, ip
 80036da:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80036dc:	22a0      	movs	r2, #160	; 0xa0
 80036de:	05d2      	lsls	r2, r2, #23
 80036e0:	4694      	mov	ip, r2
 80036e2:	2200      	movs	r2, #0
 80036e4:	4560      	cmp	r0, ip
 80036e6:	d00d      	beq.n	8003704 <HAL_GPIO_Init+0x10c>
 80036e8:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_GPIO_Init+0x170>)
 80036ea:	4694      	mov	ip, r2
 80036ec:	003a      	movs	r2, r7
 80036ee:	4560      	cmp	r0, ip
 80036f0:	d008      	beq.n	8003704 <HAL_GPIO_Init+0x10c>
 80036f2:	4f1e      	ldr	r7, [pc, #120]	; (800376c <HAL_GPIO_Init+0x174>)
 80036f4:	1892      	adds	r2, r2, r2
 80036f6:	42b8      	cmp	r0, r7
 80036f8:	d004      	beq.n	8003704 <HAL_GPIO_Init+0x10c>
 80036fa:	4f1d      	ldr	r7, [pc, #116]	; (8003770 <HAL_GPIO_Init+0x178>)
 80036fc:	0032      	movs	r2, r6
 80036fe:	42b8      	cmp	r0, r7
 8003700:	d000      	beq.n	8003704 <HAL_GPIO_Init+0x10c>
 8003702:	9a05      	ldr	r2, [sp, #20]
 8003704:	40aa      	lsls	r2, r5
 8003706:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003708:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800370a:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 800370c:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 800370e:	4a19      	ldr	r2, [pc, #100]	; (8003774 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8003710:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 8003712:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003714:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003716:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003718:	03c9      	lsls	r1, r1, #15
 800371a:	d401      	bmi.n	8003720 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 800371c:	0035      	movs	r5, r6
 800371e:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8003720:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003722:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003724:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003726:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003728:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800372a:	0389      	lsls	r1, r1, #14
 800372c:	d401      	bmi.n	8003732 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 800372e:	0035      	movs	r5, r6
 8003730:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003732:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003734:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003736:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003738:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800373a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800373c:	02c9      	lsls	r1, r1, #11
 800373e:	d401      	bmi.n	8003744 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8003740:	0035      	movs	r5, r6
 8003742:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003744:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003746:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003748:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800374a:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800374c:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800374e:	0289      	lsls	r1, r1, #10
 8003750:	d401      	bmi.n	8003756 <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 8003752:	4025      	ands	r5, r4
 8003754:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003756:	60d6      	str	r6, [r2, #12]
    position++;
 8003758:	3301      	adds	r3, #1
 800375a:	e757      	b.n	800360c <HAL_GPIO_Init+0x14>
 800375c:	afffe400 	.word	0xafffe400
 8003760:	40021000 	.word	0x40021000
 8003764:	40010000 	.word	0x40010000
 8003768:	50000400 	.word	0x50000400
 800376c:	50000800 	.word	0x50000800
 8003770:	50000c00 	.word	0x50000c00
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003778:	6900      	ldr	r0, [r0, #16]
 800377a:	4008      	ands	r0, r1
 800377c:	1e43      	subs	r3, r0, #1
 800377e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003780:	b2c0      	uxtb	r0, r0
}
 8003782:	4770      	bx	lr

08003784 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003784:	2a00      	cmp	r2, #0
 8003786:	d001      	beq.n	800378c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003788:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800378a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800378c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800378e:	e7fc      	b.n	800378a <HAL_GPIO_WritePin+0x6>

08003790 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	0792      	lsls	r2, r2, #30
 8003796:	d501      	bpl.n	800379c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003798:	2200      	movs	r2, #0
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379c:	2201      	movs	r2, #1
 800379e:	6999      	ldr	r1, [r3, #24]
 80037a0:	4211      	tst	r1, r2
 80037a2:	d102      	bne.n	80037aa <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037a4:	6999      	ldr	r1, [r3, #24]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	619a      	str	r2, [r3, #24]
  }
}
 80037aa:	4770      	bx	lr

080037ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037ac:	b530      	push	{r4, r5, lr}
 80037ae:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80037b0:	0412      	lsls	r2, r2, #16
 80037b2:	6800      	ldr	r0, [r0, #0]
 80037b4:	4322      	orrs	r2, r4
 80037b6:	431a      	orrs	r2, r3
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <I2C_TransferConfig+0x24>)
 80037ba:	6845      	ldr	r5, [r0, #4]
 80037bc:	0589      	lsls	r1, r1, #22
 80037be:	0d64      	lsrs	r4, r4, #21
 80037c0:	0d89      	lsrs	r1, r1, #22
 80037c2:	431c      	orrs	r4, r3
 80037c4:	43a5      	bics	r5, r4
 80037c6:	430a      	orrs	r2, r1
 80037c8:	432a      	orrs	r2, r5
 80037ca:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80037cc:	bd30      	pop	{r4, r5, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	03ff63ff 	.word	0x03ff63ff

080037d4 <I2C_IsAcknowledgeFailed>:
{
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037d6:	6803      	ldr	r3, [r0, #0]
{
 80037d8:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037da:	699a      	ldr	r2, [r3, #24]
{
 80037dc:	0004      	movs	r4, r0
 80037de:	000d      	movs	r5, r1
  return HAL_OK;
 80037e0:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e2:	06d2      	lsls	r2, r2, #27
 80037e4:	d536      	bpl.n	8003854 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	0192      	lsls	r2, r2, #6
 80037ea:	d404      	bmi.n	80037f6 <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037ec:	2280      	movs	r2, #128	; 0x80
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	01d2      	lsls	r2, r2, #7
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f6:	2720      	movs	r7, #32
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	423a      	tst	r2, r7
 80037fe:	d012      	beq.n	8003826 <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003800:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8003802:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003804:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003806:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003808:	f7ff ffc2 	bl	8003790 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	4912      	ldr	r1, [pc, #72]	; (8003858 <I2C_IsAcknowledgeFailed+0x84>)
 8003810:	6853      	ldr	r3, [r2, #4]
 8003812:	400b      	ands	r3, r1
 8003814:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003816:	2304      	movs	r3, #4
 8003818:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800381a:	4313      	orrs	r3, r2
 800381c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800381e:	0023      	movs	r3, r4
 8003820:	3341      	adds	r3, #65	; 0x41
 8003822:	701f      	strb	r7, [r3, #0]
 8003824:	e00f      	b.n	8003846 <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 8003826:	1c6a      	adds	r2, r5, #1
 8003828:	d0e7      	beq.n	80037fa <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7ff fabd 	bl	8002da8 <HAL_GetTick>
 800382e:	1b80      	subs	r0, r0, r6
 8003830:	4285      	cmp	r5, r0
 8003832:	d301      	bcc.n	8003838 <I2C_IsAcknowledgeFailed+0x64>
 8003834:	2d00      	cmp	r5, #0
 8003836:	d1df      	bne.n	80037f8 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	2220      	movs	r2, #32
 800383a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800383c:	4313      	orrs	r3, r2
 800383e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003840:	0023      	movs	r3, r4
 8003842:	3341      	adds	r3, #65	; 0x41
 8003844:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003846:	0022      	movs	r2, r4
 8003848:	2300      	movs	r3, #0
    return HAL_ERROR;
 800384a:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800384e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003852:	7023      	strb	r3, [r4, #0]
}
 8003854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	fe00e800 	.word	0xfe00e800

0800385c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	0004      	movs	r4, r0
 8003860:	000d      	movs	r5, r1
 8003862:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003864:	2702      	movs	r7, #2
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	423b      	tst	r3, r7
 800386c:	d001      	beq.n	8003872 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800386e:	2000      	movs	r0, #0
}
 8003870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003872:	0032      	movs	r2, r6
 8003874:	0029      	movs	r1, r5
 8003876:	0020      	movs	r0, r4
 8003878:	f7ff ffac 	bl	80037d4 <I2C_IsAcknowledgeFailed>
 800387c:	2800      	cmp	r0, #0
 800387e:	d115      	bne.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003880:	1c6b      	adds	r3, r5, #1
 8003882:	d0f0      	beq.n	8003866 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003884:	f7ff fa90 	bl	8002da8 <HAL_GetTick>
 8003888:	1b80      	subs	r0, r0, r6
 800388a:	42a8      	cmp	r0, r5
 800388c:	d801      	bhi.n	8003892 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800388e:	2d00      	cmp	r5, #0
 8003890:	d1e9      	bne.n	8003866 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003892:	2220      	movs	r2, #32
 8003894:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003896:	4313      	orrs	r3, r2
 8003898:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800389a:	0023      	movs	r3, r4
 800389c:	3341      	adds	r3, #65	; 0x41
 800389e:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	0022      	movs	r2, r4
 80038a2:	2300      	movs	r3, #0
 80038a4:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80038a6:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a8:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80038aa:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80038ac:	2001      	movs	r0, #1
 80038ae:	e7df      	b.n	8003870 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080038b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	0004      	movs	r4, r0
 80038b4:	000d      	movs	r5, r1
 80038b6:	0016      	movs	r6, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038b8:	2720      	movs	r7, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ba:	2204      	movs	r2, #4
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	4213      	tst	r3, r2
 80038c2:	d111      	bne.n	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c4:	0032      	movs	r2, r6
 80038c6:	0029      	movs	r1, r5
 80038c8:	0020      	movs	r0, r4
 80038ca:	f7ff ff83 	bl	80037d4 <I2C_IsAcknowledgeFailed>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d119      	bne.n	8003906 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	423a      	tst	r2, r7
 80038d8:	d017      	beq.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038da:	2104      	movs	r1, #4
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	420a      	tst	r2, r1
 80038e0:	d004      	beq.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 80038e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80038e4:	2a00      	cmp	r2, #0
 80038e6:	d001      	beq.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
        return HAL_OK;
 80038e8:	2000      	movs	r0, #0
}
 80038ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ec:	61df      	str	r7, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	490e      	ldr	r1, [pc, #56]	; (800392c <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	7017      	strb	r7, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003900:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003902:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8003904:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003906:	2001      	movs	r0, #1
 8003908:	e7ef      	b.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7ff fa4d 	bl	8002da8 <HAL_GetTick>
 800390e:	1b80      	subs	r0, r0, r6
 8003910:	42a8      	cmp	r0, r5
 8003912:	d801      	bhi.n	8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8003914:	2d00      	cmp	r5, #0
 8003916:	d1d0      	bne.n	80038ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003918:	2220      	movs	r2, #32
 800391a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800391c:	4313      	orrs	r3, r2
 800391e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003920:	0023      	movs	r3, r4
 8003922:	3341      	adds	r3, #65	; 0x41
 8003924:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8003926:	3440      	adds	r4, #64	; 0x40
 8003928:	2300      	movs	r3, #0
 800392a:	e7eb      	b.n	8003904 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800392c:	fe00e800 	.word	0xfe00e800

08003930 <I2C_WaitOnFlagUntilTimeout>:
{
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	0004      	movs	r4, r0
 8003934:	000e      	movs	r6, r1
 8003936:	0017      	movs	r7, r2
 8003938:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800393a:	6822      	ldr	r2, [r4, #0]
 800393c:	6993      	ldr	r3, [r2, #24]
 800393e:	4033      	ands	r3, r6
 8003940:	1b9b      	subs	r3, r3, r6
 8003942:	4259      	negs	r1, r3
 8003944:	414b      	adcs	r3, r1
 8003946:	42bb      	cmp	r3, r7
 8003948:	d001      	beq.n	800394e <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800394a:	2000      	movs	r0, #0
 800394c:	e017      	b.n	800397e <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800394e:	1c6b      	adds	r3, r5, #1
 8003950:	d0f4      	beq.n	800393c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7ff fa29 	bl	8002da8 <HAL_GetTick>
 8003956:	9b06      	ldr	r3, [sp, #24]
 8003958:	1ac0      	subs	r0, r0, r3
 800395a:	42a8      	cmp	r0, r5
 800395c:	d801      	bhi.n	8003962 <I2C_WaitOnFlagUntilTimeout+0x32>
 800395e:	2d00      	cmp	r5, #0
 8003960:	d1eb      	bne.n	800393a <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	2220      	movs	r2, #32
 8003964:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003966:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	4313      	orrs	r3, r2
 800396a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800396c:	0023      	movs	r3, r4
 800396e:	3341      	adds	r3, #65	; 0x41
 8003970:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003972:	0022      	movs	r2, r4
 8003974:	2300      	movs	r3, #0
 8003976:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003978:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800397c:	7023      	strb	r3, [r4, #0]
}
 800397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003980 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	0004      	movs	r4, r0
 8003984:	000d      	movs	r5, r1
 8003986:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003988:	2720      	movs	r7, #32
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	423b      	tst	r3, r7
 8003990:	d001      	beq.n	8003996 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003992:	2000      	movs	r0, #0
}
 8003994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003996:	0032      	movs	r2, r6
 8003998:	0029      	movs	r1, r5
 800399a:	0020      	movs	r0, r4
 800399c:	f7ff ff1a 	bl	80037d4 <I2C_IsAcknowledgeFailed>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d113      	bne.n	80039cc <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a4:	f7ff fa00 	bl	8002da8 <HAL_GetTick>
 80039a8:	1b80      	subs	r0, r0, r6
 80039aa:	42a8      	cmp	r0, r5
 80039ac:	d801      	bhi.n	80039b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80039ae:	2d00      	cmp	r5, #0
 80039b0:	d1eb      	bne.n	800398a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b2:	2220      	movs	r2, #32
 80039b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039b6:	4313      	orrs	r3, r2
 80039b8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	0023      	movs	r3, r4
 80039bc:	3341      	adds	r3, #65	; 0x41
 80039be:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	0022      	movs	r2, r4
 80039c2:	2300      	movs	r3, #0
 80039c4:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80039c6:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80039ca:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80039cc:	2001      	movs	r0, #1
 80039ce:	e7e1      	b.n	8003994 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080039d0 <HAL_I2C_Init>:
{
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80039d4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80039d6:	2c00      	cmp	r4, #0
 80039d8:	d03f      	beq.n	8003a5a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039da:	0025      	movs	r5, r4
 80039dc:	3541      	adds	r5, #65	; 0x41
 80039de:	782b      	ldrb	r3, [r5, #0]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80039e6:	0023      	movs	r3, r4
 80039e8:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 80039ea:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80039ec:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80039ee:	f7ff f8b1 	bl	8002b54 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80039f4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80039f8:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039fa:	481d      	ldr	r0, [pc, #116]	; (8003a70 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 80039fc:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039fe:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003a00:	438a      	bics	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a04:	6861      	ldr	r1, [r4, #4]
 8003a06:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <HAL_I2C_Init+0xa4>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	4002      	ands	r2, r0
 8003a10:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a12:	68e2      	ldr	r2, [r4, #12]
 8003a14:	2a01      	cmp	r2, #1
 8003a16:	d121      	bne.n	8003a5c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	0209      	lsls	r1, r1, #8
 8003a1c:	4331      	orrs	r1, r6
 8003a1e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	4915      	ldr	r1, [pc, #84]	; (8003a78 <HAL_I2C_Init+0xa8>)
 8003a24:	4311      	orrs	r1, r2
 8003a26:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a28:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a2a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a2c:	4002      	ands	r2, r0
 8003a2e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a30:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a32:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a34:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a36:	69a1      	ldr	r1, [r4, #24]
 8003a38:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a3e:	6a21      	ldr	r1, [r4, #32]
 8003a40:	69e2      	ldr	r2, [r4, #28]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003a46:	2201      	movs	r2, #1
 8003a48:	6819      	ldr	r1, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a50:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a54:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a56:	3442      	adds	r4, #66	; 0x42
 8003a58:	7020      	strb	r0, [r4, #0]
}
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a5c:	2184      	movs	r1, #132	; 0x84
 8003a5e:	0209      	lsls	r1, r1, #8
 8003a60:	4331      	orrs	r1, r6
 8003a62:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a64:	2a02      	cmp	r2, #2
 8003a66:	d1db      	bne.n	8003a20 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	e7d7      	b.n	8003a20 <HAL_I2C_Init+0x50>
 8003a70:	ffff7fff 	.word	0xffff7fff
 8003a74:	f0ffffff 	.word	0xf0ffffff
 8003a78:	02008000 	.word	0x02008000

08003a7c <HAL_I2C_Master_Transmit>:
{
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a82:	0003      	movs	r3, r0
 8003a84:	3341      	adds	r3, #65	; 0x41
{
 8003a86:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a88:	9303      	str	r3, [sp, #12]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
{
 8003a8c:	0004      	movs	r4, r0
 8003a8e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003a90:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d114      	bne.n	8003ac0 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8003a96:	0023      	movs	r3, r4
 8003a98:	3340      	adds	r3, #64	; 0x40
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	2a01      	cmp	r2, #1
 8003a9e:	d00f      	beq.n	8003ac0 <HAL_I2C_Master_Transmit+0x44>
 8003aa0:	2601      	movs	r6, #1
 8003aa2:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003aa4:	f7ff f980 	bl	8002da8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aa8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003aaa:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aac:	9000      	str	r0, [sp, #0]
 8003aae:	2319      	movs	r3, #25
 8003ab0:	0032      	movs	r2, r6
 8003ab2:	0020      	movs	r0, r4
 8003ab4:	0209      	lsls	r1, r1, #8
 8003ab6:	f7ff ff3b 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8003abe:	2001      	movs	r0, #1
}
 8003ac0:	b007      	add	sp, #28
 8003ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ac4:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ac6:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ac8:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003aca:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003acc:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ace:	3b11      	subs	r3, #17
 8003ad0:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003ad2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003ad6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ad8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003ada:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003adc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ade:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_I2C_Master_Transmit+0x11c>)
 8003ae2:	2aff      	cmp	r2, #255	; 0xff
 8003ae4:	d920      	bls.n	8003b28 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae6:	22ff      	movs	r2, #255	; 0xff
 8003ae8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003af0:	0039      	movs	r1, r7
 8003af2:	0020      	movs	r0, r4
 8003af4:	f7ff fe5a 	bl	80037ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003af8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afa:	002a      	movs	r2, r5
 8003afc:	0020      	movs	r0, r4
 8003afe:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d119      	bne.n	8003b38 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b04:	f7ff ff3c 	bl	8003980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	d1d8      	bne.n	8003abe <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0c:	2120      	movs	r1, #32
 8003b0e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003b10:	4d22      	ldr	r5, [pc, #136]	; (8003b9c <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b12:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	402a      	ands	r2, r5
 8003b18:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003b1c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	3341      	adds	r3, #65	; 0x41
 8003b20:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b22:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003b24:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003b26:	e7cb      	b.n	8003ac0 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003b28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b2a:	b292      	uxth	r2, r2
 8003b2c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	049b      	lsls	r3, r3, #18
 8003b36:	e7db      	b.n	8003af0 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b38:	f7ff fe90 	bl	800385c <I2C_WaitOnTXISFlagUntilTimeout>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d1be      	bne.n	8003abe <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003b46:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b48:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003b4a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003b4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b4e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b56:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b5a:	b292      	uxth	r2, r2
 8003b5c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ca      	beq.n	8003af8 <HAL_I2C_Master_Transmit+0x7c>
 8003b62:	2a00      	cmp	r2, #0
 8003b64:	d1c8      	bne.n	8003af8 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b66:	2180      	movs	r1, #128	; 0x80
 8003b68:	0020      	movs	r0, r4
 8003b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b6c:	9500      	str	r5, [sp, #0]
 8003b6e:	f7ff fedf 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d1a3      	bne.n	8003abe <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b78:	2bff      	cmp	r3, #255	; 0xff
 8003b7a:	d906      	bls.n	8003b8a <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b7c:	23ff      	movs	r3, #255	; 0xff
 8003b7e:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	22ff      	movs	r2, #255	; 0xff
 8003b84:	9000      	str	r0, [sp, #0]
 8003b86:	045b      	lsls	r3, r3, #17
 8003b88:	e7b2      	b.n	8003af0 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003b8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b8c:	b292      	uxth	r2, r2
 8003b8e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	9000      	str	r0, [sp, #0]
 8003b94:	e7cd      	b.n	8003b32 <HAL_I2C_Master_Transmit+0xb6>
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	80002000 	.word	0x80002000
 8003b9c:	fe00e800 	.word	0xfe00e800

08003ba0 <HAL_I2C_Master_Receive>:
{
 8003ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	3341      	adds	r3, #65	; 0x41
{
 8003baa:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bac:	9303      	str	r3, [sp, #12]
 8003bae:	781b      	ldrb	r3, [r3, #0]
{
 8003bb0:	0004      	movs	r4, r0
 8003bb2:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003bb4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d114      	bne.n	8003be4 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 8003bba:	0023      	movs	r3, r4
 8003bbc:	3340      	adds	r3, #64	; 0x40
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	2a01      	cmp	r2, #1
 8003bc2:	d00f      	beq.n	8003be4 <HAL_I2C_Master_Receive+0x44>
 8003bc4:	2601      	movs	r6, #1
 8003bc6:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003bc8:	f7ff f8ee 	bl	8002da8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bcc:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003bce:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bd0:	9000      	str	r0, [sp, #0]
 8003bd2:	2319      	movs	r3, #25
 8003bd4:	0032      	movs	r2, r6
 8003bd6:	0020      	movs	r0, r4
 8003bd8:	0209      	lsls	r1, r1, #8
 8003bda:	f7ff fea9 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8003be2:	2001      	movs	r0, #1
}
 8003be4:	b007      	add	sp, #28
 8003be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003be8:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bea:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bec:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bee:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bf0:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bf2:	3b12      	subs	r3, #18
 8003bf4:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003bf6:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003bfa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bfc:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003bfe:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003c00:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c04:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_I2C_Master_Receive+0x11c>)
 8003c06:	2aff      	cmp	r2, #255	; 0xff
 8003c08:	d920      	bls.n	8003c4c <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c0a:	22ff      	movs	r2, #255	; 0xff
 8003c0c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c14:	0039      	movs	r1, r7
 8003c16:	0020      	movs	r0, r4
 8003c18:	f7ff fdc8 	bl	80037ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1e:	002a      	movs	r2, r5
 8003c20:	0020      	movs	r0, r4
 8003c22:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d119      	bne.n	8003c5c <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c28:	f7ff feaa 	bl	8003980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d1d8      	bne.n	8003be2 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c30:	2120      	movs	r1, #32
 8003c32:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003c34:	4d22      	ldr	r5, [pc, #136]	; (8003cc0 <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c36:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	402a      	ands	r2, r5
 8003c3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003c40:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	3341      	adds	r3, #65	; 0x41
 8003c44:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c46:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003c48:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003c4a:	e7cb      	b.n	8003be4 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003c4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c4e:	b292      	uxth	r2, r2
 8003c50:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	049b      	lsls	r3, r3, #18
 8003c5a:	e7db      	b.n	8003c14 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5c:	f7ff fe28 	bl	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d1be      	bne.n	8003be2 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003c6e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003c70:	3301      	adds	r3, #1
 8003c72:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003c74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003c76:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003c80:	b292      	uxth	r2, r2
 8003c82:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0c9      	beq.n	8003c1c <HAL_I2C_Master_Receive+0x7c>
 8003c88:	2a00      	cmp	r2, #0
 8003c8a:	d1c7      	bne.n	8003c1c <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	0020      	movs	r0, r4
 8003c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c92:	9500      	str	r5, [sp, #0]
 8003c94:	f7ff fe4c 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d1a2      	bne.n	8003be2 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c9e:	2bff      	cmp	r3, #255	; 0xff
 8003ca0:	d906      	bls.n	8003cb0 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca2:	23ff      	movs	r3, #255	; 0xff
 8003ca4:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	9000      	str	r0, [sp, #0]
 8003cac:	045b      	lsls	r3, r3, #17
 8003cae:	e7b1      	b.n	8003c14 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003cb0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cb2:	b292      	uxth	r2, r2
 8003cb4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	9000      	str	r0, [sp, #0]
 8003cba:	e7cc      	b.n	8003c56 <HAL_I2C_Master_Receive+0xb6>
 8003cbc:	80002400 	.word	0x80002400
 8003cc0:	fe00e800 	.word	0xfe00e800

08003cc4 <HAL_I2C_IsDeviceReady>:
{
 8003cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc6:	001e      	movs	r6, r3
  __IO uint32_t I2C_Trials = 0UL;
 8003cc8:	2300      	movs	r3, #0
{
 8003cca:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 8003ccc:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cce:	0003      	movs	r3, r0
{
 8003cd0:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd2:	3341      	adds	r3, #65	; 0x41
 8003cd4:	781a      	ldrb	r2, [r3, #0]
{
 8003cd6:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003cd8:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cda:	2a20      	cmp	r2, #32
 8003cdc:	d15b      	bne.n	8003d96 <HAL_I2C_IsDeviceReady+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003cde:	6802      	ldr	r2, [r0, #0]
 8003ce0:	6997      	ldr	r7, [r2, #24]
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	0038      	movs	r0, r7
 8003ce6:	0212      	lsls	r2, r2, #8
 8003ce8:	4010      	ands	r0, r2
 8003cea:	4217      	tst	r7, r2
 8003cec:	d153      	bne.n	8003d96 <HAL_I2C_IsDeviceReady+0xd2>
    __HAL_LOCK(hi2c);
 8003cee:	0022      	movs	r2, r4
 8003cf0:	3240      	adds	r2, #64	; 0x40
 8003cf2:	7817      	ldrb	r7, [r2, #0]
 8003cf4:	2f01      	cmp	r7, #1
 8003cf6:	d04e      	beq.n	8003d96 <HAL_I2C_IsDeviceReady+0xd2>
 8003cf8:	3d01      	subs	r5, #1
 8003cfa:	7015      	strb	r5, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfc:	2224      	movs	r2, #36	; 0x24
 8003cfe:	0589      	lsls	r1, r1, #22
 8003d00:	701a      	strb	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d02:	0d8b      	lsrs	r3, r1, #22
 8003d04:	6460      	str	r0, [r4, #68]	; 0x44
 8003d06:	9304      	str	r3, [sp, #16]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003d08:	68e3      	ldr	r3, [r4, #12]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d12b      	bne.n	8003d66 <HAL_I2C_IsDeviceReady+0xa2>
 8003d0e:	4b3e      	ldr	r3, [pc, #248]	; (8003e08 <HAL_I2C_IsDeviceReady+0x144>)
 8003d10:	9a04      	ldr	r2, [sp, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	6822      	ldr	r2, [r4, #0]
 8003d16:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8003d18:	f7ff f846 	bl	8002da8 <HAL_GetTick>
 8003d1c:	9003      	str	r0, [sp, #12]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d1e:	2201      	movs	r2, #1
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d24:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d26:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d28:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d2a:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d2c:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003d2e:	431d      	orrs	r5, r3
 8003d30:	d01c      	beq.n	8003d6c <HAL_I2C_IsDeviceReady+0xa8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	2710      	movs	r7, #16
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	001a      	movs	r2, r3
 8003d3a:	403a      	ands	r2, r7
 8003d3c:	423b      	tst	r3, r7
 8003d3e:	d12d      	bne.n	8003d9c <HAL_I2C_IsDeviceReady+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d40:	9b03      	ldr	r3, [sp, #12]
 8003d42:	2120      	movs	r1, #32
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	0020      	movs	r0, r4
 8003d48:	0033      	movs	r3, r6
 8003d4a:	f7ff fdf1 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d121      	bne.n	8003d96 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d52:	2320      	movs	r3, #32
 8003d54:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 8003d56:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d58:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8003d5c:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	3241      	adds	r2, #65	; 0x41
 8003d60:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003d62:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 8003d64:	e017      	b.n	8003d96 <HAL_I2C_IsDeviceReady+0xd2>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003d66:	23a0      	movs	r3, #160	; 0xa0
 8003d68:	019b      	lsls	r3, r3, #6
 8003d6a:	e7d1      	b.n	8003d10 <HAL_I2C_IsDeviceReady+0x4c>
        if (Timeout != HAL_MAX_DELAY)
 8003d6c:	1c73      	adds	r3, r6, #1
 8003d6e:	d0d6      	beq.n	8003d1e <HAL_I2C_IsDeviceReady+0x5a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d70:	f7ff f81a 	bl	8002da8 <HAL_GetTick>
 8003d74:	9b03      	ldr	r3, [sp, #12]
 8003d76:	1ac0      	subs	r0, r0, r3
 8003d78:	42b0      	cmp	r0, r6
 8003d7a:	d801      	bhi.n	8003d80 <HAL_I2C_IsDeviceReady+0xbc>
 8003d7c:	2e00      	cmp	r6, #0
 8003d7e:	d1ce      	bne.n	8003d1e <HAL_I2C_IsDeviceReady+0x5a>
            hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	0022      	movs	r2, r4
 8003d82:	2320      	movs	r3, #32
 8003d84:	3241      	adds	r2, #65	; 0x41
 8003d86:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d88:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 8003d8a:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8003d90:	2300      	movs	r3, #0
 8003d92:	3440      	adds	r4, #64	; 0x40
 8003d94:	7023      	strb	r3, [r4, #0]
}
 8003d96:	0028      	movs	r0, r5
 8003d98:	b009      	add	sp, #36	; 0x24
 8003d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2120      	movs	r1, #32
 8003da4:	0033      	movs	r3, r6
 8003da6:	0020      	movs	r0, r4
 8003da8:	f7ff fdc2 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003dac:	1e02      	subs	r2, r0, #0
 8003dae:	d1f2      	bne.n	8003d96 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8003db2:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db4:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db6:	2720      	movs	r7, #32
 8003db8:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8003dba:	9907      	ldr	r1, [sp, #28]
 8003dbc:	4281      	cmp	r1, r0
 8003dbe:	d10f      	bne.n	8003de0 <HAL_I2C_IsDeviceReady+0x11c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	6858      	ldr	r0, [r3, #4]
 8003dc4:	01c9      	lsls	r1, r1, #7
 8003dc6:	4301      	orrs	r1, r0
 8003dc8:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	0039      	movs	r1, r7
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	0020      	movs	r0, r4
 8003dd2:	0033      	movs	r3, r6
 8003dd4:	f7ff fdac 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d1dc      	bne.n	8003d96 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8003de0:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003de2:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8003de4:	3301      	adds	r3, #1
 8003de6:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003de8:	9b07      	ldr	r3, [sp, #28]
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d200      	bcs.n	8003df0 <HAL_I2C_IsDeviceReady+0x12c>
 8003dee:	e78b      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	0022      	movs	r2, r4
 8003df2:	2320      	movs	r3, #32
 8003df4:	3241      	adds	r2, #65	; 0x41
 8003df6:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003dfa:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8003e00:	2300      	movs	r3, #0
 8003e02:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8003e04:	e7c7      	b.n	8003d96 <HAL_I2C_IsDeviceReady+0xd2>
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	02002000 	.word	0x02002000

08003e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	0004      	movs	r4, r0
 8003e10:	3441      	adds	r4, #65	; 0x41
 8003e12:	7822      	ldrb	r2, [r4, #0]
{
 8003e14:	0003      	movs	r3, r0
 8003e16:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1a:	b2d6      	uxtb	r6, r2
 8003e1c:	2a20      	cmp	r2, #32
 8003e1e:	d118      	bne.n	8003e52 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003e20:	001d      	movs	r5, r3
 8003e22:	3540      	adds	r5, #64	; 0x40
 8003e24:	782a      	ldrb	r2, [r5, #0]
 8003e26:	2a01      	cmp	r2, #1
 8003e28:	d013      	beq.n	8003e52 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2a:	2224      	movs	r2, #36	; 0x24
 8003e2c:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3a23      	subs	r2, #35	; 0x23
 8003e32:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e34:	4807      	ldr	r0, [pc, #28]	; (8003e54 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003e36:	4391      	bics	r1, r2
 8003e38:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e3a:	6819      	ldr	r1, [r3, #0]
 8003e3c:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8003e3e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e40:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	4339      	orrs	r1, r7
 8003e46:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e4e:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003e50:	7028      	strb	r0, [r5, #0]
  }
}
 8003e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e54:	ffffefff 	.word	0xffffefff

08003e58 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e58:	0002      	movs	r2, r0
{
 8003e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5c:	3241      	adds	r2, #65	; 0x41
 8003e5e:	7814      	ldrb	r4, [r2, #0]
{
 8003e60:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e62:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e66:	2c20      	cmp	r4, #32
 8003e68:	d117      	bne.n	8003e9a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003e6a:	001c      	movs	r4, r3
 8003e6c:	3440      	adds	r4, #64	; 0x40
 8003e6e:	7826      	ldrb	r6, [r4, #0]
 8003e70:	2e01      	cmp	r6, #1
 8003e72:	d012      	beq.n	8003e9a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e74:	3022      	adds	r0, #34	; 0x22
 8003e76:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3823      	subs	r0, #35	; 0x23
 8003e7c:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003e7e:	4f07      	ldr	r7, [pc, #28]	; (8003e9c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003e80:	4386      	bics	r6, r0
 8003e82:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003e84:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003e86:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003e88:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003e8a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003e8c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003e8e:	6819      	ldr	r1, [r3, #0]
 8003e90:	4308      	orrs	r0, r1
 8003e92:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003e94:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003e98:	7020      	strb	r0, [r4, #0]
  }
}
 8003e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e9c:	fffff0ff 	.word	0xfffff0ff

08003ea0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003ea4:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003ea6:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea8:	4022      	ands	r2, r4
 8003eaa:	2a08      	cmp	r2, #8
 8003eac:	d031      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0x72>
 8003eae:	2a0c      	cmp	r2, #12
 8003eb0:	d009      	beq.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x26>
 8003eb2:	2a04      	cmp	r2, #4
 8003eb4:	d125      	bne.n	8003f02 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003eb6:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003eb8:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003eba:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003ebc:	17c0      	asrs	r0, r0, #31
 8003ebe:	4018      	ands	r0, r3
 8003ec0:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x80>)
 8003ec2:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003ec4:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ec6:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ec8:	4816      	ldr	r0, [pc, #88]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003eca:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ecc:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ece:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ed0:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ed2:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ed4:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ed6:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ed8:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eda:	4211      	tst	r1, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ede:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x88>)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	f7fc f9da 	bl	800029c <__aeabi_lmul>
 8003ee8:	0022      	movs	r2, r4
 8003eea:	2300      	movs	r3, #0
 8003eec:	f7fc f9b6 	bl	800025c <__aeabi_uldivmod>
 8003ef0:	e7e8      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	421a      	tst	r2, r3
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003efa:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x8c>)
 8003efc:	e7f0      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003efe:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x80>)
 8003f00:	e7ee      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f02:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f04:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f06:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4098      	lsls	r0, r3
      break;
 8003f10:	e7d8      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003f12:	4805      	ldr	r0, [pc, #20]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x88>)
 8003f14:	e7d6      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x24>
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	ff48e500 	.word	0xff48e500
 8003f20:	00f42400 	.word	0x00f42400
 8003f24:	080064d0 	.word	0x080064d0
 8003f28:	007a1200 	.word	0x007a1200
 8003f2c:	003d0900 	.word	0x003d0900

08003f30 <HAL_RCC_OscConfig>:
{
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	0005      	movs	r5, r0
 8003f34:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d05a      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	4cbe      	ldr	r4, [pc, #760]	; (8004238 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f40:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f42:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f44:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	025b      	lsls	r3, r3, #9
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4e:	07d2      	lsls	r2, r2, #31
 8003f50:	d442      	bmi.n	8003fd8 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f52:	682b      	ldr	r3, [r5, #0]
 8003f54:	079b      	lsls	r3, r3, #30
 8003f56:	d500      	bpl.n	8003f5a <HAL_RCC_OscConfig+0x2a>
 8003f58:	e08b      	b.n	8004072 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f5a:	682b      	ldr	r3, [r5, #0]
 8003f5c:	06db      	lsls	r3, r3, #27
 8003f5e:	d529      	bpl.n	8003fb4 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	d000      	beq.n	8003f66 <HAL_RCC_OscConfig+0x36>
 8003f64:	e0dc      	b.n	8004120 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	059b      	lsls	r3, r3, #22
 8003f6a:	d502      	bpl.n	8003f72 <HAL_RCC_OscConfig+0x42>
 8003f6c:	69eb      	ldr	r3, [r5, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d03e      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f72:	6862      	ldr	r2, [r4, #4]
 8003f74:	49b1      	ldr	r1, [pc, #708]	; (800423c <HAL_RCC_OscConfig+0x30c>)
 8003f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f78:	400a      	ands	r2, r1
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f7e:	6861      	ldr	r1, [r4, #4]
 8003f80:	6a2a      	ldr	r2, [r5, #32]
 8003f82:	0209      	lsls	r1, r1, #8
 8003f84:	0a09      	lsrs	r1, r1, #8
 8003f86:	0612      	lsls	r2, r2, #24
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f8c:	2280      	movs	r2, #128	; 0x80
 8003f8e:	0b5b      	lsrs	r3, r3, #13
 8003f90:	3301      	adds	r3, #1
 8003f92:	0212      	lsls	r2, r2, #8
 8003f94:	409a      	lsls	r2, r3
 8003f96:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f98:	68e1      	ldr	r1, [r4, #12]
 8003f9a:	060a      	lsls	r2, r1, #24
 8003f9c:	49a8      	ldr	r1, [pc, #672]	; (8004240 <HAL_RCC_OscConfig+0x310>)
 8003f9e:	0f12      	lsrs	r2, r2, #28
 8003fa0:	5c8a      	ldrb	r2, [r1, r2]
 8003fa2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003fa4:	4aa7      	ldr	r2, [pc, #668]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8003fa6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003fa8:	4ba7      	ldr	r3, [pc, #668]	; (8004248 <HAL_RCC_OscConfig+0x318>)
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	f7fe feb8 	bl	8002d20 <HAL_InitTick>
        if(status != HAL_OK)
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d134      	bne.n	800401e <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	071b      	lsls	r3, r3, #28
 8003fb8:	d500      	bpl.n	8003fbc <HAL_RCC_OscConfig+0x8c>
 8003fba:	e0e8      	b.n	800418e <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	075b      	lsls	r3, r3, #29
 8003fc0:	d500      	bpl.n	8003fc4 <HAL_RCC_OscConfig+0x94>
 8003fc2:	e10a      	b.n	80041da <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	069b      	lsls	r3, r3, #26
 8003fc8:	d500      	bpl.n	8003fcc <HAL_RCC_OscConfig+0x9c>
 8003fca:	e18e      	b.n	80042ea <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fcc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d000      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xa4>
 8003fd2:	e1bd      	b.n	8004350 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	e022      	b.n	800401e <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fd8:	2e08      	cmp	r6, #8
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fdc:	2e0c      	cmp	r6, #12
 8003fde:	d109      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xc4>
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	039b      	lsls	r3, r3, #14
 8003fe8:	d5b3      	bpl.n	8003f52 <HAL_RCC_OscConfig+0x22>
 8003fea:	686b      	ldr	r3, [r5, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1b0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	e014      	b.n	800401e <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff4:	686a      	ldr	r2, [r5, #4]
 8003ff6:	428a      	cmp	r2, r1
 8003ff8:	d113      	bne.n	8004022 <HAL_RCC_OscConfig+0xf2>
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004000:	f7fe fed2 	bl	8002da8 <HAL_GetTick>
 8004004:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004006:	2280      	movs	r2, #128	; 0x80
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	0292      	lsls	r2, r2, #10
 800400c:	4213      	tst	r3, r2
 800400e:	d1a0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004010:	f7fe feca 	bl	8002da8 <HAL_GetTick>
 8004014:	9b00      	ldr	r3, [sp, #0]
 8004016:	1ac0      	subs	r0, r0, r3
 8004018:	2864      	cmp	r0, #100	; 0x64
 800401a:	d9f4      	bls.n	8004006 <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 800401c:	2003      	movs	r0, #3
}
 800401e:	b005      	add	sp, #20
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004022:	21a0      	movs	r1, #160	; 0xa0
 8004024:	02c9      	lsls	r1, r1, #11
 8004026:	428a      	cmp	r2, r1
 8004028:	d105      	bne.n	8004036 <HAL_RCC_OscConfig+0x106>
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	6821      	ldr	r1, [r4, #0]
 800402e:	02d2      	lsls	r2, r2, #11
 8004030:	430a      	orrs	r2, r1
 8004032:	6022      	str	r2, [r4, #0]
 8004034:	e7e1      	b.n	8003ffa <HAL_RCC_OscConfig+0xca>
 8004036:	6821      	ldr	r1, [r4, #0]
 8004038:	4884      	ldr	r0, [pc, #528]	; (800424c <HAL_RCC_OscConfig+0x31c>)
 800403a:	4001      	ands	r1, r0
 800403c:	6021      	str	r1, [r4, #0]
 800403e:	6821      	ldr	r1, [r4, #0]
 8004040:	400b      	ands	r3, r1
 8004042:	9303      	str	r3, [sp, #12]
 8004044:	9b03      	ldr	r3, [sp, #12]
 8004046:	4982      	ldr	r1, [pc, #520]	; (8004250 <HAL_RCC_OscConfig+0x320>)
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	400b      	ands	r3, r1
 800404c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800404e:	2a00      	cmp	r2, #0
 8004050:	d1d6      	bne.n	8004000 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8004052:	f7fe fea9 	bl	8002da8 <HAL_GetTick>
 8004056:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	0292      	lsls	r2, r2, #10
 800405e:	4213      	tst	r3, r2
 8004060:	d100      	bne.n	8004064 <HAL_RCC_OscConfig+0x134>
 8004062:	e776      	b.n	8003f52 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004064:	f7fe fea0 	bl	8002da8 <HAL_GetTick>
 8004068:	9b00      	ldr	r3, [sp, #0]
 800406a:	1ac0      	subs	r0, r0, r3
 800406c:	2864      	cmp	r0, #100	; 0x64
 800406e:	d9f3      	bls.n	8004058 <HAL_RCC_OscConfig+0x128>
 8004070:	e7d4      	b.n	800401c <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 8004072:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004074:	2e04      	cmp	r6, #4
 8004076:	d003      	beq.n	8004080 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004078:	2e0c      	cmp	r6, #12
 800407a:	d124      	bne.n	80040c6 <HAL_RCC_OscConfig+0x196>
 800407c:	2f00      	cmp	r7, #0
 800407e:	d122      	bne.n	80040c6 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	075b      	lsls	r3, r3, #29
 8004084:	d501      	bpl.n	800408a <HAL_RCC_OscConfig+0x15a>
 8004086:	2a00      	cmp	r2, #0
 8004088:	d0b2      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	6861      	ldr	r1, [r4, #4]
 800408c:	692b      	ldr	r3, [r5, #16]
 800408e:	4871      	ldr	r0, [pc, #452]	; (8004254 <HAL_RCC_OscConfig+0x324>)
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	4001      	ands	r1, r0
 8004094:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004096:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	438b      	bics	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040a2:	f7ff fefd 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80040a6:	68e3      	ldr	r3, [r4, #12]
 80040a8:	4a65      	ldr	r2, [pc, #404]	; (8004240 <HAL_RCC_OscConfig+0x310>)
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	0f1b      	lsrs	r3, r3, #28
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	40d8      	lsrs	r0, r3
 80040b2:	4b64      	ldr	r3, [pc, #400]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 80040b4:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80040b6:	4b64      	ldr	r3, [pc, #400]	; (8004248 <HAL_RCC_OscConfig+0x318>)
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	f7fe fe31 	bl	8002d20 <HAL_InitTick>
      if(status != HAL_OK)
 80040be:	2800      	cmp	r0, #0
 80040c0:	d100      	bne.n	80040c4 <HAL_RCC_OscConfig+0x194>
 80040c2:	e74a      	b.n	8003f5a <HAL_RCC_OscConfig+0x2a>
 80040c4:	e7ab      	b.n	800401e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040c6:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80040c8:	2a00      	cmp	r2, #0
 80040ca:	d018      	beq.n	80040fe <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040cc:	2109      	movs	r1, #9
 80040ce:	438b      	bics	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040d4:	f7fe fe68 	bl	8002da8 <HAL_GetTick>
 80040d8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040da:	2204      	movs	r2, #4
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	4213      	tst	r3, r2
 80040e0:	d007      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e2:	6862      	ldr	r2, [r4, #4]
 80040e4:	692b      	ldr	r3, [r5, #16]
 80040e6:	495b      	ldr	r1, [pc, #364]	; (8004254 <HAL_RCC_OscConfig+0x324>)
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	400a      	ands	r2, r1
 80040ec:	4313      	orrs	r3, r2
 80040ee:	6063      	str	r3, [r4, #4]
 80040f0:	e733      	b.n	8003f5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fe fe59 	bl	8002da8 <HAL_GetTick>
 80040f6:	1bc0      	subs	r0, r0, r7
 80040f8:	2802      	cmp	r0, #2
 80040fa:	d9ee      	bls.n	80040da <HAL_RCC_OscConfig+0x1aa>
 80040fc:	e78e      	b.n	800401c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 80040fe:	2201      	movs	r2, #1
 8004100:	4393      	bics	r3, r2
 8004102:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004104:	f7fe fe50 	bl	8002da8 <HAL_GetTick>
 8004108:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800410a:	2204      	movs	r2, #4
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	4213      	tst	r3, r2
 8004110:	d100      	bne.n	8004114 <HAL_RCC_OscConfig+0x1e4>
 8004112:	e722      	b.n	8003f5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004114:	f7fe fe48 	bl	8002da8 <HAL_GetTick>
 8004118:	1bc0      	subs	r0, r0, r7
 800411a:	2802      	cmp	r0, #2
 800411c:	d9f5      	bls.n	800410a <HAL_RCC_OscConfig+0x1da>
 800411e:	e77d      	b.n	800401c <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004120:	69eb      	ldr	r3, [r5, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d020      	beq.n	8004168 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	6822      	ldr	r2, [r4, #0]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4313      	orrs	r3, r2
 800412e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004130:	f7fe fe3a 	bl	8002da8 <HAL_GetTick>
 8004134:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	0092      	lsls	r2, r2, #2
 800413c:	4213      	tst	r3, r2
 800413e:	d00d      	beq.n	800415c <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	4a3e      	ldr	r2, [pc, #248]	; (800423c <HAL_RCC_OscConfig+0x30c>)
 8004144:	4013      	ands	r3, r2
 8004146:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004148:	4313      	orrs	r3, r2
 800414a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800414c:	6862      	ldr	r2, [r4, #4]
 800414e:	6a2b      	ldr	r3, [r5, #32]
 8004150:	0212      	lsls	r2, r2, #8
 8004152:	061b      	lsls	r3, r3, #24
 8004154:	0a12      	lsrs	r2, r2, #8
 8004156:	4313      	orrs	r3, r2
 8004158:	6063      	str	r3, [r4, #4]
 800415a:	e72b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800415c:	f7fe fe24 	bl	8002da8 <HAL_GetTick>
 8004160:	1bc0      	subs	r0, r0, r7
 8004162:	2802      	cmp	r0, #2
 8004164:	d9e7      	bls.n	8004136 <HAL_RCC_OscConfig+0x206>
 8004166:	e759      	b.n	800401c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	4a3b      	ldr	r2, [pc, #236]	; (8004258 <HAL_RCC_OscConfig+0x328>)
 800416c:	4013      	ands	r3, r2
 800416e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004170:	f7fe fe1a 	bl	8002da8 <HAL_GetTick>
 8004174:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004176:	2280      	movs	r2, #128	; 0x80
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	0092      	lsls	r2, r2, #2
 800417c:	4213      	tst	r3, r2
 800417e:	d100      	bne.n	8004182 <HAL_RCC_OscConfig+0x252>
 8004180:	e718      	b.n	8003fb4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004182:	f7fe fe11 	bl	8002da8 <HAL_GetTick>
 8004186:	1bc0      	subs	r0, r0, r7
 8004188:	2802      	cmp	r0, #2
 800418a:	d9f4      	bls.n	8004176 <HAL_RCC_OscConfig+0x246>
 800418c:	e746      	b.n	800401c <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418e:	696a      	ldr	r2, [r5, #20]
 8004190:	2301      	movs	r3, #1
 8004192:	2a00      	cmp	r2, #0
 8004194:	d010      	beq.n	80041b8 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8004196:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004198:	4313      	orrs	r3, r2
 800419a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800419c:	f7fe fe04 	bl	8002da8 <HAL_GetTick>
 80041a0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041a2:	2202      	movs	r2, #2
 80041a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041a6:	4213      	tst	r3, r2
 80041a8:	d000      	beq.n	80041ac <HAL_RCC_OscConfig+0x27c>
 80041aa:	e707      	b.n	8003fbc <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ac:	f7fe fdfc 	bl	8002da8 <HAL_GetTick>
 80041b0:	1bc0      	subs	r0, r0, r7
 80041b2:	2802      	cmp	r0, #2
 80041b4:	d9f5      	bls.n	80041a2 <HAL_RCC_OscConfig+0x272>
 80041b6:	e731      	b.n	800401c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 80041b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041ba:	439a      	bics	r2, r3
 80041bc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80041be:	f7fe fdf3 	bl	8002da8 <HAL_GetTick>
 80041c2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041c4:	2202      	movs	r2, #2
 80041c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041c8:	4213      	tst	r3, r2
 80041ca:	d100      	bne.n	80041ce <HAL_RCC_OscConfig+0x29e>
 80041cc:	e6f6      	b.n	8003fbc <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ce:	f7fe fdeb 	bl	8002da8 <HAL_GetTick>
 80041d2:	1bc0      	subs	r0, r0, r7
 80041d4:	2802      	cmp	r0, #2
 80041d6:	d9f5      	bls.n	80041c4 <HAL_RCC_OscConfig+0x294>
 80041d8:	e720      	b.n	800401c <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041da:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80041dc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041e0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e4:	421a      	tst	r2, r3
 80041e6:	d104      	bne.n	80041f2 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041ea:	4313      	orrs	r3, r2
 80041ec:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f2:	2280      	movs	r2, #128	; 0x80
 80041f4:	4f19      	ldr	r7, [pc, #100]	; (800425c <HAL_RCC_OscConfig+0x32c>)
 80041f6:	0052      	lsls	r2, r2, #1
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	4213      	tst	r3, r2
 80041fc:	d008      	beq.n	8004210 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fe:	2280      	movs	r2, #128	; 0x80
 8004200:	68ab      	ldr	r3, [r5, #8]
 8004202:	0052      	lsls	r2, r2, #1
 8004204:	4293      	cmp	r3, r2
 8004206:	d12b      	bne.n	8004260 <HAL_RCC_OscConfig+0x330>
 8004208:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800420a:	4313      	orrs	r3, r2
 800420c:	6523      	str	r3, [r4, #80]	; 0x50
 800420e:	e04c      	b.n	80042aa <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	0052      	lsls	r2, r2, #1
 8004216:	4313      	orrs	r3, r2
 8004218:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800421a:	f7fe fdc5 	bl	8002da8 <HAL_GetTick>
 800421e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	0052      	lsls	r2, r2, #1
 8004226:	4213      	tst	r3, r2
 8004228:	d1e9      	bne.n	80041fe <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422a:	f7fe fdbd 	bl	8002da8 <HAL_GetTick>
 800422e:	9b01      	ldr	r3, [sp, #4]
 8004230:	1ac0      	subs	r0, r0, r3
 8004232:	2864      	cmp	r0, #100	; 0x64
 8004234:	d9f4      	bls.n	8004220 <HAL_RCC_OscConfig+0x2f0>
 8004236:	e6f1      	b.n	800401c <HAL_RCC_OscConfig+0xec>
 8004238:	40021000 	.word	0x40021000
 800423c:	ffff1fff 	.word	0xffff1fff
 8004240:	080064c0 	.word	0x080064c0
 8004244:	20000034 	.word	0x20000034
 8004248:	2000003c 	.word	0x2000003c
 800424c:	fffeffff 	.word	0xfffeffff
 8004250:	fffbffff 	.word	0xfffbffff
 8004254:	ffffe0ff 	.word	0xffffe0ff
 8004258:	fffffeff 	.word	0xfffffeff
 800425c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <HAL_RCC_OscConfig+0x362>
 8004264:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004266:	4a6b      	ldr	r2, [pc, #428]	; (8004414 <HAL_RCC_OscConfig+0x4e4>)
 8004268:	4013      	ands	r3, r2
 800426a:	6523      	str	r3, [r4, #80]	; 0x50
 800426c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800426e:	4a6a      	ldr	r2, [pc, #424]	; (8004418 <HAL_RCC_OscConfig+0x4e8>)
 8004270:	4013      	ands	r3, r2
 8004272:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004274:	f7fe fd98 	bl	8002da8 <HAL_GetTick>
 8004278:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4213      	tst	r3, r2
 8004282:	d01a      	beq.n	80042ba <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fe fd90 	bl	8002da8 <HAL_GetTick>
 8004288:	4b64      	ldr	r3, [pc, #400]	; (800441c <HAL_RCC_OscConfig+0x4ec>)
 800428a:	1bc0      	subs	r0, r0, r7
 800428c:	4298      	cmp	r0, r3
 800428e:	d9f4      	bls.n	800427a <HAL_RCC_OscConfig+0x34a>
 8004290:	e6c4      	b.n	800401c <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004292:	21a0      	movs	r1, #160	; 0xa0
 8004294:	00c9      	lsls	r1, r1, #3
 8004296:	428b      	cmp	r3, r1
 8004298:	d118      	bne.n	80042cc <HAL_RCC_OscConfig+0x39c>
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6523      	str	r3, [r4, #80]	; 0x50
 80042a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042a6:	431a      	orrs	r2, r3
 80042a8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80042aa:	f7fe fd7d 	bl	8002da8 <HAL_GetTick>
 80042ae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042b4:	0092      	lsls	r2, r2, #2
 80042b6:	4213      	tst	r3, r2
 80042b8:	d010      	beq.n	80042dc <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 80042ba:	9b00      	ldr	r3, [sp, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d000      	beq.n	80042c2 <HAL_RCC_OscConfig+0x392>
 80042c0:	e680      	b.n	8003fc4 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042c4:	4a56      	ldr	r2, [pc, #344]	; (8004420 <HAL_RCC_OscConfig+0x4f0>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80042ca:	e67b      	b.n	8003fc4 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042ce:	4a51      	ldr	r2, [pc, #324]	; (8004414 <HAL_RCC_OscConfig+0x4e4>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	6523      	str	r3, [r4, #80]	; 0x50
 80042d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042d6:	4a50      	ldr	r2, [pc, #320]	; (8004418 <HAL_RCC_OscConfig+0x4e8>)
 80042d8:	4013      	ands	r3, r2
 80042da:	e797      	b.n	800420c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fe fd64 	bl	8002da8 <HAL_GetTick>
 80042e0:	4b4e      	ldr	r3, [pc, #312]	; (800441c <HAL_RCC_OscConfig+0x4ec>)
 80042e2:	1bc0      	subs	r0, r0, r7
 80042e4:	4298      	cmp	r0, r3
 80042e6:	d9e3      	bls.n	80042b0 <HAL_RCC_OscConfig+0x380>
 80042e8:	e698      	b.n	800401c <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042ea:	69a9      	ldr	r1, [r5, #24]
 80042ec:	2301      	movs	r3, #1
 80042ee:	4a4d      	ldr	r2, [pc, #308]	; (8004424 <HAL_RCC_OscConfig+0x4f4>)
 80042f0:	2900      	cmp	r1, #0
 80042f2:	d018      	beq.n	8004326 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 80042f4:	68a1      	ldr	r1, [r4, #8]
 80042f6:	4319      	orrs	r1, r3
 80042f8:	60a1      	str	r1, [r4, #8]
 80042fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6363      	str	r3, [r4, #52]	; 0x34
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	6a11      	ldr	r1, [r2, #32]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	430b      	orrs	r3, r1
 8004308:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800430a:	f7fe fd4d 	bl	8002da8 <HAL_GetTick>
 800430e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004310:	2202      	movs	r2, #2
 8004312:	68a3      	ldr	r3, [r4, #8]
 8004314:	4213      	tst	r3, r2
 8004316:	d000      	beq.n	800431a <HAL_RCC_OscConfig+0x3ea>
 8004318:	e658      	b.n	8003fcc <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800431a:	f7fe fd45 	bl	8002da8 <HAL_GetTick>
 800431e:	1bc0      	subs	r0, r0, r7
 8004320:	2802      	cmp	r0, #2
 8004322:	d9f5      	bls.n	8004310 <HAL_RCC_OscConfig+0x3e0>
 8004324:	e67a      	b.n	800401c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 8004326:	68a1      	ldr	r1, [r4, #8]
 8004328:	4399      	bics	r1, r3
 800432a:	60a1      	str	r1, [r4, #8]
 800432c:	6a13      	ldr	r3, [r2, #32]
 800432e:	493e      	ldr	r1, [pc, #248]	; (8004428 <HAL_RCC_OscConfig+0x4f8>)
 8004330:	400b      	ands	r3, r1
 8004332:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004334:	f7fe fd38 	bl	8002da8 <HAL_GetTick>
 8004338:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800433a:	2202      	movs	r2, #2
 800433c:	68a3      	ldr	r3, [r4, #8]
 800433e:	4213      	tst	r3, r2
 8004340:	d100      	bne.n	8004344 <HAL_RCC_OscConfig+0x414>
 8004342:	e643      	b.n	8003fcc <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004344:	f7fe fd30 	bl	8002da8 <HAL_GetTick>
 8004348:	1bc0      	subs	r0, r0, r7
 800434a:	2802      	cmp	r0, #2
 800434c:	d9f5      	bls.n	800433a <HAL_RCC_OscConfig+0x40a>
 800434e:	e665      	b.n	800401c <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004350:	2e0c      	cmp	r6, #12
 8004352:	d043      	beq.n	80043dc <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004354:	4a35      	ldr	r2, [pc, #212]	; (800442c <HAL_RCC_OscConfig+0x4fc>)
 8004356:	2b02      	cmp	r3, #2
 8004358:	d12e      	bne.n	80043b8 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 800435a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800435c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800435e:	4013      	ands	r3, r2
 8004360:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004362:	f7fe fd21 	bl	8002da8 <HAL_GetTick>
 8004366:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004368:	04bf      	lsls	r7, r7, #18
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	423b      	tst	r3, r7
 800436e:	d11d      	bne.n	80043ac <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004370:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004372:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004374:	68e2      	ldr	r2, [r4, #12]
 8004376:	430b      	orrs	r3, r1
 8004378:	492d      	ldr	r1, [pc, #180]	; (8004430 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800437a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437c:	400a      	ands	r2, r1
 800437e:	4313      	orrs	r3, r2
 8004380:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004382:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004384:	4313      	orrs	r3, r2
 8004386:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004388:	2380      	movs	r3, #128	; 0x80
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	045b      	lsls	r3, r3, #17
 800438e:	4313      	orrs	r3, r2
 8004390:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004392:	f7fe fd09 	bl	8002da8 <HAL_GetTick>
 8004396:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	4233      	tst	r3, r6
 800439c:	d000      	beq.n	80043a0 <HAL_RCC_OscConfig+0x470>
 800439e:	e619      	b.n	8003fd4 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe fd02 	bl	8002da8 <HAL_GetTick>
 80043a4:	1b40      	subs	r0, r0, r5
 80043a6:	2802      	cmp	r0, #2
 80043a8:	d9f6      	bls.n	8004398 <HAL_RCC_OscConfig+0x468>
 80043aa:	e637      	b.n	800401c <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fe fcfc 	bl	8002da8 <HAL_GetTick>
 80043b0:	1b80      	subs	r0, r0, r6
 80043b2:	2802      	cmp	r0, #2
 80043b4:	d9d9      	bls.n	800436a <HAL_RCC_OscConfig+0x43a>
 80043b6:	e631      	b.n	800401c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 80043b8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043ba:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80043bc:	4013      	ands	r3, r2
 80043be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043c0:	f7fe fcf2 	bl	8002da8 <HAL_GetTick>
 80043c4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043c6:	04b6      	lsls	r6, r6, #18
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	4233      	tst	r3, r6
 80043cc:	d100      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4a0>
 80043ce:	e601      	b.n	8003fd4 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fe fcea 	bl	8002da8 <HAL_GetTick>
 80043d4:	1b40      	subs	r0, r0, r5
 80043d6:	2802      	cmp	r0, #2
 80043d8:	d9f6      	bls.n	80043c8 <HAL_RCC_OscConfig+0x498>
 80043da:	e61f      	b.n	800401c <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 80043dc:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d100      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4b4>
 80043e2:	e61c      	b.n	800401e <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e4:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80043e6:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80043ea:	0252      	lsls	r2, r2, #9
 80043ec:	401a      	ands	r2, r3
 80043ee:	428a      	cmp	r2, r1
 80043f0:	d000      	beq.n	80043f4 <HAL_RCC_OscConfig+0x4c4>
 80043f2:	e5fd      	b.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043f4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043f8:	0392      	lsls	r2, r2, #14
 80043fa:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fc:	428a      	cmp	r2, r1
 80043fe:	d000      	beq.n	8004402 <HAL_RCC_OscConfig+0x4d2>
 8004400:	e5f6      	b.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004402:	22c0      	movs	r2, #192	; 0xc0
 8004404:	0412      	lsls	r2, r2, #16
 8004406:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004408:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800440a:	4293      	cmp	r3, r2
 800440c:	d100      	bne.n	8004410 <HAL_RCC_OscConfig+0x4e0>
 800440e:	e5e1      	b.n	8003fd4 <HAL_RCC_OscConfig+0xa4>
 8004410:	e5ee      	b.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	fffffeff 	.word	0xfffffeff
 8004418:	fffffbff 	.word	0xfffffbff
 800441c:	00001388 	.word	0x00001388
 8004420:	efffffff 	.word	0xefffffff
 8004424:	40010000 	.word	0x40010000
 8004428:	ffffdfff 	.word	0xffffdfff
 800442c:	feffffff 	.word	0xfeffffff
 8004430:	ff02ffff 	.word	0xff02ffff

08004434 <HAL_RCC_ClockConfig>:
{
 8004434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004436:	1e04      	subs	r4, r0, #0
 8004438:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800443c:	2001      	movs	r0, #1
}
 800443e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	2501      	movs	r5, #1
 8004442:	4e5b      	ldr	r6, [pc, #364]	; (80045b0 <HAL_RCC_ClockConfig+0x17c>)
 8004444:	9a01      	ldr	r2, [sp, #4]
 8004446:	6833      	ldr	r3, [r6, #0]
 8004448:	402b      	ands	r3, r5
 800444a:	4293      	cmp	r3, r2
 800444c:	d331      	bcc.n	80044b2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	0793      	lsls	r3, r2, #30
 8004452:	d443      	bmi.n	80044dc <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004454:	07d3      	lsls	r3, r2, #31
 8004456:	d449      	bmi.n	80044ec <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004458:	2501      	movs	r5, #1
 800445a:	6833      	ldr	r3, [r6, #0]
 800445c:	9a01      	ldr	r2, [sp, #4]
 800445e:	402b      	ands	r3, r5
 8004460:	4293      	cmp	r3, r2
 8004462:	d909      	bls.n	8004478 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004464:	6833      	ldr	r3, [r6, #0]
 8004466:	43ab      	bics	r3, r5
 8004468:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800446a:	f7fe fc9d 	bl	8002da8 <HAL_GetTick>
 800446e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004470:	6833      	ldr	r3, [r6, #0]
 8004472:	422b      	tst	r3, r5
 8004474:	d000      	beq.n	8004478 <HAL_RCC_ClockConfig+0x44>
 8004476:	e08c      	b.n	8004592 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	6822      	ldr	r2, [r4, #0]
 800447a:	4d4e      	ldr	r5, [pc, #312]	; (80045b4 <HAL_RCC_ClockConfig+0x180>)
 800447c:	0753      	lsls	r3, r2, #29
 800447e:	d500      	bpl.n	8004482 <HAL_RCC_ClockConfig+0x4e>
 8004480:	e08f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004482:	0713      	lsls	r3, r2, #28
 8004484:	d506      	bpl.n	8004494 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004486:	68e9      	ldr	r1, [r5, #12]
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	4a4b      	ldr	r2, [pc, #300]	; (80045b8 <HAL_RCC_ClockConfig+0x184>)
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	400a      	ands	r2, r1
 8004490:	4313      	orrs	r3, r2
 8004492:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004494:	f7ff fd04 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8004498:	68eb      	ldr	r3, [r5, #12]
 800449a:	4a48      	ldr	r2, [pc, #288]	; (80045bc <HAL_RCC_ClockConfig+0x188>)
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	0f1b      	lsrs	r3, r3, #28
 80044a0:	5cd3      	ldrb	r3, [r2, r3]
 80044a2:	40d8      	lsrs	r0, r3
 80044a4:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <HAL_RCC_ClockConfig+0x18c>)
 80044a6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80044a8:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <HAL_RCC_ClockConfig+0x190>)
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	f7fe fc38 	bl	8002d20 <HAL_InitTick>
  if(status != HAL_OK)
 80044b0:	e7c5      	b.n	800443e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	6833      	ldr	r3, [r6, #0]
 80044b4:	9a01      	ldr	r2, [sp, #4]
 80044b6:	43ab      	bics	r3, r5
 80044b8:	4313      	orrs	r3, r2
 80044ba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80044bc:	f7fe fc74 	bl	8002da8 <HAL_GetTick>
 80044c0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	6833      	ldr	r3, [r6, #0]
 80044c4:	9a01      	ldr	r2, [sp, #4]
 80044c6:	402b      	ands	r3, r5
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d0c0      	beq.n	800444e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7fe fc6c 	bl	8002da8 <HAL_GetTick>
 80044d0:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <HAL_RCC_ClockConfig+0x194>)
 80044d2:	1bc0      	subs	r0, r0, r7
 80044d4:	4298      	cmp	r0, r3
 80044d6:	d9f4      	bls.n	80044c2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80044d8:	2003      	movs	r0, #3
 80044da:	e7b0      	b.n	800443e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044dc:	20f0      	movs	r0, #240	; 0xf0
 80044de:	4935      	ldr	r1, [pc, #212]	; (80045b4 <HAL_RCC_ClockConfig+0x180>)
 80044e0:	68cb      	ldr	r3, [r1, #12]
 80044e2:	4383      	bics	r3, r0
 80044e4:	68a0      	ldr	r0, [r4, #8]
 80044e6:	4303      	orrs	r3, r0
 80044e8:	60cb      	str	r3, [r1, #12]
 80044ea:	e7b3      	b.n	8004454 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ec:	4d31      	ldr	r5, [pc, #196]	; (80045b4 <HAL_RCC_ClockConfig+0x180>)
 80044ee:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044f0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f2:	2a02      	cmp	r2, #2
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044f6:	039b      	lsls	r3, r3, #14
 80044f8:	d5a0      	bpl.n	800443c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fa:	2103      	movs	r1, #3
 80044fc:	68eb      	ldr	r3, [r5, #12]
 80044fe:	438b      	bics	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004504:	f7fe fc50 	bl	8002da8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004508:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800450a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450c:	2b02      	cmp	r3, #2
 800450e:	d118      	bne.n	8004542 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004510:	220c      	movs	r2, #12
 8004512:	68eb      	ldr	r3, [r5, #12]
 8004514:	4013      	ands	r3, r2
 8004516:	2b08      	cmp	r3, #8
 8004518:	d09e      	beq.n	8004458 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451a:	f7fe fc45 	bl	8002da8 <HAL_GetTick>
 800451e:	4b2a      	ldr	r3, [pc, #168]	; (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004520:	1bc0      	subs	r0, r0, r7
 8004522:	4298      	cmp	r0, r3
 8004524:	d9f4      	bls.n	8004510 <HAL_RCC_ClockConfig+0xdc>
 8004526:	e7d7      	b.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004528:	2a03      	cmp	r2, #3
 800452a:	d102      	bne.n	8004532 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	d4e4      	bmi.n	80044fa <HAL_RCC_ClockConfig+0xc6>
 8004530:	e784      	b.n	800443c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004532:	2a01      	cmp	r2, #1
 8004534:	d102      	bne.n	800453c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004536:	075b      	lsls	r3, r3, #29
 8004538:	d4df      	bmi.n	80044fa <HAL_RCC_ClockConfig+0xc6>
 800453a:	e77f      	b.n	800443c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800453c:	059b      	lsls	r3, r3, #22
 800453e:	d4dc      	bmi.n	80044fa <HAL_RCC_ClockConfig+0xc6>
 8004540:	e77c      	b.n	800443c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004542:	2b03      	cmp	r3, #3
 8004544:	d10b      	bne.n	800455e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004546:	220c      	movs	r2, #12
 8004548:	68eb      	ldr	r3, [r5, #12]
 800454a:	4013      	ands	r3, r2
 800454c:	4293      	cmp	r3, r2
 800454e:	d083      	beq.n	8004458 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fe fc2a 	bl	8002da8 <HAL_GetTick>
 8004554:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004556:	1bc0      	subs	r0, r0, r7
 8004558:	4298      	cmp	r0, r3
 800455a:	d9f4      	bls.n	8004546 <HAL_RCC_ClockConfig+0x112>
 800455c:	e7bc      	b.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800455e:	2b01      	cmp	r3, #1
 8004560:	d011      	beq.n	8004586 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004562:	220c      	movs	r2, #12
 8004564:	68eb      	ldr	r3, [r5, #12]
 8004566:	4213      	tst	r3, r2
 8004568:	d100      	bne.n	800456c <HAL_RCC_ClockConfig+0x138>
 800456a:	e775      	b.n	8004458 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fe fc1c 	bl	8002da8 <HAL_GetTick>
 8004570:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004572:	1bc0      	subs	r0, r0, r7
 8004574:	4298      	cmp	r0, r3
 8004576:	d9f4      	bls.n	8004562 <HAL_RCC_ClockConfig+0x12e>
 8004578:	e7ae      	b.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457a:	f7fe fc15 	bl	8002da8 <HAL_GetTick>
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004580:	1bc0      	subs	r0, r0, r7
 8004582:	4298      	cmp	r0, r3
 8004584:	d8a8      	bhi.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004586:	220c      	movs	r2, #12
 8004588:	68eb      	ldr	r3, [r5, #12]
 800458a:	4013      	ands	r3, r2
 800458c:	2b04      	cmp	r3, #4
 800458e:	d1f4      	bne.n	800457a <HAL_RCC_ClockConfig+0x146>
 8004590:	e762      	b.n	8004458 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004592:	f7fe fc09 	bl	8002da8 <HAL_GetTick>
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <HAL_RCC_ClockConfig+0x194>)
 8004598:	1bc0      	subs	r0, r0, r7
 800459a:	4298      	cmp	r0, r3
 800459c:	d800      	bhi.n	80045a0 <HAL_RCC_ClockConfig+0x16c>
 800459e:	e767      	b.n	8004470 <HAL_RCC_ClockConfig+0x3c>
 80045a0:	e79a      	b.n	80044d8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a2:	68eb      	ldr	r3, [r5, #12]
 80045a4:	4909      	ldr	r1, [pc, #36]	; (80045cc <HAL_RCC_ClockConfig+0x198>)
 80045a6:	400b      	ands	r3, r1
 80045a8:	68e1      	ldr	r1, [r4, #12]
 80045aa:	430b      	orrs	r3, r1
 80045ac:	60eb      	str	r3, [r5, #12]
 80045ae:	e768      	b.n	8004482 <HAL_RCC_ClockConfig+0x4e>
 80045b0:	40022000 	.word	0x40022000
 80045b4:	40021000 	.word	0x40021000
 80045b8:	ffffc7ff 	.word	0xffffc7ff
 80045bc:	080064c0 	.word	0x080064c0
 80045c0:	20000034 	.word	0x20000034
 80045c4:	2000003c 	.word	0x2000003c
 80045c8:	00001388 	.word	0x00001388
 80045cc:	fffff8ff 	.word	0xfffff8ff

080045d0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045d0:	6803      	ldr	r3, [r0, #0]
{
 80045d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045d4:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045d6:	069b      	lsls	r3, r3, #26
 80045d8:	d53c      	bpl.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045da:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80045dc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045de:	4c5a      	ldr	r4, [pc, #360]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80045e0:	055b      	lsls	r3, r3, #21
 80045e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80045e4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e6:	421a      	tst	r2, r3
 80045e8:	d104      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045ec:	4313      	orrs	r3, r2
 80045ee:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	2780      	movs	r7, #128	; 0x80
 80045f6:	4e55      	ldr	r6, [pc, #340]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80045f8:	007f      	lsls	r7, r7, #1
 80045fa:	6833      	ldr	r3, [r6, #0]
 80045fc:	423b      	tst	r3, r7
 80045fe:	d062      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004600:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004602:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004604:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004606:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004608:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800460a:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800460c:	029b      	lsls	r3, r3, #10
 800460e:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004610:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004612:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004614:	428a      	cmp	r2, r1
 8004616:	d167      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004618:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800461a:	0011      	movs	r1, r2
 800461c:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800461e:	421a      	tst	r2, r3
 8004620:	d16a      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004622:	6869      	ldr	r1, [r5, #4]
 8004624:	23c0      	movs	r3, #192	; 0xc0
 8004626:	000a      	movs	r2, r1
 8004628:	029b      	lsls	r3, r3, #10
 800462a:	401a      	ands	r2, r3
 800462c:	429a      	cmp	r2, r3
 800462e:	d107      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	4847      	ldr	r0, [pc, #284]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004634:	4003      	ands	r3, r0
 8004636:	20c0      	movs	r0, #192	; 0xc0
 8004638:	0380      	lsls	r0, r0, #14
 800463a:	4001      	ands	r1, r0
 800463c:	430b      	orrs	r3, r1
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004642:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004644:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004646:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004648:	2b01      	cmp	r3, #1
 800464a:	d103      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800464e:	4a41      	ldr	r2, [pc, #260]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004650:	4013      	ands	r3, r2
 8004652:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	07da      	lsls	r2, r3, #31
 8004658:	d506      	bpl.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800465a:	2003      	movs	r0, #3
 800465c:	493a      	ldr	r1, [pc, #232]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800465e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004660:	4382      	bics	r2, r0
 8004662:	68a8      	ldr	r0, [r5, #8]
 8004664:	4302      	orrs	r2, r0
 8004666:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004668:	079a      	lsls	r2, r3, #30
 800466a:	d506      	bpl.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800466c:	200c      	movs	r0, #12
 800466e:	4936      	ldr	r1, [pc, #216]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004670:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004672:	4382      	bics	r2, r0
 8004674:	68e8      	ldr	r0, [r5, #12]
 8004676:	4302      	orrs	r2, r0
 8004678:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800467a:	075a      	lsls	r2, r3, #29
 800467c:	d506      	bpl.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800467e:	4932      	ldr	r1, [pc, #200]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004680:	4835      	ldr	r0, [pc, #212]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004682:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004684:	4002      	ands	r2, r0
 8004686:	6928      	ldr	r0, [r5, #16]
 8004688:	4302      	orrs	r2, r0
 800468a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800468c:	071a      	lsls	r2, r3, #28
 800468e:	d506      	bpl.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004690:	492d      	ldr	r1, [pc, #180]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004692:	4832      	ldr	r0, [pc, #200]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004694:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004696:	4002      	ands	r2, r0
 8004698:	6968      	ldr	r0, [r5, #20]
 800469a:	4302      	orrs	r2, r0
 800469c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800469e:	065a      	lsls	r2, r3, #25
 80046a0:	d506      	bpl.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a2:	4929      	ldr	r1, [pc, #164]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80046a4:	482e      	ldr	r0, [pc, #184]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80046a6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80046a8:	4002      	ands	r2, r0
 80046aa:	69e8      	ldr	r0, [r5, #28]
 80046ac:	4302      	orrs	r2, r0
 80046ae:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80046b0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	d517      	bpl.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80046b6:	4a24      	ldr	r2, [pc, #144]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80046b8:	492a      	ldr	r1, [pc, #168]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80046ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046bc:	400b      	ands	r3, r1
 80046be:	69a9      	ldr	r1, [r5, #24]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046c4:	e00f      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c6:	6833      	ldr	r3, [r6, #0]
 80046c8:	433b      	orrs	r3, r7
 80046ca:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80046cc:	f7fe fb6c 	bl	8002da8 <HAL_GetTick>
 80046d0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	6833      	ldr	r3, [r6, #0]
 80046d4:	423b      	tst	r3, r7
 80046d6:	d193      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d8:	f7fe fb66 	bl	8002da8 <HAL_GetTick>
 80046dc:	9b01      	ldr	r3, [sp, #4]
 80046de:	1ac0      	subs	r0, r0, r3
 80046e0:	2864      	cmp	r0, #100	; 0x64
 80046e2:	d9f6      	bls.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
          return HAL_TIMEOUT;
 80046e4:	2003      	movs	r0, #3
}
 80046e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80046e8:	429e      	cmp	r6, r3
 80046ea:	d195      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046ec:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80046ee:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046f0:	0392      	lsls	r2, r2, #14
 80046f2:	d400      	bmi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x126>
 80046f4:	e790      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80046f6:	e7f6      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80046f8:	42b1      	cmp	r1, r6
 80046fa:	d100      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80046fc:	e791      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046fe:	682b      	ldr	r3, [r5, #0]
 8004700:	069b      	lsls	r3, r3, #26
 8004702:	d400      	bmi.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004704:	e78d      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004706:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004708:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800470a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800470c:	0312      	lsls	r2, r2, #12
 800470e:	4302      	orrs	r2, r0
 8004710:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004712:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004716:	4815      	ldr	r0, [pc, #84]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004718:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800471a:	4002      	ands	r2, r0
 800471c:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800471e:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004720:	05cb      	lsls	r3, r1, #23
 8004722:	d400      	bmi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004724:	e77d      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8004726:	f7fe fb3f 	bl	8002da8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800472a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800472c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800472e:	00bf      	lsls	r7, r7, #2
 8004730:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004732:	423b      	tst	r3, r7
 8004734:	d000      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004736:	e774      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004738:	f7fe fb36 	bl	8002da8 <HAL_GetTick>
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800473e:	1b80      	subs	r0, r0, r6
 8004740:	4298      	cmp	r0, r3
 8004742:	d9f5      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004744:	e7ce      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	40021000 	.word	0x40021000
 800474c:	40007000 	.word	0x40007000
 8004750:	ffcfffff 	.word	0xffcfffff
 8004754:	efffffff 	.word	0xefffffff
 8004758:	fffff3ff 	.word	0xfffff3ff
 800475c:	ffffcfff 	.word	0xffffcfff
 8004760:	fbffffff 	.word	0xfbffffff
 8004764:	fff3ffff 	.word	0xfff3ffff
 8004768:	fffcffff 	.word	0xfffcffff
 800476c:	fff7ffff 	.word	0xfff7ffff
 8004770:	00001388 	.word	0x00001388

08004774 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004776:	001d      	movs	r5, r3
 8004778:	0017      	movs	r7, r2
 800477a:	b085      	sub	sp, #20
 800477c:	000e      	movs	r6, r1
 800477e:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004780:	f7fe fb12 	bl	8002da8 <HAL_GetTick>
 8004784:	19ed      	adds	r5, r5, r7
 8004786:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004788:	f7fe fb0e 	bl	8002da8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800478e:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	015b      	lsls	r3, r3, #5
 8004794:	0d1b      	lsrs	r3, r3, #20
 8004796:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004798:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800479a:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479c:	6893      	ldr	r3, [r2, #8]
 800479e:	4033      	ands	r3, r6
 80047a0:	429e      	cmp	r6, r3
 80047a2:	d001      	beq.n	80047a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80047a4:	2000      	movs	r0, #0
 80047a6:	e032      	b.n	800480e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	1c7b      	adds	r3, r7, #1
 80047aa:	d0f7      	beq.n	800479c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ac:	f7fe fafc 	bl	8002da8 <HAL_GetTick>
 80047b0:	9b01      	ldr	r3, [sp, #4]
 80047b2:	1ac0      	subs	r0, r0, r3
 80047b4:	42a8      	cmp	r0, r5
 80047b6:	d32c      	bcc.n	8004812 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047b8:	21e0      	movs	r1, #224	; 0xe0
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	438a      	bics	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c2:	2282      	movs	r2, #130	; 0x82
 80047c4:	6861      	ldr	r1, [r4, #4]
 80047c6:	0052      	lsls	r2, r2, #1
 80047c8:	4291      	cmp	r1, r2
 80047ca:	d10c      	bne.n	80047e6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 80047cc:	2180      	movs	r1, #128	; 0x80
 80047ce:	68a2      	ldr	r2, [r4, #8]
 80047d0:	0209      	lsls	r1, r1, #8
 80047d2:	428a      	cmp	r2, r1
 80047d4:	d003      	beq.n	80047de <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	00c9      	lsls	r1, r1, #3
 80047da:	428a      	cmp	r2, r1
 80047dc:	d103      	bne.n	80047e6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 80047de:	2140      	movs	r1, #64	; 0x40
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	438a      	bics	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80047ea:	0189      	lsls	r1, r1, #6
 80047ec:	428a      	cmp	r2, r1
 80047ee:	d106      	bne.n	80047fe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 80047f0:	6819      	ldr	r1, [r3, #0]
 80047f2:	480d      	ldr	r0, [pc, #52]	; (8004828 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 80047f4:	4001      	ands	r1, r0
 80047f6:	6019      	str	r1, [r3, #0]
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80047fe:	0023      	movs	r3, r4
 8004800:	2201      	movs	r2, #1
 8004802:	3351      	adds	r3, #81	; 0x51
 8004804:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004806:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004808:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800480a:	3450      	adds	r4, #80	; 0x50
 800480c:	7023      	strb	r3, [r4, #0]
}
 800480e:	b005      	add	sp, #20
 8004810:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004812:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004814:	1e5a      	subs	r2, r3, #1
 8004816:	4193      	sbcs	r3, r2
 8004818:	425b      	negs	r3, r3
 800481a:	401d      	ands	r5, r3
      count--;
 800481c:	9b03      	ldr	r3, [sp, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	e7ba      	b.n	8004798 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	20000034 	.word	0x20000034
 8004828:	ffffdfff 	.word	0xffffdfff

0800482c <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800482c:	4b16      	ldr	r3, [pc, #88]	; (8004888 <SPI_EndRxTxTransaction+0x5c>)
{
 800482e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004830:	0004      	movs	r4, r0
 8004832:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	4915      	ldr	r1, [pc, #84]	; (800488c <SPI_EndRxTxTransaction+0x60>)
{
 8004838:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800483a:	f7fb fc83 	bl	8000144 <__udivsi3>
 800483e:	23fa      	movs	r3, #250	; 0xfa
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4343      	muls	r3, r0
 8004844:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004846:	2382      	movs	r3, #130	; 0x82
 8004848:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800484a:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4299      	cmp	r1, r3
 8004850:	d10d      	bne.n	800486e <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004852:	0033      	movs	r3, r6
 8004854:	002a      	movs	r2, r5
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	0020      	movs	r0, r4
 800485a:	f7ff ff8b 	bl	8004774 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800485e:	2800      	cmp	r0, #0
 8004860:	d00f      	beq.n	8004882 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004862:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004864:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004866:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004868:	4313      	orrs	r3, r2
 800486a:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 800486c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 800486e:	9b01      	ldr	r3, [sp, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <SPI_EndRxTxTransaction+0x56>
      count--;
 8004874:	9b01      	ldr	r3, [sp, #4]
 8004876:	3b01      	subs	r3, #1
 8004878:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4213      	tst	r3, r2
 8004880:	d1f5      	bne.n	800486e <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8004882:	2000      	movs	r0, #0
 8004884:	e7f2      	b.n	800486c <SPI_EndRxTxTransaction+0x40>
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	20000034 	.word	0x20000034
 800488c:	016e3600 	.word	0x016e3600

08004890 <HAL_SPI_Init>:
{
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004894:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004896:	2c00      	cmp	r4, #0
 8004898:	d054      	beq.n	8004944 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800489a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d152      	bne.n	8004946 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048a0:	2282      	movs	r2, #130	; 0x82
 80048a2:	6861      	ldr	r1, [r4, #4]
 80048a4:	0052      	lsls	r2, r2, #1
 80048a6:	4291      	cmp	r1, r2
 80048a8:	d000      	beq.n	80048ac <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048aa:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ac:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ae:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80048b2:	3551      	adds	r5, #81	; 0x51
 80048b4:	782b      	ldrb	r3, [r5, #0]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80048bc:	0023      	movs	r3, r4
 80048be:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 80048c0:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80048c2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80048c4:	f7fe f974 	bl	8002bb0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80048c8:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 80048ca:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80048cc:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80048ce:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d0:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 80048d2:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d4:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80048d6:	4393      	bics	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048da:	2382      	movs	r3, #130	; 0x82
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4033      	ands	r3, r6
 80048e0:	2684      	movs	r6, #132	; 0x84
 80048e2:	0236      	lsls	r6, r6, #8
 80048e4:	403e      	ands	r6, r7
 80048e6:	4333      	orrs	r3, r6
 80048e8:	2680      	movs	r6, #128	; 0x80
 80048ea:	68e7      	ldr	r7, [r4, #12]
 80048ec:	0136      	lsls	r6, r6, #4
 80048ee:	403e      	ands	r6, r7
 80048f0:	4333      	orrs	r3, r6
 80048f2:	6926      	ldr	r6, [r4, #16]
 80048f4:	69a2      	ldr	r2, [r4, #24]
 80048f6:	4030      	ands	r0, r6
 80048f8:	2601      	movs	r6, #1
 80048fa:	4303      	orrs	r3, r0
 80048fc:	6960      	ldr	r0, [r4, #20]
 80048fe:	69e7      	ldr	r7, [r4, #28]
 8004900:	4030      	ands	r0, r6
 8004902:	4303      	orrs	r3, r0
 8004904:	2080      	movs	r0, #128	; 0x80
 8004906:	0080      	lsls	r0, r0, #2
 8004908:	4010      	ands	r0, r2
 800490a:	4303      	orrs	r3, r0
 800490c:	2038      	movs	r0, #56	; 0x38
 800490e:	4038      	ands	r0, r7
 8004910:	4303      	orrs	r3, r0
 8004912:	2080      	movs	r0, #128	; 0x80
 8004914:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004916:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004918:	4038      	ands	r0, r7
 800491a:	4303      	orrs	r3, r0
 800491c:	2080      	movs	r0, #128	; 0x80
 800491e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004920:	0180      	lsls	r0, r0, #6
 8004922:	4038      	ands	r0, r7
 8004924:	4303      	orrs	r3, r0
 8004926:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004928:	2304      	movs	r3, #4
 800492a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800492c:	401a      	ands	r2, r3
 800492e:	330c      	adds	r3, #12
 8004930:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004932:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004934:	431a      	orrs	r2, r3
 8004936:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004938:	69cb      	ldr	r3, [r1, #28]
 800493a:	4a05      	ldr	r2, [pc, #20]	; (8004950 <HAL_SPI_Init+0xc0>)
 800493c:	4013      	ands	r3, r2
 800493e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004940:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004942:	702e      	strb	r6, [r5, #0]
}
 8004944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004946:	2300      	movs	r3, #0
 8004948:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800494a:	6163      	str	r3, [r4, #20]
 800494c:	e7ae      	b.n	80048ac <HAL_SPI_Init+0x1c>
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	fffff7ff 	.word	0xfffff7ff

08004954 <HAL_SPI_Transmit_DMA>:
{
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8004956:	0006      	movs	r6, r0
 8004958:	3650      	adds	r6, #80	; 0x50
 800495a:	7833      	ldrb	r3, [r6, #0]
{
 800495c:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 800495e:	2502      	movs	r5, #2
 8004960:	2b01      	cmp	r3, #1
 8004962:	d03e      	beq.n	80049e2 <HAL_SPI_Transmit_DMA+0x8e>
 8004964:	2301      	movs	r3, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8004966:	0007      	movs	r7, r0
  __HAL_LOCK(hspi);
 8004968:	7033      	strb	r3, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 800496a:	3751      	adds	r7, #81	; 0x51
 800496c:	783b      	ldrb	r3, [r7, #0]
 800496e:	b2dd      	uxtb	r5, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	d14a      	bne.n	8004a0a <HAL_SPI_Transmit_DMA+0xb6>
  if ((pData == NULL) || (Size == 0U))
 8004974:	2900      	cmp	r1, #0
 8004976:	d032      	beq.n	80049de <HAL_SPI_Transmit_DMA+0x8a>
 8004978:	2a00      	cmp	r2, #0
 800497a:	d030      	beq.n	80049de <HAL_SPI_Transmit_DMA+0x8a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800497c:	3302      	adds	r3, #2
 800497e:	703b      	strb	r3, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004980:	2300      	movs	r3, #0
 8004982:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004984:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004986:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->TxISR       = NULL;
 8004988:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 800498a:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800498c:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800498e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004990:	2380      	movs	r3, #128	; 0x80
  hspi->TxXferSize  = Size;
 8004992:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004994:	6301      	str	r1, [r0, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8004996:	6802      	ldr	r2, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004998:	6880      	ldr	r0, [r0, #8]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	4298      	cmp	r0, r3
 800499e:	d108      	bne.n	80049b2 <HAL_SPI_Transmit_DMA+0x5e>
    __HAL_SPI_DISABLE(hspi);
 80049a0:	2040      	movs	r0, #64	; 0x40
 80049a2:	6813      	ldr	r3, [r2, #0]
 80049a4:	4383      	bics	r3, r0
 80049a6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80049a8:	2380      	movs	r3, #128	; 0x80
 80049aa:	6810      	ldr	r0, [r2, #0]
 80049ac:	01db      	lsls	r3, r3, #7
 80049ae:	4303      	orrs	r3, r0
 80049b0:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80049b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <HAL_SPI_Transmit_DMA+0xbc>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80049b6:	320c      	adds	r2, #12
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80049b8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_SPI_Transmit_DMA+0xc0>)
 80049bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80049be:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <HAL_SPI_Transmit_DMA+0xc4>)
 80049c0:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 80049c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80049ca:	f7fe fcad 	bl	8003328 <HAL_DMA_Start_IT>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_SPI_Transmit_DMA+0x92>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049d2:	2310      	movs	r3, #16
 80049d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80049d6:	4313      	orrs	r3, r2
 80049d8:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80049da:	2301      	movs	r3, #1
 80049dc:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 80049de:	2300      	movs	r3, #0
 80049e0:	7033      	strb	r3, [r6, #0]
}
 80049e2:	0028      	movs	r0, r5
 80049e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049e6:	2240      	movs	r2, #64	; 0x40
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	4211      	tst	r1, r2
 80049ee:	d102      	bne.n	80049f6 <HAL_SPI_Transmit_DMA+0xa2>
    __HAL_SPI_ENABLE(hspi);
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80049f6:	2220      	movs	r2, #32
 80049f8:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049fa:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80049fc:	430a      	orrs	r2, r1
 80049fe:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a00:	2202      	movs	r2, #2
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	e7e9      	b.n	80049de <HAL_SPI_Transmit_DMA+0x8a>
    errorcode = HAL_BUSY;
 8004a0a:	2502      	movs	r5, #2
 8004a0c:	e7e7      	b.n	80049de <HAL_SPI_Transmit_DMA+0x8a>
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	08004a21 	.word	0x08004a21
 8004a14:	08004a51 	.word	0x08004a51
 8004a18:	08004a2d 	.word	0x08004a2d

08004a1c <HAL_SPI_TxCpltCallback>:
 8004a1c:	4770      	bx	lr

08004a1e <HAL_SPI_TxHalfCpltCallback>:
 8004a1e:	4770      	bx	lr

08004a20 <SPI_DMAHalfTransmitCplt>:
{
 8004a20:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004a22:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004a24:	f7ff fffb 	bl	8004a1e <HAL_SPI_TxHalfCpltCallback>
}
 8004a28:	bd10      	pop	{r4, pc}

08004a2a <HAL_SPI_ErrorCallback>:
 8004a2a:	4770      	bx	lr

08004a2c <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a2c:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a2e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004a30:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a32:	6802      	ldr	r2, [r0, #0]
 8004a34:	6853      	ldr	r3, [r2, #4]
 8004a36:	438b      	bics	r3, r1
 8004a38:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a3a:	2310      	movs	r3, #16
 8004a3c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004a42:	0003      	movs	r3, r0
 8004a44:	2201      	movs	r2, #1
 8004a46:	3351      	adds	r3, #81	; 0x51
 8004a48:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8004a4a:	f7ff ffee 	bl	8004a2a <HAL_SPI_ErrorCallback>
}
 8004a4e:	bd10      	pop	{r4, pc}

08004a50 <SPI_DMATransmitCplt>:
{
 8004a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a52:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a54:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8004a56:	f7fe f9a7 	bl	8002da8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004a5a:	682b      	ldr	r3, [r5, #0]
 8004a5c:	2520      	movs	r5, #32
 8004a5e:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8004a60:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004a62:	422b      	tst	r3, r5
 8004a64:	d127      	bne.n	8004ab6 <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a66:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	43a9      	bics	r1, r5
 8004a6e:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	4381      	bics	r1, r0
 8004a74:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a76:	0020      	movs	r0, r4
 8004a78:	2164      	movs	r1, #100	; 0x64
 8004a7a:	f7ff fed7 	bl	800482c <SPI_EndRxTxTransaction>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d002      	beq.n	8004a88 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a84:	431d      	orrs	r5, r3
 8004a86:	6565      	str	r5, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a88:	68a3      	ldr	r3, [r4, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	9201      	str	r2, [sp, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004aa0:	0023      	movs	r3, r4
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	3351      	adds	r3, #81	; 0x51
 8004aa6:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8004aae:	0020      	movs	r0, r4
 8004ab0:	f7ff ffbb 	bl	8004a2a <HAL_SPI_ErrorCallback>
}
 8004ab4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8004ab6:	0020      	movs	r0, r4
 8004ab8:	f7ff ffb0 	bl	8004a1c <HAL_SPI_TxCpltCallback>
 8004abc:	e7fa      	b.n	8004ab4 <SPI_DMATransmitCplt+0x64>
	...

08004ac0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac0:	2280      	movs	r2, #128	; 0x80
{
 8004ac2:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004ac4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac6:	05d2      	lsls	r2, r2, #23
 8004ac8:	4290      	cmp	r0, r2
 8004aca:	d005      	beq.n	8004ad8 <TIM_Base_SetConfig+0x18>
 8004acc:	4c10      	ldr	r4, [pc, #64]	; (8004b10 <TIM_Base_SetConfig+0x50>)
 8004ace:	42a0      	cmp	r0, r4
 8004ad0:	d002      	beq.n	8004ad8 <TIM_Base_SetConfig+0x18>
 8004ad2:	4c10      	ldr	r4, [pc, #64]	; (8004b14 <TIM_Base_SetConfig+0x54>)
 8004ad4:	42a0      	cmp	r0, r4
 8004ad6:	d10f      	bne.n	8004af8 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad8:	2470      	movs	r4, #112	; 0x70
 8004ada:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004adc:	684c      	ldr	r4, [r1, #4]
 8004ade:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae0:	4290      	cmp	r0, r2
 8004ae2:	d005      	beq.n	8004af0 <TIM_Base_SetConfig+0x30>
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <TIM_Base_SetConfig+0x50>)
 8004ae6:	4290      	cmp	r0, r2
 8004ae8:	d002      	beq.n	8004af0 <TIM_Base_SetConfig+0x30>
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <TIM_Base_SetConfig+0x54>)
 8004aec:	4290      	cmp	r0, r2
 8004aee:	d103      	bne.n	8004af8 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af0:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <TIM_Base_SetConfig+0x58>)
 8004af2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af4:	68ca      	ldr	r2, [r1, #12]
 8004af6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	4393      	bics	r3, r2
 8004afc:	690a      	ldr	r2, [r1, #16]
 8004afe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004b00:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b02:	688b      	ldr	r3, [r1, #8]
 8004b04:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b06:	680b      	ldr	r3, [r1, #0]
 8004b08:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	6143      	str	r3, [r0, #20]
}
 8004b0e:	bd10      	pop	{r4, pc}
 8004b10:	40010800 	.word	0x40010800
 8004b14:	40011400 	.word	0x40011400
 8004b18:	fffffcff 	.word	0xfffffcff

08004b1c <HAL_TIM_Base_Init>:
{
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004b20:	2001      	movs	r0, #1
  if (htim == NULL)
 8004b22:	2c00      	cmp	r4, #0
 8004b24:	d01d      	beq.n	8004b62 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b26:	0025      	movs	r5, r4
 8004b28:	3539      	adds	r5, #57	; 0x39
 8004b2a:	782b      	ldrb	r3, [r5, #0]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d105      	bne.n	8004b3e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004b32:	0023      	movs	r3, r4
 8004b34:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8004b36:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004b38:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004b3a:	f7fe f87f 	bl	8002c3c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b42:	6820      	ldr	r0, [r4, #0]
 8004b44:	1d21      	adds	r1, r4, #4
 8004b46:	f7ff ffbb 	bl	8004ac0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4a:	0022      	movs	r2, r4
 8004b4c:	2301      	movs	r3, #1
  return HAL_OK;
 8004b4e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b50:	323e      	adds	r2, #62	; 0x3e
 8004b52:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	343d      	adds	r4, #61	; 0x3d
 8004b56:	3a04      	subs	r2, #4
 8004b58:	7013      	strb	r3, [r2, #0]
 8004b5a:	7053      	strb	r3, [r2, #1]
 8004b5c:	7093      	strb	r3, [r2, #2]
 8004b5e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	702b      	strb	r3, [r5, #0]
}
 8004b62:	bd70      	pop	{r4, r5, r6, pc}

08004b64 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004b64:	0002      	movs	r2, r0
{
 8004b66:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004b68:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004b6a:	3239      	adds	r2, #57	; 0x39
 8004b6c:	7811      	ldrb	r1, [r2, #0]
 8004b6e:	4281      	cmp	r1, r0
 8004b70:	d119      	bne.n	8004ba6 <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b72:	2102      	movs	r1, #2
 8004b74:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	4302      	orrs	r2, r0
 8004b7c:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7e:	2280      	movs	r2, #128	; 0x80
 8004b80:	05d2      	lsls	r2, r2, #23
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d005      	beq.n	8004b92 <HAL_TIM_Base_Start_IT+0x2e>
 8004b86:	4a0b      	ldr	r2, [pc, #44]	; (8004bb4 <HAL_TIM_Base_Start_IT+0x50>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d002      	beq.n	8004b92 <HAL_TIM_Base_Start_IT+0x2e>
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <HAL_TIM_Base_Start_IT+0x54>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10a      	bne.n	8004ba8 <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b92:	2107      	movs	r1, #7
 8004b94:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8004b96:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	2a06      	cmp	r2, #6
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
}
 8004ba6:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4310      	orrs	r0, r2
 8004bac:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e7f9      	b.n	8004ba6 <HAL_TIM_Base_Start_IT+0x42>
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	40010800 	.word	0x40010800
 8004bb8:	40011400 	.word	0x40011400

08004bbc <HAL_TIM_ConfigClockSource>:
{
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004bbe:	0005      	movs	r5, r0
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	3538      	adds	r5, #56	; 0x38
 8004bc4:	782c      	ldrb	r4, [r5, #0]
{
 8004bc6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004bc8:	0010      	movs	r0, r2
 8004bca:	2c01      	cmp	r4, #1
 8004bcc:	d01d      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004bce:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8004bd0:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd2:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8004bd4:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd6:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bda:	484c      	ldr	r0, [pc, #304]	; (8004d0c <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 8004bdc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bde:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8004be0:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004be2:	680a      	ldr	r2, [r1, #0]
 8004be4:	2a60      	cmp	r2, #96	; 0x60
 8004be6:	d05f      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0xec>
 8004be8:	d832      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x94>
 8004bea:	2a40      	cmp	r2, #64	; 0x40
 8004bec:	d100      	bne.n	8004bf0 <HAL_TIM_ConfigClockSource+0x34>
 8004bee:	e074      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x11e>
 8004bf0:	d814      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x60>
 8004bf2:	2a20      	cmp	r2, #32
 8004bf4:	d00c      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0x54>
 8004bf6:	d809      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x50>
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	0010      	movs	r0, r2
 8004bfc:	4388      	bics	r0, r1
 8004bfe:	d007      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0x54>
 8004c00:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8004c02:	2301      	movs	r3, #1
 8004c04:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8004c06:	2300      	movs	r3, #0
 8004c08:	702b      	strb	r3, [r5, #0]
}
 8004c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004c0c:	2a30      	cmp	r2, #48	; 0x30
 8004c0e:	d1f7      	bne.n	8004c00 <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c10:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004c12:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c14:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c16:	430a      	orrs	r2, r1
 8004c18:	2107      	movs	r1, #7
 8004c1a:	e032      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8004c1c:	2a50      	cmp	r2, #80	; 0x50
 8004c1e:	d1ef      	bne.n	8004c00 <HAL_TIM_ConfigClockSource+0x44>
  tmpccer = TIMx->CCER;
 8004c20:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c22:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c24:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c26:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c28:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c30:	43a2      	bics	r2, r4
 8004c32:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c34:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c36:	210a      	movs	r1, #10
 8004c38:	438f      	bics	r7, r1
 8004c3a:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c3c:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8004c3e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c42:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c44:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004c46:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c48:	438a      	bics	r2, r1
 8004c4a:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c4c:	2257      	movs	r2, #87	; 0x57
 8004c4e:	e018      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8004c50:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8004c54:	017f      	lsls	r7, r7, #5
 8004c56:	42ba      	cmp	r2, r7
 8004c58:	d0d3      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x46>
 8004c5a:	2080      	movs	r0, #128	; 0x80
 8004c5c:	0180      	lsls	r0, r0, #6
 8004c5e:	4282      	cmp	r2, r0
 8004c60:	d013      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0xce>
 8004c62:	0020      	movs	r0, r4
 8004c64:	2a70      	cmp	r2, #112	; 0x70
 8004c66:	d1cc      	bne.n	8004c02 <HAL_TIM_ConfigClockSource+0x46>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c68:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6a:	4829      	ldr	r0, [pc, #164]	; (8004d10 <HAL_TIM_ConfigClockSource+0x154>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c6c:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6e:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c70:	688a      	ldr	r2, [r1, #8]
 8004c72:	68c9      	ldr	r1, [r1, #12]
 8004c74:	4322      	orrs	r2, r4
 8004c76:	0209      	lsls	r1, r1, #8
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7c:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c7e:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8004c80:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c82:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004c86:	609a      	str	r2, [r3, #8]
}
 8004c88:	e7bb      	b.n	8004c02 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8004c8a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c8c:	4820      	ldr	r0, [pc, #128]	; (8004d10 <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c8e:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c92:	688a      	ldr	r2, [r1, #8]
 8004c94:	68c9      	ldr	r1, [r1, #12]
 8004c96:	4322      	orrs	r2, r4
 8004c98:	0209      	lsls	r1, r1, #8
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8004c9e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ca0:	2280      	movs	r2, #128	; 0x80
 8004ca2:	6899      	ldr	r1, [r3, #8]
 8004ca4:	01d2      	lsls	r2, r2, #7
 8004ca6:	e7ec      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca8:	6848      	ldr	r0, [r1, #4]
 8004caa:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cac:	2110      	movs	r1, #16
 8004cae:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb0:	4c18      	ldr	r4, [pc, #96]	; (8004d14 <HAL_TIM_ConfigClockSource+0x158>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb2:	438a      	bics	r2, r1
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cba:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cbc:	24a0      	movs	r4, #160	; 0xa0
 8004cbe:	43a2      	bics	r2, r4
 8004cc0:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cc2:	033f      	lsls	r7, r7, #12
 8004cc4:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 8004cc6:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cc8:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cca:	0102      	lsls	r2, r0, #4
 8004ccc:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8004cce:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004cd0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd2:	438a      	bics	r2, r1
 8004cd4:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cd6:	2267      	movs	r2, #103	; 0x67
 8004cd8:	e7d3      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0xc6>
  tmpccer = TIMx->CCER;
 8004cda:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cde:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce0:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce2:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce4:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cea:	43a2      	bics	r2, r4
 8004cec:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cee:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cf0:	210a      	movs	r1, #10
 8004cf2:	438f      	bics	r7, r1
 8004cf4:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cf6:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8004cf8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfc:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cfe:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004d00:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d02:	438a      	bics	r2, r1
 8004d04:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d06:	2247      	movs	r2, #71	; 0x47
 8004d08:	e7bb      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0xc6>
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	ffff0088 	.word	0xffff0088
 8004d10:	ffff00ff 	.word	0xffff00ff
 8004d14:	ffff0fff 	.word	0xffff0fff

08004d18 <HAL_TIM_OC_DelayElapsedCallback>:
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIM_IC_CaptureCallback>:
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIM_PWM_PulseFinishedCallback>:
 8004d1c:	4770      	bx	lr

08004d1e <HAL_TIM_TriggerCallback>:
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d20:	2202      	movs	r2, #2
 8004d22:	6803      	ldr	r3, [r0, #0]
{
 8004d24:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d26:	6919      	ldr	r1, [r3, #16]
{
 8004d28:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d2a:	4211      	tst	r1, r2
 8004d2c:	d00d      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d2e:	68d9      	ldr	r1, [r3, #12]
 8004d30:	4211      	tst	r1, r2
 8004d32:	d00a      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d34:	3a05      	subs	r2, #5
 8004d36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d38:	3204      	adds	r2, #4
 8004d3a:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	079b      	lsls	r3, r3, #30
 8004d40:	d05e      	beq.n	8004e00 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8004d42:	f7ff ffea 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	2300      	movs	r3, #0
 8004d48:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	6919      	ldr	r1, [r3, #16]
 8004d50:	4211      	tst	r1, r2
 8004d52:	d010      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d54:	68d9      	ldr	r1, [r3, #12]
 8004d56:	4211      	tst	r1, r2
 8004d58:	d00d      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d5a:	3a09      	subs	r2, #9
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d5e:	3207      	adds	r2, #7
 8004d60:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	23c0      	movs	r3, #192	; 0xc0
 8004d66:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004d68:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d6a:	421a      	tst	r2, r3
 8004d6c:	d04e      	beq.n	8004e0c <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6e:	f7ff ffd4 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	2300      	movs	r3, #0
 8004d74:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d76:	2208      	movs	r2, #8
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	6919      	ldr	r1, [r3, #16]
 8004d7c:	4211      	tst	r1, r2
 8004d7e:	d00e      	beq.n	8004d9e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d80:	68d9      	ldr	r1, [r3, #12]
 8004d82:	4211      	tst	r1, r2
 8004d84:	d00b      	beq.n	8004d9e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d86:	3a11      	subs	r2, #17
 8004d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d8a:	320d      	adds	r2, #13
 8004d8c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d8e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004d90:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d92:	079b      	lsls	r3, r3, #30
 8004d94:	d040      	beq.n	8004e18 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d96:	f7ff ffc0 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d9e:	2210      	movs	r2, #16
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	6919      	ldr	r1, [r3, #16]
 8004da4:	4211      	tst	r1, r2
 8004da6:	d010      	beq.n	8004dca <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004da8:	68d9      	ldr	r1, [r3, #12]
 8004daa:	4211      	tst	r1, r2
 8004dac:	d00d      	beq.n	8004dca <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dae:	3a21      	subs	r2, #33	; 0x21
 8004db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db2:	3219      	adds	r2, #25
 8004db4:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	23c0      	movs	r3, #192	; 0xc0
 8004dba:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbc:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dbe:	421a      	tst	r2, r3
 8004dc0:	d030      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	f7ff ffaa 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	6919      	ldr	r1, [r3, #16]
 8004dd0:	4211      	tst	r1, r2
 8004dd2:	d007      	beq.n	8004de4 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dd4:	68d9      	ldr	r1, [r3, #12]
 8004dd6:	4211      	tst	r1, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dda:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ddc:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dde:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004de0:	f7fb fd2e 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004de4:	2240      	movs	r2, #64	; 0x40
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	6919      	ldr	r1, [r3, #16]
 8004dea:	4211      	tst	r1, r2
 8004dec:	d007      	beq.n	8004dfe <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dee:	68d9      	ldr	r1, [r3, #12]
 8004df0:	4211      	tst	r1, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004df4:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8004df6:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004df8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004dfa:	f7ff ff90 	bl	8004d1e <HAL_TIM_TriggerCallback>
}
 8004dfe:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e00:	f7ff ff8a 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	0020      	movs	r0, r4
 8004e06:	f7ff ff89 	bl	8004d1c <HAL_TIM_PWM_PulseFinishedCallback>
 8004e0a:	e79c      	b.n	8004d46 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0c:	f7ff ff84 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	0020      	movs	r0, r4
 8004e12:	f7ff ff83 	bl	8004d1c <HAL_TIM_PWM_PulseFinishedCallback>
 8004e16:	e7ac      	b.n	8004d72 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e18:	f7ff ff7e 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	0020      	movs	r0, r4
 8004e1e:	f7ff ff7d 	bl	8004d1c <HAL_TIM_PWM_PulseFinishedCallback>
 8004e22:	e7ba      	b.n	8004d9a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e24:	f7ff ff78 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	0020      	movs	r0, r4
 8004e2a:	f7ff ff77 	bl	8004d1c <HAL_TIM_PWM_PulseFinishedCallback>
 8004e2e:	e7ca      	b.n	8004dc6 <HAL_TIM_IRQHandler+0xa6>

08004e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e30:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e32:	0004      	movs	r4, r0
 8004e34:	2202      	movs	r2, #2
 8004e36:	3438      	adds	r4, #56	; 0x38
 8004e38:	7825      	ldrb	r5, [r4, #0]
{
 8004e3a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004e3c:	0010      	movs	r0, r2
 8004e3e:	2d01      	cmp	r5, #1
 8004e40:	d01d      	beq.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e42:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e44:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004e46:	3539      	adds	r5, #57	; 0x39
 8004e48:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004e4e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e50:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e52:	680e      	ldr	r6, [r1, #0]
 8004e54:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e56:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e58:	2080      	movs	r0, #128	; 0x80
 8004e5a:	05c0      	lsls	r0, r0, #23
 8004e5c:	4283      	cmp	r3, r0
 8004e5e:	d005      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004e60:	4807      	ldr	r0, [pc, #28]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004e62:	4283      	cmp	r3, r0
 8004e64:	d002      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004e66:	4807      	ldr	r0, [pc, #28]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004e68:	4283      	cmp	r3, r0
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e6c:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e6e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e70:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e72:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e76:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004e78:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004e7c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	40010800 	.word	0x40010800
 8004e84:	40011400 	.word	0x40011400

08004e88 <calloc>:
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <calloc+0x10>)
 8004e8c:	000a      	movs	r2, r1
 8004e8e:	0001      	movs	r1, r0
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	f000 f85b 	bl	8004f4c <_calloc_r>
 8004e96:	bd10      	pop	{r4, pc}
 8004e98:	20000040 	.word	0x20000040

08004e9c <__errno>:
 8004e9c:	4b01      	ldr	r3, [pc, #4]	; (8004ea4 <__errno+0x8>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	4770      	bx	lr
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	20000040 	.word	0x20000040

08004ea8 <__libc_init_array>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	2600      	movs	r6, #0
 8004eac:	4d0c      	ldr	r5, [pc, #48]	; (8004ee0 <__libc_init_array+0x38>)
 8004eae:	4c0d      	ldr	r4, [pc, #52]	; (8004ee4 <__libc_init_array+0x3c>)
 8004eb0:	1b64      	subs	r4, r4, r5
 8004eb2:	10a4      	asrs	r4, r4, #2
 8004eb4:	42a6      	cmp	r6, r4
 8004eb6:	d109      	bne.n	8004ecc <__libc_init_array+0x24>
 8004eb8:	2600      	movs	r6, #0
 8004eba:	f000 fcbf 	bl	800583c <_init>
 8004ebe:	4d0a      	ldr	r5, [pc, #40]	; (8004ee8 <__libc_init_array+0x40>)
 8004ec0:	4c0a      	ldr	r4, [pc, #40]	; (8004eec <__libc_init_array+0x44>)
 8004ec2:	1b64      	subs	r4, r4, r5
 8004ec4:	10a4      	asrs	r4, r4, #2
 8004ec6:	42a6      	cmp	r6, r4
 8004ec8:	d105      	bne.n	8004ed6 <__libc_init_array+0x2e>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	00b3      	lsls	r3, r6, #2
 8004ece:	58eb      	ldr	r3, [r5, r3]
 8004ed0:	4798      	blx	r3
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	e7ee      	b.n	8004eb4 <__libc_init_array+0xc>
 8004ed6:	00b3      	lsls	r3, r6, #2
 8004ed8:	58eb      	ldr	r3, [r5, r3]
 8004eda:	4798      	blx	r3
 8004edc:	3601      	adds	r6, #1
 8004ede:	e7f2      	b.n	8004ec6 <__libc_init_array+0x1e>
 8004ee0:	08006514 	.word	0x08006514
 8004ee4:	08006514 	.word	0x08006514
 8004ee8:	08006514 	.word	0x08006514
 8004eec:	08006518 	.word	0x08006518

08004ef0 <free>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <free+0x10>)
 8004ef4:	0001      	movs	r1, r0
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	f000 f854 	bl	8004fa4 <_free_r>
 8004efc:	bd10      	pop	{r4, pc}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	20000040 	.word	0x20000040

08004f04 <memcpy>:
 8004f04:	2300      	movs	r3, #0
 8004f06:	b510      	push	{r4, lr}
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d100      	bne.n	8004f0e <memcpy+0xa>
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	5ccc      	ldrb	r4, [r1, r3]
 8004f10:	54c4      	strb	r4, [r0, r3]
 8004f12:	3301      	adds	r3, #1
 8004f14:	e7f8      	b.n	8004f08 <memcpy+0x4>

08004f16 <memmove>:
 8004f16:	b510      	push	{r4, lr}
 8004f18:	4288      	cmp	r0, r1
 8004f1a:	d902      	bls.n	8004f22 <memmove+0xc>
 8004f1c:	188b      	adds	r3, r1, r2
 8004f1e:	4298      	cmp	r0, r3
 8004f20:	d303      	bcc.n	8004f2a <memmove+0x14>
 8004f22:	2300      	movs	r3, #0
 8004f24:	e007      	b.n	8004f36 <memmove+0x20>
 8004f26:	5c8b      	ldrb	r3, [r1, r2]
 8004f28:	5483      	strb	r3, [r0, r2]
 8004f2a:	3a01      	subs	r2, #1
 8004f2c:	d2fb      	bcs.n	8004f26 <memmove+0x10>
 8004f2e:	bd10      	pop	{r4, pc}
 8004f30:	5ccc      	ldrb	r4, [r1, r3]
 8004f32:	54c4      	strb	r4, [r0, r3]
 8004f34:	3301      	adds	r3, #1
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d1fa      	bne.n	8004f30 <memmove+0x1a>
 8004f3a:	e7f8      	b.n	8004f2e <memmove+0x18>

08004f3c <memset>:
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	1882      	adds	r2, r0, r2
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d100      	bne.n	8004f46 <memset+0xa>
 8004f44:	4770      	bx	lr
 8004f46:	7019      	strb	r1, [r3, #0]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	e7f9      	b.n	8004f40 <memset+0x4>

08004f4c <_calloc_r>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	0c13      	lsrs	r3, r2, #16
 8004f50:	0c0d      	lsrs	r5, r1, #16
 8004f52:	d11e      	bne.n	8004f92 <_calloc_r+0x46>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10c      	bne.n	8004f72 <_calloc_r+0x26>
 8004f58:	b289      	uxth	r1, r1
 8004f5a:	b294      	uxth	r4, r2
 8004f5c:	434c      	muls	r4, r1
 8004f5e:	0021      	movs	r1, r4
 8004f60:	f000 f88c 	bl	800507c <_malloc_r>
 8004f64:	1e05      	subs	r5, r0, #0
 8004f66:	d01b      	beq.n	8004fa0 <_calloc_r+0x54>
 8004f68:	0022      	movs	r2, r4
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f7ff ffe6 	bl	8004f3c <memset>
 8004f70:	e016      	b.n	8004fa0 <_calloc_r+0x54>
 8004f72:	1c1d      	adds	r5, r3, #0
 8004f74:	1c0b      	adds	r3, r1, #0
 8004f76:	b292      	uxth	r2, r2
 8004f78:	b289      	uxth	r1, r1
 8004f7a:	b29c      	uxth	r4, r3
 8004f7c:	4351      	muls	r1, r2
 8004f7e:	b2ab      	uxth	r3, r5
 8004f80:	4363      	muls	r3, r4
 8004f82:	0c0c      	lsrs	r4, r1, #16
 8004f84:	191c      	adds	r4, r3, r4
 8004f86:	0c22      	lsrs	r2, r4, #16
 8004f88:	d107      	bne.n	8004f9a <_calloc_r+0x4e>
 8004f8a:	0424      	lsls	r4, r4, #16
 8004f8c:	b289      	uxth	r1, r1
 8004f8e:	430c      	orrs	r4, r1
 8004f90:	e7e5      	b.n	8004f5e <_calloc_r+0x12>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <_calloc_r+0x4e>
 8004f96:	1c13      	adds	r3, r2, #0
 8004f98:	e7ed      	b.n	8004f76 <_calloc_r+0x2a>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	2500      	movs	r5, #0
 8004f9e:	6003      	str	r3, [r0, #0]
 8004fa0:	0028      	movs	r0, r5
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}

08004fa4 <_free_r>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	0005      	movs	r5, r0
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	d010      	beq.n	8004fce <_free_r+0x2a>
 8004fac:	1f0c      	subs	r4, r1, #4
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	da00      	bge.n	8004fb6 <_free_r+0x12>
 8004fb4:	18e4      	adds	r4, r4, r3
 8004fb6:	0028      	movs	r0, r5
 8004fb8:	f000 f908 	bl	80051cc <__malloc_lock>
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <_free_r+0x90>)
 8004fbe:	6813      	ldr	r3, [r2, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <_free_r+0x2c>
 8004fc4:	6063      	str	r3, [r4, #4]
 8004fc6:	6014      	str	r4, [r2, #0]
 8004fc8:	0028      	movs	r0, r5
 8004fca:	f000 f907 	bl	80051dc <__malloc_unlock>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d908      	bls.n	8004fe6 <_free_r+0x42>
 8004fd4:	6821      	ldr	r1, [r4, #0]
 8004fd6:	1860      	adds	r0, r4, r1
 8004fd8:	4283      	cmp	r3, r0
 8004fda:	d1f3      	bne.n	8004fc4 <_free_r+0x20>
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	1841      	adds	r1, r0, r1
 8004fe2:	6021      	str	r1, [r4, #0]
 8004fe4:	e7ee      	b.n	8004fc4 <_free_r+0x20>
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <_free_r+0x4e>
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	d9f9      	bls.n	8004fe6 <_free_r+0x42>
 8004ff2:	6811      	ldr	r1, [r2, #0]
 8004ff4:	1850      	adds	r0, r2, r1
 8004ff6:	42a0      	cmp	r0, r4
 8004ff8:	d10b      	bne.n	8005012 <_free_r+0x6e>
 8004ffa:	6820      	ldr	r0, [r4, #0]
 8004ffc:	1809      	adds	r1, r1, r0
 8004ffe:	1850      	adds	r0, r2, r1
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	4283      	cmp	r3, r0
 8005004:	d1e0      	bne.n	8004fc8 <_free_r+0x24>
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	1841      	adds	r1, r0, r1
 800500c:	6011      	str	r1, [r2, #0]
 800500e:	6053      	str	r3, [r2, #4]
 8005010:	e7da      	b.n	8004fc8 <_free_r+0x24>
 8005012:	42a0      	cmp	r0, r4
 8005014:	d902      	bls.n	800501c <_free_r+0x78>
 8005016:	230c      	movs	r3, #12
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	e7d5      	b.n	8004fc8 <_free_r+0x24>
 800501c:	6821      	ldr	r1, [r4, #0]
 800501e:	1860      	adds	r0, r4, r1
 8005020:	4283      	cmp	r3, r0
 8005022:	d103      	bne.n	800502c <_free_r+0x88>
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	1841      	adds	r1, r0, r1
 800502a:	6021      	str	r1, [r4, #0]
 800502c:	6063      	str	r3, [r4, #4]
 800502e:	6054      	str	r4, [r2, #4]
 8005030:	e7ca      	b.n	8004fc8 <_free_r+0x24>
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	20000cd8 	.word	0x20000cd8

08005038 <sbrk_aligned>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4e0f      	ldr	r6, [pc, #60]	; (8005078 <sbrk_aligned+0x40>)
 800503c:	000d      	movs	r5, r1
 800503e:	6831      	ldr	r1, [r6, #0]
 8005040:	0004      	movs	r4, r0
 8005042:	2900      	cmp	r1, #0
 8005044:	d102      	bne.n	800504c <sbrk_aligned+0x14>
 8005046:	f000 f88f 	bl	8005168 <_sbrk_r>
 800504a:	6030      	str	r0, [r6, #0]
 800504c:	0029      	movs	r1, r5
 800504e:	0020      	movs	r0, r4
 8005050:	f000 f88a 	bl	8005168 <_sbrk_r>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d00a      	beq.n	800506e <sbrk_aligned+0x36>
 8005058:	2303      	movs	r3, #3
 800505a:	1cc5      	adds	r5, r0, #3
 800505c:	439d      	bics	r5, r3
 800505e:	42a8      	cmp	r0, r5
 8005060:	d007      	beq.n	8005072 <sbrk_aligned+0x3a>
 8005062:	1a29      	subs	r1, r5, r0
 8005064:	0020      	movs	r0, r4
 8005066:	f000 f87f 	bl	8005168 <_sbrk_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d101      	bne.n	8005072 <sbrk_aligned+0x3a>
 800506e:	2501      	movs	r5, #1
 8005070:	426d      	negs	r5, r5
 8005072:	0028      	movs	r0, r5
 8005074:	bd70      	pop	{r4, r5, r6, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	20000cdc 	.word	0x20000cdc

0800507c <_malloc_r>:
 800507c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800507e:	2203      	movs	r2, #3
 8005080:	1ccb      	adds	r3, r1, #3
 8005082:	4393      	bics	r3, r2
 8005084:	3308      	adds	r3, #8
 8005086:	0006      	movs	r6, r0
 8005088:	001f      	movs	r7, r3
 800508a:	2b0c      	cmp	r3, #12
 800508c:	d232      	bcs.n	80050f4 <_malloc_r+0x78>
 800508e:	270c      	movs	r7, #12
 8005090:	42b9      	cmp	r1, r7
 8005092:	d831      	bhi.n	80050f8 <_malloc_r+0x7c>
 8005094:	0030      	movs	r0, r6
 8005096:	f000 f899 	bl	80051cc <__malloc_lock>
 800509a:	4d32      	ldr	r5, [pc, #200]	; (8005164 <_malloc_r+0xe8>)
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	001c      	movs	r4, r3
 80050a0:	2c00      	cmp	r4, #0
 80050a2:	d12e      	bne.n	8005102 <_malloc_r+0x86>
 80050a4:	0039      	movs	r1, r7
 80050a6:	0030      	movs	r0, r6
 80050a8:	f7ff ffc6 	bl	8005038 <sbrk_aligned>
 80050ac:	0004      	movs	r4, r0
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	d11e      	bne.n	80050f0 <_malloc_r+0x74>
 80050b2:	682c      	ldr	r4, [r5, #0]
 80050b4:	0025      	movs	r5, r4
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	d14a      	bne.n	8005150 <_malloc_r+0xd4>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	0029      	movs	r1, r5
 80050be:	18e3      	adds	r3, r4, r3
 80050c0:	0030      	movs	r0, r6
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	f000 f850 	bl	8005168 <_sbrk_r>
 80050c8:	9b01      	ldr	r3, [sp, #4]
 80050ca:	4283      	cmp	r3, r0
 80050cc:	d143      	bne.n	8005156 <_malloc_r+0xda>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	3703      	adds	r7, #3
 80050d2:	1aff      	subs	r7, r7, r3
 80050d4:	2303      	movs	r3, #3
 80050d6:	439f      	bics	r7, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	2f0c      	cmp	r7, #12
 80050dc:	d200      	bcs.n	80050e0 <_malloc_r+0x64>
 80050de:	270c      	movs	r7, #12
 80050e0:	0039      	movs	r1, r7
 80050e2:	0030      	movs	r0, r6
 80050e4:	f7ff ffa8 	bl	8005038 <sbrk_aligned>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d034      	beq.n	8005156 <_malloc_r+0xda>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	19df      	adds	r7, r3, r7
 80050f0:	6027      	str	r7, [r4, #0]
 80050f2:	e013      	b.n	800511c <_malloc_r+0xa0>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	dacb      	bge.n	8005090 <_malloc_r+0x14>
 80050f8:	230c      	movs	r3, #12
 80050fa:	2500      	movs	r5, #0
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	0028      	movs	r0, r5
 8005100:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	1bd1      	subs	r1, r2, r7
 8005106:	d420      	bmi.n	800514a <_malloc_r+0xce>
 8005108:	290b      	cmp	r1, #11
 800510a:	d917      	bls.n	800513c <_malloc_r+0xc0>
 800510c:	19e2      	adds	r2, r4, r7
 800510e:	6027      	str	r7, [r4, #0]
 8005110:	42a3      	cmp	r3, r4
 8005112:	d111      	bne.n	8005138 <_malloc_r+0xbc>
 8005114:	602a      	str	r2, [r5, #0]
 8005116:	6863      	ldr	r3, [r4, #4]
 8005118:	6011      	str	r1, [r2, #0]
 800511a:	6053      	str	r3, [r2, #4]
 800511c:	0030      	movs	r0, r6
 800511e:	0025      	movs	r5, r4
 8005120:	f000 f85c 	bl	80051dc <__malloc_unlock>
 8005124:	2207      	movs	r2, #7
 8005126:	350b      	adds	r5, #11
 8005128:	1d23      	adds	r3, r4, #4
 800512a:	4395      	bics	r5, r2
 800512c:	1aea      	subs	r2, r5, r3
 800512e:	429d      	cmp	r5, r3
 8005130:	d0e5      	beq.n	80050fe <_malloc_r+0x82>
 8005132:	1b5b      	subs	r3, r3, r5
 8005134:	50a3      	str	r3, [r4, r2]
 8005136:	e7e2      	b.n	80050fe <_malloc_r+0x82>
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	e7ec      	b.n	8005116 <_malloc_r+0x9a>
 800513c:	6862      	ldr	r2, [r4, #4]
 800513e:	42a3      	cmp	r3, r4
 8005140:	d101      	bne.n	8005146 <_malloc_r+0xca>
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	e7ea      	b.n	800511c <_malloc_r+0xa0>
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	e7e8      	b.n	800511c <_malloc_r+0xa0>
 800514a:	0023      	movs	r3, r4
 800514c:	6864      	ldr	r4, [r4, #4]
 800514e:	e7a7      	b.n	80050a0 <_malloc_r+0x24>
 8005150:	002c      	movs	r4, r5
 8005152:	686d      	ldr	r5, [r5, #4]
 8005154:	e7af      	b.n	80050b6 <_malloc_r+0x3a>
 8005156:	230c      	movs	r3, #12
 8005158:	0030      	movs	r0, r6
 800515a:	6033      	str	r3, [r6, #0]
 800515c:	f000 f83e 	bl	80051dc <__malloc_unlock>
 8005160:	e7cd      	b.n	80050fe <_malloc_r+0x82>
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	20000cd8 	.word	0x20000cd8

08005168 <_sbrk_r>:
 8005168:	2300      	movs	r3, #0
 800516a:	b570      	push	{r4, r5, r6, lr}
 800516c:	4d06      	ldr	r5, [pc, #24]	; (8005188 <_sbrk_r+0x20>)
 800516e:	0004      	movs	r4, r0
 8005170:	0008      	movs	r0, r1
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	f7fd fd88 	bl	8002c88 <_sbrk>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d103      	bne.n	8005184 <_sbrk_r+0x1c>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d000      	beq.n	8005184 <_sbrk_r+0x1c>
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	bd70      	pop	{r4, r5, r6, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	20000ce0 	.word	0x20000ce0

0800518c <siprintf>:
 800518c:	b40e      	push	{r1, r2, r3}
 800518e:	b500      	push	{lr}
 8005190:	490b      	ldr	r1, [pc, #44]	; (80051c0 <siprintf+0x34>)
 8005192:	b09c      	sub	sp, #112	; 0x70
 8005194:	ab1d      	add	r3, sp, #116	; 0x74
 8005196:	9002      	str	r0, [sp, #8]
 8005198:	9006      	str	r0, [sp, #24]
 800519a:	9107      	str	r1, [sp, #28]
 800519c:	9104      	str	r1, [sp, #16]
 800519e:	4809      	ldr	r0, [pc, #36]	; (80051c4 <siprintf+0x38>)
 80051a0:	4909      	ldr	r1, [pc, #36]	; (80051c8 <siprintf+0x3c>)
 80051a2:	cb04      	ldmia	r3!, {r2}
 80051a4:	9105      	str	r1, [sp, #20]
 80051a6:	6800      	ldr	r0, [r0, #0]
 80051a8:	a902      	add	r1, sp, #8
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	f000 f880 	bl	80052b0 <_svfiprintf_r>
 80051b0:	2300      	movs	r3, #0
 80051b2:	9a02      	ldr	r2, [sp, #8]
 80051b4:	7013      	strb	r3, [r2, #0]
 80051b6:	b01c      	add	sp, #112	; 0x70
 80051b8:	bc08      	pop	{r3}
 80051ba:	b003      	add	sp, #12
 80051bc:	4718      	bx	r3
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	7fffffff 	.word	0x7fffffff
 80051c4:	20000040 	.word	0x20000040
 80051c8:	ffff0208 	.word	0xffff0208

080051cc <__malloc_lock>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	4802      	ldr	r0, [pc, #8]	; (80051d8 <__malloc_lock+0xc>)
 80051d0:	f000 faf0 	bl	80057b4 <__retarget_lock_acquire_recursive>
 80051d4:	bd10      	pop	{r4, pc}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	20000ce4 	.word	0x20000ce4

080051dc <__malloc_unlock>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	4802      	ldr	r0, [pc, #8]	; (80051e8 <__malloc_unlock+0xc>)
 80051e0:	f000 fae9 	bl	80057b6 <__retarget_lock_release_recursive>
 80051e4:	bd10      	pop	{r4, pc}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	20000ce4 	.word	0x20000ce4

080051ec <__ssputs_r>:
 80051ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ee:	688e      	ldr	r6, [r1, #8]
 80051f0:	b085      	sub	sp, #20
 80051f2:	0007      	movs	r7, r0
 80051f4:	000c      	movs	r4, r1
 80051f6:	9203      	str	r2, [sp, #12]
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	429e      	cmp	r6, r3
 80051fc:	d83c      	bhi.n	8005278 <__ssputs_r+0x8c>
 80051fe:	2390      	movs	r3, #144	; 0x90
 8005200:	898a      	ldrh	r2, [r1, #12]
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	421a      	tst	r2, r3
 8005206:	d034      	beq.n	8005272 <__ssputs_r+0x86>
 8005208:	6909      	ldr	r1, [r1, #16]
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	6960      	ldr	r0, [r4, #20]
 800520e:	1a5b      	subs	r3, r3, r1
 8005210:	9302      	str	r3, [sp, #8]
 8005212:	2303      	movs	r3, #3
 8005214:	4343      	muls	r3, r0
 8005216:	0fdd      	lsrs	r5, r3, #31
 8005218:	18ed      	adds	r5, r5, r3
 800521a:	9b01      	ldr	r3, [sp, #4]
 800521c:	9802      	ldr	r0, [sp, #8]
 800521e:	3301      	adds	r3, #1
 8005220:	181b      	adds	r3, r3, r0
 8005222:	106d      	asrs	r5, r5, #1
 8005224:	42ab      	cmp	r3, r5
 8005226:	d900      	bls.n	800522a <__ssputs_r+0x3e>
 8005228:	001d      	movs	r5, r3
 800522a:	0553      	lsls	r3, r2, #21
 800522c:	d532      	bpl.n	8005294 <__ssputs_r+0xa8>
 800522e:	0029      	movs	r1, r5
 8005230:	0038      	movs	r0, r7
 8005232:	f7ff ff23 	bl	800507c <_malloc_r>
 8005236:	1e06      	subs	r6, r0, #0
 8005238:	d109      	bne.n	800524e <__ssputs_r+0x62>
 800523a:	230c      	movs	r3, #12
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	2340      	movs	r3, #64	; 0x40
 8005240:	2001      	movs	r0, #1
 8005242:	89a2      	ldrh	r2, [r4, #12]
 8005244:	4240      	negs	r0, r0
 8005246:	4313      	orrs	r3, r2
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	b005      	add	sp, #20
 800524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800524e:	9a02      	ldr	r2, [sp, #8]
 8005250:	6921      	ldr	r1, [r4, #16]
 8005252:	f7ff fe57 	bl	8004f04 <memcpy>
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	4a14      	ldr	r2, [pc, #80]	; (80052ac <__ssputs_r+0xc0>)
 800525a:	401a      	ands	r2, r3
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	4313      	orrs	r3, r2
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	9b02      	ldr	r3, [sp, #8]
 8005264:	6126      	str	r6, [r4, #16]
 8005266:	18f6      	adds	r6, r6, r3
 8005268:	6026      	str	r6, [r4, #0]
 800526a:	6165      	str	r5, [r4, #20]
 800526c:	9e01      	ldr	r6, [sp, #4]
 800526e:	1aed      	subs	r5, r5, r3
 8005270:	60a5      	str	r5, [r4, #8]
 8005272:	9b01      	ldr	r3, [sp, #4]
 8005274:	429e      	cmp	r6, r3
 8005276:	d900      	bls.n	800527a <__ssputs_r+0x8e>
 8005278:	9e01      	ldr	r6, [sp, #4]
 800527a:	0032      	movs	r2, r6
 800527c:	9903      	ldr	r1, [sp, #12]
 800527e:	6820      	ldr	r0, [r4, #0]
 8005280:	f7ff fe49 	bl	8004f16 <memmove>
 8005284:	68a3      	ldr	r3, [r4, #8]
 8005286:	2000      	movs	r0, #0
 8005288:	1b9b      	subs	r3, r3, r6
 800528a:	60a3      	str	r3, [r4, #8]
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	199e      	adds	r6, r3, r6
 8005290:	6026      	str	r6, [r4, #0]
 8005292:	e7da      	b.n	800524a <__ssputs_r+0x5e>
 8005294:	002a      	movs	r2, r5
 8005296:	0038      	movs	r0, r7
 8005298:	f000 fa99 	bl	80057ce <_realloc_r>
 800529c:	1e06      	subs	r6, r0, #0
 800529e:	d1e0      	bne.n	8005262 <__ssputs_r+0x76>
 80052a0:	0038      	movs	r0, r7
 80052a2:	6921      	ldr	r1, [r4, #16]
 80052a4:	f7ff fe7e 	bl	8004fa4 <_free_r>
 80052a8:	e7c7      	b.n	800523a <__ssputs_r+0x4e>
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	fffffb7f 	.word	0xfffffb7f

080052b0 <_svfiprintf_r>:
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	b0a1      	sub	sp, #132	; 0x84
 80052b4:	9003      	str	r0, [sp, #12]
 80052b6:	001d      	movs	r5, r3
 80052b8:	898b      	ldrh	r3, [r1, #12]
 80052ba:	000f      	movs	r7, r1
 80052bc:	0016      	movs	r6, r2
 80052be:	061b      	lsls	r3, r3, #24
 80052c0:	d511      	bpl.n	80052e6 <_svfiprintf_r+0x36>
 80052c2:	690b      	ldr	r3, [r1, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10e      	bne.n	80052e6 <_svfiprintf_r+0x36>
 80052c8:	2140      	movs	r1, #64	; 0x40
 80052ca:	f7ff fed7 	bl	800507c <_malloc_r>
 80052ce:	6038      	str	r0, [r7, #0]
 80052d0:	6138      	str	r0, [r7, #16]
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d105      	bne.n	80052e2 <_svfiprintf_r+0x32>
 80052d6:	230c      	movs	r3, #12
 80052d8:	9a03      	ldr	r2, [sp, #12]
 80052da:	3801      	subs	r0, #1
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	b021      	add	sp, #132	; 0x84
 80052e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e2:	2340      	movs	r3, #64	; 0x40
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	2300      	movs	r3, #0
 80052e8:	ac08      	add	r4, sp, #32
 80052ea:	6163      	str	r3, [r4, #20]
 80052ec:	3320      	adds	r3, #32
 80052ee:	7663      	strb	r3, [r4, #25]
 80052f0:	3310      	adds	r3, #16
 80052f2:	76a3      	strb	r3, [r4, #26]
 80052f4:	9507      	str	r5, [sp, #28]
 80052f6:	0035      	movs	r5, r6
 80052f8:	782b      	ldrb	r3, [r5, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <_svfiprintf_r+0x52>
 80052fe:	2b25      	cmp	r3, #37	; 0x25
 8005300:	d147      	bne.n	8005392 <_svfiprintf_r+0xe2>
 8005302:	1bab      	subs	r3, r5, r6
 8005304:	9305      	str	r3, [sp, #20]
 8005306:	42b5      	cmp	r5, r6
 8005308:	d00c      	beq.n	8005324 <_svfiprintf_r+0x74>
 800530a:	0032      	movs	r2, r6
 800530c:	0039      	movs	r1, r7
 800530e:	9803      	ldr	r0, [sp, #12]
 8005310:	f7ff ff6c 	bl	80051ec <__ssputs_r>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d100      	bne.n	800531a <_svfiprintf_r+0x6a>
 8005318:	e0ae      	b.n	8005478 <_svfiprintf_r+0x1c8>
 800531a:	6962      	ldr	r2, [r4, #20]
 800531c:	9b05      	ldr	r3, [sp, #20]
 800531e:	4694      	mov	ip, r2
 8005320:	4463      	add	r3, ip
 8005322:	6163      	str	r3, [r4, #20]
 8005324:	782b      	ldrb	r3, [r5, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d100      	bne.n	800532c <_svfiprintf_r+0x7c>
 800532a:	e0a5      	b.n	8005478 <_svfiprintf_r+0x1c8>
 800532c:	2201      	movs	r2, #1
 800532e:	2300      	movs	r3, #0
 8005330:	4252      	negs	r2, r2
 8005332:	6062      	str	r2, [r4, #4]
 8005334:	a904      	add	r1, sp, #16
 8005336:	3254      	adds	r2, #84	; 0x54
 8005338:	1852      	adds	r2, r2, r1
 800533a:	1c6e      	adds	r6, r5, #1
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	60e3      	str	r3, [r4, #12]
 8005340:	60a3      	str	r3, [r4, #8]
 8005342:	7013      	strb	r3, [r2, #0]
 8005344:	65a3      	str	r3, [r4, #88]	; 0x58
 8005346:	2205      	movs	r2, #5
 8005348:	7831      	ldrb	r1, [r6, #0]
 800534a:	4854      	ldr	r0, [pc, #336]	; (800549c <_svfiprintf_r+0x1ec>)
 800534c:	f000 fa34 	bl	80057b8 <memchr>
 8005350:	1c75      	adds	r5, r6, #1
 8005352:	2800      	cmp	r0, #0
 8005354:	d11f      	bne.n	8005396 <_svfiprintf_r+0xe6>
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	06d3      	lsls	r3, r2, #27
 800535a:	d504      	bpl.n	8005366 <_svfiprintf_r+0xb6>
 800535c:	2353      	movs	r3, #83	; 0x53
 800535e:	a904      	add	r1, sp, #16
 8005360:	185b      	adds	r3, r3, r1
 8005362:	2120      	movs	r1, #32
 8005364:	7019      	strb	r1, [r3, #0]
 8005366:	0713      	lsls	r3, r2, #28
 8005368:	d504      	bpl.n	8005374 <_svfiprintf_r+0xc4>
 800536a:	2353      	movs	r3, #83	; 0x53
 800536c:	a904      	add	r1, sp, #16
 800536e:	185b      	adds	r3, r3, r1
 8005370:	212b      	movs	r1, #43	; 0x2b
 8005372:	7019      	strb	r1, [r3, #0]
 8005374:	7833      	ldrb	r3, [r6, #0]
 8005376:	2b2a      	cmp	r3, #42	; 0x2a
 8005378:	d016      	beq.n	80053a8 <_svfiprintf_r+0xf8>
 800537a:	0035      	movs	r5, r6
 800537c:	2100      	movs	r1, #0
 800537e:	200a      	movs	r0, #10
 8005380:	68e3      	ldr	r3, [r4, #12]
 8005382:	782a      	ldrb	r2, [r5, #0]
 8005384:	1c6e      	adds	r6, r5, #1
 8005386:	3a30      	subs	r2, #48	; 0x30
 8005388:	2a09      	cmp	r2, #9
 800538a:	d94e      	bls.n	800542a <_svfiprintf_r+0x17a>
 800538c:	2900      	cmp	r1, #0
 800538e:	d111      	bne.n	80053b4 <_svfiprintf_r+0x104>
 8005390:	e017      	b.n	80053c2 <_svfiprintf_r+0x112>
 8005392:	3501      	adds	r5, #1
 8005394:	e7b0      	b.n	80052f8 <_svfiprintf_r+0x48>
 8005396:	4b41      	ldr	r3, [pc, #260]	; (800549c <_svfiprintf_r+0x1ec>)
 8005398:	6822      	ldr	r2, [r4, #0]
 800539a:	1ac0      	subs	r0, r0, r3
 800539c:	2301      	movs	r3, #1
 800539e:	4083      	lsls	r3, r0
 80053a0:	4313      	orrs	r3, r2
 80053a2:	002e      	movs	r6, r5
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	e7ce      	b.n	8005346 <_svfiprintf_r+0x96>
 80053a8:	9b07      	ldr	r3, [sp, #28]
 80053aa:	1d19      	adds	r1, r3, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	9107      	str	r1, [sp, #28]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db01      	blt.n	80053b8 <_svfiprintf_r+0x108>
 80053b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80053b6:	e004      	b.n	80053c2 <_svfiprintf_r+0x112>
 80053b8:	425b      	negs	r3, r3
 80053ba:	60e3      	str	r3, [r4, #12]
 80053bc:	2302      	movs	r3, #2
 80053be:	4313      	orrs	r3, r2
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	782b      	ldrb	r3, [r5, #0]
 80053c4:	2b2e      	cmp	r3, #46	; 0x2e
 80053c6:	d10a      	bne.n	80053de <_svfiprintf_r+0x12e>
 80053c8:	786b      	ldrb	r3, [r5, #1]
 80053ca:	2b2a      	cmp	r3, #42	; 0x2a
 80053cc:	d135      	bne.n	800543a <_svfiprintf_r+0x18a>
 80053ce:	9b07      	ldr	r3, [sp, #28]
 80053d0:	3502      	adds	r5, #2
 80053d2:	1d1a      	adds	r2, r3, #4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	9207      	str	r2, [sp, #28]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	db2b      	blt.n	8005434 <_svfiprintf_r+0x184>
 80053dc:	9309      	str	r3, [sp, #36]	; 0x24
 80053de:	4e30      	ldr	r6, [pc, #192]	; (80054a0 <_svfiprintf_r+0x1f0>)
 80053e0:	2203      	movs	r2, #3
 80053e2:	0030      	movs	r0, r6
 80053e4:	7829      	ldrb	r1, [r5, #0]
 80053e6:	f000 f9e7 	bl	80057b8 <memchr>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d006      	beq.n	80053fc <_svfiprintf_r+0x14c>
 80053ee:	2340      	movs	r3, #64	; 0x40
 80053f0:	1b80      	subs	r0, r0, r6
 80053f2:	4083      	lsls	r3, r0
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	3501      	adds	r5, #1
 80053f8:	4313      	orrs	r3, r2
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	7829      	ldrb	r1, [r5, #0]
 80053fe:	2206      	movs	r2, #6
 8005400:	4828      	ldr	r0, [pc, #160]	; (80054a4 <_svfiprintf_r+0x1f4>)
 8005402:	1c6e      	adds	r6, r5, #1
 8005404:	7621      	strb	r1, [r4, #24]
 8005406:	f000 f9d7 	bl	80057b8 <memchr>
 800540a:	2800      	cmp	r0, #0
 800540c:	d03c      	beq.n	8005488 <_svfiprintf_r+0x1d8>
 800540e:	4b26      	ldr	r3, [pc, #152]	; (80054a8 <_svfiprintf_r+0x1f8>)
 8005410:	2b00      	cmp	r3, #0
 8005412:	d125      	bne.n	8005460 <_svfiprintf_r+0x1b0>
 8005414:	2207      	movs	r2, #7
 8005416:	9b07      	ldr	r3, [sp, #28]
 8005418:	3307      	adds	r3, #7
 800541a:	4393      	bics	r3, r2
 800541c:	3308      	adds	r3, #8
 800541e:	9307      	str	r3, [sp, #28]
 8005420:	6963      	ldr	r3, [r4, #20]
 8005422:	9a04      	ldr	r2, [sp, #16]
 8005424:	189b      	adds	r3, r3, r2
 8005426:	6163      	str	r3, [r4, #20]
 8005428:	e765      	b.n	80052f6 <_svfiprintf_r+0x46>
 800542a:	4343      	muls	r3, r0
 800542c:	0035      	movs	r5, r6
 800542e:	2101      	movs	r1, #1
 8005430:	189b      	adds	r3, r3, r2
 8005432:	e7a6      	b.n	8005382 <_svfiprintf_r+0xd2>
 8005434:	2301      	movs	r3, #1
 8005436:	425b      	negs	r3, r3
 8005438:	e7d0      	b.n	80053dc <_svfiprintf_r+0x12c>
 800543a:	2300      	movs	r3, #0
 800543c:	200a      	movs	r0, #10
 800543e:	001a      	movs	r2, r3
 8005440:	3501      	adds	r5, #1
 8005442:	6063      	str	r3, [r4, #4]
 8005444:	7829      	ldrb	r1, [r5, #0]
 8005446:	1c6e      	adds	r6, r5, #1
 8005448:	3930      	subs	r1, #48	; 0x30
 800544a:	2909      	cmp	r1, #9
 800544c:	d903      	bls.n	8005456 <_svfiprintf_r+0x1a6>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0c5      	beq.n	80053de <_svfiprintf_r+0x12e>
 8005452:	9209      	str	r2, [sp, #36]	; 0x24
 8005454:	e7c3      	b.n	80053de <_svfiprintf_r+0x12e>
 8005456:	4342      	muls	r2, r0
 8005458:	0035      	movs	r5, r6
 800545a:	2301      	movs	r3, #1
 800545c:	1852      	adds	r2, r2, r1
 800545e:	e7f1      	b.n	8005444 <_svfiprintf_r+0x194>
 8005460:	ab07      	add	r3, sp, #28
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	003a      	movs	r2, r7
 8005466:	0021      	movs	r1, r4
 8005468:	4b10      	ldr	r3, [pc, #64]	; (80054ac <_svfiprintf_r+0x1fc>)
 800546a:	9803      	ldr	r0, [sp, #12]
 800546c:	e000      	b.n	8005470 <_svfiprintf_r+0x1c0>
 800546e:	bf00      	nop
 8005470:	9004      	str	r0, [sp, #16]
 8005472:	9b04      	ldr	r3, [sp, #16]
 8005474:	3301      	adds	r3, #1
 8005476:	d1d3      	bne.n	8005420 <_svfiprintf_r+0x170>
 8005478:	89bb      	ldrh	r3, [r7, #12]
 800547a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800547c:	065b      	lsls	r3, r3, #25
 800547e:	d400      	bmi.n	8005482 <_svfiprintf_r+0x1d2>
 8005480:	e72d      	b.n	80052de <_svfiprintf_r+0x2e>
 8005482:	2001      	movs	r0, #1
 8005484:	4240      	negs	r0, r0
 8005486:	e72a      	b.n	80052de <_svfiprintf_r+0x2e>
 8005488:	ab07      	add	r3, sp, #28
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	003a      	movs	r2, r7
 800548e:	0021      	movs	r1, r4
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <_svfiprintf_r+0x1fc>)
 8005492:	9803      	ldr	r0, [sp, #12]
 8005494:	f000 f87c 	bl	8005590 <_printf_i>
 8005498:	e7ea      	b.n	8005470 <_svfiprintf_r+0x1c0>
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	080064d9 	.word	0x080064d9
 80054a0:	080064df 	.word	0x080064df
 80054a4:	080064e3 	.word	0x080064e3
 80054a8:	00000000 	.word	0x00000000
 80054ac:	080051ed 	.word	0x080051ed

080054b0 <_printf_common>:
 80054b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054b2:	0015      	movs	r5, r2
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	688a      	ldr	r2, [r1, #8]
 80054b8:	690b      	ldr	r3, [r1, #16]
 80054ba:	000c      	movs	r4, r1
 80054bc:	9000      	str	r0, [sp, #0]
 80054be:	4293      	cmp	r3, r2
 80054c0:	da00      	bge.n	80054c4 <_printf_common+0x14>
 80054c2:	0013      	movs	r3, r2
 80054c4:	0022      	movs	r2, r4
 80054c6:	602b      	str	r3, [r5, #0]
 80054c8:	3243      	adds	r2, #67	; 0x43
 80054ca:	7812      	ldrb	r2, [r2, #0]
 80054cc:	2a00      	cmp	r2, #0
 80054ce:	d001      	beq.n	80054d4 <_printf_common+0x24>
 80054d0:	3301      	adds	r3, #1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	069b      	lsls	r3, r3, #26
 80054d8:	d502      	bpl.n	80054e0 <_printf_common+0x30>
 80054da:	682b      	ldr	r3, [r5, #0]
 80054dc:	3302      	adds	r3, #2
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	2306      	movs	r3, #6
 80054e4:	0017      	movs	r7, r2
 80054e6:	401f      	ands	r7, r3
 80054e8:	421a      	tst	r2, r3
 80054ea:	d027      	beq.n	800553c <_printf_common+0x8c>
 80054ec:	0023      	movs	r3, r4
 80054ee:	3343      	adds	r3, #67	; 0x43
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	1e5a      	subs	r2, r3, #1
 80054f4:	4193      	sbcs	r3, r2
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	0692      	lsls	r2, r2, #26
 80054fa:	d430      	bmi.n	800555e <_printf_common+0xae>
 80054fc:	0022      	movs	r2, r4
 80054fe:	9901      	ldr	r1, [sp, #4]
 8005500:	9800      	ldr	r0, [sp, #0]
 8005502:	9e08      	ldr	r6, [sp, #32]
 8005504:	3243      	adds	r2, #67	; 0x43
 8005506:	47b0      	blx	r6
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d025      	beq.n	8005558 <_printf_common+0xa8>
 800550c:	2306      	movs	r3, #6
 800550e:	6820      	ldr	r0, [r4, #0]
 8005510:	682a      	ldr	r2, [r5, #0]
 8005512:	68e1      	ldr	r1, [r4, #12]
 8005514:	2500      	movs	r5, #0
 8005516:	4003      	ands	r3, r0
 8005518:	2b04      	cmp	r3, #4
 800551a:	d103      	bne.n	8005524 <_printf_common+0x74>
 800551c:	1a8d      	subs	r5, r1, r2
 800551e:	43eb      	mvns	r3, r5
 8005520:	17db      	asrs	r3, r3, #31
 8005522:	401d      	ands	r5, r3
 8005524:	68a3      	ldr	r3, [r4, #8]
 8005526:	6922      	ldr	r2, [r4, #16]
 8005528:	4293      	cmp	r3, r2
 800552a:	dd01      	ble.n	8005530 <_printf_common+0x80>
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	18ed      	adds	r5, r5, r3
 8005530:	2700      	movs	r7, #0
 8005532:	42bd      	cmp	r5, r7
 8005534:	d120      	bne.n	8005578 <_printf_common+0xc8>
 8005536:	2000      	movs	r0, #0
 8005538:	e010      	b.n	800555c <_printf_common+0xac>
 800553a:	3701      	adds	r7, #1
 800553c:	68e3      	ldr	r3, [r4, #12]
 800553e:	682a      	ldr	r2, [r5, #0]
 8005540:	1a9b      	subs	r3, r3, r2
 8005542:	42bb      	cmp	r3, r7
 8005544:	ddd2      	ble.n	80054ec <_printf_common+0x3c>
 8005546:	0022      	movs	r2, r4
 8005548:	2301      	movs	r3, #1
 800554a:	9901      	ldr	r1, [sp, #4]
 800554c:	9800      	ldr	r0, [sp, #0]
 800554e:	9e08      	ldr	r6, [sp, #32]
 8005550:	3219      	adds	r2, #25
 8005552:	47b0      	blx	r6
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d1f0      	bne.n	800553a <_printf_common+0x8a>
 8005558:	2001      	movs	r0, #1
 800555a:	4240      	negs	r0, r0
 800555c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800555e:	2030      	movs	r0, #48	; 0x30
 8005560:	18e1      	adds	r1, r4, r3
 8005562:	3143      	adds	r1, #67	; 0x43
 8005564:	7008      	strb	r0, [r1, #0]
 8005566:	0021      	movs	r1, r4
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	3145      	adds	r1, #69	; 0x45
 800556c:	7809      	ldrb	r1, [r1, #0]
 800556e:	18a2      	adds	r2, r4, r2
 8005570:	3243      	adds	r2, #67	; 0x43
 8005572:	3302      	adds	r3, #2
 8005574:	7011      	strb	r1, [r2, #0]
 8005576:	e7c1      	b.n	80054fc <_printf_common+0x4c>
 8005578:	0022      	movs	r2, r4
 800557a:	2301      	movs	r3, #1
 800557c:	9901      	ldr	r1, [sp, #4]
 800557e:	9800      	ldr	r0, [sp, #0]
 8005580:	9e08      	ldr	r6, [sp, #32]
 8005582:	321a      	adds	r2, #26
 8005584:	47b0      	blx	r6
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	d0e6      	beq.n	8005558 <_printf_common+0xa8>
 800558a:	3701      	adds	r7, #1
 800558c:	e7d1      	b.n	8005532 <_printf_common+0x82>
	...

08005590 <_printf_i>:
 8005590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005592:	b08b      	sub	sp, #44	; 0x2c
 8005594:	9206      	str	r2, [sp, #24]
 8005596:	000a      	movs	r2, r1
 8005598:	3243      	adds	r2, #67	; 0x43
 800559a:	9307      	str	r3, [sp, #28]
 800559c:	9005      	str	r0, [sp, #20]
 800559e:	9204      	str	r2, [sp, #16]
 80055a0:	7e0a      	ldrb	r2, [r1, #24]
 80055a2:	000c      	movs	r4, r1
 80055a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055a6:	2a78      	cmp	r2, #120	; 0x78
 80055a8:	d807      	bhi.n	80055ba <_printf_i+0x2a>
 80055aa:	2a62      	cmp	r2, #98	; 0x62
 80055ac:	d809      	bhi.n	80055c2 <_printf_i+0x32>
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	d100      	bne.n	80055b4 <_printf_i+0x24>
 80055b2:	e0c1      	b.n	8005738 <_printf_i+0x1a8>
 80055b4:	2a58      	cmp	r2, #88	; 0x58
 80055b6:	d100      	bne.n	80055ba <_printf_i+0x2a>
 80055b8:	e08c      	b.n	80056d4 <_printf_i+0x144>
 80055ba:	0026      	movs	r6, r4
 80055bc:	3642      	adds	r6, #66	; 0x42
 80055be:	7032      	strb	r2, [r6, #0]
 80055c0:	e022      	b.n	8005608 <_printf_i+0x78>
 80055c2:	0010      	movs	r0, r2
 80055c4:	3863      	subs	r0, #99	; 0x63
 80055c6:	2815      	cmp	r0, #21
 80055c8:	d8f7      	bhi.n	80055ba <_printf_i+0x2a>
 80055ca:	f7fa fdb1 	bl	8000130 <__gnu_thumb1_case_shi>
 80055ce:	0016      	.short	0x0016
 80055d0:	fff6001f 	.word	0xfff6001f
 80055d4:	fff6fff6 	.word	0xfff6fff6
 80055d8:	001ffff6 	.word	0x001ffff6
 80055dc:	fff6fff6 	.word	0xfff6fff6
 80055e0:	fff6fff6 	.word	0xfff6fff6
 80055e4:	003600a8 	.word	0x003600a8
 80055e8:	fff6009a 	.word	0xfff6009a
 80055ec:	00b9fff6 	.word	0x00b9fff6
 80055f0:	0036fff6 	.word	0x0036fff6
 80055f4:	fff6fff6 	.word	0xfff6fff6
 80055f8:	009e      	.short	0x009e
 80055fa:	0026      	movs	r6, r4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	3642      	adds	r6, #66	; 0x42
 8005600:	1d11      	adds	r1, r2, #4
 8005602:	6019      	str	r1, [r3, #0]
 8005604:	6813      	ldr	r3, [r2, #0]
 8005606:	7033      	strb	r3, [r6, #0]
 8005608:	2301      	movs	r3, #1
 800560a:	e0a7      	b.n	800575c <_printf_i+0x1cc>
 800560c:	6808      	ldr	r0, [r1, #0]
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	1d0a      	adds	r2, r1, #4
 8005612:	0605      	lsls	r5, r0, #24
 8005614:	d50b      	bpl.n	800562e <_printf_i+0x9e>
 8005616:	680d      	ldr	r5, [r1, #0]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	2d00      	cmp	r5, #0
 800561c:	da03      	bge.n	8005626 <_printf_i+0x96>
 800561e:	232d      	movs	r3, #45	; 0x2d
 8005620:	9a04      	ldr	r2, [sp, #16]
 8005622:	426d      	negs	r5, r5
 8005624:	7013      	strb	r3, [r2, #0]
 8005626:	4b61      	ldr	r3, [pc, #388]	; (80057ac <_printf_i+0x21c>)
 8005628:	270a      	movs	r7, #10
 800562a:	9303      	str	r3, [sp, #12]
 800562c:	e01b      	b.n	8005666 <_printf_i+0xd6>
 800562e:	680d      	ldr	r5, [r1, #0]
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	0641      	lsls	r1, r0, #25
 8005634:	d5f1      	bpl.n	800561a <_printf_i+0x8a>
 8005636:	b22d      	sxth	r5, r5
 8005638:	e7ef      	b.n	800561a <_printf_i+0x8a>
 800563a:	680d      	ldr	r5, [r1, #0]
 800563c:	6819      	ldr	r1, [r3, #0]
 800563e:	1d08      	adds	r0, r1, #4
 8005640:	6018      	str	r0, [r3, #0]
 8005642:	062e      	lsls	r6, r5, #24
 8005644:	d501      	bpl.n	800564a <_printf_i+0xba>
 8005646:	680d      	ldr	r5, [r1, #0]
 8005648:	e003      	b.n	8005652 <_printf_i+0xc2>
 800564a:	066d      	lsls	r5, r5, #25
 800564c:	d5fb      	bpl.n	8005646 <_printf_i+0xb6>
 800564e:	680d      	ldr	r5, [r1, #0]
 8005650:	b2ad      	uxth	r5, r5
 8005652:	4b56      	ldr	r3, [pc, #344]	; (80057ac <_printf_i+0x21c>)
 8005654:	2708      	movs	r7, #8
 8005656:	9303      	str	r3, [sp, #12]
 8005658:	2a6f      	cmp	r2, #111	; 0x6f
 800565a:	d000      	beq.n	800565e <_printf_i+0xce>
 800565c:	3702      	adds	r7, #2
 800565e:	0023      	movs	r3, r4
 8005660:	2200      	movs	r2, #0
 8005662:	3343      	adds	r3, #67	; 0x43
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	db03      	blt.n	8005676 <_printf_i+0xe6>
 800566e:	2204      	movs	r2, #4
 8005670:	6821      	ldr	r1, [r4, #0]
 8005672:	4391      	bics	r1, r2
 8005674:	6021      	str	r1, [r4, #0]
 8005676:	2d00      	cmp	r5, #0
 8005678:	d102      	bne.n	8005680 <_printf_i+0xf0>
 800567a:	9e04      	ldr	r6, [sp, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00c      	beq.n	800569a <_printf_i+0x10a>
 8005680:	9e04      	ldr	r6, [sp, #16]
 8005682:	0028      	movs	r0, r5
 8005684:	0039      	movs	r1, r7
 8005686:	f7fa fde3 	bl	8000250 <__aeabi_uidivmod>
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	3e01      	subs	r6, #1
 800568e:	5c5b      	ldrb	r3, [r3, r1]
 8005690:	7033      	strb	r3, [r6, #0]
 8005692:	002b      	movs	r3, r5
 8005694:	0005      	movs	r5, r0
 8005696:	429f      	cmp	r7, r3
 8005698:	d9f3      	bls.n	8005682 <_printf_i+0xf2>
 800569a:	2f08      	cmp	r7, #8
 800569c:	d109      	bne.n	80056b2 <_printf_i+0x122>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	07db      	lsls	r3, r3, #31
 80056a2:	d506      	bpl.n	80056b2 <_printf_i+0x122>
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	6922      	ldr	r2, [r4, #16]
 80056a8:	4293      	cmp	r3, r2
 80056aa:	dc02      	bgt.n	80056b2 <_printf_i+0x122>
 80056ac:	2330      	movs	r3, #48	; 0x30
 80056ae:	3e01      	subs	r6, #1
 80056b0:	7033      	strb	r3, [r6, #0]
 80056b2:	9b04      	ldr	r3, [sp, #16]
 80056b4:	1b9b      	subs	r3, r3, r6
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	9b07      	ldr	r3, [sp, #28]
 80056ba:	0021      	movs	r1, r4
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	9805      	ldr	r0, [sp, #20]
 80056c0:	9b06      	ldr	r3, [sp, #24]
 80056c2:	aa09      	add	r2, sp, #36	; 0x24
 80056c4:	f7ff fef4 	bl	80054b0 <_printf_common>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d14c      	bne.n	8005766 <_printf_i+0x1d6>
 80056cc:	2001      	movs	r0, #1
 80056ce:	4240      	negs	r0, r0
 80056d0:	b00b      	add	sp, #44	; 0x2c
 80056d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d4:	3145      	adds	r1, #69	; 0x45
 80056d6:	700a      	strb	r2, [r1, #0]
 80056d8:	4a34      	ldr	r2, [pc, #208]	; (80057ac <_printf_i+0x21c>)
 80056da:	9203      	str	r2, [sp, #12]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	6821      	ldr	r1, [r4, #0]
 80056e0:	ca20      	ldmia	r2!, {r5}
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	0608      	lsls	r0, r1, #24
 80056e6:	d516      	bpl.n	8005716 <_printf_i+0x186>
 80056e8:	07cb      	lsls	r3, r1, #31
 80056ea:	d502      	bpl.n	80056f2 <_printf_i+0x162>
 80056ec:	2320      	movs	r3, #32
 80056ee:	4319      	orrs	r1, r3
 80056f0:	6021      	str	r1, [r4, #0]
 80056f2:	2710      	movs	r7, #16
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	d1b2      	bne.n	800565e <_printf_i+0xce>
 80056f8:	2320      	movs	r3, #32
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	439a      	bics	r2, r3
 80056fe:	6022      	str	r2, [r4, #0]
 8005700:	e7ad      	b.n	800565e <_printf_i+0xce>
 8005702:	2220      	movs	r2, #32
 8005704:	6809      	ldr	r1, [r1, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	6022      	str	r2, [r4, #0]
 800570a:	0022      	movs	r2, r4
 800570c:	2178      	movs	r1, #120	; 0x78
 800570e:	3245      	adds	r2, #69	; 0x45
 8005710:	7011      	strb	r1, [r2, #0]
 8005712:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <_printf_i+0x220>)
 8005714:	e7e1      	b.n	80056da <_printf_i+0x14a>
 8005716:	0648      	lsls	r0, r1, #25
 8005718:	d5e6      	bpl.n	80056e8 <_printf_i+0x158>
 800571a:	b2ad      	uxth	r5, r5
 800571c:	e7e4      	b.n	80056e8 <_printf_i+0x158>
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	680d      	ldr	r5, [r1, #0]
 8005722:	1d10      	adds	r0, r2, #4
 8005724:	6949      	ldr	r1, [r1, #20]
 8005726:	6018      	str	r0, [r3, #0]
 8005728:	6813      	ldr	r3, [r2, #0]
 800572a:	062e      	lsls	r6, r5, #24
 800572c:	d501      	bpl.n	8005732 <_printf_i+0x1a2>
 800572e:	6019      	str	r1, [r3, #0]
 8005730:	e002      	b.n	8005738 <_printf_i+0x1a8>
 8005732:	066d      	lsls	r5, r5, #25
 8005734:	d5fb      	bpl.n	800572e <_printf_i+0x19e>
 8005736:	8019      	strh	r1, [r3, #0]
 8005738:	2300      	movs	r3, #0
 800573a:	9e04      	ldr	r6, [sp, #16]
 800573c:	6123      	str	r3, [r4, #16]
 800573e:	e7bb      	b.n	80056b8 <_printf_i+0x128>
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	1d11      	adds	r1, r2, #4
 8005744:	6019      	str	r1, [r3, #0]
 8005746:	6816      	ldr	r6, [r2, #0]
 8005748:	2100      	movs	r1, #0
 800574a:	0030      	movs	r0, r6
 800574c:	6862      	ldr	r2, [r4, #4]
 800574e:	f000 f833 	bl	80057b8 <memchr>
 8005752:	2800      	cmp	r0, #0
 8005754:	d001      	beq.n	800575a <_printf_i+0x1ca>
 8005756:	1b80      	subs	r0, r0, r6
 8005758:	6060      	str	r0, [r4, #4]
 800575a:	6863      	ldr	r3, [r4, #4]
 800575c:	6123      	str	r3, [r4, #16]
 800575e:	2300      	movs	r3, #0
 8005760:	9a04      	ldr	r2, [sp, #16]
 8005762:	7013      	strb	r3, [r2, #0]
 8005764:	e7a8      	b.n	80056b8 <_printf_i+0x128>
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	0032      	movs	r2, r6
 800576a:	9906      	ldr	r1, [sp, #24]
 800576c:	9805      	ldr	r0, [sp, #20]
 800576e:	9d07      	ldr	r5, [sp, #28]
 8005770:	47a8      	blx	r5
 8005772:	1c43      	adds	r3, r0, #1
 8005774:	d0aa      	beq.n	80056cc <_printf_i+0x13c>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	079b      	lsls	r3, r3, #30
 800577a:	d415      	bmi.n	80057a8 <_printf_i+0x218>
 800577c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577e:	68e0      	ldr	r0, [r4, #12]
 8005780:	4298      	cmp	r0, r3
 8005782:	daa5      	bge.n	80056d0 <_printf_i+0x140>
 8005784:	0018      	movs	r0, r3
 8005786:	e7a3      	b.n	80056d0 <_printf_i+0x140>
 8005788:	0022      	movs	r2, r4
 800578a:	2301      	movs	r3, #1
 800578c:	9906      	ldr	r1, [sp, #24]
 800578e:	9805      	ldr	r0, [sp, #20]
 8005790:	9e07      	ldr	r6, [sp, #28]
 8005792:	3219      	adds	r2, #25
 8005794:	47b0      	blx	r6
 8005796:	1c43      	adds	r3, r0, #1
 8005798:	d098      	beq.n	80056cc <_printf_i+0x13c>
 800579a:	3501      	adds	r5, #1
 800579c:	68e3      	ldr	r3, [r4, #12]
 800579e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	42ab      	cmp	r3, r5
 80057a4:	dcf0      	bgt.n	8005788 <_printf_i+0x1f8>
 80057a6:	e7e9      	b.n	800577c <_printf_i+0x1ec>
 80057a8:	2500      	movs	r5, #0
 80057aa:	e7f7      	b.n	800579c <_printf_i+0x20c>
 80057ac:	080064ea 	.word	0x080064ea
 80057b0:	080064fb 	.word	0x080064fb

080057b4 <__retarget_lock_acquire_recursive>:
 80057b4:	4770      	bx	lr

080057b6 <__retarget_lock_release_recursive>:
 80057b6:	4770      	bx	lr

080057b8 <memchr>:
 80057b8:	b2c9      	uxtb	r1, r1
 80057ba:	1882      	adds	r2, r0, r2
 80057bc:	4290      	cmp	r0, r2
 80057be:	d101      	bne.n	80057c4 <memchr+0xc>
 80057c0:	2000      	movs	r0, #0
 80057c2:	4770      	bx	lr
 80057c4:	7803      	ldrb	r3, [r0, #0]
 80057c6:	428b      	cmp	r3, r1
 80057c8:	d0fb      	beq.n	80057c2 <memchr+0xa>
 80057ca:	3001      	adds	r0, #1
 80057cc:	e7f6      	b.n	80057bc <memchr+0x4>

080057ce <_realloc_r>:
 80057ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057d0:	0007      	movs	r7, r0
 80057d2:	000e      	movs	r6, r1
 80057d4:	0014      	movs	r4, r2
 80057d6:	2900      	cmp	r1, #0
 80057d8:	d105      	bne.n	80057e6 <_realloc_r+0x18>
 80057da:	0011      	movs	r1, r2
 80057dc:	f7ff fc4e 	bl	800507c <_malloc_r>
 80057e0:	0005      	movs	r5, r0
 80057e2:	0028      	movs	r0, r5
 80057e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057e6:	2a00      	cmp	r2, #0
 80057e8:	d103      	bne.n	80057f2 <_realloc_r+0x24>
 80057ea:	f7ff fbdb 	bl	8004fa4 <_free_r>
 80057ee:	0025      	movs	r5, r4
 80057f0:	e7f7      	b.n	80057e2 <_realloc_r+0x14>
 80057f2:	f000 f81b 	bl	800582c <_malloc_usable_size_r>
 80057f6:	9001      	str	r0, [sp, #4]
 80057f8:	4284      	cmp	r4, r0
 80057fa:	d803      	bhi.n	8005804 <_realloc_r+0x36>
 80057fc:	0035      	movs	r5, r6
 80057fe:	0843      	lsrs	r3, r0, #1
 8005800:	42a3      	cmp	r3, r4
 8005802:	d3ee      	bcc.n	80057e2 <_realloc_r+0x14>
 8005804:	0021      	movs	r1, r4
 8005806:	0038      	movs	r0, r7
 8005808:	f7ff fc38 	bl	800507c <_malloc_r>
 800580c:	1e05      	subs	r5, r0, #0
 800580e:	d0e8      	beq.n	80057e2 <_realloc_r+0x14>
 8005810:	9b01      	ldr	r3, [sp, #4]
 8005812:	0022      	movs	r2, r4
 8005814:	429c      	cmp	r4, r3
 8005816:	d900      	bls.n	800581a <_realloc_r+0x4c>
 8005818:	001a      	movs	r2, r3
 800581a:	0031      	movs	r1, r6
 800581c:	0028      	movs	r0, r5
 800581e:	f7ff fb71 	bl	8004f04 <memcpy>
 8005822:	0031      	movs	r1, r6
 8005824:	0038      	movs	r0, r7
 8005826:	f7ff fbbd 	bl	8004fa4 <_free_r>
 800582a:	e7da      	b.n	80057e2 <_realloc_r+0x14>

0800582c <_malloc_usable_size_r>:
 800582c:	1f0b      	subs	r3, r1, #4
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	1f18      	subs	r0, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	da01      	bge.n	800583a <_malloc_usable_size_r+0xe>
 8005836:	580b      	ldr	r3, [r1, r0]
 8005838:	18c0      	adds	r0, r0, r3
 800583a:	4770      	bx	lr

0800583c <_init>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr

08005848 <_fini>:
 8005848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584e:	bc08      	pop	{r3}
 8005850:	469e      	mov	lr, r3
 8005852:	4770      	bx	lr
