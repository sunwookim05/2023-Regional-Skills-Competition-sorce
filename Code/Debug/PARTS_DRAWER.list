
PARTS_DRAWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d68  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d30  08006d30  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d30  08006d30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d38  08006d38  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  2000008c  08006dcc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d98  08006dcc  00020d98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3d7  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf5  00000000  00000000  0003b48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011369  00000000  00000000  0003f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  000503f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a60  00000000  00000000  00051380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015eda  00000000  00000000  00052de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e7a6  00000000  00000000  00068cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008105e  00000000  00000000  00087460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001084be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000354c  00000000  00000000  00108510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005fb0 	.word	0x08005fb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08005fb0 	.word	0x08005fb0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d111      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d10f      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000264:	2900      	cmp	r1, #0
 8000266:	d100      	bne.n	800026a <__aeabi_uldivmod+0xe>
 8000268:	2800      	cmp	r0, #0
 800026a:	d002      	beq.n	8000272 <__aeabi_uldivmod+0x16>
 800026c:	2100      	movs	r1, #0
 800026e:	43c9      	mvns	r1, r1
 8000270:	0008      	movs	r0, r1
 8000272:	b407      	push	{r0, r1, r2}
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__aeabi_uldivmod+0x24>)
 8000276:	a102      	add	r1, pc, #8	; (adr r1, 8000280 <__aeabi_uldivmod+0x24>)
 8000278:	1840      	adds	r0, r0, r1
 800027a:	9002      	str	r0, [sp, #8]
 800027c:	bd03      	pop	{r0, r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	ffffffd9 	.word	0xffffffd9
 8000284:	b403      	push	{r0, r1}
 8000286:	4668      	mov	r0, sp
 8000288:	b501      	push	{r0, lr}
 800028a:	9802      	ldr	r0, [sp, #8]
 800028c:	f000 f834 	bl	80002f8 <__udivmoddi4>
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	469e      	mov	lr, r3
 8000294:	b002      	add	sp, #8
 8000296:	bc0c      	pop	{r2, r3}
 8000298:	4770      	bx	lr
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	4699      	mov	r9, r3
 80002a8:	0c3b      	lsrs	r3, r7, #16
 80002aa:	469c      	mov	ip, r3
 80002ac:	0413      	lsls	r3, r2, #16
 80002ae:	0c1b      	lsrs	r3, r3, #16
 80002b0:	001d      	movs	r5, r3
 80002b2:	000e      	movs	r6, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	0400      	lsls	r0, r0, #16
 80002b8:	0c14      	lsrs	r4, r2, #16
 80002ba:	0c00      	lsrs	r0, r0, #16
 80002bc:	4345      	muls	r5, r0
 80002be:	434b      	muls	r3, r1
 80002c0:	4360      	muls	r0, r4
 80002c2:	4361      	muls	r1, r4
 80002c4:	18c0      	adds	r0, r0, r3
 80002c6:	0c2c      	lsrs	r4, r5, #16
 80002c8:	1820      	adds	r0, r4, r0
 80002ca:	468c      	mov	ip, r1
 80002cc:	4283      	cmp	r3, r0
 80002ce:	d903      	bls.n	80002d8 <__aeabi_lmul+0x3c>
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	025b      	lsls	r3, r3, #9
 80002d4:	4698      	mov	r8, r3
 80002d6:	44c4      	add	ip, r8
 80002d8:	4649      	mov	r1, r9
 80002da:	4379      	muls	r1, r7
 80002dc:	4372      	muls	r2, r6
 80002de:	0c03      	lsrs	r3, r0, #16
 80002e0:	4463      	add	r3, ip
 80002e2:	042d      	lsls	r5, r5, #16
 80002e4:	0c2d      	lsrs	r5, r5, #16
 80002e6:	18c9      	adds	r1, r1, r3
 80002e8:	0400      	lsls	r0, r0, #16
 80002ea:	1940      	adds	r0, r0, r5
 80002ec:	1889      	adds	r1, r1, r2
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f000 f8ba 	bl	8000490 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 f8b5 	bl	8000490 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f000 f807 	bl	80004a8 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f000 f802 	bl	80004a8 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	; (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <DS3231_set_time>:

void DS3231_set_time(uint8_t sec, uint8_t minute, uint8_t hour)
{
  uint8_t buffer[4];

  buffer[0] = SECONDS_AD;
 80004e4:	2300      	movs	r3, #0
{
 80004e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e8:	b087      	sub	sp, #28
  buffer[0] = SECONDS_AD;
 80004ea:	ac05      	add	r4, sp, #20
{
 80004ec:	000e      	movs	r6, r1
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004ee:	210a      	movs	r1, #10
{
 80004f0:	0015      	movs	r5, r2
 80004f2:	0007      	movs	r7, r0
  buffer[0] = SECONDS_AD;
 80004f4:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004f6:	f7ff fe25 	bl	8000144 <__udivsi3>
 80004fa:	210a      	movs	r1, #10
 80004fc:	0103      	lsls	r3, r0, #4
 80004fe:	0038      	movs	r0, r7
 8000500:	9303      	str	r3, [sp, #12]
 8000502:	f7ff fea5 	bl	8000250 <__aeabi_uidivmod>
 8000506:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000508:	0030      	movs	r0, r6
  buffer[1] = ((sec/10)<<4) + (sec%10);
 800050a:	1859      	adds	r1, r3, r1
 800050c:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 800050e:	210a      	movs	r1, #10
 8000510:	f7ff fe18 	bl	8000144 <__udivsi3>
 8000514:	210a      	movs	r1, #10
 8000516:	0107      	lsls	r7, r0, #4
 8000518:	0030      	movs	r0, r6
 800051a:	f7ff fe99 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800051e:	0028      	movs	r0, r5
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000520:	187f      	adds	r7, r7, r1
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000522:	210a      	movs	r1, #10
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000524:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000526:	f7ff fe0d 	bl	8000144 <__udivsi3>
 800052a:	0106      	lsls	r6, r0, #4
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	210a      	movs	r1, #10
 8000530:	4006      	ands	r6, r0
 8000532:	0028      	movs	r0, r5
 8000534:	f7ff fe8c 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000538:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800053a:	1876      	adds	r6, r6, r1
 800053c:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800053e:	0022      	movs	r2, r4
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	21d0      	movs	r1, #208	; 0xd0
 8000544:	3b60      	subs	r3, #96	; 0x60
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <DS3231_set_time+0x6c>)
 8000548:	f003 fe52 	bl	80041f0 <HAL_I2C_Master_Transmit>
}
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	200004e4 	.word	0x200004e4

08000554 <DS3231_get_time>:

void DS3231_get_time(uint8_t *get_second, uint8_t *get_minute, uint8_t *get_hour)
{
  uint8_t buffer;

  buffer = SECONDS_AD;
 8000554:	2300      	movs	r3, #0
{
 8000556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	0016      	movs	r6, r2
  buffer = SECONDS_AD;
 800055c:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800055e:	2564      	movs	r5, #100	; 0x64
  buffer = SECONDS_AD;
 8000560:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000562:	220f      	movs	r2, #15
 8000564:	4c29      	ldr	r4, [pc, #164]	; (800060c <DS3231_get_time+0xb8>)
{
 8000566:	9103      	str	r1, [sp, #12]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000568:	a902      	add	r1, sp, #8
{
 800056a:	9002      	str	r0, [sp, #8]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800056c:	1852      	adds	r2, r2, r1
 800056e:	0020      	movs	r0, r4
 8000570:	21d1      	movs	r1, #209	; 0xd1
 8000572:	9500      	str	r5, [sp, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	f003 fe3b 	bl	80041f0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_second, 1, 100);
 800057a:	9a02      	ldr	r2, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	21d1      	movs	r1, #209	; 0xd1
 8000580:	0020      	movs	r0, r4
 8000582:	9500      	str	r5, [sp, #0]
 8000584:	f003 fec6 	bl	8004314 <HAL_I2C_Master_Receive>

  buffer = MINUTES_AD;
 8000588:	2701      	movs	r7, #1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058a:	220f      	movs	r2, #15
  buffer = MINUTES_AD;
 800058c:	ab02      	add	r3, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058e:	a902      	add	r1, sp, #8
  buffer = MINUTES_AD;
 8000590:	73df      	strb	r7, [r3, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000592:	1852      	adds	r2, r2, r1
 8000594:	003b      	movs	r3, r7
 8000596:	21d1      	movs	r1, #209	; 0xd1
 8000598:	0020      	movs	r0, r4
 800059a:	9500      	str	r5, [sp, #0]
 800059c:	f003 fe28 	bl	80041f0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_minute, 1, 100);
 80005a0:	003b      	movs	r3, r7
 80005a2:	9a03      	ldr	r2, [sp, #12]
 80005a4:	21d1      	movs	r1, #209	; 0xd1
 80005a6:	0020      	movs	r0, r4
 80005a8:	9500      	str	r5, [sp, #0]
 80005aa:	f003 feb3 	bl	8004314 <HAL_I2C_Master_Receive>

  buffer = HOURS_AD;
 80005ae:	2302      	movs	r3, #2
 80005b0:	aa02      	add	r2, sp, #8
 80005b2:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80005b4:	220f      	movs	r2, #15
 80005b6:	a902      	add	r1, sp, #8
 80005b8:	003b      	movs	r3, r7
 80005ba:	1852      	adds	r2, r2, r1
 80005bc:	0020      	movs	r0, r4
 80005be:	21d1      	movs	r1, #209	; 0xd1
 80005c0:	9500      	str	r5, [sp, #0]
 80005c2:	f003 fe15 	bl	80041f0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_hour, 1, 100);
 80005c6:	003b      	movs	r3, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	21d1      	movs	r1, #209	; 0xd1
 80005cc:	0020      	movs	r0, r4
 80005ce:	9500      	str	r5, [sp, #0]
 80005d0:	f003 fea0 	bl	8004314 <HAL_I2C_Master_Receive>

  *get_hour = (((*get_hour & 0x30) >> 4) * 10) + (*get_hour & 0x0f);
 80005d4:	230a      	movs	r3, #10
 80005d6:	210f      	movs	r1, #15
 80005d8:	7830      	ldrb	r0, [r6, #0]
 80005da:	0682      	lsls	r2, r0, #26
 80005dc:	0f92      	lsrs	r2, r2, #30
 80005de:	435a      	muls	r2, r3
 80005e0:	4008      	ands	r0, r1
 80005e2:	1812      	adds	r2, r2, r0
 80005e4:	7032      	strb	r2, [r6, #0]
  *get_minute = ((*get_minute >> 4) * 10) + (*get_minute & 0x0f);
 80005e6:	9a03      	ldr	r2, [sp, #12]
 80005e8:	7810      	ldrb	r0, [r2, #0]
 80005ea:	0902      	lsrs	r2, r0, #4
 80005ec:	435a      	muls	r2, r3
 80005ee:	4008      	ands	r0, r1
 80005f0:	1812      	adds	r2, r2, r0
 80005f2:	9803      	ldr	r0, [sp, #12]
 80005f4:	7002      	strb	r2, [r0, #0]
  *get_second = ((*get_second >> 4) * 10) + (*get_second & 0x0f);
 80005f6:	9a02      	ldr	r2, [sp, #8]
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	0910      	lsrs	r0, r2, #4
 80005fc:	4343      	muls	r3, r0
 80005fe:	400a      	ands	r2, r1
 8000600:	189b      	adds	r3, r3, r2
 8000602:	9a02      	ldr	r2, [sp, #8]
 8000604:	7013      	strb	r3, [r2, #0]
}
 8000606:	b007      	add	sp, #28
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	200004e4 	.word	0x200004e4

08000610 <DS3231_set_date>:

void DS3231_set_date(uint8_t day, uint8_t month, uint8_t year)
{
  uint8_t buffer[4];

  buffer[0] = DATE_AD;
 8000610:	2304      	movs	r3, #4
{
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	b087      	sub	sp, #28
  buffer[0] = DATE_AD;
 8000616:	ac05      	add	r4, sp, #20
{
 8000618:	000e      	movs	r6, r1
  buffer[1] = ((day/10)<<4) + (day%10);
 800061a:	210a      	movs	r1, #10
{
 800061c:	0015      	movs	r5, r2
 800061e:	0007      	movs	r7, r0
  buffer[0] = DATE_AD;
 8000620:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((day/10)<<4) + (day%10);
 8000622:	f7ff fd8f 	bl	8000144 <__udivsi3>
 8000626:	210a      	movs	r1, #10
 8000628:	0103      	lsls	r3, r0, #4
 800062a:	0038      	movs	r0, r7
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	f7ff fe0f 	bl	8000250 <__aeabi_uidivmod>
 8000632:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((month/10)<<4) + (month%10);
 8000634:	0030      	movs	r0, r6
  buffer[1] = ((day/10)<<4) + (day%10);
 8000636:	1859      	adds	r1, r3, r1
 8000638:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((month/10)<<4) + (month%10);
 800063a:	210a      	movs	r1, #10
 800063c:	f7ff fd82 	bl	8000144 <__udivsi3>
 8000640:	210a      	movs	r1, #10
 8000642:	0107      	lsls	r7, r0, #4
 8000644:	0030      	movs	r0, r6
 8000646:	f7ff fe03 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064a:	0028      	movs	r0, r5
  buffer[2] = ((month/10)<<4) + (month%10);
 800064c:	187f      	adds	r7, r7, r1
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064e:	210a      	movs	r1, #10
  buffer[2] = ((month/10)<<4) + (month%10);
 8000650:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000652:	f7ff fd77 	bl	8000144 <__udivsi3>
 8000656:	0106      	lsls	r6, r0, #4
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	210a      	movs	r1, #10
 800065c:	4006      	ands	r6, r0
 800065e:	0028      	movs	r0, r5
 8000660:	f7ff fdf6 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000664:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000666:	1876      	adds	r6, r6, r1
 8000668:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800066a:	0022      	movs	r2, r4
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	3b60      	subs	r3, #96	; 0x60
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <DS3231_set_date+0x6c>)
 8000674:	f003 fdbc 	bl	80041f0 <HAL_I2C_Master_Transmit>
}
 8000678:	b007      	add	sp, #28
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	200004e4 	.word	0x200004e4

08000680 <DS3231_get_date>:

void DS3231_get_date(uint8_t *get_day, uint8_t *get_month, uint8_t *get_year)
{
  uint8_t buffer;

  buffer = DATE_AD;
 8000680:	2304      	movs	r3, #4
{
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b087      	sub	sp, #28
 8000686:	9203      	str	r2, [sp, #12]
  buffer = DATE_AD;
 8000688:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068a:	2564      	movs	r5, #100	; 0x64
  buffer = DATE_AD;
 800068c:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068e:	220f      	movs	r2, #15
{
 8000690:	0007      	movs	r7, r0
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000692:	4c28      	ldr	r4, [pc, #160]	; (8000734 <DS3231_get_date+0xb4>)
{
 8000694:	000e      	movs	r6, r1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000696:	a902      	add	r1, sp, #8
 8000698:	1852      	adds	r2, r2, r1
 800069a:	0020      	movs	r0, r4
 800069c:	21d1      	movs	r1, #209	; 0xd1
 800069e:	9500      	str	r5, [sp, #0]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	f003 fda5 	bl	80041f0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_day, 1, 100);
 80006a6:	003a      	movs	r2, r7
 80006a8:	2301      	movs	r3, #1
 80006aa:	21d1      	movs	r1, #209	; 0xd1
 80006ac:	0020      	movs	r0, r4
 80006ae:	9500      	str	r5, [sp, #0]
 80006b0:	f003 fe30 	bl	8004314 <HAL_I2C_Master_Receive>

  buffer = MONTH_AD;
 80006b4:	2305      	movs	r3, #5
 80006b6:	aa02      	add	r2, sp, #8
 80006b8:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006ba:	220f      	movs	r2, #15
 80006bc:	a902      	add	r1, sp, #8
 80006be:	1852      	adds	r2, r2, r1
 80006c0:	0020      	movs	r0, r4
 80006c2:	21d1      	movs	r1, #209	; 0xd1
 80006c4:	9500      	str	r5, [sp, #0]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	f003 fd92 	bl	80041f0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_month, 1, 100);
 80006cc:	0032      	movs	r2, r6
 80006ce:	2301      	movs	r3, #1
 80006d0:	21d1      	movs	r1, #209	; 0xd1
 80006d2:	0020      	movs	r0, r4
 80006d4:	9500      	str	r5, [sp, #0]
 80006d6:	f003 fe1d 	bl	8004314 <HAL_I2C_Master_Receive>

  buffer = YEAR_AD;
 80006da:	2306      	movs	r3, #6
 80006dc:	aa02      	add	r2, sp, #8
 80006de:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006e0:	220f      	movs	r2, #15
 80006e2:	a902      	add	r1, sp, #8
 80006e4:	1852      	adds	r2, r2, r1
 80006e6:	0020      	movs	r0, r4
 80006e8:	21d1      	movs	r1, #209	; 0xd1
 80006ea:	9500      	str	r5, [sp, #0]
 80006ec:	3b05      	subs	r3, #5
 80006ee:	f003 fd7f 	bl	80041f0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_year, 1, 100);
 80006f2:	9a03      	ldr	r2, [sp, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	21d1      	movs	r1, #209	; 0xd1
 80006f8:	0020      	movs	r0, r4
 80006fa:	9500      	str	r5, [sp, #0]
 80006fc:	f003 fe0a 	bl	8004314 <HAL_I2C_Master_Receive>

  *get_day = ((*get_day >> 4) * 10) + (*get_day & 0x0f);
 8000700:	230a      	movs	r3, #10
 8000702:	210f      	movs	r1, #15
 8000704:	7838      	ldrb	r0, [r7, #0]
 8000706:	0902      	lsrs	r2, r0, #4
 8000708:	435a      	muls	r2, r3
 800070a:	4008      	ands	r0, r1
 800070c:	1812      	adds	r2, r2, r0
 800070e:	703a      	strb	r2, [r7, #0]
  *get_month = (((*get_month & 0x10) >> 4) * 10) + (*get_month & 0x0f);
 8000710:	7830      	ldrb	r0, [r6, #0]
 8000712:	06c2      	lsls	r2, r0, #27
 8000714:	0fd2      	lsrs	r2, r2, #31
 8000716:	435a      	muls	r2, r3
 8000718:	4008      	ands	r0, r1
 800071a:	1812      	adds	r2, r2, r0
 800071c:	7032      	strb	r2, [r6, #0]
  *get_year = ((*get_year >> 4) * 10) + (*get_year & 0x0f);
 800071e:	9a03      	ldr	r2, [sp, #12]
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0910      	lsrs	r0, r2, #4
 8000724:	4343      	muls	r3, r0
 8000726:	400a      	ands	r2, r1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	9a03      	ldr	r2, [sp, #12]
 800072c:	7013      	strb	r3, [r2, #0]
}
 800072e:	b007      	add	sp, #28
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	200004e4 	.word	0x200004e4

08000738 <led_color>:
		2290665676, 2357774540, 3364407500, 3431516364, 2290927820, 2358036684, 3364669644, 3431778508,
		2294859980, 2361968844, 3368601804, 3435710668, 2295122124, 2362230988, 3368863948, 3435972812,
		2290666700, 2357775564, 3364408524, 3431517388, 2290928844, 2358037708, 3364670668, 3431779532,
		2294861004, 2361969868, 3368602828, 3435711692, 2295123148, 2362232012, 3368864972, 3435973836
};
void led_color(uint8_t id, uint8_t r, uint8_t g, uint8_t b){
 8000738:	b530      	push	{r4, r5, lr}
	ledData[id][0]=g;
 800073a:	250c      	movs	r5, #12
 800073c:	4368      	muls	r0, r5
 800073e:	4c03      	ldr	r4, [pc, #12]	; (800074c <led_color+0x14>)
 8000740:	5022      	str	r2, [r4, r0]
	ledData[id][1]=r;
 8000742:	1824      	adds	r4, r4, r0
 8000744:	6061      	str	r1, [r4, #4]
	ledData[id][2]=b;
 8000746:	60a3      	str	r3, [r4, #8]
}
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000a8 	.word	0x200000a8

08000750 <led_update>:
void led_update(){
	for(int i=0; i<36; i++){
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <led_update+0x44>)
 8000752:	2000      	movs	r0, #0
 8000754:	0019      	movs	r1, r3
void led_update(){
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <led_update+0x48>)
		spiBf[(i*3)]=colLUT[ledData[i][0]];
 800075a:	4c10      	ldr	r4, [pc, #64]	; (800079c <led_update+0x4c>)
 800075c:	6815      	ldr	r5, [r2, #0]
	for(int i=0; i<36; i++){
 800075e:	3001      	adds	r0, #1
		spiBf[(i*3)]=colLUT[ledData[i][0]];
 8000760:	00ad      	lsls	r5, r5, #2
 8000762:	592d      	ldr	r5, [r5, r4]
 8000764:	601d      	str	r5, [r3, #0]
		spiBf[(i*3)+1]=colLUT[ledData[i][1]];
 8000766:	6855      	ldr	r5, [r2, #4]
 8000768:	00ad      	lsls	r5, r5, #2
 800076a:	592d      	ldr	r5, [r5, r4]
 800076c:	605d      	str	r5, [r3, #4]
		spiBf[(i*3)+2]=colLUT[ledData[i][2]];
 800076e:	6895      	ldr	r5, [r2, #8]
	for(int i=0; i<36; i++){
 8000770:	320c      	adds	r2, #12
		spiBf[(i*3)+2]=colLUT[ledData[i][2]];
 8000772:	00ad      	lsls	r5, r5, #2
 8000774:	592d      	ldr	r5, [r5, r4]
 8000776:	609d      	str	r5, [r3, #8]
	for(int i=0; i<36; i++){
 8000778:	330c      	adds	r3, #12
 800077a:	2824      	cmp	r0, #36	; 0x24
 800077c:	d1ee      	bne.n	800075c <led_update+0xc>
	}
	spiBf[108]=0;
 800077e:	23d8      	movs	r3, #216	; 0xd8
 8000780:	2200      	movs	r2, #0
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	50ca      	str	r2, [r1, r3]
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)spiBf, 436);
 8000786:	32b5      	adds	r2, #181	; 0xb5
 8000788:	32ff      	adds	r2, #255	; 0xff
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <led_update+0x50>)
 800078c:	f004 fc9c 	bl	80050c8 <HAL_SPI_Transmit_DMA>
}
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000258 	.word	0x20000258
 8000798:	200000a8 	.word	0x200000a8
 800079c:	08005fc8 	.word	0x08005fc8
 80007a0:	20000530 	.word	0x20000530

080007a4 <led_clear>:
void led_clear(){
	memset(ledData, 0, (size_t)sizeof(ledData));
 80007a4:	22d8      	movs	r2, #216	; 0xd8
void led_clear(){
 80007a6:	b510      	push	{r4, lr}
	memset(ledData, 0, (size_t)sizeof(ledData));
 80007a8:	2100      	movs	r1, #0
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <led_clear+0x10>)
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	f004 ff7f 	bl	80056b0 <memset>
	//	led_update();
}
 80007b2:	bd10      	pop	{r4, pc}
 80007b4:	200000a8 	.word	0x200000a8

080007b8 <led_cmp>:
uint8_t led_cmp(uint8_t id, uint8_t r, uint8_t g, uint8_t b){
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t result = 0;

	if(ledData[id][0]==g){
 80007ba:	260c      	movs	r6, #12
 80007bc:	0037      	movs	r7, r6
 80007be:	4347      	muls	r7, r0
 80007c0:	4c08      	ldr	r4, [pc, #32]	; (80007e4 <led_cmp+0x2c>)
 80007c2:	5938      	ldr	r0, [r7, r4]
		result++;
	}
	if(ledData[id][1]==r){
 80007c4:	19e7      	adds	r7, r4, r7
	if(ledData[id][0]==g){
 80007c6:	1a80      	subs	r0, r0, r2
 80007c8:	4242      	negs	r2, r0
 80007ca:	4150      	adcs	r0, r2
	if(ledData[id][1]==r){
 80007cc:	687a      	ldr	r2, [r7, #4]
	uint8_t result = 0;
 80007ce:	b2c0      	uxtb	r0, r0
		result++;
 80007d0:	1a52      	subs	r2, r2, r1
 80007d2:	4251      	negs	r1, r2
 80007d4:	414a      	adcs	r2, r1
 80007d6:	1880      	adds	r0, r0, r2
	}
	if(ledData[id][2]==b){
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d101      	bne.n	80007e2 <led_cmp+0x2a>
		result++;
 80007de:	3001      	adds	r0, #1
 80007e0:	b2c0      	uxtb	r0, r0
	}

	return result;
}
 80007e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e4:	200000a8 	.word	0x200000a8

080007e8 <SSD1306_PutsXY>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SSD1306_PutsXY(uint8_t x, uint8_t y, String str, uint8_t color) {
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	001d      	movs	r5, r3
	SSD1306_GotoXY(x * 6, y * 8);
 80007ec:	2306      	movs	r3, #6
void SSD1306_PutsXY(uint8_t x, uint8_t y, String str, uint8_t color) {
 80007ee:	0014      	movs	r4, r2
	SSD1306_GotoXY(x * 6, y * 8);
 80007f0:	4358      	muls	r0, r3
 80007f2:	00c9      	lsls	r1, r1, #3
 80007f4:	f002 fb00 	bl	8002df8 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_6x8, color);
 80007f8:	002a      	movs	r2, r5
 80007fa:	0020      	movs	r0, r4
 80007fc:	4901      	ldr	r1, [pc, #4]	; (8000804 <SSD1306_PutsXY+0x1c>)
 80007fe:	f002 fb37 	bl	8002e70 <SSD1306_Puts>
}
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	20000000 	.word	0x20000000

08000808 <basicScreen>:

void basicScreen(){
 8000808:	b507      	push	{r0, r1, r2, lr}
	SSD1306_Fill(0);
 800080a:	2000      	movs	r0, #0
 800080c:	f002 fabe 	bl	8002d8c <SSD1306_Fill>
	SSD1306_DrawFilledRectangle(0, 0, 127, 7, 1);
 8000810:	2301      	movs	r3, #1
 8000812:	2100      	movs	r1, #0
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	227f      	movs	r2, #127	; 0x7f
 8000818:	0008      	movs	r0, r1
 800081a:	3306      	adds	r3, #6
 800081c:	f002 fbd5 	bl	8002fca <SSD1306_DrawFilledRectangle>
}
 8000820:	bd07      	pop	{r0, r1, r2, pc}
	...

08000824 <swS>:

void swS(){
	oldsw = JOY_P ? true : false;
 8000824:	20a0      	movs	r0, #160	; 0xa0
void swS(){
 8000826:	b510      	push	{r4, lr}
	oldsw = JOY_P ? true : false;
 8000828:	2104      	movs	r1, #4
 800082a:	05c0      	lsls	r0, r0, #23
 800082c:	f003 fb5e 	bl	8003eec <HAL_GPIO_ReadPin>
 8000830:	4243      	negs	r3, r0
 8000832:	4158      	adcs	r0, r3
 8000834:	4b01      	ldr	r3, [pc, #4]	; (800083c <swS+0x18>)
 8000836:	7018      	strb	r0, [r3, #0]
}
 8000838:	bd10      	pop	{r4, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20000015 	.word	0x20000015

08000840 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	static uint16_t buzC;
	if (htim->Instance == TIM2) {
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000844:	b570      	push	{r4, r5, r6, lr}
	if (htim->Instance == TIM2) {
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	429a      	cmp	r2, r3
 800084a:	d152      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0xb2>
		reC++;
 800084c:	4a2d      	ldr	r2, [pc, #180]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800084e:	492e      	ldr	r1, [pc, #184]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000850:	7813      	ldrb	r3, [r2, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	7013      	strb	r3, [r2, #0]
		if(modeFlag == FINDR || modeFlag == PARTITION) ledC++;
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000858:	781a      	ldrb	r2, [r3, #0]
		else ledC = 0;
 800085a:	2300      	movs	r3, #0
		if(modeFlag == FINDR || modeFlag == PARTITION) ledC++;
 800085c:	3a06      	subs	r2, #6
 800085e:	2a01      	cmp	r2, #1
 8000860:	d802      	bhi.n	8000868 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000862:	880b      	ldrh	r3, [r1, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	b29b      	uxth	r3, r3
		HAL_ADC_Start(&hadc);
 8000868:	4c29      	ldr	r4, [pc, #164]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800086a:	800b      	strh	r3, [r1, #0]
 800086c:	0020      	movs	r0, r4
 800086e:	f002 ff99 	bl	80037a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8000872:	210a      	movs	r1, #10
 8000874:	0020      	movs	r0, r4
 8000876:	f002 ffc1 	bl	80037fc <HAL_ADC_PollForConversion>
		adc[0] = HAL_ADC_GetValue(&hadc);
 800087a:	0020      	movs	r0, r4
 800087c:	f003 f822 	bl	80038c4 <HAL_ADC_GetValue>
 8000880:	4d24      	ldr	r5, [pc, #144]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0xd4>)
		HAL_ADC_PollForConversion(&hadc, 10);
 8000882:	210a      	movs	r1, #10
		adc[0] = HAL_ADC_GetValue(&hadc);
 8000884:	8028      	strh	r0, [r5, #0]
		HAL_ADC_PollForConversion(&hadc, 10);
 8000886:	0020      	movs	r0, r4
 8000888:	f002 ffb8 	bl	80037fc <HAL_ADC_PollForConversion>
		adc[1] = HAL_ADC_GetValue(&hadc);
 800088c:	0020      	movs	r0, r4
 800088e:	f003 f819 	bl	80038c4 <HAL_ADC_GetValue>
 8000892:	8068      	strh	r0, [r5, #2]
		swS();
 8000894:	f7ff ffc6 	bl	8000824 <swS>
		if(buzFlag)buzC++;
 8000898:	4c1f      	ldr	r4, [pc, #124]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800089a:	4d20      	ldr	r5, [pc, #128]	; (800091c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800089c:	7822      	ldrb	r2, [r4, #0]
 800089e:	2a00      	cmp	r2, #0
 80008a0:	d028      	beq.n	80008f4 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80008a2:	882b      	ldrh	r3, [r5, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	802b      	strh	r3, [r5, #0]
		else {
			buzC = 0;
			BUZ(0);
		}
		if(buzFlag==1){
 80008a8:	7823      	ldrb	r3, [r4, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d10c      	bne.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x88>
			if(buzC >= 500) buzFlag = 0;
 80008ae:	33f4      	adds	r3, #244	; 0xf4
 80008b0:	882a      	ldrh	r2, [r5, #0]
 80008b2:	33ff      	adds	r3, #255	; 0xff
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d301      	bcc.n	80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>
 80008b8:	2300      	movs	r3, #0
 80008ba:	7023      	strb	r3, [r4, #0]
			BUZ(1);
 80008bc:	20a0      	movs	r0, #160	; 0xa0
 80008be:	2201      	movs	r2, #1
 80008c0:	2108      	movs	r1, #8
 80008c2:	05c0      	lsls	r0, r0, #23
 80008c4:	f003 fb18 	bl	8003ef8 <HAL_GPIO_WritePin>
		}
		if(buzFlag == 2){
 80008c8:	7823      	ldrb	r3, [r4, #0]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d111      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			if(buzC >= 100) buzFlag = 0;
 80008ce:	8828      	ldrh	r0, [r5, #0]
 80008d0:	2863      	cmp	r0, #99	; 0x63
 80008d2:	d901      	bls.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x98>
 80008d4:	2300      	movs	r3, #0
 80008d6:	7023      	strb	r3, [r4, #0]
			if(buzC % 50 > 25) BUZ(1);
 80008d8:	2132      	movs	r1, #50	; 0x32
 80008da:	f7ff fcb9 	bl	8000250 <__aeabi_uidivmod>
 80008de:	b289      	uxth	r1, r1
 80008e0:	2201      	movs	r2, #1
 80008e2:	2919      	cmp	r1, #25
 80008e4:	d800      	bhi.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0xa8>
			else BUZ(0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	20a0      	movs	r0, #160	; 0xa0
 80008ea:	2108      	movs	r1, #8
 80008ec:	05c0      	lsls	r0, r0, #23
 80008ee:	f003 fb03 	bl	8003ef8 <HAL_GPIO_WritePin>
		}
	}
}
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
			BUZ(0);
 80008f4:	20a0      	movs	r0, #160	; 0xa0
 80008f6:	2108      	movs	r1, #8
 80008f8:	05c0      	lsls	r0, r0, #23
			buzC = 0;
 80008fa:	802a      	strh	r2, [r5, #0]
			BUZ(0);
 80008fc:	f003 fafc 	bl	8003ef8 <HAL_GPIO_WritePin>
 8000900:	e7d2      	b.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	20000957 	.word	0x20000957
 8000908:	200005c8 	.word	0x200005c8
 800090c:	200005d0 	.word	0x200005d0
 8000910:	20000440 	.word	0x20000440
 8000914:	2000040c 	.word	0x2000040c
 8000918:	20000412 	.word	0x20000412
 800091c:	20000410 	.word	0x20000410

08000920 <logShift>:

void logShift(){
 8000920:	b510      	push	{r4, lr}
	logC++;
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <logShift+0x18>)
	for(uint8_t i = 0; i < 5; i++)
		pLog[5 - i] = pLog[4 - i];
 8000924:	4905      	ldr	r1, [pc, #20]	; (800093c <logShift+0x1c>)
	logC++;
 8000926:	7813      	ldrb	r3, [r2, #0]
		pLog[5 - i] = pLog[4 - i];
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <logShift+0x20>)
	logC++;
 800092a:	3301      	adds	r3, #1
 800092c:	7013      	strb	r3, [r2, #0]
		pLog[5 - i] = pLog[4 - i];
 800092e:	2282      	movs	r2, #130	; 0x82
 8000930:	0052      	lsls	r2, r2, #1
 8000932:	f004 feaa 	bl	800568a <memmove>
}
 8000936:	bd10      	pop	{r4, pc}
 8000938:	200005cb 	.word	0x200005cb
 800093c:	200005d2 	.word	0x200005d2
 8000940:	20000606 	.word	0x20000606

08000944 <textIn>:

void textIn(boolean n, volatile String resultArr ,uint8_t lim){
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
	String bf = (String)calloc(0, sizeof(char) * 11);
	uint8_t keyX = 0, keyY = 0, limX = 0, tempColor;
	uint8_t cur = 0;
	udf = true;
 8000946:	2601      	movs	r6, #1
void textIn(boolean n, volatile String resultArr ,uint8_t lim){
 8000948:	b08b      	sub	sp, #44	; 0x2c
 800094a:	9006      	str	r0, [sp, #24]
 800094c:	9109      	str	r1, [sp, #36]	; 0x24
	String bf = (String)calloc(0, sizeof(char) * 11);
 800094e:	2000      	movs	r0, #0
 8000950:	210b      	movs	r1, #11
void textIn(boolean n, volatile String resultArr ,uint8_t lim){
 8000952:	9207      	str	r2, [sp, #28]
	String bf = (String)calloc(0, sizeof(char) * 11);
 8000954:	f004 fe52 	bl	80055fc <calloc>
	udf = true;
 8000958:	4b93      	ldr	r3, [pc, #588]	; (8000ba8 <textIn+0x264>)
	memset(resultArr, 0, (size_t)lim + 1);
 800095a:	2100      	movs	r1, #0
	udf = true;
 800095c:	701e      	strb	r6, [r3, #0]
	memset(resultArr, 0, (size_t)lim + 1);
 800095e:	9b07      	ldr	r3, [sp, #28]
	String bf = (String)calloc(0, sizeof(char) * 11);
 8000960:	9005      	str	r0, [sp, #20]
	memset(resultArr, 0, (size_t)lim + 1);
 8000962:	199a      	adds	r2, r3, r6
 8000964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000966:	f004 fea3 	bl	80056b0 <memset>

	SSD1306_Fill(0);
 800096a:	2000      	movs	r0, #0
 800096c:	f002 fa0e 	bl	8002d8c <SSD1306_Fill>
	uint8_t cur = 0;
 8000970:	2300      	movs	r3, #0
	uint8_t keyX = 0, keyY = 0, limX = 0, tempColor;
 8000972:	001f      	movs	r7, r3
 8000974:	001c      	movs	r4, r3
	uint8_t cur = 0;
 8000976:	9301      	str	r3, [sp, #4]
	uint8_t keyX = 0, keyY = 0, limX = 0, tempColor;
 8000978:	9302      	str	r3, [sp, #8]

	while(1){
		if(RE1){
 800097a:	4b8c      	ldr	r3, [pc, #560]	; (8000bac <textIn+0x268>)
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	2a63      	cmp	r2, #99	; 0x63
 8000980:	d922      	bls.n	80009c8 <textIn+0x84>
			reC = 0;
 8000982:	2100      	movs	r1, #0
			if(JOY_R)
 8000984:	20fa      	movs	r0, #250	; 0xfa
			reC = 0;
 8000986:	7019      	strb	r1, [r3, #0]
			if(JOY_R)
 8000988:	4b89      	ldr	r3, [pc, #548]	; (8000bb0 <textIn+0x26c>)
 800098a:	0100      	lsls	r0, r0, #4
 800098c:	881a      	ldrh	r2, [r3, #0]
 800098e:	4282      	cmp	r2, r0
 8000990:	d945      	bls.n	8000a1e <textIn+0xda>
				if(keyX < limX) keyX++;
 8000992:	9802      	ldr	r0, [sp, #8]
 8000994:	4284      	cmp	r4, r0
 8000996:	d24a      	bcs.n	8000a2e <textIn+0xea>
 8000998:	3401      	adds	r4, #1
				else keyX = 0;
			if(JOY_L)
				if(keyX) keyX--;
 800099a:	b2e4      	uxtb	r4, r4
				else keyX = limX;
			if(JOY_U)
 800099c:	21fa      	movs	r1, #250	; 0xfa
 800099e:	885b      	ldrh	r3, [r3, #2]
 80009a0:	0109      	lsls	r1, r1, #4
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d947      	bls.n	8000a36 <textIn+0xf2>
				if(keyY) keyY--;
 80009a6:	2f00      	cmp	r7, #0
 80009a8:	d04d      	beq.n	8000a46 <textIn+0x102>
 80009aa:	3f01      	subs	r7, #1
				else keyY = 3;
			if(JOY_D)
				if(keyY < 3) keyY++;
 80009ac:	b2ff      	uxtb	r7, r7
				else keyY = 0;
			if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 80009ae:	3a2d      	subs	r2, #45	; 0x2d
 80009b0:	3aff      	subs	r2, #255	; 0xff
 80009b2:	4980      	ldr	r1, [pc, #512]	; (8000bb4 <textIn+0x270>)
 80009b4:	b292      	uxth	r2, r2
 80009b6:	428a      	cmp	r2, r1
 80009b8:	d804      	bhi.n	80009c4 <textIn+0x80>
 80009ba:	3b2d      	subs	r3, #45	; 0x2d
 80009bc:	3bff      	subs	r3, #255	; 0xff
 80009be:	b29b      	uxth	r3, r3
 80009c0:	428b      	cmp	r3, r1
 80009c2:	d901      	bls.n	80009c8 <textIn+0x84>
 80009c4:	4b78      	ldr	r3, [pc, #480]	; (8000ba8 <textIn+0x264>)
 80009c6:	701e      	strb	r6, [r3, #0]
		}
		if(JOY_P){
 80009c8:	20a0      	movs	r0, #160	; 0xa0
 80009ca:	2104      	movs	r1, #4
 80009cc:	05c0      	lsls	r0, r0, #23
 80009ce:	f003 fa8d 	bl	8003eec <HAL_GPIO_ReadPin>
			if(!oldsw){
 80009d2:	4b79      	ldr	r3, [pc, #484]	; (8000bb8 <textIn+0x274>)
 80009d4:	781d      	ldrb	r5, [r3, #0]
 80009d6:	4305      	orrs	r5, r0
 80009d8:	b2ed      	uxtb	r5, r5
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d110      	bne.n	8000a00 <textIn+0xbc>
				swS();
 80009de:	f7ff ff21 	bl	8000824 <swS>
				udf = true;
 80009e2:	4b71      	ldr	r3, [pc, #452]	; (8000ba8 <textIn+0x264>)
 80009e4:	701e      	strb	r6, [r3, #0]
				if(keyX < 10) resultArr[cur++] = keyboard[keyY][keyX];
 80009e6:	2c09      	cmp	r4, #9
 80009e8:	d831      	bhi.n	8000a4e <textIn+0x10a>
 80009ea:	4974      	ldr	r1, [pc, #464]	; (8000bbc <textIn+0x278>)
 80009ec:	00b8      	lsls	r0, r7, #2
 80009ee:	5841      	ldr	r1, [r0, r1]
 80009f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	5d09      	ldrb	r1, [r1, r4]
 80009f6:	9801      	ldr	r0, [sp, #4]
 80009f8:	3301      	adds	r3, #1
 80009fa:	5411      	strb	r1, [r2, r0]
				else {
					if(keyY == 0) cur--;
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	9301      	str	r3, [sp, #4]
						return;
					}
				}
			}
		}
		if(lim - 1 == cur){
 8000a00:	9b07      	ldr	r3, [sp, #28]
 8000a02:	9a01      	ldr	r2, [sp, #4]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d133      	bne.n	8000a72 <textIn+0x12e>
			firstF = true;
 8000a0a:	2001      	movs	r0, #1
			udf = true;

			resultArr[cur]='\0';
 8000a0c:	2200      	movs	r2, #0
			firstF = true;
 8000a0e:	4b6c      	ldr	r3, [pc, #432]	; (8000bc0 <textIn+0x27c>)
			resultArr[cur]='\0';
 8000a10:	9901      	ldr	r1, [sp, #4]
			firstF = true;
 8000a12:	7018      	strb	r0, [r3, #0]
			udf = true;
 8000a14:	4b64      	ldr	r3, [pc, #400]	; (8000ba8 <textIn+0x264>)
 8000a16:	7018      	strb	r0, [r3, #0]
			resultArr[cur]='\0';
 8000a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a1a:	545a      	strb	r2, [r3, r1]
 8000a1c:	e022      	b.n	8000a64 <textIn+0x120>
			if(JOY_L)
 8000a1e:	2196      	movs	r1, #150	; 0x96
 8000a20:	0049      	lsls	r1, r1, #1
 8000a22:	428a      	cmp	r2, r1
 8000a24:	d2ba      	bcs.n	800099c <textIn+0x58>
				if(keyX) keyX--;
 8000a26:	2c00      	cmp	r4, #0
 8000a28:	d003      	beq.n	8000a32 <textIn+0xee>
 8000a2a:	3c01      	subs	r4, #1
 8000a2c:	e7b5      	b.n	800099a <textIn+0x56>
				else keyX = 0;
 8000a2e:	000c      	movs	r4, r1
 8000a30:	e7b4      	b.n	800099c <textIn+0x58>
 8000a32:	9c02      	ldr	r4, [sp, #8]
 8000a34:	e7b2      	b.n	800099c <textIn+0x58>
			if(JOY_D)
 8000a36:	2196      	movs	r1, #150	; 0x96
 8000a38:	0049      	lsls	r1, r1, #1
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d2b7      	bcs.n	80009ae <textIn+0x6a>
				if(keyY < 3) keyY++;
 8000a3e:	2f03      	cmp	r7, #3
 8000a40:	d003      	beq.n	8000a4a <textIn+0x106>
 8000a42:	3701      	adds	r7, #1
 8000a44:	e7b2      	b.n	80009ac <textIn+0x68>
				else keyY = 3;
 8000a46:	2703      	movs	r7, #3
 8000a48:	e7b1      	b.n	80009ae <textIn+0x6a>
				else keyY = 0;
 8000a4a:	2700      	movs	r7, #0
 8000a4c:	e7af      	b.n	80009ae <textIn+0x6a>
					if(keyY == 0) cur--;
 8000a4e:	2f00      	cmp	r7, #0
 8000a50:	d102      	bne.n	8000a58 <textIn+0x114>
 8000a52:	9b01      	ldr	r3, [sp, #4]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	e7d1      	b.n	80009fc <textIn+0xb8>
					else if(keyY == 2){
 8000a58:	2f02      	cmp	r7, #2
 8000a5a:	d1d1      	bne.n	8000a00 <textIn+0xbc>
						SSD1306_Fill(1);
 8000a5c:	2001      	movs	r0, #1
						resultArr[cur] = '\0';
 8000a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a60:	9a01      	ldr	r2, [sp, #4]
 8000a62:	549d      	strb	r5, [r3, r2]
			SSD1306_Fill(1);
 8000a64:	f002 f992 	bl	8002d8c <SSD1306_Fill>

			free(bf);
 8000a68:	9805      	ldr	r0, [sp, #20]
 8000a6a:	f004 fdfb 	bl	8005664 <free>
			}

			SSD1306_UpdateScreen();
		}
	}
}
 8000a6e:	b00b      	add	sp, #44	; 0x2c
 8000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(keyY == 0 || keyY == 2) limX = 10;
 8000a72:	230a      	movs	r3, #10
 8000a74:	9302      	str	r3, [sp, #8]
 8000a76:	2f00      	cmp	r7, #0
 8000a78:	d004      	beq.n	8000a84 <textIn+0x140>
 8000a7a:	1ebb      	subs	r3, r7, #2
 8000a7c:	425a      	negs	r2, r3
 8000a7e:	4153      	adcs	r3, r2
 8000a80:	3309      	adds	r3, #9
 8000a82:	9302      	str	r3, [sp, #8]
		if(keyX > limX) keyX = limX;
 8000a84:	9a02      	ldr	r2, [sp, #8]
 8000a86:	1c23      	adds	r3, r4, #0
 8000a88:	4294      	cmp	r4, r2
 8000a8a:	d901      	bls.n	8000a90 <textIn+0x14c>
 8000a8c:	466b      	mov	r3, sp
 8000a8e:	7a1b      	ldrb	r3, [r3, #8]
 8000a90:	b2dc      	uxtb	r4, r3
		if(udf){
 8000a92:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <textIn+0x264>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	d100      	bne.n	8000a9c <textIn+0x158>
 8000a9a:	e76e      	b.n	800097a <textIn+0x36>
			udf = false;
 8000a9c:	2500      	movs	r5, #0
 8000a9e:	701d      	strb	r5, [r3, #0]
			basicScreen();
 8000aa0:	f7ff feb2 	bl	8000808 <basicScreen>
			if(!n) SSD1306_PutsXY(0, 0, "#input Name", 0);
 8000aa4:	9b06      	ldr	r3, [sp, #24]
 8000aa6:	42ab      	cmp	r3, r5
 8000aa8:	d168      	bne.n	8000b7c <textIn+0x238>
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0018      	movs	r0, r3
 8000aae:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <textIn+0x280>)
			else  SSD1306_PutsXY(0, 0, "#input part name", 0);
 8000ab0:	f7ff fe9a 	bl	80007e8 <SSD1306_PutsXY>
					tempColor = !(keyX == i && keyY == j);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9304      	str	r3, [sp, #16]
				for(uint8_t j = 0; j < 4; j++){
 8000ab8:	230a      	movs	r3, #10
 8000aba:	9a04      	ldr	r2, [sp, #16]
 8000abc:	4353      	muls	r3, r2
 8000abe:	330e      	adds	r3, #14
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	9308      	str	r3, [sp, #32]
		if(keyY == 0 || keyY == 2) limX = 10;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	9303      	str	r3, [sp, #12]
					tempColor = !(keyX == i && keyY == j);
 8000ac8:	466b      	mov	r3, sp
 8000aca:	7c1b      	ldrb	r3, [r3, #16]
 8000acc:	0035      	movs	r5, r6
 8000ace:	429c      	cmp	r4, r3
 8000ad0:	d104      	bne.n	8000adc <textIn+0x198>
 8000ad2:	466b      	mov	r3, sp
 8000ad4:	7b1d      	ldrb	r5, [r3, #12]
 8000ad6:	1bed      	subs	r5, r5, r7
 8000ad8:	1e6b      	subs	r3, r5, #1
 8000ada:	419d      	sbcs	r5, r3
					SSD1306_GotoXY(14 + (i * 10), 31 + (j * 8));
 8000adc:	9b03      	ldr	r3, [sp, #12]
 8000ade:	9808      	ldr	r0, [sp, #32]
 8000ae0:	00d9      	lsls	r1, r3, #3
 8000ae2:	311f      	adds	r1, #31
 8000ae4:	b289      	uxth	r1, r1
 8000ae6:	f002 f987 	bl	8002df8 <SSD1306_GotoXY>
					SSD1306_Putc(keyboard[j][i], &Font_6x8, tempColor);
 8000aea:	9b03      	ldr	r3, [sp, #12]
 8000aec:	b2ea      	uxtb	r2, r5
 8000aee:	0099      	lsls	r1, r3, #2
 8000af0:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <textIn+0x278>)
 8000af2:	58cb      	ldr	r3, [r1, r3]
 8000af4:	9904      	ldr	r1, [sp, #16]
 8000af6:	5c58      	ldrb	r0, [r3, r1]
 8000af8:	4933      	ldr	r1, [pc, #204]	; (8000bc8 <textIn+0x284>)
 8000afa:	f002 f983 	bl	8002e04 <SSD1306_Putc>
				for(uint8_t j = 0; j < 4; j++){
 8000afe:	9b03      	ldr	r3, [sp, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	9303      	str	r3, [sp, #12]
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	d1df      	bne.n	8000ac8 <textIn+0x184>
			for(uint8_t i = 0; i < 10; i++){
 8000b08:	9b04      	ldr	r3, [sp, #16]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	9304      	str	r3, [sp, #16]
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d1d2      	bne.n	8000ab8 <textIn+0x174>
			SSD1306_GotoXY(115, 31);
 8000b12:	211f      	movs	r1, #31
 8000b14:	2073      	movs	r0, #115	; 0x73
 8000b16:	f002 f96f 	bl	8002df8 <SSD1306_GotoXY>
			SSD1306_Puts("&", &Font_6x8, !(keyX == 10 && keyY == 0));
 8000b1a:	0032      	movs	r2, r6
 8000b1c:	2c0a      	cmp	r4, #10
 8000b1e:	d102      	bne.n	8000b26 <textIn+0x1e2>
 8000b20:	003a      	movs	r2, r7
 8000b22:	1e53      	subs	r3, r2, #1
 8000b24:	419a      	sbcs	r2, r3
 8000b26:	4d28      	ldr	r5, [pc, #160]	; (8000bc8 <textIn+0x284>)
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	0029      	movs	r1, r5
 8000b2c:	4827      	ldr	r0, [pc, #156]	; (8000bcc <textIn+0x288>)
 8000b2e:	f002 f99f 	bl	8002e70 <SSD1306_Puts>
			SSD1306_GotoXY(115, 49);
 8000b32:	2131      	movs	r1, #49	; 0x31
 8000b34:	2073      	movs	r0, #115	; 0x73
 8000b36:	f002 f95f 	bl	8002df8 <SSD1306_GotoXY>
			SSD1306_Puts("*", &Font_6x8, !(keyX == 10 && keyY == 2));
 8000b3a:	0032      	movs	r2, r6
 8000b3c:	2c0a      	cmp	r4, #10
 8000b3e:	d102      	bne.n	8000b46 <textIn+0x202>
 8000b40:	1eba      	subs	r2, r7, #2
 8000b42:	1e53      	subs	r3, r2, #1
 8000b44:	419a      	sbcs	r2, r3
 8000b46:	0029      	movs	r1, r5
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <textIn+0x28c>)
 8000b4c:	f002 f990 	bl	8002e70 <SSD1306_Puts>
			SSD1306_PutsXY(cur, 2, " ^ ", 1);
 8000b50:	0033      	movs	r3, r6
 8000b52:	2102      	movs	r1, #2
 8000b54:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <textIn+0x290>)
 8000b56:	9801      	ldr	r0, [sp, #4]
 8000b58:	f7ff fe46 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_PutsXY(0, 1, " > ", 1);
 8000b5c:	0033      	movs	r3, r6
 8000b5e:	0031      	movs	r1, r6
 8000b60:	2000      	movs	r0, #0
 8000b62:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <textIn+0x294>)
 8000b64:	f7ff fe40 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < cur; i++){
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9303      	str	r3, [sp, #12]
 8000b6c:	466b      	mov	r3, sp
 8000b6e:	7b1d      	ldrb	r5, [r3, #12]
 8000b70:	9b01      	ldr	r3, [sp, #4]
 8000b72:	42ab      	cmp	r3, r5
 8000b74:	d807      	bhi.n	8000b86 <textIn+0x242>
			SSD1306_UpdateScreen();
 8000b76:	f002 fa81 	bl	800307c <SSD1306_UpdateScreen>
 8000b7a:	e6fe      	b.n	800097a <textIn+0x36>
			else  SSD1306_PutsXY(0, 0, "#input part name", 0);
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	0029      	movs	r1, r5
 8000b80:	0028      	movs	r0, r5
 8000b82:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <textIn+0x298>)
 8000b84:	e794      	b.n	8000ab0 <textIn+0x16c>
				sprintf(bf, "%c ", resultArr[i]);
 8000b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b88:	9a03      	ldr	r2, [sp, #12]
 8000b8a:	4915      	ldr	r1, [pc, #84]	; (8000be0 <textIn+0x29c>)
 8000b8c:	5c9a      	ldrb	r2, [r3, r2]
 8000b8e:	9805      	ldr	r0, [sp, #20]
				SSD1306_PutsXY(1 + i, 1, bf, 1);
 8000b90:	3501      	adds	r5, #1
				sprintf(bf, "%c ", resultArr[i]);
 8000b92:	f004 feb5 	bl	8005900 <siprintf>
				SSD1306_PutsXY(1 + i, 1, bf, 1);
 8000b96:	0033      	movs	r3, r6
 8000b98:	0031      	movs	r1, r6
 8000b9a:	9a05      	ldr	r2, [sp, #20]
 8000b9c:	b2e8      	uxtb	r0, r5
 8000b9e:	f7ff fe23 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < cur; i++){
 8000ba2:	9b03      	ldr	r3, [sp, #12]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	e7e0      	b.n	8000b6a <textIn+0x226>
 8000ba8:	2000001a 	.word	0x2000001a
 8000bac:	20000957 	.word	0x20000957
 8000bb0:	2000040c 	.word	0x2000040c
 8000bb4:	00000e74 	.word	0x00000e74
 8000bb8:	20000015 	.word	0x20000015
 8000bbc:	08006cb4 	.word	0x08006cb4
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	080069b8 	.word	0x080069b8
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	080069d5 	.word	0x080069d5
 8000bd0:	080069d7 	.word	0x080069d7
 8000bd4:	080069d9 	.word	0x080069d9
 8000bd8:	080069dd 	.word	0x080069dd
 8000bdc:	080069c4 	.word	0x080069c4
 8000be0:	080069e1 	.word	0x080069e1

08000be4 <timeSet>:

void timeSet(boolean firstOn){
 8000be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be6:	b085      	sub	sp, #20
 8000be8:	9003      	str	r0, [sp, #12]
	DATE setDate = {.year = 2022, .month = 3, .day = 18};
	TIME setTime = {.hour = 0, .min = 0, .sec = 1};

	basicScreen();
 8000bea:	f7ff fe0d 	bl	8000808 <basicScreen>
	TIME setTime = {.hour = 0, .min = 0, .sec = 1};
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	9302      	str	r3, [sp, #8]
	DATE setDate = {.year = 2022, .month = 3, .day = 18};
 8000bf4:	4b82      	ldr	r3, [pc, #520]	; (8000e00 <timeSet+0x21c>)
 8000bf6:	2703      	movs	r7, #3
 8000bf8:	9300      	str	r3, [sp, #0]
	while(!firstOn){
 8000bfa:	9b03      	ldr	r3, [sp, #12]
	DATE setDate = {.year = 2022, .month = 3, .day = 18};
 8000bfc:	2412      	movs	r4, #18
	TIME setTime = {.hour = 0, .min = 0, .sec = 1};
 8000bfe:	9601      	str	r6, [sp, #4]
	while(!firstOn){
 8000c00:	42b3      	cmp	r3, r6
 8000c02:	d000      	beq.n	8000c06 <timeSet+0x22>
 8000c04:	e086      	b.n	8000d14 <timeSet+0x130>
		if(RE1){
 8000c06:	4b7f      	ldr	r3, [pc, #508]	; (8000e04 <timeSet+0x220>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	2a63      	cmp	r2, #99	; 0x63
 8000c0c:	d962      	bls.n	8000cd4 <timeSet+0xf0>
			reC = 0;
 8000c0e:	9a03      	ldr	r2, [sp, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
			if(JOY_R && sel < 5) sel++;
 8000c12:	4b7d      	ldr	r3, [pc, #500]	; (8000e08 <timeSet+0x224>)
 8000c14:	8819      	ldrh	r1, [r3, #0]
 8000c16:	23fa      	movs	r3, #250	; 0xfa
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d915      	bls.n	8000c4a <timeSet+0x66>
 8000c1e:	4a7b      	ldr	r2, [pc, #492]	; (8000e0c <timeSet+0x228>)
 8000c20:	7813      	ldrb	r3, [r2, #0]
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d801      	bhi.n	8000c2a <timeSet+0x46>
 8000c26:	3301      	adds	r3, #1
			if(JOY_L && sel) sel--;
 8000c28:	7013      	strb	r3, [r2, #0]
			if(JOY_U){
 8000c2a:	22fa      	movs	r2, #250	; 0xfa
 8000c2c:	4b76      	ldr	r3, [pc, #472]	; (8000e08 <timeSet+0x224>)
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	885b      	ldrh	r3, [r3, #2]
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d800      	bhi.n	8000c38 <timeSet+0x54>
 8000c36:	e06f      	b.n	8000d18 <timeSet+0x134>
				switch(sel){
 8000c38:	4a74      	ldr	r2, [pc, #464]	; (8000e0c <timeSet+0x228>)
 8000c3a:	7810      	ldrb	r0, [r2, #0]
 8000c3c:	2805      	cmp	r0, #5
 8000c3e:	d832      	bhi.n	8000ca6 <timeSet+0xc2>
 8000c40:	f7ff fa6c 	bl	800011c <__gnu_thumb1_case_uqi>
 8000c44:	2119150d 	.word	0x2119150d
 8000c48:	2b27      	.short	0x2b27
			if(JOY_L && sel) sel--;
 8000c4a:	2396      	movs	r3, #150	; 0x96
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	d2eb      	bcs.n	8000c2a <timeSet+0x46>
 8000c52:	4a6e      	ldr	r2, [pc, #440]	; (8000e0c <timeSet+0x228>)
 8000c54:	7813      	ldrb	r3, [r2, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0e7      	beq.n	8000c2a <timeSet+0x46>
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	e7e4      	b.n	8000c28 <timeSet+0x44>
				case 0: if(setDate.year < 2099) setDate.year++;
 8000c5e:	4a6c      	ldr	r2, [pc, #432]	; (8000e10 <timeSet+0x22c>)
 8000c60:	9800      	ldr	r0, [sp, #0]
 8000c62:	4290      	cmp	r0, r2
 8000c64:	d803      	bhi.n	8000c6e <timeSet+0x8a>
 8000c66:	0002      	movs	r2, r0
 8000c68:	3201      	adds	r2, #1
 8000c6a:	b292      	uxth	r2, r2
 8000c6c:	9200      	str	r2, [sp, #0]
				case 1: if(setDate.month < 12) setDate.month++;
 8000c6e:	2f0b      	cmp	r7, #11
 8000c70:	d801      	bhi.n	8000c76 <timeSet+0x92>
 8000c72:	3701      	adds	r7, #1
 8000c74:	b2ff      	uxtb	r7, r7
				case 2: if(setDate.day < lastDay[setDate.month - 1]) setDate.day++;
 8000c76:	4a67      	ldr	r2, [pc, #412]	; (8000e14 <timeSet+0x230>)
 8000c78:	19d2      	adds	r2, r2, r7
 8000c7a:	3a01      	subs	r2, #1
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	42a2      	cmp	r2, r4
 8000c80:	d901      	bls.n	8000c86 <timeSet+0xa2>
 8000c82:	3401      	adds	r4, #1
 8000c84:	b2e4      	uxtb	r4, r4
				case 3: if(setTime.hour < 23) setTime.hour++;
 8000c86:	9a01      	ldr	r2, [sp, #4]
 8000c88:	2a16      	cmp	r2, #22
 8000c8a:	d802      	bhi.n	8000c92 <timeSet+0xae>
 8000c8c:	3201      	adds	r2, #1
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	9201      	str	r2, [sp, #4]
				case 4: if(setTime.min < 59) setTime.min++;
 8000c92:	2e3a      	cmp	r6, #58	; 0x3a
 8000c94:	d801      	bhi.n	8000c9a <timeSet+0xb6>
 8000c96:	3601      	adds	r6, #1
 8000c98:	b2f6      	uxtb	r6, r6
				case 5: if(setTime.sec < 59) setTime.sec++;
 8000c9a:	9a02      	ldr	r2, [sp, #8]
 8000c9c:	2a3a      	cmp	r2, #58	; 0x3a
 8000c9e:	d802      	bhi.n	8000ca6 <timeSet+0xc2>
 8000ca0:	3201      	adds	r2, #1
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	9202      	str	r2, [sp, #8]
				}
				if(setDate.day > lastDay[setDate.month - 1]) setDate.day = lastDay[setDate.month - 1];
 8000ca6:	4a5b      	ldr	r2, [pc, #364]	; (8000e14 <timeSet+0x230>)
 8000ca8:	19d2      	adds	r2, r2, r7
 8000caa:	3a01      	subs	r2, #1
 8000cac:	7810      	ldrb	r0, [r2, #0]
 8000cae:	1c02      	adds	r2, r0, #0
 8000cb0:	42a0      	cmp	r0, r4
 8000cb2:	d900      	bls.n	8000cb6 <timeSet+0xd2>
 8000cb4:	1c22      	adds	r2, r4, #0
 8000cb6:	b2d4      	uxtb	r4, r2
				case 3: if(setTime.hour) setTime.hour--;
				case 4: if(setTime.min) setTime.min--;
				case 5: if(setTime.sec) setTime.sec--;
				}
			}
			if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 8000cb8:	392d      	subs	r1, #45	; 0x2d
 8000cba:	39ff      	subs	r1, #255	; 0xff
 8000cbc:	4a56      	ldr	r2, [pc, #344]	; (8000e18 <timeSet+0x234>)
 8000cbe:	b289      	uxth	r1, r1
 8000cc0:	4291      	cmp	r1, r2
 8000cc2:	d804      	bhi.n	8000cce <timeSet+0xea>
 8000cc4:	3b2d      	subs	r3, #45	; 0x2d
 8000cc6:	3bff      	subs	r3, #255	; 0xff
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d902      	bls.n	8000cd4 <timeSet+0xf0>
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <timeSet+0x238>)
 8000cd2:	701a      	strb	r2, [r3, #0]
		}
		if(JOY_P){
 8000cd4:	20a0      	movs	r0, #160	; 0xa0
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	f003 f907 	bl	8003eec <HAL_GPIO_ReadPin>
			if(!oldsw){
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <timeSet+0x23c>)
 8000ce0:	781d      	ldrb	r5, [r3, #0]
 8000ce2:	4305      	orrs	r5, r0
 8000ce4:	b2ed      	uxtb	r5, r5
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d145      	bne.n	8000d76 <timeSet+0x192>
				swS();
 8000cea:	f7ff fd9b 	bl	8000824 <swS>
				DS3231_set_date(setDate.day, setDate.month, setDate.year);
 8000cee:	466b      	mov	r3, sp
 8000cf0:	0039      	movs	r1, r7
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	0020      	movs	r0, r4
 8000cf6:	f7ff fc8b 	bl	8000610 <DS3231_set_date>
				DS3231_set_time(setTime.sec, setTime.min, setTime.hour);
 8000cfa:	0031      	movs	r1, r6
 8000cfc:	9a01      	ldr	r2, [sp, #4]
 8000cfe:	9802      	ldr	r0, [sp, #8]
 8000d00:	f7ff fbf0 	bl	80004e4 <DS3231_set_time>
				udf = true;
 8000d04:	2101      	movs	r1, #1
 8000d06:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <timeSet+0x238>)
				eepWriteData(0, true);
 8000d08:	0028      	movs	r0, r5
				udf = true;
 8000d0a:	7019      	strb	r1, [r3, #0]
				eepWriteData(0, true);
 8000d0c:	f002 fa8e 	bl	800322c <eepWriteData>
				SSD1306_Clear();
 8000d10:	f002 f9d6 	bl	80030c0 <SSD1306_Clear>
			SSD1306_PutsXY(0, 4, bf, 1);
			SSD1306_UpdateScreen();
			free(bf);
		}
	}
}
 8000d14:	b005      	add	sp, #20
 8000d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(JOY_D){
 8000d18:	2296      	movs	r2, #150	; 0x96
 8000d1a:	0052      	lsls	r2, r2, #1
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d2cb      	bcs.n	8000cb8 <timeSet+0xd4>
				switch(sel){
 8000d20:	4a3a      	ldr	r2, [pc, #232]	; (8000e0c <timeSet+0x228>)
 8000d22:	7810      	ldrb	r0, [r2, #0]
 8000d24:	2805      	cmp	r0, #5
 8000d26:	d8c7      	bhi.n	8000cb8 <timeSet+0xd4>
 8000d28:	f7ff f9f8 	bl	800011c <__gnu_thumb1_case_uqi>
 8000d2c:	14100c03 	.word	0x14100c03
 8000d30:	1e1a      	.short	0x1e1a
				case 0: if(setDate.year > 2000) setDate.year--;
 8000d32:	22fa      	movs	r2, #250	; 0xfa
 8000d34:	9800      	ldr	r0, [sp, #0]
 8000d36:	00d2      	lsls	r2, r2, #3
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	d903      	bls.n	8000d44 <timeSet+0x160>
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	3a01      	subs	r2, #1
 8000d40:	b292      	uxth	r2, r2
 8000d42:	9200      	str	r2, [sp, #0]
				case 1: if(setDate.month > 1) setDate.month--;
 8000d44:	2f01      	cmp	r7, #1
 8000d46:	d001      	beq.n	8000d4c <timeSet+0x168>
 8000d48:	3f01      	subs	r7, #1
 8000d4a:	b2ff      	uxtb	r7, r7
				case 2: if(setDate.day > 1) setDate.day--;
 8000d4c:	2c01      	cmp	r4, #1
 8000d4e:	d901      	bls.n	8000d54 <timeSet+0x170>
 8000d50:	3c01      	subs	r4, #1
 8000d52:	b2e4      	uxtb	r4, r4
				case 3: if(setTime.hour) setTime.hour--;
 8000d54:	9a01      	ldr	r2, [sp, #4]
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d002      	beq.n	8000d60 <timeSet+0x17c>
 8000d5a:	3a01      	subs	r2, #1
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	9201      	str	r2, [sp, #4]
				case 4: if(setTime.min) setTime.min--;
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d001      	beq.n	8000d68 <timeSet+0x184>
 8000d64:	3e01      	subs	r6, #1
 8000d66:	b2f6      	uxtb	r6, r6
				case 5: if(setTime.sec) setTime.sec--;
 8000d68:	9a02      	ldr	r2, [sp, #8]
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d0a4      	beq.n	8000cb8 <timeSet+0xd4>
 8000d6e:	3a01      	subs	r2, #1
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	9202      	str	r2, [sp, #8]
 8000d74:	e7a0      	b.n	8000cb8 <timeSet+0xd4>
		if(udf){
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <timeSet+0x238>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d100      	bne.n	8000d80 <timeSet+0x19c>
 8000d7e:	e742      	b.n	8000c06 <timeSet+0x22>
			String bf = (String)calloc(0, sizeof(char) * 12);
 8000d80:	210c      	movs	r1, #12
 8000d82:	2000      	movs	r0, #0
 8000d84:	f004 fc3a 	bl	80055fc <calloc>
			udf = false;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <timeSet+0x238>)
			String bf = (String)calloc(0, sizeof(char) * 12);
 8000d8c:	0005      	movs	r5, r0
			udf = false;
 8000d8e:	701a      	strb	r2, [r3, #0]
			basicScreen();
 8000d90:	f7ff fd3a 	bl	8000808 <basicScreen>
			SSD1306_PutsXY(0, 0, "#Time Set", 0);
 8000d94:	2300      	movs	r3, #0
 8000d96:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <timeSet+0x240>)
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff fd24 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_PutsXY(0, 2, "RTC Time setting.", 1);
 8000da0:	2301      	movs	r3, #1
 8000da2:	2000      	movs	r0, #0
 8000da4:	2102      	movs	r1, #2
 8000da6:	4a20      	ldr	r2, [pc, #128]	; (8000e28 <timeSet+0x244>)
 8000da8:	f7ff fd1e 	bl	80007e8 <SSD1306_PutsXY>
			switch(sel){
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <timeSet+0x228>)
 8000dae:	7818      	ldrb	r0, [r3, #0]
 8000db0:	2805      	cmp	r0, #5
 8000db2:	d809      	bhi.n	8000dc8 <timeSet+0x1e4>
 8000db4:	f7ff f9b2 	bl	800011c <__gnu_thumb1_case_uqi>
 8000db8:	1a171403 	.word	0x1a171403
 8000dbc:	201d      	.short	0x201d
			case 0: sprintf(bf, "Year=%04ld", setDate.year); break;
 8000dbe:	9a00      	ldr	r2, [sp, #0]
 8000dc0:	491a      	ldr	r1, [pc, #104]	; (8000e2c <timeSet+0x248>)
			case 5: sprintf(bf, "Sec=%02ld", setTime.sec); break;
 8000dc2:	0028      	movs	r0, r5
 8000dc4:	f004 fd9c 	bl	8005900 <siprintf>
			SSD1306_PutsXY(0, 4, bf, 1);
 8000dc8:	2301      	movs	r3, #1
 8000dca:	002a      	movs	r2, r5
 8000dcc:	2104      	movs	r1, #4
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff fd0a 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_UpdateScreen();
 8000dd4:	f002 f952 	bl	800307c <SSD1306_UpdateScreen>
			free(bf);
 8000dd8:	0028      	movs	r0, r5
 8000dda:	f004 fc43 	bl	8005664 <free>
 8000dde:	e712      	b.n	8000c06 <timeSet+0x22>
			case 1: sprintf(bf, "Month=%02ld", setDate.month); break;
 8000de0:	003a      	movs	r2, r7
 8000de2:	4913      	ldr	r1, [pc, #76]	; (8000e30 <timeSet+0x24c>)
 8000de4:	e7ed      	b.n	8000dc2 <timeSet+0x1de>
			case 2: sprintf(bf, "Day=%02ld", setDate.day); break;
 8000de6:	0022      	movs	r2, r4
 8000de8:	4912      	ldr	r1, [pc, #72]	; (8000e34 <timeSet+0x250>)
 8000dea:	e7ea      	b.n	8000dc2 <timeSet+0x1de>
			case 3: sprintf(bf, "Hour=%02ld", setTime.hour); break;
 8000dec:	9a01      	ldr	r2, [sp, #4]
 8000dee:	4912      	ldr	r1, [pc, #72]	; (8000e38 <timeSet+0x254>)
 8000df0:	e7e7      	b.n	8000dc2 <timeSet+0x1de>
			case 4: sprintf(bf, "Min=%02ld", setTime.min); break;
 8000df2:	0032      	movs	r2, r6
 8000df4:	4911      	ldr	r1, [pc, #68]	; (8000e3c <timeSet+0x258>)
 8000df6:	e7e4      	b.n	8000dc2 <timeSet+0x1de>
			case 5: sprintf(bf, "Sec=%02ld", setTime.sec); break;
 8000df8:	9a02      	ldr	r2, [sp, #8]
 8000dfa:	4911      	ldr	r1, [pc, #68]	; (8000e40 <timeSet+0x25c>)
 8000dfc:	e7e1      	b.n	8000dc2 <timeSet+0x1de>
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	000007e6 	.word	0x000007e6
 8000e04:	20000957 	.word	0x20000957
 8000e08:	2000040c 	.word	0x2000040c
 8000e0c:	20000958 	.word	0x20000958
 8000e10:	00000832 	.word	0x00000832
 8000e14:	20000009 	.word	0x20000009
 8000e18:	00000e74 	.word	0x00000e74
 8000e1c:	2000001a 	.word	0x2000001a
 8000e20:	20000015 	.word	0x20000015
 8000e24:	080069e5 	.word	0x080069e5
 8000e28:	080069ef 	.word	0x080069ef
 8000e2c:	08006a01 	.word	0x08006a01
 8000e30:	08006a0c 	.word	0x08006a0c
 8000e34:	08006a18 	.word	0x08006a18
 8000e38:	08006a22 	.word	0x08006a22
 8000e3c:	08006a2d 	.word	0x08006a2d
 8000e40:	08006a37 	.word	0x08006a37

08000e44 <mainM>:

MODE mainM(){
 8000e44:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 8000e46:	4b78      	ldr	r3, [pc, #480]	; (8001028 <mainM+0x1e4>)
MODE mainM(){
 8000e48:	b085      	sub	sp, #20
	if(firstF){
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d023      	beq.n	8000e98 <mainM+0x54>
		firstF = false;
 8000e50:	2300      	movs	r3, #0
 8000e52:	4a75      	ldr	r2, [pc, #468]	; (8001028 <mainM+0x1e4>)
		basicScreen();
		for(uint8_t i = 0; i < 36; i++)
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8000e54:	2504      	movs	r5, #4
		firstF = false;
 8000e56:	7013      	strb	r3, [r2, #0]
		basicScreen();
 8000e58:	f7ff fcd6 	bl	8000808 <basicScreen>
		for(uint8_t i = 0; i < 36; i++)
 8000e5c:	2390      	movs	r3, #144	; 0x90
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8000e5e:	2601      	movs	r6, #1
 8000e60:	4c72      	ldr	r4, [pc, #456]	; (800102c <mainM+0x1e8>)
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	18e7      	adds	r7, r4, r3
 8000e66:	8963      	ldrh	r3, [r4, #10]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00d      	beq.n	8000e88 <mainM+0x44>
 8000e6c:	7921      	ldrb	r1, [r4, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	002b      	movs	r3, r5
 8000e72:	79a0      	ldrb	r0, [r4, #6]
 8000e74:	2901      	cmp	r1, #1
 8000e76:	d005      	beq.n	8000e84 <mainM+0x40>
 8000e78:	2903      	cmp	r1, #3
 8000e7a:	d000      	beq.n	8000e7e <mainM+0x3a>
 8000e7c:	e0cc      	b.n	8001018 <mainM+0x1d4>
 8000e7e:	002a      	movs	r2, r5
 8000e80:	2100      	movs	r1, #0
 8000e82:	2304      	movs	r3, #4
 8000e84:	f7ff fc58 	bl	8000738 <led_color>
		for(uint8_t i = 0; i < 36; i++)
 8000e88:	3410      	adds	r4, #16
 8000e8a:	42a7      	cmp	r7, r4
 8000e8c:	d1eb      	bne.n	8000e66 <mainM+0x22>
		led_update();
 8000e8e:	f7ff fc5f 	bl	8000750 <led_update>
		sel = 0;
 8000e92:	2200      	movs	r2, #0
 8000e94:	4b66      	ldr	r3, [pc, #408]	; (8001030 <mainM+0x1ec>)
 8000e96:	701a      	strb	r2, [r3, #0]
	}
	if(RE1){
 8000e98:	4b66      	ldr	r3, [pc, #408]	; (8001034 <mainM+0x1f0>)
 8000e9a:	4f67      	ldr	r7, [pc, #412]	; (8001038 <mainM+0x1f4>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b63      	cmp	r3, #99	; 0x63
 8000ea0:	d959      	bls.n	8000f56 <mainM+0x112>
		if(JOY_U && sel)sel--;
 8000ea2:	21fa      	movs	r1, #250	; 0xfa
 8000ea4:	4b65      	ldr	r3, [pc, #404]	; (800103c <mainM+0x1f8>)
 8000ea6:	0109      	lsls	r1, r1, #4
 8000ea8:	885a      	ldrh	r2, [r3, #2]
 8000eaa:	428a      	cmp	r2, r1
 8000eac:	d908      	bls.n	8000ec0 <mainM+0x7c>
 8000eae:	4a60      	ldr	r2, [pc, #384]	; (8001030 <mainM+0x1ec>)
 8000eb0:	7813      	ldrb	r3, [r2, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <mainM+0x76>
 8000eb6:	3b01      	subs	r3, #1
		if(JOY_D && sel < 4) sel++;
 8000eb8:	7013      	strb	r3, [r2, #0]
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	703b      	strb	r3, [r7, #0]
 8000ebe:	e010      	b.n	8000ee2 <mainM+0x9e>
		if(JOY_D && sel < 4) sel++;
 8000ec0:	2196      	movs	r1, #150	; 0x96
 8000ec2:	0049      	lsls	r1, r1, #1
 8000ec4:	428a      	cmp	r2, r1
 8000ec6:	d205      	bcs.n	8000ed4 <mainM+0x90>
 8000ec8:	4a59      	ldr	r2, [pc, #356]	; (8001030 <mainM+0x1ec>)
 8000eca:	7813      	ldrb	r3, [r2, #0]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d8f4      	bhi.n	8000eba <mainM+0x76>
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	e7f1      	b.n	8000eb8 <mainM+0x74>
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	4a5a      	ldr	r2, [pc, #360]	; (8001040 <mainM+0x1fc>)
 8000ed8:	3b2d      	subs	r3, #45	; 0x2d
 8000eda:	3bff      	subs	r3, #255	; 0xff
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d8eb      	bhi.n	8000eba <mainM+0x76>

		date.year = 0;
 8000ee2:	2500      	movs	r5, #0
 8000ee4:	4c57      	ldr	r4, [pc, #348]	; (8001044 <mainM+0x200>)
		DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 8000ee6:	0020      	movs	r0, r4
 8000ee8:	1ca2      	adds	r2, r4, #2
 8000eea:	1c61      	adds	r1, r4, #1
		date.year = 0;
 8000eec:	8065      	strh	r5, [r4, #2]
		DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 8000eee:	f7ff fbc7 	bl	8000680 <DS3231_get_date>
		DS3231_get_time(&time.sec, &time.min, &time.hour);
 8000ef2:	4e55      	ldr	r6, [pc, #340]	; (8001048 <mainM+0x204>)
 8000ef4:	0032      	movs	r2, r6
 8000ef6:	1c71      	adds	r1, r6, #1
 8000ef8:	1cb0      	adds	r0, r6, #2
 8000efa:	f7ff fb2b 	bl	8000554 <DS3231_get_time>
		date.year += 1992;
 8000efe:	22f9      	movs	r2, #249	; 0xf9
 8000f00:	8863      	ldrh	r3, [r4, #2]
 8000f02:	00d2      	lsls	r2, r2, #3
 8000f04:	189b      	adds	r3, r3, r2
 8000f06:	b29b      	uxth	r3, r3

		String bf = (String)calloc(0, sizeof(char) * 16);
 8000f08:	2110      	movs	r1, #16
 8000f0a:	0028      	movs	r0, r5
		date.year += 1992;
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	8063      	strh	r3, [r4, #2]
		String bf = (String)calloc(0, sizeof(char) * 16);
 8000f10:	f004 fb74 	bl	80055fc <calloc>
 8000f14:	0005      	movs	r5, r0
		sprintf(bf, "%04d.%02d.%02d", date.year, date.month, date.day);
 8000f16:	7822      	ldrb	r2, [r4, #0]
 8000f18:	7863      	ldrb	r3, [r4, #1]
 8000f1a:	494c      	ldr	r1, [pc, #304]	; (800104c <mainM+0x208>)
 8000f1c:	9200      	str	r2, [sp, #0]
 8000f1e:	9a03      	ldr	r2, [sp, #12]
 8000f20:	f004 fcee 	bl	8005900 <siprintf>
		SSD1306_PutsXY(11, 3, bf, 1);
 8000f24:	2301      	movs	r3, #1
 8000f26:	002a      	movs	r2, r5
 8000f28:	2103      	movs	r1, #3
 8000f2a:	200b      	movs	r0, #11
 8000f2c:	f7ff fc5c 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "%02d:%02d:%02d", time.hour, time.min, time.sec);
 8000f30:	78b1      	ldrb	r1, [r6, #2]
 8000f32:	7873      	ldrb	r3, [r6, #1]
 8000f34:	7832      	ldrb	r2, [r6, #0]
 8000f36:	0028      	movs	r0, r5
 8000f38:	9100      	str	r1, [sp, #0]
 8000f3a:	4945      	ldr	r1, [pc, #276]	; (8001050 <mainM+0x20c>)
 8000f3c:	f004 fce0 	bl	8005900 <siprintf>
		SSD1306_PutsXY(13, 4, bf, 1);
 8000f40:	200d      	movs	r0, #13
 8000f42:	2301      	movs	r3, #1
 8000f44:	002a      	movs	r2, r5
 8000f46:	2104      	movs	r1, #4
 8000f48:	f7ff fc4e 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 8000f4c:	f002 f896 	bl	800307c <SSD1306_UpdateScreen>
		free(bf);
 8000f50:	0028      	movs	r0, r5
 8000f52:	f004 fb87 	bl	8005664 <free>
	}
	if(JOY_P){
 8000f56:	20a0      	movs	r0, #160	; 0xa0
 8000f58:	2104      	movs	r1, #4
 8000f5a:	05c0      	lsls	r0, r0, #23
 8000f5c:	f002 ffc6 	bl	8003eec <HAL_GPIO_ReadPin>
		if(!oldsw){
 8000f60:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <mainM+0x210>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4318      	orrs	r0, r3
 8000f66:	b2c0      	uxtb	r0, r0
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d11f      	bne.n	8000fac <mainM+0x168>
			swS();
 8000f6c:	f7ff fc5a 	bl	8000824 <swS>
			if(ptC || !sel){
 8000f70:	4b39      	ldr	r3, [pc, #228]	; (8001058 <mainM+0x214>)
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <mainM+0x1ec>)
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d102      	bne.n	8000f80 <mainM+0x13c>
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d112      	bne.n	8000fa6 <mainM+0x162>
				udf = true;
 8000f80:	2001      	movs	r0, #1
				firstF = true;
 8000f82:	4a29      	ldr	r2, [pc, #164]	; (8001028 <mainM+0x1e4>)
				return sel == 0 ? PSAVE : sel == 1 ? PUSE : sel == 2 ? PFIND : sel == 3 ? PARTITION : PLOG;
 8000f84:	781b      	ldrb	r3, [r3, #0]
				udf = true;
 8000f86:	7038      	strb	r0, [r7, #0]
				firstF = true;
 8000f88:	7010      	strb	r0, [r2, #0]
				return sel == 0 ? PSAVE : sel == 1 ? PUSE : sel == 2 ? PFIND : sel == 3 ? PARTITION : PLOG;
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d009      	beq.n	8000fa2 <mainM+0x15e>
 8000f8e:	1800      	adds	r0, r0, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d006      	beq.n	8000fa2 <mainM+0x15e>
 8000f94:	3003      	adds	r0, #3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d003      	beq.n	8000fa2 <mainM+0x15e>
 8000f9a:	1ed8      	subs	r0, r3, #3
 8000f9c:	1e43      	subs	r3, r0, #1
 8000f9e:	4198      	sbcs	r0, r3
 8000fa0:	3007      	adds	r0, #7
		SSD1306_PutsXY(1, 6, "Part log", 1);

		SSD1306_PutsXY(0, sel + 2, ">", 1);
	}
	return MAIN;
}
 8000fa2:	b005      	add	sp, #20
 8000fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			}else buzFlag = 1;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	; (800105c <mainM+0x218>)
 8000faa:	701a      	strb	r2, [r3, #0]
	if(udf){
 8000fac:	7838      	ldrb	r0, [r7, #0]
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d0f7      	beq.n	8000fa2 <mainM+0x15e>
		udf = false;
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	703c      	strb	r4, [r7, #0]
		basicScreen();
 8000fb6:	f7ff fc27 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Menu", 0);
 8000fba:	0023      	movs	r3, r4
 8000fbc:	0021      	movs	r1, r4
 8000fbe:	0020      	movs	r0, r4
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <mainM+0x21c>)
 8000fc2:	f7ff fc11 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 2, "Part save", 1);
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2102      	movs	r1, #2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <mainM+0x220>)
 8000fce:	f7ff fc0b 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 3, "Part use", 1);
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	4a23      	ldr	r2, [pc, #140]	; (8001068 <mainM+0x224>)
 8000fda:	f7ff fc05 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 4, "Part find", 1);
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <mainM+0x228>)
 8000fe6:	f7ff fbff 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 5, "Partition", 1);
 8000fea:	2301      	movs	r3, #1
 8000fec:	2105      	movs	r1, #5
 8000fee:	0018      	movs	r0, r3
 8000ff0:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <mainM+0x22c>)
 8000ff2:	f7ff fbf9 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 6, "Part log", 1);
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	2106      	movs	r1, #6
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <mainM+0x230>)
 8000ffe:	f7ff fbf3 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, sel + 2, ">", 1);
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <mainM+0x1ec>)
 8001004:	0020      	movs	r0, r4
 8001006:	7819      	ldrb	r1, [r3, #0]
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <mainM+0x234>)
 800100a:	3102      	adds	r1, #2
 800100c:	2301      	movs	r3, #1
 800100e:	b2c9      	uxtb	r1, r1
 8001010:	f7ff fbea 	bl	80007e8 <SSD1306_PutsXY>
	return MAIN;
 8001014:	0020      	movs	r0, r4
 8001016:	e7c4      	b.n	8000fa2 <mainM+0x15e>
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8001018:	0032      	movs	r2, r6
 800101a:	2902      	cmp	r1, #2
 800101c:	d100      	bne.n	8001020 <mainM+0x1dc>
 800101e:	002a      	movs	r2, r5
 8001020:	0029      	movs	r1, r5
 8001022:	2300      	movs	r3, #0
 8001024:	e72e      	b.n	8000e84 <mainM+0x40>
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	20000008 	.word	0x20000008
 800102c:	2000070c 	.word	0x2000070c
 8001030:	20000958 	.word	0x20000958
 8001034:	20000957 	.word	0x20000957
 8001038:	2000001a 	.word	0x2000001a
 800103c:	2000040c 	.word	0x2000040c
 8001040:	00000e74 	.word	0x00000e74
 8001044:	20000414 	.word	0x20000414
 8001048:	2000095e 	.word	0x2000095e
 800104c:	08006a41 	.word	0x08006a41
 8001050:	08006a50 	.word	0x08006a50
 8001054:	20000015 	.word	0x20000015
 8001058:	2000094c 	.word	0x2000094c
 800105c:	20000412 	.word	0x20000412
 8001060:	08006a5f 	.word	0x08006a5f
 8001064:	08006a65 	.word	0x08006a65
 8001068:	08006a6f 	.word	0x08006a6f
 800106c:	08006a78 	.word	0x08006a78
 8001070:	08006c11 	.word	0x08006c11
 8001074:	08006a82 	.word	0x08006a82
 8001078:	08006a8b 	.word	0x08006a8b

0800107c <partS>:

MODE partS(){
 800107c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(firstF){
 800107e:	4bb6      	ldr	r3, [pc, #728]	; (8001358 <partS+0x2dc>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01a      	beq.n	80010bc <partS+0x40>
		firstF = false;
 8001086:	2200      	movs	r2, #0
 8001088:	4bb3      	ldr	r3, [pc, #716]	; (8001358 <partS+0x2dc>)

		sel = 0;
		tempX = 1;
		tempY = 1;
		ledPos = 30;
 800108a:	201e      	movs	r0, #30
		firstF = false;
 800108c:	701a      	strb	r2, [r3, #0]
		sel = 0;
 800108e:	4bb3      	ldr	r3, [pc, #716]	; (800135c <partS+0x2e0>)
		tempX = 1;
 8001090:	49b3      	ldr	r1, [pc, #716]	; (8001360 <partS+0x2e4>)
		sel = 0;
 8001092:	701a      	strb	r2, [r3, #0]
		tempX = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	700b      	strb	r3, [r1, #0]
		tempY = 1;
 8001098:	49b2      	ldr	r1, [pc, #712]	; (8001364 <partS+0x2e8>)
 800109a:	700b      	strb	r3, [r1, #0]
		ledPos = 30;
 800109c:	49b2      	ldr	r1, [pc, #712]	; (8001368 <partS+0x2ec>)
 800109e:	7008      	strb	r0, [r1, #0]

		ptInNum = 1;
 80010a0:	49b2      	ldr	r1, [pc, #712]	; (800136c <partS+0x2f0>)
 80010a2:	700b      	strb	r3, [r1, #0]
		pt[ptC].cate = 0;
 80010a4:	4bb2      	ldr	r3, [pc, #712]	; (8001370 <partS+0x2f4>)
 80010a6:	7819      	ldrb	r1, [r3, #0]
 80010a8:	4bb2      	ldr	r3, [pc, #712]	; (8001374 <partS+0x2f8>)
 80010aa:	0109      	lsls	r1, r1, #4
 80010ac:	185b      	adds	r3, r3, r1
 80010ae:	711a      	strb	r2, [r3, #4]
		pt[ptC].max = 200;
 80010b0:	32c8      	adds	r2, #200	; 0xc8
 80010b2:	819a      	strh	r2, [r3, #12]

		led_clear();
 80010b4:	f7ff fb76 	bl	80007a4 <led_clear>
		led_update();
 80010b8:	f7ff fb4a 	bl	8000750 <led_update>
	}
	if(RE1){
 80010bc:	4bae      	ldr	r3, [pc, #696]	; (8001378 <partS+0x2fc>)
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	2a63      	cmp	r2, #99	; 0x63
 80010c2:	d92b      	bls.n	800111c <partS+0xa0>
		uint8_t i;
		reC = 0;
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
		if(ptSetPosF){
 80010c8:	4aac      	ldr	r2, [pc, #688]	; (800137c <partS+0x300>)
			if(JOY_R){
 80010ca:	4cad      	ldr	r4, [pc, #692]	; (8001380 <partS+0x304>)
		if(ptSetPosF){
 80010cc:	7811      	ldrb	r1, [r2, #0]
 80010ce:	22fa      	movs	r2, #250	; 0xfa
			if(JOY_R){
 80010d0:	8823      	ldrh	r3, [r4, #0]
 80010d2:	0112      	lsls	r2, r2, #4
		if(ptSetPosF){
 80010d4:	2900      	cmp	r1, #0
 80010d6:	d100      	bne.n	80010da <partS+0x5e>
 80010d8:	e0bd      	b.n	8001256 <partS+0x1da>
			if(JOY_R){
 80010da:	4293      	cmp	r3, r2
 80010dc:	d95a      	bls.n	8001194 <partS+0x118>
				if(tempX < 6){
 80010de:	4ea0      	ldr	r6, [pc, #640]	; (8001360 <partS+0x2e4>)
 80010e0:	7833      	ldrb	r3, [r6, #0]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d96f      	bls.n	80011c6 <partS+0x14a>
							break;
						}
					}
				}
			}
			if(JOY_U){
 80010e6:	23fa      	movs	r3, #250	; 0xfa
 80010e8:	8862      	ldrh	r2, [r4, #2]
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d800      	bhi.n	80010f2 <partS+0x76>
 80010f0:	e089      	b.n	8001206 <partS+0x18a>
				if(tempY < 6){
 80010f2:	4e9c      	ldr	r6, [pc, #624]	; (8001364 <partS+0x2e8>)
 80010f4:	7833      	ldrb	r3, [r6, #0]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d800      	bhi.n	80010fc <partS+0x80>
 80010fa:	e0a2      	b.n	8001242 <partS+0x1c6>
				if(sel == 3 && pt[ptC].pos) pt[ptC].pos--;
			}
			if(JOY_U && sel) sel--;
			if(JOY_D && sel < 4) sel++;
		}
		if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 80010fc:	8823      	ldrh	r3, [r4, #0]
 80010fe:	4aa1      	ldr	r2, [pc, #644]	; (8001384 <partS+0x308>)
 8001100:	3b2d      	subs	r3, #45	; 0x2d
 8001102:	3bff      	subs	r3, #255	; 0xff
 8001104:	b29b      	uxth	r3, r3
 8001106:	4293      	cmp	r3, r2
 8001108:	d805      	bhi.n	8001116 <partS+0x9a>
 800110a:	8863      	ldrh	r3, [r4, #2]
 800110c:	3b2d      	subs	r3, #45	; 0x2d
 800110e:	3bff      	subs	r3, #255	; 0xff
 8001110:	b29b      	uxth	r3, r3
 8001112:	4293      	cmp	r3, r2
 8001114:	d902      	bls.n	800111c <partS+0xa0>
 8001116:	2201      	movs	r2, #1
 8001118:	4b9b      	ldr	r3, [pc, #620]	; (8001388 <partS+0x30c>)
 800111a:	701a      	strb	r2, [r3, #0]
	}
	if(JOY_P){
 800111c:	20a0      	movs	r0, #160	; 0xa0
 800111e:	2104      	movs	r1, #4
 8001120:	05c0      	lsls	r0, r0, #23
 8001122:	f002 fee3 	bl	8003eec <HAL_GPIO_ReadPin>
		if(!oldsw){
 8001126:	4b99      	ldr	r3, [pc, #612]	; (800138c <partS+0x310>)
 8001128:	4f97      	ldr	r7, [pc, #604]	; (8001388 <partS+0x30c>)
 800112a:	781c      	ldrb	r4, [r3, #0]
 800112c:	4304      	orrs	r4, r0
 800112e:	b2e4      	uxtb	r4, r4
 8001130:	2c00      	cmp	r4, #0
 8001132:	d115      	bne.n	8001160 <partS+0xe4>
			swS();
 8001134:	f7ff fb76 	bl	8000824 <swS>
			if(sel == 1){
 8001138:	4b88      	ldr	r3, [pc, #544]	; (800135c <partS+0x2e0>)
 800113a:	781e      	ldrb	r6, [r3, #0]
 800113c:	2e01      	cmp	r6, #1
 800113e:	d000      	beq.n	8001142 <partS+0xc6>
 8001140:	e126      	b.n	8001390 <partS+0x314>
				udf = true;
				pt[ptC].name = (String)calloc(0, sizeof(char) * 11);
 8001142:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <partS+0x2f4>)
 8001144:	210b      	movs	r1, #11
 8001146:	0020      	movs	r0, r4
 8001148:	781d      	ldrb	r5, [r3, #0]
				udf = true;
 800114a:	703e      	strb	r6, [r7, #0]
				pt[ptC].name = (String)calloc(0, sizeof(char) * 11);
 800114c:	f004 fa56 	bl	80055fc <calloc>
 8001150:	4a88      	ldr	r2, [pc, #544]	; (8001374 <partS+0x2f8>)
 8001152:	012d      	lsls	r5, r5, #4
 8001154:	50a8      	str	r0, [r5, r2]
				textIn(false, pt[ptC].name, 10);
 8001156:	58a9      	ldr	r1, [r5, r2]
 8001158:	0020      	movs	r0, r4
 800115a:	220a      	movs	r2, #10
 800115c:	f7ff fbf2 	bl	8000944 <textIn>
					return MAIN;
				}
			}
		}
	}
	if(udf){
 8001160:	783b      	ldrb	r3, [r7, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d000      	beq.n	8001168 <partS+0xec>
 8001166:	e11d      	b.n	80013a4 <partS+0x328>
		SSD1306_PutsXY(0, sel + 3, ">", 1);

		free(bf);
		SSD1306_UpdateScreen();
	}
	return PSAVE;
 8001168:	2401      	movs	r4, #1
 800116a:	e1b3      	b.n	80014d4 <partS+0x458>
					for(i = 1; i <= (6 - tempX); i++){
 800116c:	3501      	adds	r5, #1
 800116e:	b2ed      	uxtb	r5, r5
 8001170:	7833      	ldrb	r3, [r6, #0]
 8001172:	1afb      	subs	r3, r7, r3
 8001174:	429d      	cmp	r5, r3
 8001176:	dc0d      	bgt.n	8001194 <partS+0x118>
						if(led_cmp((ledPos + i), 0, 4, 0) == 3){
 8001178:	4b7b      	ldr	r3, [pc, #492]	; (8001368 <partS+0x2ec>)
 800117a:	2204      	movs	r2, #4
 800117c:	7818      	ldrb	r0, [r3, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	1828      	adds	r0, r5, r0
 8001182:	0019      	movs	r1, r3
 8001184:	b2c0      	uxtb	r0, r0
 8001186:	f7ff fb17 	bl	80007b8 <led_cmp>
 800118a:	2803      	cmp	r0, #3
 800118c:	d1ee      	bne.n	800116c <partS+0xf0>
							tempX += i;
 800118e:	7833      	ldrb	r3, [r6, #0]
 8001190:	18ed      	adds	r5, r5, r3
 8001192:	7035      	strb	r5, [r6, #0]
			if(JOY_L){
 8001194:	2396      	movs	r3, #150	; 0x96
 8001196:	8822      	ldrh	r2, [r4, #0]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	429a      	cmp	r2, r3
 800119c:	d2a3      	bcs.n	80010e6 <partS+0x6a>
				if(tempX > 1){
 800119e:	4e70      	ldr	r6, [pc, #448]	; (8001360 <partS+0x2e4>)
 80011a0:	7833      	ldrb	r3, [r6, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d99f      	bls.n	80010e6 <partS+0x6a>
					for(i = 1; i < tempX; i++){
 80011a6:	2501      	movs	r5, #1
						if(led_cmp((ledPos - i), 0, 4, 0) == 3){
 80011a8:	4b6f      	ldr	r3, [pc, #444]	; (8001368 <partS+0x2ec>)
 80011aa:	2204      	movs	r2, #4
 80011ac:	7818      	ldrb	r0, [r3, #0]
 80011ae:	2300      	movs	r3, #0
 80011b0:	1b40      	subs	r0, r0, r5
 80011b2:	0019      	movs	r1, r3
 80011b4:	b2c0      	uxtb	r0, r0
 80011b6:	f7ff faff 	bl	80007b8 <led_cmp>
 80011ba:	2803      	cmp	r0, #3
 80011bc:	d106      	bne.n	80011cc <partS+0x150>
							tempX -= i;
 80011be:	7833      	ldrb	r3, [r6, #0]
 80011c0:	1b5d      	subs	r5, r3, r5
 80011c2:	7035      	strb	r5, [r6, #0]
							break;
 80011c4:	e78f      	b.n	80010e6 <partS+0x6a>
					for(i = 1; i <= (6 - tempX); i++){
 80011c6:	2501      	movs	r5, #1
 80011c8:	2706      	movs	r7, #6
 80011ca:	e7d1      	b.n	8001170 <partS+0xf4>
					for(i = 1; i < tempX; i++){
 80011cc:	3501      	adds	r5, #1
 80011ce:	7833      	ldrb	r3, [r6, #0]
 80011d0:	b2ed      	uxtb	r5, r5
 80011d2:	42ab      	cmp	r3, r5
 80011d4:	d8e8      	bhi.n	80011a8 <partS+0x12c>
 80011d6:	e786      	b.n	80010e6 <partS+0x6a>
					for(i = 1; i <= (6 - tempY); i++){
 80011d8:	3501      	adds	r5, #1
 80011da:	b2ed      	uxtb	r5, r5
 80011dc:	2206      	movs	r2, #6
 80011de:	7833      	ldrb	r3, [r6, #0]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	429d      	cmp	r5, r3
 80011e4:	dc0f      	bgt.n	8001206 <partS+0x18a>
						if(led_cmp(ledPos - (6 * i), 0, 4, 0) == 3){
 80011e6:	4b60      	ldr	r3, [pc, #384]	; (8001368 <partS+0x2ec>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	7818      	ldrb	r0, [r3, #0]
 80011ec:	003b      	movs	r3, r7
 80011ee:	436b      	muls	r3, r5
 80011f0:	18c0      	adds	r0, r0, r3
 80011f2:	2300      	movs	r3, #0
 80011f4:	b2c0      	uxtb	r0, r0
 80011f6:	0019      	movs	r1, r3
 80011f8:	f7ff fade 	bl	80007b8 <led_cmp>
 80011fc:	2803      	cmp	r0, #3
 80011fe:	d1eb      	bne.n	80011d8 <partS+0x15c>
							tempY += i;
 8001200:	7833      	ldrb	r3, [r6, #0]
 8001202:	18ed      	adds	r5, r5, r3
 8001204:	7035      	strb	r5, [r6, #0]
			if(JOY_D){
 8001206:	2396      	movs	r3, #150	; 0x96
 8001208:	8862      	ldrh	r2, [r4, #2]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	429a      	cmp	r2, r3
 800120e:	d300      	bcc.n	8001212 <partS+0x196>
 8001210:	e774      	b.n	80010fc <partS+0x80>
				if(tempY > 1){
 8001212:	4e54      	ldr	r6, [pc, #336]	; (8001364 <partS+0x2e8>)
 8001214:	7833      	ldrb	r3, [r6, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d800      	bhi.n	800121c <partS+0x1a0>
 800121a:	e76f      	b.n	80010fc <partS+0x80>
					for(i = 1; i <=  tempY; i++){
 800121c:	2501      	movs	r5, #1
						if(led_cmp(ledPos +(6 * i), 0, 4, 0) == 3){
 800121e:	2706      	movs	r7, #6
 8001220:	4b51      	ldr	r3, [pc, #324]	; (8001368 <partS+0x2ec>)
 8001222:	2204      	movs	r2, #4
 8001224:	7818      	ldrb	r0, [r3, #0]
 8001226:	003b      	movs	r3, r7
 8001228:	436b      	muls	r3, r5
 800122a:	18c0      	adds	r0, r0, r3
 800122c:	2300      	movs	r3, #0
 800122e:	b2c0      	uxtb	r0, r0
 8001230:	0019      	movs	r1, r3
 8001232:	f7ff fac1 	bl	80007b8 <led_cmp>
 8001236:	2803      	cmp	r0, #3
 8001238:	d107      	bne.n	800124a <partS+0x1ce>
							tempY -= i;
 800123a:	7833      	ldrb	r3, [r6, #0]
 800123c:	1b5d      	subs	r5, r3, r5
 800123e:	7035      	strb	r5, [r6, #0]
							break;
 8001240:	e75c      	b.n	80010fc <partS+0x80>
						if(led_cmp(ledPos - (6 * i), 0, 4, 0) == 3){
 8001242:	2706      	movs	r7, #6
					for(i = 1; i <= (6 - tempY); i++){
 8001244:	2501      	movs	r5, #1
						if(led_cmp(ledPos - (6 * i), 0, 4, 0) == 3){
 8001246:	427f      	negs	r7, r7
 8001248:	e7c8      	b.n	80011dc <partS+0x160>
					for(i = 1; i <=  tempY; i++){
 800124a:	3501      	adds	r5, #1
 800124c:	7833      	ldrb	r3, [r6, #0]
 800124e:	b2ed      	uxtb	r5, r5
 8001250:	42ab      	cmp	r3, r5
 8001252:	d2e5      	bcs.n	8001220 <partS+0x1a4>
 8001254:	e752      	b.n	80010fc <partS+0x80>
			if(JOY_R){
 8001256:	4293      	cmp	r3, r2
 8001258:	d94c      	bls.n	80012f4 <partS+0x278>
				if(sel == 0){
 800125a:	4b40      	ldr	r3, [pc, #256]	; (800135c <partS+0x2e0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d11d      	bne.n	800129e <partS+0x222>
					if(pt[ptC].cate < 3) pt[ptC].cate++;
 8001262:	4b43      	ldr	r3, [pc, #268]	; (8001370 <partS+0x2f4>)
 8001264:	4a43      	ldr	r2, [pc, #268]	; (8001374 <partS+0x2f8>)
 8001266:	7819      	ldrb	r1, [r3, #0]
 8001268:	0109      	lsls	r1, r1, #4
 800126a:	1850      	adds	r0, r2, r1
 800126c:	7903      	ldrb	r3, [r0, #4]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d801      	bhi.n	8001276 <partS+0x1fa>
 8001272:	3301      	adds	r3, #1
					if(pt[ptC].cate) pt[ptC].cate--;
 8001274:	7103      	strb	r3, [r0, #4]
					pt[ptC].max = PTMAX;
 8001276:	1853      	adds	r3, r2, r1
 8001278:	7918      	ldrb	r0, [r3, #4]
 800127a:	23c8      	movs	r3, #200	; 0xc8
 800127c:	2800      	cmp	r0, #0
 800127e:	d006      	beq.n	800128e <partS+0x212>
 8001280:	3b64      	subs	r3, #100	; 0x64
 8001282:	2801      	cmp	r0, #1
 8001284:	d003      	beq.n	800128e <partS+0x212>
 8001286:	3b32      	subs	r3, #50	; 0x32
 8001288:	2802      	cmp	r0, #2
 800128a:	d000      	beq.n	800128e <partS+0x212>
 800128c:	3b28      	subs	r3, #40	; 0x28
 800128e:	1852      	adds	r2, r2, r1
 8001290:	8193      	strh	r3, [r2, #12]
					if(ptInNum > pt[ptC].max) ptInNum = pt[ptC].max;
 8001292:	4a36      	ldr	r2, [pc, #216]	; (800136c <partS+0x2f0>)
 8001294:	7811      	ldrb	r1, [r2, #0]
 8001296:	4299      	cmp	r1, r3
 8001298:	d905      	bls.n	80012a6 <partS+0x22a>
				if(sel == 2 && ptInNum > 1) ptInNum--;
 800129a:	7013      	strb	r3, [r2, #0]
 800129c:	e003      	b.n	80012a6 <partS+0x22a>
				if(sel == 2 && ptInNum < pt[ptC].max - pt[ptC].store) ptInNum++;
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d00e      	beq.n	80012c0 <partS+0x244>
				if(sel == 3 && pt[ptC].pos < 35) pt[ptC].pos++;
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d01b      	beq.n	80012de <partS+0x262>
			if(JOY_U && sel) sel--;
 80012a6:	22fa      	movs	r2, #250	; 0xfa
 80012a8:	8863      	ldrh	r3, [r4, #2]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d947      	bls.n	8001340 <partS+0x2c4>
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <partS+0x2e0>)
 80012b2:	7813      	ldrb	r3, [r2, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d100      	bne.n	80012ba <partS+0x23e>
 80012b8:	e720      	b.n	80010fc <partS+0x80>
 80012ba:	3b01      	subs	r3, #1
			if(JOY_D && sel < 4) sel++;
 80012bc:	7013      	strb	r3, [r2, #0]
 80012be:	e71d      	b.n	80010fc <partS+0x80>
				if(sel == 2 && ptInNum < pt[ptC].max - pt[ptC].store) ptInNum++;
 80012c0:	4a2b      	ldr	r2, [pc, #172]	; (8001370 <partS+0x2f4>)
 80012c2:	482a      	ldr	r0, [pc, #168]	; (800136c <partS+0x2f0>)
 80012c4:	7811      	ldrb	r1, [r2, #0]
 80012c6:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <partS+0x2f8>)
 80012c8:	0109      	lsls	r1, r1, #4
 80012ca:	1852      	adds	r2, r2, r1
 80012cc:	8991      	ldrh	r1, [r2, #12]
 80012ce:	7803      	ldrb	r3, [r0, #0]
 80012d0:	8952      	ldrh	r2, [r2, #10]
 80012d2:	1a8a      	subs	r2, r1, r2
 80012d4:	4293      	cmp	r3, r2
 80012d6:	dae6      	bge.n	80012a6 <partS+0x22a>
 80012d8:	3301      	adds	r3, #1
 80012da:	7003      	strb	r3, [r0, #0]
 80012dc:	e7e3      	b.n	80012a6 <partS+0x22a>
				if(sel == 3 && pt[ptC].pos < 35) pt[ptC].pos++;
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <partS+0x2f4>)
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <partS+0x2f8>)
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	189b      	adds	r3, r3, r2
 80012e8:	799a      	ldrb	r2, [r3, #6]
 80012ea:	2a22      	cmp	r2, #34	; 0x22
 80012ec:	d8db      	bhi.n	80012a6 <partS+0x22a>
 80012ee:	3201      	adds	r2, #1
				if(sel == 3 && pt[ptC].pos) pt[ptC].pos--;
 80012f0:	719a      	strb	r2, [r3, #6]
 80012f2:	e7d8      	b.n	80012a6 <partS+0x22a>
			if(JOY_L){
 80012f4:	2296      	movs	r2, #150	; 0x96
 80012f6:	0052      	lsls	r2, r2, #1
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d2d4      	bcs.n	80012a6 <partS+0x22a>
				if(sel == 0){
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <partS+0x2e0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <partS+0x29c>
					if(pt[ptC].cate) pt[ptC].cate--;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <partS+0x2f4>)
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <partS+0x2f8>)
 8001308:	7819      	ldrb	r1, [r3, #0]
 800130a:	0109      	lsls	r1, r1, #4
 800130c:	1850      	adds	r0, r2, r1
 800130e:	7903      	ldrb	r3, [r0, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0b0      	beq.n	8001276 <partS+0x1fa>
 8001314:	3b01      	subs	r3, #1
 8001316:	e7ad      	b.n	8001274 <partS+0x1f8>
				if(sel == 2 && ptInNum > 1) ptInNum--;
 8001318:	2b02      	cmp	r3, #2
 800131a:	d00b      	beq.n	8001334 <partS+0x2b8>
				if(sel == 3 && pt[ptC].pos) pt[ptC].pos--;
 800131c:	2b03      	cmp	r3, #3
 800131e:	d1c2      	bne.n	80012a6 <partS+0x22a>
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <partS+0x2f4>)
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <partS+0x2f8>)
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	189b      	adds	r3, r3, r2
 800132a:	799a      	ldrb	r2, [r3, #6]
 800132c:	2a00      	cmp	r2, #0
 800132e:	d0ba      	beq.n	80012a6 <partS+0x22a>
 8001330:	3a01      	subs	r2, #1
 8001332:	e7dd      	b.n	80012f0 <partS+0x274>
				if(sel == 2 && ptInNum > 1) ptInNum--;
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <partS+0x2f0>)
 8001336:	7813      	ldrb	r3, [r2, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d9b4      	bls.n	80012a6 <partS+0x22a>
 800133c:	3b01      	subs	r3, #1
 800133e:	e7ac      	b.n	800129a <partS+0x21e>
			if(JOY_D && sel < 4) sel++;
 8001340:	2296      	movs	r2, #150	; 0x96
 8001342:	0052      	lsls	r2, r2, #1
 8001344:	4293      	cmp	r3, r2
 8001346:	d300      	bcc.n	800134a <partS+0x2ce>
 8001348:	e6d8      	b.n	80010fc <partS+0x80>
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <partS+0x2e0>)
 800134c:	7813      	ldrb	r3, [r2, #0]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d900      	bls.n	8001354 <partS+0x2d8>
 8001352:	e6d3      	b.n	80010fc <partS+0x80>
 8001354:	3301      	adds	r3, #1
 8001356:	e7b1      	b.n	80012bc <partS+0x240>
 8001358:	20000008 	.word	0x20000008
 800135c:	20000958 	.word	0x20000958
 8001360:	2000095c 	.word	0x2000095c
 8001364:	2000095d 	.word	0x2000095d
 8001368:	200005ca 	.word	0x200005ca
 800136c:	20000954 	.word	0x20000954
 8001370:	2000094c 	.word	0x2000094c
 8001374:	2000070c 	.word	0x2000070c
 8001378:	20000957 	.word	0x20000957
 800137c:	20000955 	.word	0x20000955
 8001380:	2000040c 	.word	0x2000040c
 8001384:	00000e74 	.word	0x00000e74
 8001388:	2000001a 	.word	0x2000001a
 800138c:	20000015 	.word	0x20000015
			}else if(sel == 3){
 8001390:	2e03      	cmp	r6, #3
 8001392:	d143      	bne.n	800141c <partS+0x3a0>
				udf = true;
 8001394:	2301      	movs	r3, #1
				ptSetPosF ^= 1;
 8001396:	4995      	ldr	r1, [pc, #596]	; (80015ec <partS+0x570>)
				udf = true;
 8001398:	703b      	strb	r3, [r7, #0]
				ptSetPosF ^= 1;
 800139a:	780a      	ldrb	r2, [r1, #0]
 800139c:	4053      	eors	r3, r2
 800139e:	700b      	strb	r3, [r1, #0]
				if(!ptSetPosF) led_clear();
 80013a0:	2a01      	cmp	r2, #1
 80013a2:	d038      	beq.n	8001416 <partS+0x39a>
		String bf = (String)calloc(0, sizeof(char) * 11);
 80013a4:	210b      	movs	r1, #11
 80013a6:	2000      	movs	r0, #0
 80013a8:	f004 f928 	bl	80055fc <calloc>
		udf = false;
 80013ac:	2400      	movs	r4, #0
		String bf = (String)calloc(0, sizeof(char) * 11);
 80013ae:	0005      	movs	r5, r0
		udf = false;
 80013b0:	703c      	strb	r4, [r7, #0]
		basicScreen();
 80013b2:	f7ff fa29 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Save", 0);
 80013b6:	0023      	movs	r3, r4
 80013b8:	0021      	movs	r1, r4
 80013ba:	0020      	movs	r0, r4
 80013bc:	4a8c      	ldr	r2, [pc, #560]	; (80015f0 <partS+0x574>)
 80013be:	f7ff fa13 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "Pls input inFormation", 1);
 80013c2:	2301      	movs	r3, #1
 80013c4:	0020      	movs	r0, r4
 80013c6:	0019      	movs	r1, r3
 80013c8:	4a8a      	ldr	r2, [pc, #552]	; (80015f4 <partS+0x578>)
 80013ca:	f7ff fa0d 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 3, "Cate:", 1);
 80013ce:	2301      	movs	r3, #1
 80013d0:	2103      	movs	r1, #3
 80013d2:	0018      	movs	r0, r3
 80013d4:	4a88      	ldr	r2, [pc, #544]	; (80015f8 <partS+0x57c>)
 80013d6:	f7ff fa07 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_Puts(ptCate[pt[ptC].cate], &Font_6x8, 1);
 80013da:	4e88      	ldr	r6, [pc, #544]	; (80015fc <partS+0x580>)
 80013dc:	4c88      	ldr	r4, [pc, #544]	; (8001600 <partS+0x584>)
 80013de:	7833      	ldrb	r3, [r6, #0]
 80013e0:	4f88      	ldr	r7, [pc, #544]	; (8001604 <partS+0x588>)
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	18e3      	adds	r3, r4, r3
 80013e6:	791b      	ldrb	r3, [r3, #4]
 80013e8:	4887      	ldr	r0, [pc, #540]	; (8001608 <partS+0x58c>)
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	2201      	movs	r2, #1
 80013ee:	0039      	movs	r1, r7
 80013f0:	5818      	ldr	r0, [r3, r0]
 80013f2:	f001 fd3d 	bl	8002e70 <SSD1306_Puts>
		SSD1306_PutsXY(1, 4, "Name:", 1);
 80013f6:	2301      	movs	r3, #1
 80013f8:	4a84      	ldr	r2, [pc, #528]	; (800160c <partS+0x590>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	2104      	movs	r1, #4
 80013fe:	f7ff f9f3 	bl	80007e8 <SSD1306_PutsXY>
		if(!pt[ptC].name[0])SSD1306_Puts("(NONE)", &Font_6x8, 1);
 8001402:	7833      	ldrb	r3, [r6, #0]
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	591a      	ldr	r2, [r3, r4]
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	2a00      	cmp	r2, #0
 800140c:	d064      	beq.n	80014d8 <partS+0x45c>
		else SSD1306_Puts(pt[ptC].name, &Font_6x8, 1);
 800140e:	2201      	movs	r2, #1
 8001410:	0039      	movs	r1, r7
 8001412:	5918      	ldr	r0, [r3, r4]
 8001414:	e063      	b.n	80014de <partS+0x462>
				if(!ptSetPosF) led_clear();
 8001416:	f7ff f9c5 	bl	80007a4 <led_clear>
 800141a:	e6a1      	b.n	8001160 <partS+0xe4>
				if(!pt[ptC].name) buzFlag = 2;
 800141c:	4b77      	ldr	r3, [pc, #476]	; (80015fc <partS+0x580>)
 800141e:	4a78      	ldr	r2, [pc, #480]	; (8001600 <partS+0x584>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	589a      	ldr	r2, [r3, r2]
 8001426:	2a00      	cmp	r2, #0
 8001428:	d103      	bne.n	8001432 <partS+0x3b6>
 800142a:	4b79      	ldr	r3, [pc, #484]	; (8001610 <partS+0x594>)
 800142c:	3202      	adds	r2, #2
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e696      	b.n	8001160 <partS+0xe4>
				else if(sel == 4){
 8001432:	2e04      	cmp	r6, #4
 8001434:	d000      	beq.n	8001438 <partS+0x3bc>
 8001436:	e693      	b.n	8001160 <partS+0xe4>
					udf = true;
 8001438:	2201      	movs	r2, #1
					firstF = 1;
 800143a:	4976      	ldr	r1, [pc, #472]	; (8001614 <partS+0x598>)
					udf = true;
 800143c:	703a      	strb	r2, [r7, #0]
					firstF = 1;
 800143e:	700a      	strb	r2, [r1, #0]
					pt[ptC].pos = ledPos;
 8001440:	4a75      	ldr	r2, [pc, #468]	; (8001618 <partS+0x59c>)
 8001442:	496f      	ldr	r1, [pc, #444]	; (8001600 <partS+0x584>)
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	18cb      	adds	r3, r1, r3
 8001448:	719a      	strb	r2, [r3, #6]
					pt[ptC].store = ptInNum;
 800144a:	4a74      	ldr	r2, [pc, #464]	; (800161c <partS+0x5a0>)
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	815a      	strh	r2, [r3, #10]
					logShift();
 8001450:	f7ff fa66 	bl	8000920 <logShift>
					DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 8001454:	4d72      	ldr	r5, [pc, #456]	; (8001620 <partS+0x5a4>)
 8001456:	0028      	movs	r0, r5
 8001458:	1caa      	adds	r2, r5, #2
 800145a:	1c69      	adds	r1, r5, #1
 800145c:	f7ff f910 	bl	8000680 <DS3231_get_date>
					DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001460:	4f70      	ldr	r7, [pc, #448]	; (8001624 <partS+0x5a8>)
 8001462:	003a      	movs	r2, r7
 8001464:	1c79      	adds	r1, r7, #1
 8001466:	1cb8      	adds	r0, r7, #2
 8001468:	f7ff f874 	bl	8000554 <DS3231_get_time>
					pLog[0].workCate = 1;
 800146c:	4b6e      	ldr	r3, [pc, #440]	; (8001628 <partS+0x5ac>)
 800146e:	2201      	movs	r2, #1
					pLog[0].date = date;
 8001470:	0018      	movs	r0, r3
					pLog[0].workCate = 1;
 8001472:	701a      	strb	r2, [r3, #0]
					pLog[0].date = date;
 8001474:	0029      	movs	r1, r5
 8001476:	0032      	movs	r2, r6
 8001478:	3030      	adds	r0, #48	; 0x30
 800147a:	f004 f8fd 	bl	8005678 <memcpy>
					pLog[0].time = time;
 800147e:	486a      	ldr	r0, [pc, #424]	; (8001628 <partS+0x5ac>)
 8001480:	2203      	movs	r2, #3
 8001482:	0039      	movs	r1, r7
 8001484:	302d      	adds	r0, #45	; 0x2d
 8001486:	f004 f8f7 	bl	8005678 <memcpy>
					sprintf(pLog[0].content[0], "%s/%s", pt[ptC].name, ptCate[pt[ptC].cate]);
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <partS+0x580>)
 800148c:	495c      	ldr	r1, [pc, #368]	; (8001600 <partS+0x584>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4a5b      	ldr	r2, [pc, #364]	; (8001600 <partS+0x584>)
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	589a      	ldr	r2, [r3, r2]
 8001496:	18cb      	adds	r3, r1, r3
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	495b      	ldr	r1, [pc, #364]	; (8001608 <partS+0x58c>)
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	585b      	ldr	r3, [r3, r1]
 80014a0:	4862      	ldr	r0, [pc, #392]	; (800162c <partS+0x5b0>)
 80014a2:	4963      	ldr	r1, [pc, #396]	; (8001630 <partS+0x5b4>)
 80014a4:	f004 fa2c 	bl	8005900 <siprintf>
					sprintf(pLog[0].content[1], "%dpcs (%d,%d)", pt[ptC].store, tempX, tempY);
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <partS+0x580>)
 80014aa:	4955      	ldr	r1, [pc, #340]	; (8001600 <partS+0x584>)
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	4b61      	ldr	r3, [pc, #388]	; (8001634 <partS+0x5b8>)
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	188a      	adds	r2, r1, r2
 80014b4:	4960      	ldr	r1, [pc, #384]	; (8001638 <partS+0x5bc>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	7809      	ldrb	r1, [r1, #0]
 80014ba:	8952      	ldrh	r2, [r2, #10]
 80014bc:	485f      	ldr	r0, [pc, #380]	; (800163c <partS+0x5c0>)
 80014be:	9100      	str	r1, [sp, #0]
 80014c0:	495f      	ldr	r1, [pc, #380]	; (8001640 <partS+0x5c4>)
 80014c2:	f004 fa1d 	bl	8005900 <siprintf>
					ptC++;
 80014c6:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <partS+0x580>)
 80014c8:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <partS+0x580>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	7013      	strb	r3, [r2, #0]
					sel = 0;
 80014d0:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <partS+0x5c8>)
 80014d2:	701c      	strb	r4, [r3, #0]
}
 80014d4:	0020      	movs	r0, r4
 80014d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(!pt[ptC].name[0])SSD1306_Puts("(NONE)", &Font_6x8, 1);
 80014d8:	2201      	movs	r2, #1
 80014da:	0039      	movs	r1, r7
 80014dc:	485a      	ldr	r0, [pc, #360]	; (8001648 <partS+0x5cc>)
		else SSD1306_Puts(pt[ptC].name, &Font_6x8, 1);
 80014de:	f001 fcc7 	bl	8002e70 <SSD1306_Puts>
		if(pt[ptC].ptionC < 1) pt[ptC].ptionC = 1;
 80014e2:	7833      	ldrb	r3, [r6, #0]
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	18e3      	adds	r3, r4, r3
 80014e8:	7a1a      	ldrb	r2, [r3, #8]
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d101      	bne.n	80014f2 <partS+0x476>
 80014ee:	3201      	adds	r2, #1
 80014f0:	721a      	strb	r2, [r3, #8]
		SSD1306_PutsXY(1, 5, "Store:", 1);
 80014f2:	2301      	movs	r3, #1
 80014f4:	2105      	movs	r1, #5
 80014f6:	0018      	movs	r0, r3
 80014f8:	4a54      	ldr	r2, [pc, #336]	; (800164c <partS+0x5d0>)
 80014fa:	f7ff f975 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "%d/%d", ptInNum, pt[ptC].max * pt[ptC].ptionC);
 80014fe:	7832      	ldrb	r2, [r6, #0]
 8001500:	0028      	movs	r0, r5
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	18a2      	adds	r2, r4, r2
 8001506:	8991      	ldrh	r1, [r2, #12]
 8001508:	7a13      	ldrb	r3, [r2, #8]
 800150a:	4a44      	ldr	r2, [pc, #272]	; (800161c <partS+0x5a0>)
 800150c:	434b      	muls	r3, r1
 800150e:	7812      	ldrb	r2, [r2, #0]
 8001510:	494f      	ldr	r1, [pc, #316]	; (8001650 <partS+0x5d4>)
 8001512:	f004 f9f5 	bl	8005900 <siprintf>
		SSD1306_Puts(bf, &Font_6x8, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	0039      	movs	r1, r7
 800151a:	0028      	movs	r0, r5
 800151c:	f001 fca8 	bl	8002e70 <SSD1306_Puts>
		if(ptSetPosF){
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <partS+0x570>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d031      	beq.n	800158c <partS+0x510>
			led_clear();
 8001528:	f7ff f93c 	bl	80007a4 <led_clear>
			for(uint8_t i = 0; i < 36; i++){
 800152c:	2600      	movs	r6, #0
				if(pt[i].store) led_color(pt[i].pos, 4, 0, 0);
 800152e:	8963      	ldrh	r3, [r4, #10]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <partS+0x4c4>
 8001534:	2300      	movs	r3, #0
 8001536:	2104      	movs	r1, #4
 8001538:	001a      	movs	r2, r3
 800153a:	79a0      	ldrb	r0, [r4, #6]
 800153c:	f7ff f8fc 	bl	8000738 <led_color>
				if(led_cmp(i, 0, 0, 0) == 3) led_color(i, 0, 4, 0);
 8001540:	2300      	movs	r3, #0
 8001542:	0030      	movs	r0, r6
 8001544:	001a      	movs	r2, r3
 8001546:	0019      	movs	r1, r3
 8001548:	f7ff f936 	bl	80007b8 <led_cmp>
 800154c:	2803      	cmp	r0, #3
 800154e:	d105      	bne.n	800155c <partS+0x4e0>
 8001550:	2300      	movs	r3, #0
 8001552:	2204      	movs	r2, #4
 8001554:	0019      	movs	r1, r3
 8001556:	0030      	movs	r0, r6
 8001558:	f7ff f8ee 	bl	8000738 <led_color>
			for(uint8_t i = 0; i < 36; i++){
 800155c:	3601      	adds	r6, #1
 800155e:	b2f6      	uxtb	r6, r6
 8001560:	3410      	adds	r4, #16
 8001562:	2e24      	cmp	r6, #36	; 0x24
 8001564:	d1e3      	bne.n	800152e <partS+0x4b2>
			ledPos = (6 - tempY) * 6 + tempX - 1;
 8001566:	2006      	movs	r0, #6
 8001568:	4b33      	ldr	r3, [pc, #204]	; (8001638 <partS+0x5bc>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	1ac3      	subs	r3, r0, r3
 800156e:	4358      	muls	r0, r3
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <partS+0x5b8>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	3b01      	subs	r3, #1
 8001576:	18c0      	adds	r0, r0, r3
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <partS+0x59c>)
 800157a:	b2c0      	uxtb	r0, r0
 800157c:	7018      	strb	r0, [r3, #0]
			led_color(ledPos, 4, 4, 4);
 800157e:	2304      	movs	r3, #4
 8001580:	001a      	movs	r2, r3
 8001582:	0019      	movs	r1, r3
 8001584:	f7ff f8d8 	bl	8000738 <led_color>
			led_update();
 8001588:	f7ff f8e2 	bl	8000750 <led_update>
		SSD1306_PutsXY(1, 6, "Position ", !ptSetPosF);
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <partS+0x570>)
 800158e:	2106      	movs	r1, #6
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2001      	movs	r0, #1
 8001594:	425a      	negs	r2, r3
 8001596:	4153      	adcs	r3, r2
 8001598:	4a2e      	ldr	r2, [pc, #184]	; (8001654 <partS+0x5d8>)
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f7ff f924 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "(%d, %d)", tempX, tempY);
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <partS+0x5bc>)
 80015a2:	4a24      	ldr	r2, [pc, #144]	; (8001634 <partS+0x5b8>)
 80015a4:	0028      	movs	r0, r5
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	492b      	ldr	r1, [pc, #172]	; (8001658 <partS+0x5dc>)
 80015ac:	f004 f9a8 	bl	8005900 <siprintf>
		SSD1306_Puts(bf, &Font_6x8, !ptSetPosF);
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <partS+0x570>)
 80015b2:	0039      	movs	r1, r7
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	0028      	movs	r0, r5
 80015b8:	4253      	negs	r3, r2
 80015ba:	415a      	adcs	r2, r3
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	f001 fc57 	bl	8002e70 <SSD1306_Puts>
		SSD1306_PutsXY(1, 7, "Enter", 1);
 80015c2:	2301      	movs	r3, #1
 80015c4:	2107      	movs	r1, #7
 80015c6:	0018      	movs	r0, r3
 80015c8:	4a24      	ldr	r2, [pc, #144]	; (800165c <partS+0x5e0>)
 80015ca:	f7ff f90d 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, sel + 3, ">", 1);
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <partS+0x5c8>)
 80015d0:	4a23      	ldr	r2, [pc, #140]	; (8001660 <partS+0x5e4>)
 80015d2:	7819      	ldrb	r1, [r3, #0]
 80015d4:	2000      	movs	r0, #0
 80015d6:	3103      	adds	r1, #3
 80015d8:	2301      	movs	r3, #1
 80015da:	b2c9      	uxtb	r1, r1
 80015dc:	f7ff f904 	bl	80007e8 <SSD1306_PutsXY>
		free(bf);
 80015e0:	0028      	movs	r0, r5
 80015e2:	f004 f83f 	bl	8005664 <free>
		SSD1306_UpdateScreen();
 80015e6:	f001 fd49 	bl	800307c <SSD1306_UpdateScreen>
 80015ea:	e5bd      	b.n	8001168 <partS+0xec>
 80015ec:	20000955 	.word	0x20000955
 80015f0:	08006a8d 	.word	0x08006a8d
 80015f4:	08006a93 	.word	0x08006a93
 80015f8:	08006aa9 	.word	0x08006aa9
 80015fc:	2000094c 	.word	0x2000094c
 8001600:	2000070c 	.word	0x2000070c
 8001604:	20000000 	.word	0x20000000
 8001608:	08006cc4 	.word	0x08006cc4
 800160c:	08006aaf 	.word	0x08006aaf
 8001610:	20000412 	.word	0x20000412
 8001614:	20000008 	.word	0x20000008
 8001618:	200005ca 	.word	0x200005ca
 800161c:	20000954 	.word	0x20000954
 8001620:	20000414 	.word	0x20000414
 8001624:	2000095e 	.word	0x2000095e
 8001628:	200005d2 	.word	0x200005d2
 800162c:	200005d3 	.word	0x200005d3
 8001630:	08006ab5 	.word	0x08006ab5
 8001634:	2000095c 	.word	0x2000095c
 8001638:	2000095d 	.word	0x2000095d
 800163c:	200005e9 	.word	0x200005e9
 8001640:	08006abb 	.word	0x08006abb
 8001644:	20000958 	.word	0x20000958
 8001648:	08006ac9 	.word	0x08006ac9
 800164c:	08006ad0 	.word	0x08006ad0
 8001650:	08006ad7 	.word	0x08006ad7
 8001654:	08006add 	.word	0x08006add
 8001658:	08006ae7 	.word	0x08006ae7
 800165c:	08006af0 	.word	0x08006af0
 8001660:	08006a8b 	.word	0x08006a8b

08001664 <pUseM>:

MODE pUseM(){
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(firstF){
 8001666:	4d89      	ldr	r5, [pc, #548]	; (800188c <pUseM+0x228>)
 8001668:	782b      	ldrb	r3, [r5, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <pUseM+0x18>
		firstF = false;
 800166e:	2300      	movs	r3, #0
		tempX = 1;
 8001670:	4a87      	ldr	r2, [pc, #540]	; (8001890 <pUseM+0x22c>)
		firstF = false;
 8001672:	702b      	strb	r3, [r5, #0]
		tempX = 1;
 8001674:	3301      	adds	r3, #1
 8001676:	7013      	strb	r3, [r2, #0]
		tempY = 1;
 8001678:	4a86      	ldr	r2, [pc, #536]	; (8001894 <pUseM+0x230>)
 800167a:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 800167c:	4b86      	ldr	r3, [pc, #536]	; (8001898 <pUseM+0x234>)
 800167e:	4c87      	ldr	r4, [pc, #540]	; (800189c <pUseM+0x238>)
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	2a63      	cmp	r2, #99	; 0x63
 8001684:	d925      	bls.n	80016d2 <pUseM+0x6e>
		reC = 0;
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
		if(JOY_R && tempX < 6) tempX++;
 800168a:	23fa      	movs	r3, #250	; 0xfa
 800168c:	4984      	ldr	r1, [pc, #528]	; (80018a0 <pUseM+0x23c>)
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	880a      	ldrh	r2, [r1, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d933      	bls.n	80016fe <pUseM+0x9a>
 8001696:	487e      	ldr	r0, [pc, #504]	; (8001890 <pUseM+0x22c>)
 8001698:	7803      	ldrb	r3, [r0, #0]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d801      	bhi.n	80016a2 <pUseM+0x3e>
 800169e:	3301      	adds	r3, #1
		if(JOY_L && tempX > 1) tempX--;
 80016a0:	7003      	strb	r3, [r0, #0]
		if(JOY_U && tempY < 6) tempY++;
 80016a2:	884b      	ldrh	r3, [r1, #2]
 80016a4:	21fa      	movs	r1, #250	; 0xfa
 80016a6:	0109      	lsls	r1, r1, #4
 80016a8:	428b      	cmp	r3, r1
 80016aa:	d932      	bls.n	8001712 <pUseM+0xae>
 80016ac:	4879      	ldr	r0, [pc, #484]	; (8001894 <pUseM+0x230>)
 80016ae:	7801      	ldrb	r1, [r0, #0]
 80016b0:	2905      	cmp	r1, #5
 80016b2:	d801      	bhi.n	80016b8 <pUseM+0x54>
 80016b4:	3101      	adds	r1, #1
		if(JOY_D && tempY > 1) tempY--;
 80016b6:	7001      	strb	r1, [r0, #0]
		if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 80016b8:	3a2d      	subs	r2, #45	; 0x2d
 80016ba:	3aff      	subs	r2, #255	; 0xff
 80016bc:	4979      	ldr	r1, [pc, #484]	; (80018a4 <pUseM+0x240>)
 80016be:	b292      	uxth	r2, r2
 80016c0:	428a      	cmp	r2, r1
 80016c2:	d804      	bhi.n	80016ce <pUseM+0x6a>
 80016c4:	3b2d      	subs	r3, #45	; 0x2d
 80016c6:	3bff      	subs	r3, #255	; 0xff
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	428b      	cmp	r3, r1
 80016cc:	d901      	bls.n	80016d2 <pUseM+0x6e>
 80016ce:	2301      	movs	r3, #1
 80016d0:	7023      	strb	r3, [r4, #0]
	}
	if(JOY_P){
 80016d2:	20a0      	movs	r0, #160	; 0xa0
 80016d4:	2104      	movs	r1, #4
 80016d6:	05c0      	lsls	r0, r0, #23
 80016d8:	f002 fc08 	bl	8003eec <HAL_GPIO_ReadPin>
		if(!oldsw){
 80016dc:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <pUseM+0x244>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4318      	orrs	r0, r3
 80016e2:	b2c0      	uxtb	r0, r0
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d121      	bne.n	800172c <pUseM+0xc8>
			swS();
 80016e8:	f7ff f89c 	bl	8000824 <swS>
			if(usePos != 255){
 80016ec:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <pUseM+0x248>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2bff      	cmp	r3, #255	; 0xff
 80016f2:	d018      	beq.n	8001726 <pUseM+0xc2>
				firstF = true;
 80016f4:	2301      	movs	r3, #1
				udf = true;
				return USE;
 80016f6:	2003      	movs	r0, #3
				firstF = true;
 80016f8:	702b      	strb	r3, [r5, #0]
				udf = true;
 80016fa:	7023      	strb	r3, [r4, #0]
		led_update();
		SSD1306_UpdateScreen();
	}

	return PUSE;
}
 80016fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(JOY_L && tempX > 1) tempX--;
 80016fe:	2396      	movs	r3, #150	; 0x96
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	429a      	cmp	r2, r3
 8001704:	d2cd      	bcs.n	80016a2 <pUseM+0x3e>
 8001706:	4862      	ldr	r0, [pc, #392]	; (8001890 <pUseM+0x22c>)
 8001708:	7803      	ldrb	r3, [r0, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d9c9      	bls.n	80016a2 <pUseM+0x3e>
 800170e:	3b01      	subs	r3, #1
 8001710:	e7c6      	b.n	80016a0 <pUseM+0x3c>
		if(JOY_D && tempY > 1) tempY--;
 8001712:	2196      	movs	r1, #150	; 0x96
 8001714:	0049      	lsls	r1, r1, #1
 8001716:	428b      	cmp	r3, r1
 8001718:	d2ce      	bcs.n	80016b8 <pUseM+0x54>
 800171a:	485e      	ldr	r0, [pc, #376]	; (8001894 <pUseM+0x230>)
 800171c:	7801      	ldrb	r1, [r0, #0]
 800171e:	2901      	cmp	r1, #1
 8001720:	d9ca      	bls.n	80016b8 <pUseM+0x54>
 8001722:	3901      	subs	r1, #1
 8001724:	e7c7      	b.n	80016b6 <pUseM+0x52>
			}else buzFlag = 2;
 8001726:	2202      	movs	r2, #2
 8001728:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <pUseM+0x24c>)
 800172a:	701a      	strb	r2, [r3, #0]
	if(udf){
 800172c:	7823      	ldrb	r3, [r4, #0]
	return PUSE;
 800172e:	2002      	movs	r0, #2
	if(udf){
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0e3      	beq.n	80016fc <pUseM+0x98>
		udf = false;
 8001734:	2700      	movs	r7, #0
 8001736:	7027      	strb	r7, [r4, #0]
		basicScreen();
 8001738:	f7ff f866 	bl	8000808 <basicScreen>
		ledPos = (6 - tempY) * 6 + tempX - 1;
 800173c:	4b55      	ldr	r3, [pc, #340]	; (8001894 <pUseM+0x230>)
 800173e:	4e5d      	ldr	r6, [pc, #372]	; (80018b4 <pUseM+0x250>)
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	2306      	movs	r3, #6
 8001744:	1a9a      	subs	r2, r3, r2
 8001746:	4353      	muls	r3, r2
 8001748:	4a51      	ldr	r2, [pc, #324]	; (8001890 <pUseM+0x22c>)
		SSD1306_PutsXY(0, 0, "#Use", 0);
 800174a:	0039      	movs	r1, r7
		ledPos = (6 - tempY) * 6 + tempX - 1;
 800174c:	7812      	ldrb	r2, [r2, #0]
		SSD1306_PutsXY(0, 0, "#Use", 0);
 800174e:	0038      	movs	r0, r7
		ledPos = (6 - tempY) * 6 + tempX - 1;
 8001750:	3a01      	subs	r2, #1
 8001752:	189b      	adds	r3, r3, r2
 8001754:	7033      	strb	r3, [r6, #0]
		SSD1306_PutsXY(0, 0, "#Use", 0);
 8001756:	4a58      	ldr	r2, [pc, #352]	; (80018b8 <pUseM+0x254>)
 8001758:	003b      	movs	r3, r7
 800175a:	f7ff f845 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "Select part", 1);
 800175e:	2301      	movs	r3, #1
 8001760:	0038      	movs	r0, r7
 8001762:	0019      	movs	r1, r3
 8001764:	4a55      	ldr	r2, [pc, #340]	; (80018bc <pUseM+0x258>)
 8001766:	f7ff f83f 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 800176a:	4c55      	ldr	r4, [pc, #340]	; (80018c0 <pUseM+0x25c>)
		SSD1306_PutsXY(0, 1, "Select part", 1);
 800176c:	0025      	movs	r5, r4
			if(pt[i].pos == ledPos && pt[i].store){
 800176e:	79aa      	ldrb	r2, [r5, #6]
 8001770:	7833      	ldrb	r3, [r6, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d174      	bne.n	8001860 <pUseM+0x1fc>
 8001776:	896b      	ldrh	r3, [r5, #10]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d071      	beq.n	8001860 <pUseM+0x1fc>
				String bf = (String)calloc(0, sizeof(char) * 4);
 800177c:	2104      	movs	r1, #4
 800177e:	2000      	movs	r0, #0
 8001780:	f003 ff3c 	bl	80055fc <calloc>
				SSD1306_PutsXY(1, 3, "Cate:", 1);
 8001784:	2301      	movs	r3, #1
				usePos = i;
 8001786:	4e49      	ldr	r6, [pc, #292]	; (80018ac <pUseM+0x248>)
				String bf = (String)calloc(0, sizeof(char) * 4);
 8001788:	0005      	movs	r5, r0
				SSD1306_PutsXY(1, 3, "Cate:", 1);
 800178a:	2103      	movs	r1, #3
 800178c:	0018      	movs	r0, r3
 800178e:	4a4d      	ldr	r2, [pc, #308]	; (80018c4 <pUseM+0x260>)
				usePos = i;
 8001790:	7037      	strb	r7, [r6, #0]
				SSD1306_PutsXY(1, 3, "Cate:", 1);
 8001792:	f7ff f829 	bl	80007e8 <SSD1306_PutsXY>
				SSD1306_Puts(ptCate[pt[usePos].cate], &Font_6x8, 1);
 8001796:	7833      	ldrb	r3, [r6, #0]
 8001798:	4a49      	ldr	r2, [pc, #292]	; (80018c0 <pUseM+0x25c>)
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	4f49      	ldr	r7, [pc, #292]	; (80018c8 <pUseM+0x264>)
 80017a2:	484a      	ldr	r0, [pc, #296]	; (80018cc <pUseM+0x268>)
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	2201      	movs	r2, #1
 80017a8:	0039      	movs	r1, r7
 80017aa:	5818      	ldr	r0, [r3, r0]
 80017ac:	f001 fb60 	bl	8002e70 <SSD1306_Puts>
				SSD1306_PutsXY(1, 4, "Name:", 1);
 80017b0:	2301      	movs	r3, #1
 80017b2:	2104      	movs	r1, #4
 80017b4:	0018      	movs	r0, r3
 80017b6:	4a46      	ldr	r2, [pc, #280]	; (80018d0 <pUseM+0x26c>)
 80017b8:	f7ff f816 	bl	80007e8 <SSD1306_PutsXY>
				SSD1306_Puts(pt[usePos].name, &Font_6x8, 1);
 80017bc:	7833      	ldrb	r3, [r6, #0]
 80017be:	4a40      	ldr	r2, [pc, #256]	; (80018c0 <pUseM+0x25c>)
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	5898      	ldr	r0, [r3, r2]
 80017c4:	0039      	movs	r1, r7
 80017c6:	2201      	movs	r2, #1
 80017c8:	f001 fb52 	bl	8002e70 <SSD1306_Puts>
				SSD1306_PutsXY(1, 5, "Store:", 1);
 80017cc:	2301      	movs	r3, #1
 80017ce:	2105      	movs	r1, #5
 80017d0:	0018      	movs	r0, r3
 80017d2:	4a40      	ldr	r2, [pc, #256]	; (80018d4 <pUseM+0x270>)
 80017d4:	f7ff f808 	bl	80007e8 <SSD1306_PutsXY>
				sprintf(bf, "%d ", pt[usePos].store);
 80017d8:	7833      	ldrb	r3, [r6, #0]
 80017da:	4a39      	ldr	r2, [pc, #228]	; (80018c0 <pUseM+0x25c>)
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	18d3      	adds	r3, r2, r3
 80017e0:	895a      	ldrh	r2, [r3, #10]
 80017e2:	493d      	ldr	r1, [pc, #244]	; (80018d8 <pUseM+0x274>)
 80017e4:	0028      	movs	r0, r5
 80017e6:	f004 f88b 	bl	8005900 <siprintf>
				SSD1306_Puts(bf, &Font_6x8, 1);
 80017ea:	2201      	movs	r2, #1
 80017ec:	0039      	movs	r1, r7
 80017ee:	0028      	movs	r0, r5
 80017f0:	f001 fb3e 	bl	8002e70 <SSD1306_Puts>
				free(bf);
 80017f4:	0028      	movs	r0, r5
 80017f6:	f003 ff35 	bl	8005664 <free>
		led_clear();
 80017fa:	f7fe ffd3 	bl	80007a4 <led_clear>
		for(uint8_t i = 0; i < 36; i++){
 80017fe:	2500      	movs	r5, #0
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8001800:	2604      	movs	r6, #4
 8001802:	8963      	ldrh	r3, [r4, #10]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <pUseM+0x1be>
 8001808:	7921      	ldrb	r1, [r4, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	0033      	movs	r3, r6
 800180e:	79a0      	ldrb	r0, [r4, #6]
 8001810:	2901      	cmp	r1, #1
 8001812:	d004      	beq.n	800181e <pUseM+0x1ba>
 8001814:	0032      	movs	r2, r6
 8001816:	2903      	cmp	r1, #3
 8001818:	d132      	bne.n	8001880 <pUseM+0x21c>
 800181a:	2100      	movs	r1, #0
 800181c:	2304      	movs	r3, #4
 800181e:	f7fe ff8b 	bl	8000738 <led_color>
			if(!led_cmp(i, 0, 0, 0)) led_color(i, 0, 4, 0);
 8001822:	2300      	movs	r3, #0
 8001824:	0028      	movs	r0, r5
 8001826:	0019      	movs	r1, r3
 8001828:	001a      	movs	r2, r3
 800182a:	f7fe ffc5 	bl	80007b8 <led_cmp>
 800182e:	1e01      	subs	r1, r0, #0
 8001830:	d104      	bne.n	800183c <pUseM+0x1d8>
 8001832:	0003      	movs	r3, r0
 8001834:	0032      	movs	r2, r6
 8001836:	0028      	movs	r0, r5
 8001838:	f7fe ff7e 	bl	8000738 <led_color>
		for(uint8_t i = 0; i < 36; i++){
 800183c:	3501      	adds	r5, #1
 800183e:	b2ed      	uxtb	r5, r5
 8001840:	3410      	adds	r4, #16
 8001842:	2d24      	cmp	r5, #36	; 0x24
 8001844:	d1dd      	bne.n	8001802 <pUseM+0x19e>
		led_color(ledPos, 4, 4, 4);
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <pUseM+0x250>)
 8001848:	7818      	ldrb	r0, [r3, #0]
 800184a:	2304      	movs	r3, #4
 800184c:	001a      	movs	r2, r3
 800184e:	0019      	movs	r1, r3
 8001850:	f7fe ff72 	bl	8000738 <led_color>
		led_update();
 8001854:	f7fe ff7c 	bl	8000750 <led_update>
		SSD1306_UpdateScreen();
 8001858:	f001 fc10 	bl	800307c <SSD1306_UpdateScreen>
	return PUSE;
 800185c:	2002      	movs	r0, #2
 800185e:	e74d      	b.n	80016fc <pUseM+0x98>
				usePos = 255;
 8001860:	22ff      	movs	r2, #255	; 0xff
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <pUseM+0x248>)
		for(uint8_t i = 0; i < 36; i++){
 8001864:	3701      	adds	r7, #1
				usePos = 255;
 8001866:	701a      	strb	r2, [r3, #0]
				SSD1306_PutsXY(1, 3, "(Empty)", 1);
 8001868:	2301      	movs	r3, #1
 800186a:	2103      	movs	r1, #3
 800186c:	0018      	movs	r0, r3
 800186e:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <pUseM+0x278>)
		for(uint8_t i = 0; i < 36; i++){
 8001870:	b2ff      	uxtb	r7, r7
				SSD1306_PutsXY(1, 3, "(Empty)", 1);
 8001872:	f7fe ffb9 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 8001876:	3510      	adds	r5, #16
 8001878:	2f24      	cmp	r7, #36	; 0x24
 800187a:	d000      	beq.n	800187e <pUseM+0x21a>
 800187c:	e777      	b.n	800176e <pUseM+0x10a>
 800187e:	e7bc      	b.n	80017fa <pUseM+0x196>
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8001880:	2902      	cmp	r1, #2
 8001882:	d000      	beq.n	8001886 <pUseM+0x222>
 8001884:	2201      	movs	r2, #1
 8001886:	0031      	movs	r1, r6
 8001888:	2300      	movs	r3, #0
 800188a:	e7c8      	b.n	800181e <pUseM+0x1ba>
 800188c:	20000008 	.word	0x20000008
 8001890:	2000095c 	.word	0x2000095c
 8001894:	2000095d 	.word	0x2000095d
 8001898:	20000957 	.word	0x20000957
 800189c:	2000001a 	.word	0x2000001a
 80018a0:	2000040c 	.word	0x2000040c
 80018a4:	00000e74 	.word	0x00000e74
 80018a8:	20000015 	.word	0x20000015
 80018ac:	2000001b 	.word	0x2000001b
 80018b0:	20000412 	.word	0x20000412
 80018b4:	200005ca 	.word	0x200005ca
 80018b8:	08006af6 	.word	0x08006af6
 80018bc:	08006afb 	.word	0x08006afb
 80018c0:	2000070c 	.word	0x2000070c
 80018c4:	08006aa9 	.word	0x08006aa9
 80018c8:	20000000 	.word	0x20000000
 80018cc:	08006cc4 	.word	0x08006cc4
 80018d0:	08006aaf 	.word	0x08006aaf
 80018d4:	08006ad0 	.word	0x08006ad0
 80018d8:	08006b07 	.word	0x08006b07
 80018dc:	08006b0b 	.word	0x08006b0b

080018e0 <use>:

MODE use(){
 80018e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(firstF){
 80018e2:	4d59      	ldr	r5, [pc, #356]	; (8001a48 <use+0x168>)
 80018e4:	782b      	ldrb	r3, [r5, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <use+0x12>
		firstF = false;
 80018ea:	2300      	movs	r3, #0
		ptInNum = 0;
 80018ec:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <use+0x16c>)
		firstF = false;
 80018ee:	702b      	strb	r3, [r5, #0]
		ptInNum = 0;
 80018f0:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 80018f2:	4b57      	ldr	r3, [pc, #348]	; (8001a50 <use+0x170>)
 80018f4:	4f57      	ldr	r7, [pc, #348]	; (8001a54 <use+0x174>)
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	2a63      	cmp	r2, #99	; 0x63
 80018fa:	d915      	bls.n	8001928 <use+0x48>
		reC = 0;
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
		if(JOY_U && ptInNum < pt[usePos].store) ptInNum++;
 8001900:	22fa      	movs	r2, #250	; 0xfa
 8001902:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <use+0x178>)
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	885b      	ldrh	r3, [r3, #2]
 8001908:	4293      	cmp	r3, r2
 800190a:	d95f      	bls.n	80019cc <use+0xec>
 800190c:	4a53      	ldr	r2, [pc, #332]	; (8001a5c <use+0x17c>)
 800190e:	484f      	ldr	r0, [pc, #316]	; (8001a4c <use+0x16c>)
 8001910:	7811      	ldrb	r1, [r2, #0]
 8001912:	4a53      	ldr	r2, [pc, #332]	; (8001a60 <use+0x180>)
 8001914:	0109      	lsls	r1, r1, #4
 8001916:	1852      	adds	r2, r2, r1
 8001918:	7803      	ldrb	r3, [r0, #0]
 800191a:	8952      	ldrh	r2, [r2, #10]
 800191c:	429a      	cmp	r2, r3
 800191e:	d901      	bls.n	8001924 <use+0x44>
 8001920:	3301      	adds	r3, #1
 8001922:	7003      	strb	r3, [r0, #0]
		if(JOY_D && ptInNum > 1) ptInNum--;
		if(JOY_U || JOY_D) udf = 1;
 8001924:	2301      	movs	r3, #1
 8001926:	703b      	strb	r3, [r7, #0]
	}
	if(JOY_P){
 8001928:	20a0      	movs	r0, #160	; 0xa0
 800192a:	2104      	movs	r1, #4
 800192c:	05c0      	lsls	r0, r0, #23
 800192e:	f002 fadd 	bl	8003eec <HAL_GPIO_ReadPin>
		if(!oldsw){
 8001932:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <use+0x184>)
 8001934:	781c      	ldrb	r4, [r3, #0]
 8001936:	4304      	orrs	r4, r0
 8001938:	b2e4      	uxtb	r4, r4
 800193a:	2c00      	cmp	r4, #0
 800193c:	d151      	bne.n	80019e2 <use+0x102>
			swS();
 800193e:	f7fe ff71 	bl	8000824 <swS>
			firstF = 1;
 8001942:	2301      	movs	r3, #1
			udf = 1;
 8001944:	4a43      	ldr	r2, [pc, #268]	; (8001a54 <use+0x174>)
			firstF = 1;
 8001946:	702b      	strb	r3, [r5, #0]
			udf = 1;
 8001948:	7013      	strb	r3, [r2, #0]

			logShift();
 800194a:	f7fe ffe9 	bl	8000920 <logShift>
			DS3231_get_date(&date.day, &date.month, (uint8_t*)&date.year);
 800194e:	4f46      	ldr	r7, [pc, #280]	; (8001a68 <use+0x188>)
 8001950:	0038      	movs	r0, r7
 8001952:	1cba      	adds	r2, r7, #2
 8001954:	1c79      	adds	r1, r7, #1
 8001956:	f7fe fe93 	bl	8000680 <DS3231_get_date>
			DS3231_get_time(&time.sec, &time.min, &time.hour);
 800195a:	4e44      	ldr	r6, [pc, #272]	; (8001a6c <use+0x18c>)
 800195c:	0032      	movs	r2, r6
 800195e:	1c71      	adds	r1, r6, #1
 8001960:	1cb0      	adds	r0, r6, #2
 8001962:	f7fe fdf7 	bl	8000554 <DS3231_get_time>
			pLog[0].workCate = 2;
 8001966:	4d42      	ldr	r5, [pc, #264]	; (8001a70 <use+0x190>)
 8001968:	2302      	movs	r3, #2
			pLog[0].date = date;
 800196a:	0028      	movs	r0, r5
			pLog[0].workCate = 2;
 800196c:	702b      	strb	r3, [r5, #0]
			pLog[0].date = date;
 800196e:	0039      	movs	r1, r7
 8001970:	2204      	movs	r2, #4
 8001972:	3030      	adds	r0, #48	; 0x30
 8001974:	f003 fe80 	bl	8005678 <memcpy>
			pLog[0].time = time ;
 8001978:	0028      	movs	r0, r5
 800197a:	0031      	movs	r1, r6
 800197c:	2203      	movs	r2, #3
 800197e:	302d      	adds	r0, #45	; 0x2d
 8001980:	f003 fe7a 	bl	8005678 <memcpy>
			sprintf(pLog[0].content[0], "%s/%s", pt[usePos].name, ptCate[pt[usePos].cate]);
 8001984:	4e35      	ldr	r6, [pc, #212]	; (8001a5c <use+0x17c>)
 8001986:	4d36      	ldr	r5, [pc, #216]	; (8001a60 <use+0x180>)
 8001988:	7833      	ldrb	r3, [r6, #0]
 800198a:	493a      	ldr	r1, [pc, #232]	; (8001a74 <use+0x194>)
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	595a      	ldr	r2, [r3, r5]
 8001990:	18eb      	adds	r3, r5, r3
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	4838      	ldr	r0, [pc, #224]	; (8001a78 <use+0x198>)
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	585b      	ldr	r3, [r3, r1]
 800199a:	4938      	ldr	r1, [pc, #224]	; (8001a7c <use+0x19c>)
 800199c:	f003 ffb0 	bl	8005900 <siprintf>
			sprintf(pLog[0].content[1], "%dpcs (%d,%d)", ptInNum, tempX, tempY);
 80019a0:	4937      	ldr	r1, [pc, #220]	; (8001a80 <use+0x1a0>)
 80019a2:	4f2a      	ldr	r7, [pc, #168]	; (8001a4c <use+0x16c>)
 80019a4:	7809      	ldrb	r1, [r1, #0]
 80019a6:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <use+0x1a4>)
 80019a8:	783a      	ldrb	r2, [r7, #0]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4836      	ldr	r0, [pc, #216]	; (8001a88 <use+0x1a8>)
 80019ae:	9100      	str	r1, [sp, #0]
 80019b0:	4936      	ldr	r1, [pc, #216]	; (8001a8c <use+0x1ac>)
 80019b2:	f003 ffa5 	bl	8005900 <siprintf>
			if(ptInNum == pt[usePos].store) return REFILL;
 80019b6:	7832      	ldrb	r2, [r6, #0]
 80019b8:	7839      	ldrb	r1, [r7, #0]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	18ad      	adds	r5, r5, r2
 80019be:	896b      	ldrh	r3, [r5, #10]
 80019c0:	4299      	cmp	r1, r3
 80019c2:	d03f      	beq.n	8001a44 <use+0x164>
			else {
				pt[usePos].store -= ptInNum;
 80019c4:	1a5b      	subs	r3, r3, r1
 80019c6:	816b      	strh	r3, [r5, #10]
		SSD1306_PutsXY(0, 3, bf, 1);
		SSD1306_UpdateScreen();
		free(bf);
	}
	return USE;
}
 80019c8:	0020      	movs	r0, r4
 80019ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(JOY_D && ptInNum > 1) ptInNum--;
 80019cc:	2296      	movs	r2, #150	; 0x96
 80019ce:	0052      	lsls	r2, r2, #1
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d2a9      	bcs.n	8001928 <use+0x48>
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <use+0x16c>)
 80019d6:	7813      	ldrb	r3, [r2, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d9a3      	bls.n	8001924 <use+0x44>
 80019dc:	3b01      	subs	r3, #1
 80019de:	7013      	strb	r3, [r2, #0]
 80019e0:	e7a0      	b.n	8001924 <use+0x44>
	if(udf){
 80019e2:	783b      	ldrb	r3, [r7, #0]
	return USE;
 80019e4:	2403      	movs	r4, #3
	if(udf){
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0ee      	beq.n	80019c8 <use+0xe8>
		String bf = (String)calloc(0, sizeof(char) * 12);
 80019ea:	210c      	movs	r1, #12
 80019ec:	2000      	movs	r0, #0
 80019ee:	f003 fe05 	bl	80055fc <calloc>
		udf = false;
 80019f2:	2500      	movs	r5, #0
		String bf = (String)calloc(0, sizeof(char) * 12);
 80019f4:	0006      	movs	r6, r0
		udf = false;
 80019f6:	703d      	strb	r5, [r7, #0]
		basicScreen();
 80019f8:	f7fe ff06 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Use", 0);
 80019fc:	002b      	movs	r3, r5
 80019fe:	0029      	movs	r1, r5
 8001a00:	0028      	movs	r0, r5
 8001a02:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <use+0x1b0>)
 8001a04:	f7fe fef0 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "How Many use?", 1);
 8001a08:	2301      	movs	r3, #1
 8001a0a:	0028      	movs	r0, r5
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <use+0x1b4>)
 8001a10:	f7fe feea 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "(%d / %d)", ptInNum, pt[usePos].store);
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <use+0x17c>)
 8001a16:	0030      	movs	r0, r6
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <use+0x180>)
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	189b      	adds	r3, r3, r2
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <use+0x16c>)
 8001a22:	895b      	ldrh	r3, [r3, #10]
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	491c      	ldr	r1, [pc, #112]	; (8001a98 <use+0x1b8>)
 8001a28:	f003 ff6a 	bl	8005900 <siprintf>
		SSD1306_PutsXY(0, 3, bf, 1);
 8001a2c:	0028      	movs	r0, r5
 8001a2e:	2301      	movs	r3, #1
 8001a30:	0032      	movs	r2, r6
 8001a32:	0021      	movs	r1, r4
 8001a34:	f7fe fed8 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 8001a38:	f001 fb20 	bl	800307c <SSD1306_UpdateScreen>
		free(bf);
 8001a3c:	0030      	movs	r0, r6
 8001a3e:	f003 fe11 	bl	8005664 <free>
 8001a42:	e7c1      	b.n	80019c8 <use+0xe8>
			if(ptInNum == pt[usePos].store) return REFILL;
 8001a44:	2404      	movs	r4, #4
 8001a46:	e7bf      	b.n	80019c8 <use+0xe8>
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	20000954 	.word	0x20000954
 8001a50:	20000957 	.word	0x20000957
 8001a54:	2000001a 	.word	0x2000001a
 8001a58:	2000040c 	.word	0x2000040c
 8001a5c:	2000001b 	.word	0x2000001b
 8001a60:	2000070c 	.word	0x2000070c
 8001a64:	20000015 	.word	0x20000015
 8001a68:	20000414 	.word	0x20000414
 8001a6c:	2000095e 	.word	0x2000095e
 8001a70:	200005d2 	.word	0x200005d2
 8001a74:	08006cc4 	.word	0x08006cc4
 8001a78:	200005d3 	.word	0x200005d3
 8001a7c:	08006ab5 	.word	0x08006ab5
 8001a80:	2000095d 	.word	0x2000095d
 8001a84:	2000095c 	.word	0x2000095c
 8001a88:	200005e9 	.word	0x200005e9
 8001a8c:	08006abb 	.word	0x08006abb
 8001a90:	08006af6 	.word	0x08006af6
 8001a94:	08006b13 	.word	0x08006b13
 8001a98:	08006b21 	.word	0x08006b21

08001a9c <refill>:

MODE refill(){
 8001a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(firstF){
 8001a9e:	4c6a      	ldr	r4, [pc, #424]	; (8001c48 <refill+0x1ac>)
 8001aa0:	7823      	ldrb	r3, [r4, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <refill+0x12>
		firstF = false;
 8001aa6:	2300      	movs	r3, #0
		ptInNum = 0;
 8001aa8:	4a68      	ldr	r2, [pc, #416]	; (8001c4c <refill+0x1b0>)
		firstF = false;
 8001aaa:	7023      	strb	r3, [r4, #0]
		ptInNum = 0;
 8001aac:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 8001aae:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <refill+0x1b4>)
 8001ab0:	4e68      	ldr	r6, [pc, #416]	; (8001c54 <refill+0x1b8>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	2a63      	cmp	r2, #99	; 0x63
 8001ab6:	d916      	bls.n	8001ae6 <refill+0x4a>
		reC = 0;
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
		if(JOY_U && ptInNum < pt[usePos].max){
 8001abc:	22fa      	movs	r2, #250	; 0xfa
 8001abe:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <refill+0x1bc>)
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	885b      	ldrh	r3, [r3, #2]
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d800      	bhi.n	8001aca <refill+0x2e>
 8001ac8:	e076      	b.n	8001bb8 <refill+0x11c>
 8001aca:	4a64      	ldr	r2, [pc, #400]	; (8001c5c <refill+0x1c0>)
 8001acc:	485f      	ldr	r0, [pc, #380]	; (8001c4c <refill+0x1b0>)
 8001ace:	7811      	ldrb	r1, [r2, #0]
 8001ad0:	4a63      	ldr	r2, [pc, #396]	; (8001c60 <refill+0x1c4>)
 8001ad2:	0109      	lsls	r1, r1, #4
 8001ad4:	1852      	adds	r2, r2, r1
 8001ad6:	7803      	ldrb	r3, [r0, #0]
 8001ad8:	8992      	ldrh	r2, [r2, #12]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d903      	bls.n	8001ae6 <refill+0x4a>
			ptInNum++;
 8001ade:	3301      	adds	r3, #1
 8001ae0:	7003      	strb	r3, [r0, #0]
			udf = true;
		}
		if(JOY_D && ptInNum){
			ptInNum--;
			udf = true;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	7033      	strb	r3, [r6, #0]
		}
	}
	if(JOY_P){
 8001ae6:	20a0      	movs	r0, #160	; 0xa0
 8001ae8:	2104      	movs	r1, #4
 8001aea:	05c0      	lsls	r0, r0, #23
 8001aec:	f002 f9fe 	bl	8003eec <HAL_GPIO_ReadPin>
		if(!oldsw){
 8001af0:	4b5c      	ldr	r3, [pc, #368]	; (8001c64 <refill+0x1c8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4318      	orrs	r0, r3
 8001af6:	b2c0      	uxtb	r0, r0
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d16a      	bne.n	8001bd2 <refill+0x136>
			swS();
			firstF = true;
 8001afc:	2701      	movs	r7, #1
			swS();
 8001afe:	f7fe fe91 	bl	8000824 <swS>
			udf = true;
			if(ptInNum){
 8001b02:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <refill+0x1b0>)
			firstF = true;
 8001b04:	7027      	strb	r7, [r4, #0]
			if(ptInNum){
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4c55      	ldr	r4, [pc, #340]	; (8001c60 <refill+0x1c4>)
			udf = true;
 8001b0a:	7037      	strb	r7, [r6, #0]
			if(ptInNum){
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d033      	beq.n	8001b78 <refill+0xdc>
				logShift();
 8001b10:	f7fe ff06 	bl	8000920 <logShift>
				DS3231_get_date(&date.day, &date.month, (uint8_t*)&date.year);
 8001b14:	4e54      	ldr	r6, [pc, #336]	; (8001c68 <refill+0x1cc>)
 8001b16:	0030      	movs	r0, r6
 8001b18:	1cb2      	adds	r2, r6, #2
 8001b1a:	19f1      	adds	r1, r6, r7
 8001b1c:	f7fe fdb0 	bl	8000680 <DS3231_get_date>
				DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001b20:	4d52      	ldr	r5, [pc, #328]	; (8001c6c <refill+0x1d0>)
 8001b22:	002a      	movs	r2, r5
 8001b24:	19e9      	adds	r1, r5, r7
 8001b26:	1ca8      	adds	r0, r5, #2
 8001b28:	f7fe fd14 	bl	8000554 <DS3231_get_time>
				pLog[0].workCate = 1;
 8001b2c:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <refill+0x1d4>)
				pLog[0].date = date;
 8001b2e:	2204      	movs	r2, #4
 8001b30:	0018      	movs	r0, r3
				pLog[0].workCate = 1;
 8001b32:	701f      	strb	r7, [r3, #0]
				pLog[0].date = date;
 8001b34:	0031      	movs	r1, r6
 8001b36:	3030      	adds	r0, #48	; 0x30
 8001b38:	f003 fd9e 	bl	8005678 <memcpy>
				pLog[0].time = time;
 8001b3c:	484c      	ldr	r0, [pc, #304]	; (8001c70 <refill+0x1d4>)
 8001b3e:	2203      	movs	r2, #3
 8001b40:	0029      	movs	r1, r5
 8001b42:	302d      	adds	r0, #45	; 0x2d
 8001b44:	f003 fd98 	bl	8005678 <memcpy>
				sprintf(pLog[0].content[0], "%s/%s", pt[usePos].name, ptCate[pt[usePos].cate]);
 8001b48:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <refill+0x1c0>)
 8001b4a:	494a      	ldr	r1, [pc, #296]	; (8001c74 <refill+0x1d8>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	484a      	ldr	r0, [pc, #296]	; (8001c78 <refill+0x1dc>)
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	58e2      	ldr	r2, [r4, r3]
 8001b54:	18e3      	adds	r3, r4, r3
 8001b56:	791b      	ldrb	r3, [r3, #4]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	585b      	ldr	r3, [r3, r1]
 8001b5c:	4947      	ldr	r1, [pc, #284]	; (8001c7c <refill+0x1e0>)
 8001b5e:	f003 fecf 	bl	8005900 <siprintf>
				sprintf(pLog[0].content[1], "%dpcs (%d,%d)", ptInNum, tempX, tempY);
 8001b62:	4947      	ldr	r1, [pc, #284]	; (8001c80 <refill+0x1e4>)
 8001b64:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <refill+0x1e8>)
 8001b66:	7809      	ldrb	r1, [r1, #0]
 8001b68:	4a38      	ldr	r2, [pc, #224]	; (8001c4c <refill+0x1b0>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	4846      	ldr	r0, [pc, #280]	; (8001c88 <refill+0x1ec>)
 8001b70:	9100      	str	r1, [sp, #0]
 8001b72:	4946      	ldr	r1, [pc, #280]	; (8001c8c <refill+0x1f0>)
 8001b74:	f003 fec4 	bl	8005900 <siprintf>
			}
			pt[usePos].store = ptInNum;
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <refill+0x1c0>)
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <refill+0x1b0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	7812      	ldrb	r2, [r2, #0]
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	18e3      	adds	r3, r4, r3
 8001b84:	815a      	strh	r2, [r3, #10]
			for(uint8_t i = 0; i < 36; i++){
				if(pt[usePos].ptionID == pt[i].ptionID && pt[usePos].ptionID) pt[i] = pt[usePos];
 8001b86:	1dda      	adds	r2, r3, #7
			pt[usePos].store = ptInNum;
 8001b88:	2524      	movs	r5, #36	; 0x24
				if(pt[usePos].ptionID == pt[i].ptionID && pt[usePos].ptionID) pt[i] = pt[usePos];
 8001b8a:	4694      	mov	ip, r2
 8001b8c:	4662      	mov	r2, ip
 8001b8e:	7810      	ldrb	r0, [r2, #0]
 8001b90:	79e2      	ldrb	r2, [r4, #7]
 8001b92:	4282      	cmp	r2, r0
 8001b94:	d107      	bne.n	8001ba6 <refill+0x10a>
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d005      	beq.n	8001ba6 <refill+0x10a>
 8001b9a:	0022      	movs	r2, r4
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	c8c2      	ldmia	r0!, {r1, r6, r7}
 8001ba0:	c2c2      	stmia	r2!, {r1, r6, r7}
 8001ba2:	6800      	ldr	r0, [r0, #0]
 8001ba4:	6010      	str	r0, [r2, #0]
			for(uint8_t i = 0; i < 36; i++){
 8001ba6:	3d01      	subs	r5, #1
 8001ba8:	b2ed      	uxtb	r5, r5
 8001baa:	3410      	adds	r4, #16
 8001bac:	2d00      	cmp	r5, #0
 8001bae:	d1ed      	bne.n	8001b8c <refill+0xf0>
			}
			led_clear();
 8001bb0:	f7fe fdf8 	bl	80007a4 <led_clear>
		SSD1306_PutsXY(0, 3, bf, 1);
		SSD1306_UpdateScreen();
		free(bf);
	}
	return REFILL;
}
 8001bb4:	0028      	movs	r0, r5
 8001bb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(JOY_D && ptInNum){
 8001bb8:	2296      	movs	r2, #150	; 0x96
 8001bba:	0052      	lsls	r2, r2, #1
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d300      	bcc.n	8001bc2 <refill+0x126>
 8001bc0:	e791      	b.n	8001ae6 <refill+0x4a>
 8001bc2:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <refill+0x1b0>)
 8001bc4:	7813      	ldrb	r3, [r2, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d100      	bne.n	8001bcc <refill+0x130>
 8001bca:	e78c      	b.n	8001ae6 <refill+0x4a>
			ptInNum--;
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	7013      	strb	r3, [r2, #0]
 8001bd0:	e787      	b.n	8001ae2 <refill+0x46>
	if(udf){
 8001bd2:	7833      	ldrb	r3, [r6, #0]
	return REFILL;
 8001bd4:	2504      	movs	r5, #4
	if(udf){
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0ec      	beq.n	8001bb4 <refill+0x118>
		String bf = (String)calloc(0, sizeof(char) * 11);
 8001bda:	210b      	movs	r1, #11
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f003 fd0d 	bl	80055fc <calloc>
		udf = false;
 8001be2:	2500      	movs	r5, #0
		String bf = (String)calloc(0, sizeof(char) * 11);
 8001be4:	0004      	movs	r4, r0
		udf = false;
 8001be6:	7035      	strb	r5, [r6, #0]
		basicScreen();
 8001be8:	f7fe fe0e 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#refill", 0);
 8001bec:	002b      	movs	r3, r5
 8001bee:	0029      	movs	r1, r5
 8001bf0:	0028      	movs	r0, r5
 8001bf2:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <refill+0x1f4>)
 8001bf4:	f7fe fdf8 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "Part has all used.", 1);
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	0028      	movs	r0, r5
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <refill+0x1f8>)
 8001c00:	f7fe fdf2 	bl	80007e8 <SSD1306_PutsXY>
		if(pt[usePos].ptionC < 1)pt[usePos].ptionC = 1;
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <refill+0x1c0>)
 8001c06:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <refill+0x1c4>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	18d1      	adds	r1, r2, r3
 8001c0e:	7a08      	ldrb	r0, [r1, #8]
 8001c10:	42a8      	cmp	r0, r5
 8001c12:	d101      	bne.n	8001c18 <refill+0x17c>
 8001c14:	2001      	movs	r0, #1
 8001c16:	7208      	strb	r0, [r1, #8]
		sprintf(bf, "IN:%u/%u", ptInNum, pt[usePos].max * pt[usePos].ptionC);
 8001c18:	18d2      	adds	r2, r2, r3
 8001c1a:	8991      	ldrh	r1, [r2, #12]
 8001c1c:	7a13      	ldrb	r3, [r2, #8]
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <refill+0x1b0>)
 8001c20:	434b      	muls	r3, r1
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	491c      	ldr	r1, [pc, #112]	; (8001c98 <refill+0x1fc>)
 8001c26:	0020      	movs	r0, r4
 8001c28:	f003 fe6a 	bl	8005900 <siprintf>
		SSD1306_PutsXY(0, 3, bf, 1);
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	0022      	movs	r2, r4
 8001c30:	2103      	movs	r1, #3
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7fe fdd8 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 8001c38:	f001 fa20 	bl	800307c <SSD1306_UpdateScreen>
		free(bf);
 8001c3c:	0020      	movs	r0, r4
 8001c3e:	f003 fd11 	bl	8005664 <free>
	return REFILL;
 8001c42:	2504      	movs	r5, #4
 8001c44:	e7b6      	b.n	8001bb4 <refill+0x118>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000954 	.word	0x20000954
 8001c50:	20000957 	.word	0x20000957
 8001c54:	2000001a 	.word	0x2000001a
 8001c58:	2000040c 	.word	0x2000040c
 8001c5c:	2000001b 	.word	0x2000001b
 8001c60:	2000070c 	.word	0x2000070c
 8001c64:	20000015 	.word	0x20000015
 8001c68:	20000414 	.word	0x20000414
 8001c6c:	2000095e 	.word	0x2000095e
 8001c70:	200005d2 	.word	0x200005d2
 8001c74:	08006cc4 	.word	0x08006cc4
 8001c78:	200005d3 	.word	0x200005d3
 8001c7c:	08006ab5 	.word	0x08006ab5
 8001c80:	2000095d 	.word	0x2000095d
 8001c84:	2000095c 	.word	0x2000095c
 8001c88:	200005e9 	.word	0x200005e9
 8001c8c:	08006abb 	.word	0x08006abb
 8001c90:	08006b2b 	.word	0x08006b2b
 8001c94:	08006b33 	.word	0x08006b33
 8001c98:	08006b46 	.word	0x08006b46

08001c9c <pFind>:

MODE pFind(){
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 8001c9e:	4d40      	ldr	r5, [pc, #256]	; (8001da0 <pFind+0x104>)
MODE pFind(){
 8001ca0:	b085      	sub	sp, #20
	if(firstF){
 8001ca2:	782b      	ldrb	r3, [r5, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <pFind+0x1e>
		firstF = false;
 8001ca8:	2100      	movs	r1, #0
		findC = 0;
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <pFind+0x108>)
		memset(ptFindName, 0, sizeof(char) * 11);
 8001cac:	220b      	movs	r2, #11
		findC = 0;
 8001cae:	7019      	strb	r1, [r3, #0]
		memset(ptFindName, 0, sizeof(char) * 11);
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <pFind+0x10c>)
		firstF = false;
 8001cb2:	7029      	strb	r1, [r5, #0]
		memset(ptFindName, 0, sizeof(char) * 11);
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	f003 fcfb 	bl	80056b0 <memset>
	}
	if(RE1 && (JOY_R || JOY_L || JOY_U || JOY_D)) udf = true;
 8001cba:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <pFind+0x110>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b63      	cmp	r3, #99	; 0x63
 8001cc0:	d910      	bls.n	8001ce4 <pFind+0x48>
 8001cc2:	493b      	ldr	r1, [pc, #236]	; (8001db0 <pFind+0x114>)
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <pFind+0x118>)
 8001cc6:	880b      	ldrh	r3, [r1, #0]
 8001cc8:	3b2d      	subs	r3, #45	; 0x2d
 8001cca:	3bff      	subs	r3, #255	; 0xff
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d805      	bhi.n	8001cde <pFind+0x42>
 8001cd2:	884b      	ldrh	r3, [r1, #2]
 8001cd4:	3b2d      	subs	r3, #45	; 0x2d
 8001cd6:	3bff      	subs	r3, #255	; 0xff
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d902      	bls.n	8001ce4 <pFind+0x48>
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <pFind+0x11c>)
 8001ce2:	701a      	strb	r2, [r3, #0]
	if(JOY_P){
 8001ce4:	20a0      	movs	r0, #160	; 0xa0
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	05c0      	lsls	r0, r0, #23
 8001cea:	f002 f8ff 	bl	8003eec <HAL_GPIO_ReadPin>
		if(!oldsw){
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <pFind+0x120>)
 8001cf0:	781c      	ldrb	r4, [r3, #0]
 8001cf2:	4304      	orrs	r4, r0
 8001cf4:	b2e4      	uxtb	r4, r4
 8001cf6:	2c00      	cmp	r4, #0
 8001cf8:	d10c      	bne.n	8001d14 <pFind+0x78>
			swS();
 8001cfa:	f7fe fd93 	bl	8000824 <swS>
 			if(!ptFindName[0])textIn(true, ptFindName, 10);
 8001cfe:	4e2a      	ldr	r6, [pc, #168]	; (8001da8 <pFind+0x10c>)
			else{
				for(uint8_t i = 0; i < 36; i++)
					if(!strcmp(ptFindName, pt[i].name)){
						findArr[findC] = i;
 8001d00:	4f28      	ldr	r7, [pc, #160]	; (8001da4 <pFind+0x108>)
 			if(!ptFindName[0])textIn(true, ptFindName, 10);
 8001d02:	6833      	ldr	r3, [r6, #0]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d12d      	bne.n	8001d66 <pFind+0xca>
 8001d0a:	220a      	movs	r2, #10
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	6831      	ldr	r1, [r6, #0]
 8001d10:	f7fe fe18 	bl	8000944 <textIn>
				udf = true;
				return FINDR;
			}
		}
	}
	if(udf){
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <pFind+0x11c>)
		SSD1306_GotoXY(19, 36);
		if(!ptFindName[0]) SSD1306_Puts("input find name", &Font_6x8, 1);
		else SSD1306_Puts(ptFindName, &Font_6x8, 1);
		SSD1306_UpdateScreen();
	}
	return PFIND;
 8001d16:	2005      	movs	r0, #5
	if(udf){
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	d03b      	beq.n	8001d96 <pFind+0xfa>
		udf = false;
 8001d1e:	2400      	movs	r4, #0
 8001d20:	701c      	strb	r4, [r3, #0]
		basicScreen();
 8001d22:	f7fe fd71 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Find", 0);
 8001d26:	0023      	movs	r3, r4
 8001d28:	0021      	movs	r1, r4
 8001d2a:	0020      	movs	r0, r4
 8001d2c:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <pFind+0x124>)
		SSD1306_DrawFilledRectangle(18, 34, 92, 10, 1);
 8001d2e:	3401      	adds	r4, #1
		SSD1306_PutsXY(0, 0, "#Find", 0);
 8001d30:	f7fe fd5a 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_DrawFilledRectangle(18, 34, 92, 10, 1);
 8001d34:	230a      	movs	r3, #10
 8001d36:	225c      	movs	r2, #92	; 0x5c
 8001d38:	2122      	movs	r1, #34	; 0x22
 8001d3a:	2012      	movs	r0, #18
 8001d3c:	9400      	str	r4, [sp, #0]
 8001d3e:	f001 f944 	bl	8002fca <SSD1306_DrawFilledRectangle>
		SSD1306_GotoXY(19, 36);
 8001d42:	2124      	movs	r1, #36	; 0x24
 8001d44:	2013      	movs	r0, #19
 8001d46:	f001 f857 	bl	8002df8 <SSD1306_GotoXY>
		if(!ptFindName[0]) SSD1306_Puts("input find name", &Font_6x8, 1);
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <pFind+0x10c>)
 8001d4c:	491d      	ldr	r1, [pc, #116]	; (8001dc4 <pFind+0x128>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	7812      	ldrb	r2, [r2, #0]
 8001d52:	2a00      	cmp	r2, #0
 8001d54:	d121      	bne.n	8001d9a <pFind+0xfe>
 8001d56:	0022      	movs	r2, r4
 8001d58:	481b      	ldr	r0, [pc, #108]	; (8001dc8 <pFind+0x12c>)
		else SSD1306_Puts(ptFindName, &Font_6x8, 1);
 8001d5a:	f001 f889 	bl	8002e70 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001d5e:	f001 f98d 	bl	800307c <SSD1306_UpdateScreen>
	return PFIND;
 8001d62:	2005      	movs	r0, #5
 8001d64:	e017      	b.n	8001d96 <pFind+0xfa>
 8001d66:	b2e3      	uxtb	r3, r4
					if(!strcmp(ptFindName, pt[i].name)){
 8001d68:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <pFind+0x130>)
 8001d6a:	9303      	str	r3, [sp, #12]
 8001d6c:	0123      	lsls	r3, r4, #4
 8001d6e:	6830      	ldr	r0, [r6, #0]
 8001d70:	5899      	ldr	r1, [r3, r2]
 8001d72:	f7fe f9c9 	bl	8000108 <strcmp>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d105      	bne.n	8001d86 <pFind+0xea>
						findArr[findC] = i;
 8001d7a:	783b      	ldrb	r3, [r7, #0]
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <pFind+0x134>)
 8001d7e:	b2e1      	uxtb	r1, r4
 8001d80:	54d1      	strb	r1, [r2, r3]
						findC++;
 8001d82:	3301      	adds	r3, #1
 8001d84:	703b      	strb	r3, [r7, #0]
				for(uint8_t i = 0; i < 36; i++)
 8001d86:	3401      	adds	r4, #1
 8001d88:	2c24      	cmp	r4, #36	; 0x24
 8001d8a:	d1ec      	bne.n	8001d66 <pFind+0xca>
				firstF = true;
 8001d8c:	2301      	movs	r3, #1
				return FINDR;
 8001d8e:	2006      	movs	r0, #6
				udf = true;
 8001d90:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <pFind+0x11c>)
				firstF = true;
 8001d92:	702b      	strb	r3, [r5, #0]
				udf = true;
 8001d94:	7013      	strb	r3, [r2, #0]
}
 8001d96:	b005      	add	sp, #20
 8001d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else SSD1306_Puts(ptFindName, &Font_6x8, 1);
 8001d9a:	0022      	movs	r2, r4
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	e7dc      	b.n	8001d5a <pFind+0xbe>
 8001da0:	20000008 	.word	0x20000008
 8001da4:	2000043c 	.word	0x2000043c
 8001da8:	20000950 	.word	0x20000950
 8001dac:	20000957 	.word	0x20000957
 8001db0:	2000040c 	.word	0x2000040c
 8001db4:	00000e74 	.word	0x00000e74
 8001db8:	2000001a 	.word	0x2000001a
 8001dbc:	20000015 	.word	0x20000015
 8001dc0:	08006b4f 	.word	0x08006b4f
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	08006b55 	.word	0x08006b55
 8001dcc:	2000070c 	.word	0x2000070c
 8001dd0:	20000418 	.word	0x20000418

08001dd4 <findR>:

MODE findR(){
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 8001dd6:	4e90      	ldr	r6, [pc, #576]	; (8002018 <findR+0x244>)
 8001dd8:	4f90      	ldr	r7, [pc, #576]	; (800201c <findR+0x248>)
 8001dda:	7833      	ldrb	r3, [r6, #0]
MODE findR(){
 8001ddc:	b085      	sub	sp, #20
	if(firstF){
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <findR+0x14>
		firstF = false;
 8001de2:	2300      	movs	r3, #0
 8001de4:	7033      	strb	r3, [r6, #0]
		sel = 0;
 8001de6:	703b      	strb	r3, [r7, #0]
	}
	if(ledC >= 1000) ledC = 0;
 8001de8:	21fa      	movs	r1, #250	; 0xfa
 8001dea:	4a8d      	ldr	r2, [pc, #564]	; (8002020 <findR+0x24c>)
 8001dec:	0089      	lsls	r1, r1, #2
 8001dee:	8813      	ldrh	r3, [r2, #0]
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d200      	bcs.n	8001df6 <findR+0x22>
 8001df4:	e07a      	b.n	8001eec <findR+0x118>
 8001df6:	2300      	movs	r3, #0
 8001df8:	8013      	strh	r3, [r2, #0]
MODE findR(){
 8001dfa:	2500      	movs	r5, #0
	if(ledC < 500)
		for(uint8_t i = 0; i < 36; i++)
			led_color(pt[findArr[i]].pos, PTRF, PTGF, PTBF);
 8001dfc:	2404      	movs	r4, #4
 8001dfe:	4b89      	ldr	r3, [pc, #548]	; (8002024 <findR+0x250>)
 8001e00:	4a89      	ldr	r2, [pc, #548]	; (8002028 <findR+0x254>)
 8001e02:	5d5b      	ldrb	r3, [r3, r5]
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	18d3      	adds	r3, r2, r3
 8001e08:	7998      	ldrb	r0, [r3, #6]
 8001e0a:	4a86      	ldr	r2, [pc, #536]	; (8002024 <findR+0x250>)
 8001e0c:	783b      	ldrb	r3, [r7, #0]
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	4a85      	ldr	r2, [pc, #532]	; (8002028 <findR+0x254>)
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	18d3      	adds	r3, r2, r3
 8001e16:	7919      	ldrb	r1, [r3, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	0023      	movs	r3, r4
 8001e1c:	2901      	cmp	r1, #1
 8001e1e:	d005      	beq.n	8001e2c <findR+0x58>
 8001e20:	2903      	cmp	r1, #3
 8001e22:	d000      	beq.n	8001e26 <findR+0x52>
 8001e24:	e0f0      	b.n	8002008 <findR+0x234>
 8001e26:	0022      	movs	r2, r4
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2304      	movs	r3, #4
		for(uint8_t i = 0; i < 36; i++)
 8001e2c:	3501      	adds	r5, #1
			led_color(pt[findArr[i]].pos, PTRF, PTGF, PTBF);
 8001e2e:	f7fe fc83 	bl	8000738 <led_color>
		for(uint8_t i = 0; i < 36; i++)
 8001e32:	2d24      	cmp	r5, #36	; 0x24
 8001e34:	d1e3      	bne.n	8001dfe <findR+0x2a>
	else led_color(pt[findArr[sel]].pos, 0, 0, 0);
	if(reC >= 250){
 8001e36:	4b7d      	ldr	r3, [pc, #500]	; (800202c <findR+0x258>)
 8001e38:	4d7d      	ldr	r5, [pc, #500]	; (8002030 <findR+0x25c>)
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	2af9      	cmp	r2, #249	; 0xf9
 8001e3e:	d910      	bls.n	8001e62 <findR+0x8e>
		reC = 0;
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
		led_update();
 8001e44:	f7fe fc84 	bl	8000750 <led_update>
		if(JOY_U && sel)sel--;
 8001e48:	22fa      	movs	r2, #250	; 0xfa
 8001e4a:	4b7a      	ldr	r3, [pc, #488]	; (8002034 <findR+0x260>)
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	885b      	ldrh	r3, [r3, #2]
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d95d      	bls.n	8001f10 <findR+0x13c>
 8001e54:	783b      	ldrb	r3, [r7, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <findR+0x8a>
 8001e5a:	3b01      	subs	r3, #1
		if(JOY_D && sel < (findC - 1)) sel++;
 8001e5c:	703b      	strb	r3, [r7, #0]
		if(JOY_U || JOY_D) udf = true;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	702b      	strb	r3, [r5, #0]
	}
	if(JOY_P){
 8001e62:	20a0      	movs	r0, #160	; 0xa0
 8001e64:	2104      	movs	r1, #4
 8001e66:	05c0      	lsls	r0, r0, #23
 8001e68:	f002 f840 	bl	8003eec <HAL_GPIO_ReadPin>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d000      	beq.n	8001e72 <findR+0x9e>
 8001e70:	e08d      	b.n	8001f8e <findR+0x1ba>
		if(!oldsw){
 8001e72:	4b71      	ldr	r3, [pc, #452]	; (8002038 <findR+0x264>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d159      	bne.n	8001f2e <findR+0x15a>
			udf = true;
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	702b      	strb	r3, [r5, #0]
			swS();
 8001e7e:	f7fe fcd1 	bl	8000824 <swS>
			logShift();
 8001e82:	f7fe fd4d 	bl	8000920 <logShift>
			DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 8001e86:	4c6d      	ldr	r4, [pc, #436]	; (800203c <findR+0x268>)
 8001e88:	0020      	movs	r0, r4
 8001e8a:	1ca2      	adds	r2, r4, #2
 8001e8c:	1c61      	adds	r1, r4, #1
 8001e8e:	f7fe fbf7 	bl	8000680 <DS3231_get_date>
			DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001e92:	4e6b      	ldr	r6, [pc, #428]	; (8002040 <findR+0x26c>)
 8001e94:	0032      	movs	r2, r6
 8001e96:	1c71      	adds	r1, r6, #1
 8001e98:	1cb0      	adds	r0, r6, #2
 8001e9a:	f7fe fb5b 	bl	8000554 <DS3231_get_time>
			pLog[0].workCate = 3;
 8001e9e:	4b69      	ldr	r3, [pc, #420]	; (8002044 <findR+0x270>)
 8001ea0:	2203      	movs	r2, #3
			pLog[0].date = date;
 8001ea2:	0018      	movs	r0, r3
			pLog[0].workCate = 3;
 8001ea4:	701a      	strb	r2, [r3, #0]
			pLog[0].date = date;
 8001ea6:	0021      	movs	r1, r4
 8001ea8:	3201      	adds	r2, #1
 8001eaa:	3030      	adds	r0, #48	; 0x30
 8001eac:	f003 fbe4 	bl	8005678 <memcpy>
			pLog[0].time = time;
 8001eb0:	4864      	ldr	r0, [pc, #400]	; (8002044 <findR+0x270>)
 8001eb2:	0031      	movs	r1, r6
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	302d      	adds	r0, #45	; 0x2d
 8001eb8:	f003 fbde 	bl	8005678 <memcpy>
			sprintf(pLog[0].content[0], "Sear:%s", ptFindName);
 8001ebc:	4b62      	ldr	r3, [pc, #392]	; (8002048 <findR+0x274>)
 8001ebe:	4e63      	ldr	r6, [pc, #396]	; (800204c <findR+0x278>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4963      	ldr	r1, [pc, #396]	; (8002050 <findR+0x27c>)
 8001ec4:	0030      	movs	r0, r6
 8001ec6:	f003 fd1b 	bl	8005900 <siprintf>
			sprintf(pLog[0].content[0], "Num of Find:%u", findC);
 8001eca:	4c62      	ldr	r4, [pc, #392]	; (8002054 <findR+0x280>)
 8001ecc:	0030      	movs	r0, r6
 8001ece:	7822      	ldrb	r2, [r4, #0]
 8001ed0:	4961      	ldr	r1, [pc, #388]	; (8002058 <findR+0x284>)
 8001ed2:	f003 fd15 	bl	8005900 <siprintf>
			if(findC){
 8001ed6:	7820      	ldrb	r0, [r4, #0]
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d025      	beq.n	8001f28 <findR+0x154>
				usePos = findArr[sel];
				return USE;
 8001edc:	2003      	movs	r0, #3
				usePos = findArr[sel];
 8001ede:	783b      	ldrb	r3, [r7, #0]
 8001ee0:	4a50      	ldr	r2, [pc, #320]	; (8002024 <findR+0x250>)
 8001ee2:	5cd2      	ldrb	r2, [r2, r3]
 8001ee4:	4b5d      	ldr	r3, [pc, #372]	; (800205c <findR+0x288>)
 8001ee6:	701a      	strb	r2, [r3, #0]
			free(bf);
		}else SSD1306_PutsXY(0, 1, "Not Found..", 1);
		SSD1306_UpdateScreen();
	}
	return FINDR;
}
 8001ee8:	b005      	add	sp, #20
 8001eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(ledC < 500)
 8001eec:	22fa      	movs	r2, #250	; 0xfa
 8001eee:	0052      	lsls	r2, r2, #1
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d200      	bcs.n	8001ef6 <findR+0x122>
 8001ef4:	e781      	b.n	8001dfa <findR+0x26>
	else led_color(pt[findArr[sel]].pos, 0, 0, 0);
 8001ef6:	783b      	ldrb	r3, [r7, #0]
 8001ef8:	4a4a      	ldr	r2, [pc, #296]	; (8002024 <findR+0x250>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	4a4a      	ldr	r2, [pc, #296]	; (8002028 <findR+0x254>)
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	18d3      	adds	r3, r2, r3
 8001f02:	7998      	ldrb	r0, [r3, #6]
 8001f04:	2300      	movs	r3, #0
 8001f06:	001a      	movs	r2, r3
 8001f08:	0019      	movs	r1, r3
 8001f0a:	f7fe fc15 	bl	8000738 <led_color>
 8001f0e:	e792      	b.n	8001e36 <findR+0x62>
		if(JOY_D && sel < (findC - 1)) sel++;
 8001f10:	2296      	movs	r2, #150	; 0x96
 8001f12:	0052      	lsls	r2, r2, #1
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d2a4      	bcs.n	8001e62 <findR+0x8e>
 8001f18:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <findR+0x280>)
 8001f1a:	783b      	ldrb	r3, [r7, #0]
 8001f1c:	7812      	ldrb	r2, [r2, #0]
 8001f1e:	3a01      	subs	r2, #1
 8001f20:	4293      	cmp	r3, r2
 8001f22:	da9c      	bge.n	8001e5e <findR+0x8a>
 8001f24:	3301      	adds	r3, #1
 8001f26:	e799      	b.n	8001e5c <findR+0x88>
				udf = true;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	702b      	strb	r3, [r5, #0]
				return MAIN;
 8001f2c:	e7dc      	b.n	8001ee8 <findR+0x114>
		findC = 0;
 8001f2e:	4b49      	ldr	r3, [pc, #292]	; (8002054 <findR+0x280>)
 8001f30:	7018      	strb	r0, [r3, #0]
		firstF = true;
 8001f32:	2301      	movs	r3, #1
 8001f34:	7033      	strb	r3, [r6, #0]
		udf = false;
 8001f36:	2400      	movs	r4, #0
 8001f38:	702c      	strb	r4, [r5, #0]
		basicScreen();
 8001f3a:	f7fe fc65 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Find result", 0);
 8001f3e:	0023      	movs	r3, r4
 8001f40:	0020      	movs	r0, r4
 8001f42:	0021      	movs	r1, r4
 8001f44:	4a46      	ldr	r2, [pc, #280]	; (8002060 <findR+0x28c>)
 8001f46:	f7fe fc4f 	bl	80007e8 <SSD1306_PutsXY>
		if(findC){
 8001f4a:	4b42      	ldr	r3, [pc, #264]	; (8002054 <findR+0x280>)
 8001f4c:	7818      	ldrb	r0, [r3, #0]
 8001f4e:	42a0      	cmp	r0, r4
 8001f50:	d054      	beq.n	8001ffc <findR+0x228>
			String bf = (String)calloc(0, sizeof(char) * 31);
 8001f52:	211f      	movs	r1, #31
 8001f54:	0020      	movs	r0, r4
 8001f56:	f003 fb51 	bl	80055fc <calloc>
			SSD1306_PutsXY(0, sel + 2, ">", 1);
 8001f5a:	7839      	ldrb	r1, [r7, #0]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	3102      	adds	r1, #2
 8001f60:	4a40      	ldr	r2, [pc, #256]	; (8002064 <findR+0x290>)
 8001f62:	b2c9      	uxtb	r1, r1
			String bf = (String)calloc(0, sizeof(char) * 31);
 8001f64:	0005      	movs	r5, r0
			SSD1306_PutsXY(0, sel + 2, ">", 1);
 8001f66:	0020      	movs	r0, r4
 8001f68:	f7fe fc3e 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_PutsXY(0, 1, "Find some Parts!", 1);
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	0020      	movs	r0, r4
 8001f70:	0019      	movs	r1, r3
 8001f72:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <findR+0x294>)
 8001f74:	f7fe fc38 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < findC; i++){
 8001f78:	4b36      	ldr	r3, [pc, #216]	; (8002054 <findR+0x280>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	42a3      	cmp	r3, r4
 8001f7e:	d80b      	bhi.n	8001f98 <findR+0x1c4>
			free(bf);
 8001f80:	0028      	movs	r0, r5
 8001f82:	f003 fb6f 	bl	8005664 <free>
		SSD1306_UpdateScreen();
 8001f86:	f001 f879 	bl	800307c <SSD1306_UpdateScreen>
	return FINDR;
 8001f8a:	2006      	movs	r0, #6
 8001f8c:	e7ac      	b.n	8001ee8 <findR+0x114>
	if(udf){
 8001f8e:	782b      	ldrb	r3, [r5, #0]
	return FINDR;
 8001f90:	2006      	movs	r0, #6
	if(udf){
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0a8      	beq.n	8001ee8 <findR+0x114>
 8001f96:	e7ce      	b.n	8001f36 <findR+0x162>
				tempX = (pt[findArr[i]].pos) % 6 + 1;
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <findR+0x250>)
 8001f9a:	2106      	movs	r1, #6
 8001f9c:	5d1e      	ldrb	r6, [r3, r4]
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <findR+0x254>)
 8001fa0:	0136      	lsls	r6, r6, #4
 8001fa2:	199b      	adds	r3, r3, r6
 8001fa4:	799f      	ldrb	r7, [r3, #6]
 8001fa6:	9303      	str	r3, [sp, #12]
 8001fa8:	0038      	movs	r0, r7
 8001faa:	f7fe f951 	bl	8000250 <__aeabi_uidivmod>
 8001fae:	3101      	adds	r1, #1
 8001fb0:	b2cb      	uxtb	r3, r1
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	9a02      	ldr	r2, [sp, #8]
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <findR+0x298>)
				tempY = 6 - (pt[findArr[i]].pos) / 6;
 8001fb8:	2106      	movs	r1, #6
				tempX = (pt[findArr[i]].pos) % 6 + 1;
 8001fba:	701a      	strb	r2, [r3, #0]
				tempY = 6 - (pt[findArr[i]].pos) / 6;
 8001fbc:	0038      	movs	r0, r7
 8001fbe:	f7fe f8c1 	bl	8000144 <__udivsi3>
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	1a18      	subs	r0, r3, r0
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <findR+0x29c>)
 8001fc8:	b2c0      	uxtb	r0, r0
 8001fca:	7018      	strb	r0, [r3, #0]
				sprintf(bf, "%s(%s/%d,%d)", pt[findArr[i]].name, ptCate[pt[findArr[i]].cate], tempX, tempY);
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <findR+0x254>)
 8001fce:	9902      	ldr	r1, [sp, #8]
 8001fd0:	599a      	ldr	r2, [r3, r6]
 8001fd2:	9b03      	ldr	r3, [sp, #12]
 8001fd4:	791b      	ldrb	r3, [r3, #4]
 8001fd6:	9100      	str	r1, [sp, #0]
 8001fd8:	4926      	ldr	r1, [pc, #152]	; (8002074 <findR+0x2a0>)
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	585b      	ldr	r3, [r3, r1]
 8001fde:	9001      	str	r0, [sp, #4]
 8001fe0:	4925      	ldr	r1, [pc, #148]	; (8002078 <findR+0x2a4>)
 8001fe2:	0028      	movs	r0, r5
 8001fe4:	f003 fc8c 	bl	8005900 <siprintf>
				SSD1306_PutsXY(1, i + 2, bf, 1);
 8001fe8:	2301      	movs	r3, #1
 8001fea:	1ca1      	adds	r1, r4, #2
 8001fec:	002a      	movs	r2, r5
 8001fee:	0018      	movs	r0, r3
 8001ff0:	b2c9      	uxtb	r1, r1
			for(uint8_t i = 0; i < findC; i++){
 8001ff2:	3401      	adds	r4, #1
				SSD1306_PutsXY(1, i + 2, bf, 1);
 8001ff4:	f7fe fbf8 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < findC; i++){
 8001ff8:	b2e4      	uxtb	r4, r4
 8001ffa:	e7bd      	b.n	8001f78 <findR+0x1a4>
		}else SSD1306_PutsXY(0, 1, "Not Found..", 1);
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <findR+0x2a8>)
 8002000:	0019      	movs	r1, r3
 8002002:	f7fe fbf1 	bl	80007e8 <SSD1306_PutsXY>
 8002006:	e7be      	b.n	8001f86 <findR+0x1b2>
			led_color(pt[findArr[i]].pos, PTRF, PTGF, PTBF);
 8002008:	2201      	movs	r2, #1
 800200a:	2902      	cmp	r1, #2
 800200c:	d100      	bne.n	8002010 <findR+0x23c>
 800200e:	0022      	movs	r2, r4
 8002010:	0021      	movs	r1, r4
 8002012:	2300      	movs	r3, #0
 8002014:	e70a      	b.n	8001e2c <findR+0x58>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	20000008 	.word	0x20000008
 800201c:	20000958 	.word	0x20000958
 8002020:	200005c8 	.word	0x200005c8
 8002024:	20000418 	.word	0x20000418
 8002028:	2000070c 	.word	0x2000070c
 800202c:	20000957 	.word	0x20000957
 8002030:	2000001a 	.word	0x2000001a
 8002034:	2000040c 	.word	0x2000040c
 8002038:	20000015 	.word	0x20000015
 800203c:	20000414 	.word	0x20000414
 8002040:	2000095e 	.word	0x2000095e
 8002044:	200005d2 	.word	0x200005d2
 8002048:	20000950 	.word	0x20000950
 800204c:	200005d3 	.word	0x200005d3
 8002050:	08006b65 	.word	0x08006b65
 8002054:	2000043c 	.word	0x2000043c
 8002058:	08006b6d 	.word	0x08006b6d
 800205c:	2000001b 	.word	0x2000001b
 8002060:	08006b7c 	.word	0x08006b7c
 8002064:	08006a8b 	.word	0x08006a8b
 8002068:	08006b89 	.word	0x08006b89
 800206c:	2000095c 	.word	0x2000095c
 8002070:	2000095d 	.word	0x2000095d
 8002074:	08006cc4 	.word	0x08006cc4
 8002078:	08006b9a 	.word	0x08006b9a
 800207c:	08006ba7 	.word	0x08006ba7

08002080 <partition>:

MODE partition(){
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t ptiSX = 1, ptiEX = 1;
	static uint8_t ptiSY = 1, ptiEY = 1;
	static uint8_t selPtpos = 0;
	static uint8_t tempPtiC= 0;
	static uint8_t ptiC = 0;
	if(firstF){
 8002082:	4bc2      	ldr	r3, [pc, #776]	; (800238c <partition+0x30c>)
MODE partition(){
 8002084:	b089      	sub	sp, #36	; 0x24
	if(firstF){
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d015      	beq.n	80020b8 <partition+0x38>
		firstF = false;
 800208c:	2300      	movs	r3, #0
 800208e:	4abf      	ldr	r2, [pc, #764]	; (800238c <partition+0x30c>)
		sel = 0;
		ptiSX = 1;
 8002090:	49bf      	ldr	r1, [pc, #764]	; (8002390 <partition+0x310>)
		firstF = false;
 8002092:	7013      	strb	r3, [r2, #0]
		sel = 0;
 8002094:	4abf      	ldr	r2, [pc, #764]	; (8002394 <partition+0x314>)
 8002096:	7013      	strb	r3, [r2, #0]
		ptiSX = 1;
 8002098:	2201      	movs	r2, #1
 800209a:	700a      	strb	r2, [r1, #0]
		ptiSY = 1;
 800209c:	49be      	ldr	r1, [pc, #760]	; (8002398 <partition+0x318>)
 800209e:	700a      	strb	r2, [r1, #0]
		ptiEX = 1;
 80020a0:	49be      	ldr	r1, [pc, #760]	; (800239c <partition+0x31c>)
 80020a2:	700a      	strb	r2, [r1, #0]
		ptiEY = 1;
 80020a4:	49be      	ldr	r1, [pc, #760]	; (80023a0 <partition+0x320>)
 80020a6:	700a      	strb	r2, [r1, #0]
		selPtpos = 0;
 80020a8:	4abe      	ldr	r2, [pc, #760]	; (80023a4 <partition+0x324>)
 80020aa:	7013      	strb	r3, [r2, #0]
		tempPtiC = 0;
 80020ac:	4abe      	ldr	r2, [pc, #760]	; (80023a8 <partition+0x328>)
 80020ae:	7013      	strb	r3, [r2, #0]
		led_clear();
 80020b0:	f7fe fb78 	bl	80007a4 <led_clear>
		led_update();
 80020b4:	f7fe fb4c 	bl	8000750 <led_update>
	}
	if(RE1){
 80020b8:	4bbc      	ldr	r3, [pc, #752]	; (80023ac <partition+0x32c>)
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	2a63      	cmp	r2, #99	; 0x63
 80020be:	d800      	bhi.n	80020c2 <partition+0x42>
 80020c0:	e0c4      	b.n	800224c <partition+0x1cc>
		reC = 0;
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
		led_clear();
 80020c6:	f7fe fb6d 	bl	80007a4 <led_clear>
		if(JOY_R){
 80020ca:	22fa      	movs	r2, #250	; 0xfa
 80020cc:	49b8      	ldr	r1, [pc, #736]	; (80023b0 <partition+0x330>)
 80020ce:	4cb1      	ldr	r4, [pc, #708]	; (8002394 <partition+0x314>)
 80020d0:	880b      	ldrh	r3, [r1, #0]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d928      	bls.n	800212a <partition+0xaa>
			if(ptiSX < 6 && sel == 0) ptiSX++;
 80020d8:	48ad      	ldr	r0, [pc, #692]	; (8002390 <partition+0x310>)
 80020da:	7825      	ldrb	r5, [r4, #0]
 80020dc:	7802      	ldrb	r2, [r0, #0]
 80020de:	2a05      	cmp	r2, #5
 80020e0:	d803      	bhi.n	80020ea <partition+0x6a>
 80020e2:	2d00      	cmp	r5, #0
 80020e4:	d101      	bne.n	80020ea <partition+0x6a>
 80020e6:	3201      	adds	r2, #1
 80020e8:	7002      	strb	r2, [r0, #0]
			if(ptiEX < 6 && sel == 1) ptiEX++;
 80020ea:	48ac      	ldr	r0, [pc, #688]	; (800239c <partition+0x31c>)
 80020ec:	7802      	ldrb	r2, [r0, #0]
 80020ee:	2a05      	cmp	r2, #5
 80020f0:	d802      	bhi.n	80020f8 <partition+0x78>
 80020f2:	3201      	adds	r2, #1
 80020f4:	2d01      	cmp	r5, #1
 80020f6:	d02c      	beq.n	8002152 <partition+0xd2>
		}
		if(JOY_L){
			if(ptiSX > 1 && sel == 0) ptiSX--;
			if(ptiEX > 1 && sel == 1) ptiEX--;
		}
		if(JOY_U){
 80020f8:	20fa      	movs	r0, #250	; 0xfa
 80020fa:	8849      	ldrh	r1, [r1, #2]
			if(ptiSX < 6 && sel == 0) ptiSX++;
 80020fc:	7822      	ldrb	r2, [r4, #0]
		if(JOY_U){
 80020fe:	0100      	lsls	r0, r0, #4
 8002100:	4281      	cmp	r1, r0
 8002102:	d928      	bls.n	8002156 <partition+0xd6>
			if(ptiSY < 6 && sel == 0) ptiSY++;
 8002104:	49a4      	ldr	r1, [pc, #656]	; (8002398 <partition+0x318>)
 8002106:	780b      	ldrb	r3, [r1, #0]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d803      	bhi.n	8002114 <partition+0x94>
 800210c:	2a00      	cmp	r2, #0
 800210e:	d101      	bne.n	8002114 <partition+0x94>
 8002110:	3301      	adds	r3, #1
 8002112:	700b      	strb	r3, [r1, #0]
			if(ptiEY < 6 && sel == 1) ptiEY++;
 8002114:	49a2      	ldr	r1, [pc, #648]	; (80023a0 <partition+0x320>)
 8002116:	780b      	ldrb	r3, [r1, #0]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d802      	bhi.n	8002122 <partition+0xa2>
 800211c:	3301      	adds	r3, #1
 800211e:	2a01      	cmp	r2, #1
 8002120:	d02c      	beq.n	800217c <partition+0xfc>
		}
		if(JOY_D){
			if(ptiSY > 1 && sel == 0) ptiSY--;
			if(ptiEY > 1 && sel == 1) ptiEY--;
		}
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 8002122:	2101      	movs	r1, #1
 8002124:	4ba3      	ldr	r3, [pc, #652]	; (80023b4 <partition+0x334>)
 8002126:	7019      	strb	r1, [r3, #0]
 8002128:	e030      	b.n	800218c <partition+0x10c>
		if(JOY_L){
 800212a:	2296      	movs	r2, #150	; 0x96
			if(ptiSX < 6 && sel == 0) ptiSX++;
 800212c:	7825      	ldrb	r5, [r4, #0]
		if(JOY_L){
 800212e:	0052      	lsls	r2, r2, #1
 8002130:	4293      	cmp	r3, r2
 8002132:	d2e1      	bcs.n	80020f8 <partition+0x78>
			if(ptiSX > 1 && sel == 0) ptiSX--;
 8002134:	4896      	ldr	r0, [pc, #600]	; (8002390 <partition+0x310>)
 8002136:	7802      	ldrb	r2, [r0, #0]
 8002138:	2a01      	cmp	r2, #1
 800213a:	d903      	bls.n	8002144 <partition+0xc4>
 800213c:	2d00      	cmp	r5, #0
 800213e:	d101      	bne.n	8002144 <partition+0xc4>
 8002140:	3a01      	subs	r2, #1
 8002142:	7002      	strb	r2, [r0, #0]
			if(ptiEX > 1 && sel == 1) ptiEX--;
 8002144:	4895      	ldr	r0, [pc, #596]	; (800239c <partition+0x31c>)
 8002146:	7802      	ldrb	r2, [r0, #0]
 8002148:	2a01      	cmp	r2, #1
 800214a:	d9d5      	bls.n	80020f8 <partition+0x78>
 800214c:	2d01      	cmp	r5, #1
 800214e:	d1d3      	bne.n	80020f8 <partition+0x78>
 8002150:	3a01      	subs	r2, #1
 8002152:	7002      	strb	r2, [r0, #0]
 8002154:	e7d0      	b.n	80020f8 <partition+0x78>
		if(JOY_D){
 8002156:	2096      	movs	r0, #150	; 0x96
 8002158:	0040      	lsls	r0, r0, #1
 800215a:	4281      	cmp	r1, r0
 800215c:	d210      	bcs.n	8002180 <partition+0x100>
			if(ptiSY > 1 && sel == 0) ptiSY--;
 800215e:	498e      	ldr	r1, [pc, #568]	; (8002398 <partition+0x318>)
 8002160:	780b      	ldrb	r3, [r1, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d903      	bls.n	800216e <partition+0xee>
 8002166:	2a00      	cmp	r2, #0
 8002168:	d101      	bne.n	800216e <partition+0xee>
 800216a:	3b01      	subs	r3, #1
 800216c:	700b      	strb	r3, [r1, #0]
			if(ptiEY > 1 && sel == 1) ptiEY--;
 800216e:	498c      	ldr	r1, [pc, #560]	; (80023a0 <partition+0x320>)
 8002170:	780b      	ldrb	r3, [r1, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d9d5      	bls.n	8002122 <partition+0xa2>
 8002176:	2a01      	cmp	r2, #1
 8002178:	d1d3      	bne.n	8002122 <partition+0xa2>
 800217a:	3b01      	subs	r3, #1
 800217c:	700b      	strb	r3, [r1, #0]
 800217e:	e7d0      	b.n	8002122 <partition+0xa2>
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 8002180:	3b2d      	subs	r3, #45	; 0x2d
 8002182:	3bff      	subs	r3, #255	; 0xff
 8002184:	498c      	ldr	r1, [pc, #560]	; (80023b8 <partition+0x338>)
 8002186:	b29b      	uxth	r3, r3
 8002188:	428b      	cmp	r3, r1
 800218a:	d8ca      	bhi.n	8002122 <partition+0xa2>
		if(sel == 0) ledPos = (6 - ptiSY) * 6 + ptiSX - 1;
 800218c:	2a00      	cmp	r2, #0
 800218e:	d000      	beq.n	8002192 <partition+0x112>
 8002190:	e0e9      	b.n	8002366 <partition+0x2e6>
 8002192:	4b81      	ldr	r3, [pc, #516]	; (8002398 <partition+0x318>)
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	2306      	movs	r3, #6
 8002198:	1a9a      	subs	r2, r3, r2
 800219a:	4353      	muls	r3, r2
 800219c:	4a7c      	ldr	r2, [pc, #496]	; (8002390 <partition+0x310>)
		if(sel == 1) ledPos = (6 - ptiEY) * 6 + ptiEX - 1;
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	4d86      	ldr	r5, [pc, #536]	; (80023bc <partition+0x33c>)
 80021a2:	3a01      	subs	r2, #1
 80021a4:	189b      	adds	r3, r3, r2
 80021a6:	4a86      	ldr	r2, [pc, #536]	; (80023c0 <partition+0x340>)
 80021a8:	7013      	strb	r3, [r2, #0]
		if(sel <= 1){
			for(uint8_t i = 0; i < 36; i++) if(!pt[i].cate) led_color(pt[i].pos, PTR, PTG, PTB);
 80021aa:	2390      	movs	r3, #144	; 0x90
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	18ee      	adds	r6, r5, r3
 80021b0:	792b      	ldrb	r3, [r5, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <partition+0x140>
 80021b6:	2201      	movs	r2, #1
 80021b8:	2104      	movs	r1, #4
 80021ba:	79a8      	ldrb	r0, [r5, #6]
 80021bc:	f7fe fabc 	bl	8000738 <led_color>
 80021c0:	3510      	adds	r5, #16
 80021c2:	42b5      	cmp	r5, r6
 80021c4:	d1f4      	bne.n	80021b0 <partition+0x130>
			led_color(ledPos, 4, 4, 4);
 80021c6:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <partition+0x340>)
 80021c8:	7818      	ldrb	r0, [r3, #0]
 80021ca:	2304      	movs	r3, #4
 80021cc:	001a      	movs	r2, r3
 80021ce:	0019      	movs	r1, r3
 80021d0:	f7fe fab2 	bl	8000738 <led_color>
			led_update();
 80021d4:	f7fe fabc 	bl	8000750 <led_update>
		}
		if(sel == 2){
 80021d8:	7823      	ldrb	r3, [r4, #0]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d136      	bne.n	800224c <partition+0x1cc>
			if(ledC >= 1000) ledC = 0;
 80021de:	21fa      	movs	r1, #250	; 0xfa
 80021e0:	4a78      	ldr	r2, [pc, #480]	; (80023c4 <partition+0x344>)
 80021e2:	0089      	lsls	r1, r1, #2
 80021e4:	8813      	ldrh	r3, [r2, #0]
 80021e6:	428b      	cmp	r3, r1
 80021e8:	d200      	bcs.n	80021ec <partition+0x16c>
 80021ea:	e0c6      	b.n	800237a <partition+0x2fa>
 80021ec:	2300      	movs	r3, #0
 80021ee:	8013      	strh	r3, [r2, #0]
MODE partition(){
 80021f0:	2400      	movs	r4, #0
			if(ledC < 500){
				for(uint8_t i = 0; i < 36; i++){
					tempX = i % 6 + 1;
 80021f2:	2606      	movs	r6, #6
 80021f4:	0031      	movs	r1, r6
 80021f6:	0020      	movs	r0, r4
 80021f8:	f7fe f82a 	bl	8000250 <__aeabi_uidivmod>
 80021fc:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <partition+0x348>)
 80021fe:	3101      	adds	r1, #1
 8002200:	b2cd      	uxtb	r5, r1
 8002202:	701d      	strb	r5, [r3, #0]
					tempY = 6 - i / 6;
 8002204:	0031      	movs	r1, r6
 8002206:	0020      	movs	r0, r4
 8002208:	f7fd ff9c 	bl	8000144 <__udivsi3>
 800220c:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <partition+0x34c>)
 800220e:	1a30      	subs	r0, r6, r0
 8002210:	b2c0      	uxtb	r0, r0
 8002212:	7018      	strb	r0, [r3, #0]
					if((tempX >= minX && tempX <= maxX) && (tempY >= minY && tempY <= maxY))
 8002214:	4b6e      	ldr	r3, [pc, #440]	; (80023d0 <partition+0x350>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	42ab      	cmp	r3, r5
 800221a:	d811      	bhi.n	8002240 <partition+0x1c0>
 800221c:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <partition+0x354>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	42ab      	cmp	r3, r5
 8002222:	d30d      	bcc.n	8002240 <partition+0x1c0>
 8002224:	4b6c      	ldr	r3, [pc, #432]	; (80023d8 <partition+0x358>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4283      	cmp	r3, r0
 800222a:	d809      	bhi.n	8002240 <partition+0x1c0>
 800222c:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <partition+0x35c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4283      	cmp	r3, r0
 8002232:	d305      	bcc.n	8002240 <partition+0x1c0>
						led_color(i, 0, 4, 0);
 8002234:	2300      	movs	r3, #0
 8002236:	2204      	movs	r2, #4
 8002238:	0019      	movs	r1, r3
 800223a:	0020      	movs	r0, r4
 800223c:	f7fe fa7c 	bl	8000738 <led_color>
				for(uint8_t i = 0; i < 36; i++){
 8002240:	3401      	adds	r4, #1
 8002242:	b2e4      	uxtb	r4, r4
 8002244:	2c24      	cmp	r4, #36	; 0x24
 8002246:	d1d5      	bne.n	80021f4 <partition+0x174>
				}
			}else led_clear();
			led_update();
 8002248:	f7fe fa82 	bl	8000750 <led_update>
		}
	}
	if(JOY_P){
 800224c:	20a0      	movs	r0, #160	; 0xa0
 800224e:	2104      	movs	r1, #4
 8002250:	05c0      	lsls	r0, r0, #23
 8002252:	f001 fe4b 	bl	8003eec <HAL_GPIO_ReadPin>
		if(!oldsw){
 8002256:	4b62      	ldr	r3, [pc, #392]	; (80023e0 <partition+0x360>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4318      	orrs	r0, r3
 800225c:	b2c7      	uxtb	r7, r0
 800225e:	2f00      	cmp	r7, #0
 8002260:	d000      	beq.n	8002264 <partition+0x1e4>
 8002262:	e1af      	b.n	80025c4 <partition+0x544>
			swS();
 8002264:	f7fe fade 	bl	8000824 <swS>
			udf = true;
 8002268:	2301      	movs	r3, #1
 800226a:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <partition+0x334>)
 800226c:	7013      	strb	r3, [r2, #0]
			if(sel < 3) sel++;
 800226e:	4a49      	ldr	r2, [pc, #292]	; (8002394 <partition+0x314>)
 8002270:	7813      	ldrb	r3, [r2, #0]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d801      	bhi.n	800227a <partition+0x1fa>
 8002276:	3301      	adds	r3, #1
 8002278:	7013      	strb	r3, [r2, #0]
			if(sel == 1){
 800227a:	7813      	ldrb	r3, [r2, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d000      	beq.n	8002282 <partition+0x202>
 8002280:	e0ba      	b.n	80023f8 <partition+0x378>
				ptiEX = ptiSX;
 8002282:	4b43      	ldr	r3, [pc, #268]	; (8002390 <partition+0x310>)
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	4b45      	ldr	r3, [pc, #276]	; (800239c <partition+0x31c>)
 8002288:	701a      	strb	r2, [r3, #0]
				ptiEY = ptiSY;
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <partition+0x318>)
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <partition+0x320>)
 8002290:	701a      	strb	r2, [r3, #0]
				return MAIN;
			}
		}
	}
	if(udf){
		String bf = (String)calloc(0, sizeof(char) * 30);
 8002292:	211e      	movs	r1, #30
 8002294:	2000      	movs	r0, #0
 8002296:	f003 f9b1 	bl	80055fc <calloc>
		udf = false;
 800229a:	2500      	movs	r5, #0
		String bf = (String)calloc(0, sizeof(char) * 30);
 800229c:	0004      	movs	r4, r0
		udf = false;
 800229e:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <partition+0x334>)
 80022a0:	701d      	strb	r5, [r3, #0]
		led_update();
 80022a2:	f7fe fa55 	bl	8000750 <led_update>
		basicScreen();
 80022a6:	f7fe faaf 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Partition", 0);
 80022aa:	002b      	movs	r3, r5
 80022ac:	0029      	movs	r1, r5
 80022ae:	0028      	movs	r0, r5
 80022b0:	4a4c      	ldr	r2, [pc, #304]	; (80023e4 <partition+0x364>)
 80022b2:	f7fe fa99 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "Start (%d,%d)", ptiSX, ptiSY);
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <partition+0x318>)
 80022b8:	4a35      	ldr	r2, [pc, #212]	; (8002390 <partition+0x310>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	494a      	ldr	r1, [pc, #296]	; (80023e8 <partition+0x368>)
 80022c0:	0020      	movs	r0, r4
 80022c2:	f003 fb1d 	bl	8005900 <siprintf>
		SSD1306_PutsXY(0, 3, bf, 1);
 80022c6:	2301      	movs	r3, #1
 80022c8:	0022      	movs	r2, r4
 80022ca:	2103      	movs	r1, #3
 80022cc:	0028      	movs	r0, r5
 80022ce:	f7fe fa8b 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 80022d2:	4f3a      	ldr	r7, [pc, #232]	; (80023bc <partition+0x33c>)
		SSD1306_PutsXY(0, 3, bf, 1);
 80022d4:	003e      	movs	r6, r7
			if(pt[i].store && pt[i].pos == ledPos){
 80022d6:	8971      	ldrh	r1, [r6, #10]
 80022d8:	2900      	cmp	r1, #0
 80022da:	d100      	bne.n	80022de <partition+0x25e>
 80022dc:	e179      	b.n	80025d2 <partition+0x552>
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <partition+0x340>)
 80022e0:	79b2      	ldrb	r2, [r6, #6]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d000      	beq.n	80022ea <partition+0x26a>
 80022e8:	e173      	b.n	80025d2 <partition+0x552>
				if(pt[i].ptionC < 1) pt[i].ptionC = 1;
 80022ea:	7a33      	ldrb	r3, [r6, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <partition+0x274>
 80022f0:	3301      	adds	r3, #1
 80022f2:	7233      	strb	r3, [r6, #8]
				sprintf(bf, "%s(%s/%d/%d)", pt[i].name, ptCate[pt[i].cate], pt[i].store, pt[i].max * pt[i].ptionC);
 80022f4:	4a31      	ldr	r2, [pc, #196]	; (80023bc <partition+0x33c>)
 80022f6:	012b      	lsls	r3, r5, #4
 80022f8:	589b      	ldr	r3, [r3, r2]
 80022fa:	7930      	ldrb	r0, [r6, #4]
 80022fc:	9303      	str	r3, [sp, #12]
 80022fe:	89b3      	ldrh	r3, [r6, #12]
 8002300:	0080      	lsls	r0, r0, #2
 8002302:	469c      	mov	ip, r3
 8002304:	4662      	mov	r2, ip
 8002306:	7a33      	ldrb	r3, [r6, #8]
 8002308:	9100      	str	r1, [sp, #0]
 800230a:	4353      	muls	r3, r2
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	4b37      	ldr	r3, [pc, #220]	; (80023ec <partition+0x36c>)
 8002310:	9a03      	ldr	r2, [sp, #12]
 8002312:	58c3      	ldr	r3, [r0, r3]
 8002314:	4936      	ldr	r1, [pc, #216]	; (80023f0 <partition+0x370>)
 8002316:	0020      	movs	r0, r4
 8002318:	f003 faf2 	bl	8005900 <siprintf>
				SSD1306_PutsXY(0, 4, bf, 1);
 800231c:	2301      	movs	r3, #1
 800231e:	0022      	movs	r2, r4
			}else {
				SSD1306_PutsXY(0, 4, "(NONE)", 1);
 8002320:	2104      	movs	r1, #4
 8002322:	2000      	movs	r0, #0
		for(uint8_t i = 0; i < 36; i++){
 8002324:	3501      	adds	r5, #1
				SSD1306_PutsXY(0, 4, "(NONE)", 1);
 8002326:	f7fe fa5f 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 800232a:	3610      	adds	r6, #16
 800232c:	2d24      	cmp	r5, #36	; 0x24
 800232e:	d1d2      	bne.n	80022d6 <partition+0x256>
			}
		}
		if(sel == 1){
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <partition+0x314>)
 8002332:	781d      	ldrb	r5, [r3, #0]
 8002334:	2d01      	cmp	r5, #1
 8002336:	d100      	bne.n	800233a <partition+0x2ba>
 8002338:	e14e      	b.n	80025d8 <partition+0x558>
				}else {
					SSD1306_PutsXY(0, 4, "(NONE)", 1);
				}
			}
		}
		if(sel == 2){
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <partition+0x314>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d10b      	bne.n	800235a <partition+0x2da>
			sprintf(bf, "Total number:%d", tempPtiC);
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <partition+0x328>)
 8002344:	492b      	ldr	r1, [pc, #172]	; (80023f4 <partition+0x374>)
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	0020      	movs	r0, r4
 800234a:	f003 fad9 	bl	8005900 <siprintf>
			SSD1306_PutsXY(0, 3, bf, 1);
 800234e:	2301      	movs	r3, #1
 8002350:	0022      	movs	r2, r4
 8002352:	2103      	movs	r1, #3
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe fa47 	bl	80007e8 <SSD1306_PutsXY>
		}
		SSD1306_UpdateScreen();
 800235a:	f000 fe8f 	bl	800307c <SSD1306_UpdateScreen>
		free(bf);
 800235e:	0020      	movs	r0, r4
 8002360:	f003 f980 	bl	8005664 <free>
 8002364:	e133      	b.n	80025ce <partition+0x54e>
		if(sel == 1) ledPos = (6 - ptiEY) * 6 + ptiEX - 1;
 8002366:	2a01      	cmp	r2, #1
 8002368:	d000      	beq.n	800236c <partition+0x2ec>
 800236a:	e735      	b.n	80021d8 <partition+0x158>
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <partition+0x320>)
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	2306      	movs	r3, #6
 8002372:	1a9a      	subs	r2, r3, r2
 8002374:	4353      	muls	r3, r2
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <partition+0x31c>)
 8002378:	e711      	b.n	800219e <partition+0x11e>
			if(ledC < 500){
 800237a:	22fa      	movs	r2, #250	; 0xfa
 800237c:	0052      	lsls	r2, r2, #1
 800237e:	4293      	cmp	r3, r2
 8002380:	d200      	bcs.n	8002384 <partition+0x304>
 8002382:	e735      	b.n	80021f0 <partition+0x170>
			}else led_clear();
 8002384:	f7fe fa0e 	bl	80007a4 <led_clear>
 8002388:	e75e      	b.n	8002248 <partition+0x1c8>
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	20000008 	.word	0x20000008
 8002390:	20000018 	.word	0x20000018
 8002394:	20000958 	.word	0x20000958
 8002398:	20000019 	.word	0x20000019
 800239c:	20000016 	.word	0x20000016
 80023a0:	20000017 	.word	0x20000017
 80023a4:	2000095a 	.word	0x2000095a
 80023a8:	2000095b 	.word	0x2000095b
 80023ac:	20000957 	.word	0x20000957
 80023b0:	2000040c 	.word	0x2000040c
 80023b4:	2000001a 	.word	0x2000001a
 80023b8:	00000e74 	.word	0x00000e74
 80023bc:	2000070c 	.word	0x2000070c
 80023c0:	200005ca 	.word	0x200005ca
 80023c4:	200005c8 	.word	0x200005c8
 80023c8:	2000095c 	.word	0x2000095c
 80023cc:	2000095d 	.word	0x2000095d
 80023d0:	200005ce 	.word	0x200005ce
 80023d4:	200005cc 	.word	0x200005cc
 80023d8:	200005cf 	.word	0x200005cf
 80023dc:	200005cd 	.word	0x200005cd
 80023e0:	20000015 	.word	0x20000015
 80023e4:	08006c10 	.word	0x08006c10
 80023e8:	08006c1b 	.word	0x08006c1b
 80023ec:	08006cc4 	.word	0x08006cc4
 80023f0:	08006bd6 	.word	0x08006bd6
 80023f4:	08006c00 	.word	0x08006c00
			if(sel == 2){
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d100      	bne.n	80023fe <partition+0x37e>
 80023fc:	e08a      	b.n	8002514 <partition+0x494>
			if(sel == 3){
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d000      	beq.n	8002404 <partition+0x384>
 8002402:	e746      	b.n	8002292 <partition+0x212>
				for(uint8_t i = 0; i < 36; i++){
 8002404:	2400      	movs	r4, #0
				ptiC++;
 8002406:	4a92      	ldr	r2, [pc, #584]	; (8002650 <partition+0x5d0>)
 8002408:	7813      	ldrb	r3, [r2, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	7013      	strb	r3, [r2, #0]
				pt[selPtpos].ptionID = ptiC;
 8002410:	4a90      	ldr	r2, [pc, #576]	; (8002654 <partition+0x5d4>)
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	0111      	lsls	r1, r2, #4
 8002416:	9203      	str	r2, [sp, #12]
 8002418:	4a8f      	ldr	r2, [pc, #572]	; (8002658 <partition+0x5d8>)
 800241a:	1852      	adds	r2, r2, r1
 800241c:	71d3      	strb	r3, [r2, #7]
				pt[selPtpos].ptionC = tempPtiC;
 800241e:	4b8f      	ldr	r3, [pc, #572]	; (800265c <partition+0x5dc>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	7213      	strb	r3, [r2, #8]
					tempX = i % 6 + 1;
 8002424:	2106      	movs	r1, #6
 8002426:	0020      	movs	r0, r4
 8002428:	f7fd ff12 	bl	8000250 <__aeabi_uidivmod>
 800242c:	4b8c      	ldr	r3, [pc, #560]	; (8002660 <partition+0x5e0>)
 800242e:	3101      	adds	r1, #1
 8002430:	b2cd      	uxtb	r5, r1
 8002432:	701d      	strb	r5, [r3, #0]
					tempY = 6 - i / 6;
 8002434:	2106      	movs	r1, #6
 8002436:	0020      	movs	r0, r4
 8002438:	f7fd fe84 	bl	8000144 <__udivsi3>
 800243c:	2306      	movs	r3, #6
 800243e:	1a18      	subs	r0, r3, r0
 8002440:	4b88      	ldr	r3, [pc, #544]	; (8002664 <partition+0x5e4>)
 8002442:	b2c0      	uxtb	r0, r0
 8002444:	7018      	strb	r0, [r3, #0]
					if(tempX >= minX && tempX <= maxX){
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <partition+0x5e8>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	42ab      	cmp	r3, r5
 800244c:	d822      	bhi.n	8002494 <partition+0x414>
 800244e:	4b87      	ldr	r3, [pc, #540]	; (800266c <partition+0x5ec>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	42ab      	cmp	r3, r5
 8002454:	d31e      	bcc.n	8002494 <partition+0x414>
						if(tempY >= minY && tempY <= maxY){
 8002456:	4b86      	ldr	r3, [pc, #536]	; (8002670 <partition+0x5f0>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4283      	cmp	r3, r0
 800245c:	d81a      	bhi.n	8002494 <partition+0x414>
 800245e:	4b85      	ldr	r3, [pc, #532]	; (8002674 <partition+0x5f4>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	4283      	cmp	r3, r0
 8002464:	d316      	bcc.n	8002494 <partition+0x414>
							if(!pt[ptC].store){
 8002466:	4b84      	ldr	r3, [pc, #528]	; (8002678 <partition+0x5f8>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	469c      	mov	ip, r3
 800246c:	4662      	mov	r2, ip
 800246e:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <partition+0x5d8>)
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	189a      	adds	r2, r3, r2
 8002474:	8955      	ldrh	r5, [r2, #10]
 8002476:	2d00      	cmp	r5, #0
 8002478:	d10c      	bne.n	8002494 <partition+0x414>
								pt[ptC] = pt[selPtpos];
 800247a:	9d03      	ldr	r5, [sp, #12]
 800247c:	012d      	lsls	r5, r5, #4
 800247e:	195b      	adds	r3, r3, r5
 8002480:	0015      	movs	r5, r2
 8002482:	cb43      	ldmia	r3!, {r0, r1, r6}
 8002484:	c543      	stmia	r5!, {r0, r1, r6}
								pt[ptC++].pos = i;
 8002486:	4660      	mov	r0, ip
								pt[ptC] = pt[selPtpos];
 8002488:	681b      	ldr	r3, [r3, #0]
								pt[ptC++].pos = i;
 800248a:	3001      	adds	r0, #1
								pt[ptC] = pt[selPtpos];
 800248c:	602b      	str	r3, [r5, #0]
								pt[ptC++].pos = i;
 800248e:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <partition+0x5f8>)
 8002490:	7194      	strb	r4, [r2, #6]
 8002492:	7018      	strb	r0, [r3, #0]
				for(uint8_t i = 0; i < 36; i++){
 8002494:	3401      	adds	r4, #1
 8002496:	b2e4      	uxtb	r4, r4
 8002498:	2c24      	cmp	r4, #36	; 0x24
 800249a:	d1c3      	bne.n	8002424 <partition+0x3a4>
				logShift();
 800249c:	f7fe fa40 	bl	8000920 <logShift>
				DS3231_get_date(&date.day, &date.month, (uint8_t*)&date.year);
 80024a0:	4d76      	ldr	r5, [pc, #472]	; (800267c <partition+0x5fc>)
 80024a2:	0028      	movs	r0, r5
 80024a4:	1caa      	adds	r2, r5, #2
 80024a6:	1c69      	adds	r1, r5, #1
 80024a8:	f7fe f8ea 	bl	8000680 <DS3231_get_date>
				DS3231_get_time(&time.sec, &time.min, &time.hour);
 80024ac:	4e74      	ldr	r6, [pc, #464]	; (8002680 <partition+0x600>)
 80024ae:	0032      	movs	r2, r6
 80024b0:	1c71      	adds	r1, r6, #1
 80024b2:	1cb0      	adds	r0, r6, #2
 80024b4:	f7fe f84e 	bl	8000554 <DS3231_get_time>
				sprintf(pLog[0].content[0], "S(%d,%d) E(%d,%d)", ptiSX, ptiSY, ptiEX, ptiEY);
 80024b8:	4972      	ldr	r1, [pc, #456]	; (8002684 <partition+0x604>)
 80024ba:	4b73      	ldr	r3, [pc, #460]	; (8002688 <partition+0x608>)
 80024bc:	7809      	ldrb	r1, [r1, #0]
 80024be:	4a73      	ldr	r2, [pc, #460]	; (800268c <partition+0x60c>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	9101      	str	r1, [sp, #4]
 80024c6:	4972      	ldr	r1, [pc, #456]	; (8002690 <partition+0x610>)
 80024c8:	4872      	ldr	r0, [pc, #456]	; (8002694 <partition+0x614>)
 80024ca:	7809      	ldrb	r1, [r1, #0]
 80024cc:	9100      	str	r1, [sp, #0]
 80024ce:	4972      	ldr	r1, [pc, #456]	; (8002698 <partition+0x618>)
 80024d0:	f003 fa16 	bl	8005900 <siprintf>
				sprintf(pLog[0].content[1], "Size of ption:%d", tempPtiC);
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <partition+0x5dc>)
 80024d6:	4971      	ldr	r1, [pc, #452]	; (800269c <partition+0x61c>)
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	4871      	ldr	r0, [pc, #452]	; (80026a0 <partition+0x620>)
 80024dc:	f003 fa10 	bl	8005900 <siprintf>
				pLog[0].workCate = 4;
 80024e0:	4c70      	ldr	r4, [pc, #448]	; (80026a4 <partition+0x624>)
 80024e2:	2304      	movs	r3, #4
				pLog[0].time = time;
 80024e4:	0020      	movs	r0, r4
				pLog[0].workCate = 4;
 80024e6:	7023      	strb	r3, [r4, #0]
				pLog[0].time = time;
 80024e8:	2203      	movs	r2, #3
 80024ea:	0031      	movs	r1, r6
 80024ec:	302d      	adds	r0, #45	; 0x2d
 80024ee:	f003 f8c3 	bl	8005678 <memcpy>
				pLog[0].date = date;
 80024f2:	0020      	movs	r0, r4
 80024f4:	2204      	movs	r2, #4
 80024f6:	0029      	movs	r1, r5
 80024f8:	3030      	adds	r0, #48	; 0x30
 80024fa:	f003 f8bd 	bl	8005678 <memcpy>
				sel = 0;
 80024fe:	2200      	movs	r2, #0
 8002500:	4b69      	ldr	r3, [pc, #420]	; (80026a8 <partition+0x628>)
 8002502:	701a      	strb	r2, [r3, #0]
				firstF = true;
 8002504:	2301      	movs	r3, #1
 8002506:	4a69      	ldr	r2, [pc, #420]	; (80026ac <partition+0x62c>)
 8002508:	7013      	strb	r3, [r2, #0]
				udf = true;
 800250a:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <partition+0x630>)
 800250c:	7013      	strb	r3, [r2, #0]
	}
	return PARTITION;
}
 800250e:	0038      	movs	r0, r7
 8002510:	b009      	add	sp, #36	; 0x24
 8002512:	bdf0      	pop	{r4, r5, r6, r7, pc}
				maxX = ptiSX >= ptiEX ? ptiSX : ptiEX;
 8002514:	4b5d      	ldr	r3, [pc, #372]	; (800268c <partition+0x60c>)
 8002516:	7818      	ldrb	r0, [r3, #0]
 8002518:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <partition+0x610>)
 800251a:	7819      	ldrb	r1, [r3, #0]
 800251c:	1c03      	adds	r3, r0, #0
 800251e:	4288      	cmp	r0, r1
 8002520:	d200      	bcs.n	8002524 <partition+0x4a4>
 8002522:	1c0b      	adds	r3, r1, #0
 8002524:	b2da      	uxtb	r2, r3
 8002526:	9204      	str	r2, [sp, #16]
 8002528:	4a50      	ldr	r2, [pc, #320]	; (800266c <partition+0x5ec>)
 800252a:	7013      	strb	r3, [r2, #0]
				maxY = ptiSY >= ptiEY ? ptiSY : ptiEY;
 800252c:	4b56      	ldr	r3, [pc, #344]	; (8002688 <partition+0x608>)
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b54      	ldr	r3, [pc, #336]	; (8002684 <partition+0x604>)
 8002532:	1c14      	adds	r4, r2, #0
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d200      	bcs.n	800253c <partition+0x4bc>
 800253a:	1c1c      	adds	r4, r3, #0
 800253c:	b2e5      	uxtb	r5, r4
 800253e:	9505      	str	r5, [sp, #20]
 8002540:	4d4c      	ldr	r5, [pc, #304]	; (8002674 <partition+0x5f4>)
 8002542:	702c      	strb	r4, [r5, #0]
				minX = ptiSX >= ptiEX ? ptiEX : ptiSX;
 8002544:	1c04      	adds	r4, r0, #0
 8002546:	4288      	cmp	r0, r1
 8002548:	d900      	bls.n	800254c <partition+0x4cc>
 800254a:	1c0c      	adds	r4, r1, #0
 800254c:	b2e1      	uxtb	r1, r4
 800254e:	9106      	str	r1, [sp, #24]
 8002550:	4945      	ldr	r1, [pc, #276]	; (8002668 <partition+0x5e8>)
 8002552:	700c      	strb	r4, [r1, #0]
				minY = ptiSY >= ptiEY ? ptiEY : ptiSY;
 8002554:	1c11      	adds	r1, r2, #0
 8002556:	429a      	cmp	r2, r3
 8002558:	d900      	bls.n	800255c <partition+0x4dc>
 800255a:	1c19      	adds	r1, r3, #0
 800255c:	b2cb      	uxtb	r3, r1
 800255e:	9307      	str	r3, [sp, #28]
 8002560:	4b43      	ldr	r3, [pc, #268]	; (8002670 <partition+0x5f0>)
					tempX = i % 6 + 1;
 8002562:	2606      	movs	r6, #6
				minY = ptiSY >= ptiEY ? ptiEY : ptiSY;
 8002564:	7019      	strb	r1, [r3, #0]
				for(uint8_t i = 0; i < 36; i++){
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <partition+0x5dc>)
 8002568:	781d      	ldrb	r5, [r3, #0]
				minY = ptiSY >= ptiEY ? ptiEY : ptiSY;
 800256a:	2300      	movs	r3, #0
 800256c:	9303      	str	r3, [sp, #12]
					tempX = i % 6 + 1;
 800256e:	0031      	movs	r1, r6
 8002570:	0038      	movs	r0, r7
 8002572:	f7fd fe6d 	bl	8000250 <__aeabi_uidivmod>
 8002576:	3101      	adds	r1, #1
					tempY = 6 - i / 6;
 8002578:	0038      	movs	r0, r7
					tempX = i % 6 + 1;
 800257a:	b2cc      	uxtb	r4, r1
					tempY = 6 - i / 6;
 800257c:	0031      	movs	r1, r6
 800257e:	f7fd fde1 	bl	8000144 <__udivsi3>
					if(tempX >= minX && tempX <= maxX)
 8002582:	9a06      	ldr	r2, [sp, #24]
					tempY = 6 - i / 6;
 8002584:	1a33      	subs	r3, r6, r0
 8002586:	b2db      	uxtb	r3, r3
					if(tempX >= minX && tempX <= maxX)
 8002588:	42a2      	cmp	r2, r4
 800258a:	d80c      	bhi.n	80025a6 <partition+0x526>
 800258c:	9a04      	ldr	r2, [sp, #16]
 800258e:	42a2      	cmp	r2, r4
 8002590:	d309      	bcc.n	80025a6 <partition+0x526>
						if(tempY >= minY && tempY <= maxY)
 8002592:	9a07      	ldr	r2, [sp, #28]
 8002594:	429a      	cmp	r2, r3
 8002596:	d806      	bhi.n	80025a6 <partition+0x526>
 8002598:	9a05      	ldr	r2, [sp, #20]
 800259a:	429a      	cmp	r2, r3
 800259c:	d303      	bcc.n	80025a6 <partition+0x526>
							tempPtiC++;
 800259e:	2201      	movs	r2, #1
 80025a0:	3501      	adds	r5, #1
 80025a2:	b2ed      	uxtb	r5, r5
 80025a4:	9203      	str	r2, [sp, #12]
				for(uint8_t i = 0; i < 36; i++){
 80025a6:	3701      	adds	r7, #1
 80025a8:	b2ff      	uxtb	r7, r7
 80025aa:	2f24      	cmp	r7, #36	; 0x24
 80025ac:	d1df      	bne.n	800256e <partition+0x4ee>
 80025ae:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <partition+0x5e0>)
 80025b0:	7014      	strb	r4, [r2, #0]
 80025b2:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <partition+0x5e4>)
 80025b4:	7013      	strb	r3, [r2, #0]
 80025b6:	9b03      	ldr	r3, [sp, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d100      	bne.n	80025be <partition+0x53e>
 80025bc:	e669      	b.n	8002292 <partition+0x212>
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <partition+0x5dc>)
 80025c0:	701d      	strb	r5, [r3, #0]
 80025c2:	e666      	b.n	8002292 <partition+0x212>
	if(udf){
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <partition+0x630>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d000      	beq.n	80025ce <partition+0x54e>
 80025cc:	e661      	b.n	8002292 <partition+0x212>
	return PARTITION;
 80025ce:	2707      	movs	r7, #7
 80025d0:	e79d      	b.n	800250e <partition+0x48e>
				SSD1306_PutsXY(0, 4, "(NONE)", 1);
 80025d2:	2301      	movs	r3, #1
 80025d4:	4a37      	ldr	r2, [pc, #220]	; (80026b4 <partition+0x634>)
 80025d6:	e6a3      	b.n	8002320 <partition+0x2a0>
			SSD1306_PutsXY(0, 1, "Select end point", 1);
 80025d8:	002b      	movs	r3, r5
 80025da:	0029      	movs	r1, r5
 80025dc:	2000      	movs	r0, #0
 80025de:	4a36      	ldr	r2, [pc, #216]	; (80026b8 <partition+0x638>)
 80025e0:	f7fe f902 	bl	80007e8 <SSD1306_PutsXY>
			sprintf(bf, "End (%d,%d)", ptiEX, ptiEY);
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <partition+0x604>)
 80025e6:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <partition+0x610>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	4933      	ldr	r1, [pc, #204]	; (80026bc <partition+0x63c>)
 80025ee:	0020      	movs	r0, r4
 80025f0:	f003 f986 	bl	8005900 <siprintf>
			SSD1306_PutsXY(0, 3, bf, 1);
 80025f4:	002b      	movs	r3, r5
 80025f6:	0022      	movs	r2, r4
 80025f8:	2103      	movs	r1, #3
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe f8f4 	bl	80007e8 <SSD1306_PutsXY>
 8002600:	2500      	movs	r5, #0
				if(pt[i].store && pt[i].pos == ledPos){
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <partition+0x5ca>
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <partition+0x640>)
 800260a:	79ba      	ldrb	r2, [r7, #6]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d11b      	bne.n	800264a <partition+0x5ca>
					sprintf(bf, "%s(%s/%d/%d)", pt[i].name, ptCate[pt[i].cate], ptiEX, ptiEY);
 8002612:	491c      	ldr	r1, [pc, #112]	; (8002684 <partition+0x604>)
 8002614:	4a10      	ldr	r2, [pc, #64]	; (8002658 <partition+0x5d8>)
 8002616:	7809      	ldrb	r1, [r1, #0]
 8002618:	012b      	lsls	r3, r5, #4
 800261a:	58d2      	ldr	r2, [r2, r3]
 800261c:	793b      	ldrb	r3, [r7, #4]
 800261e:	9101      	str	r1, [sp, #4]
 8002620:	491b      	ldr	r1, [pc, #108]	; (8002690 <partition+0x610>)
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	7809      	ldrb	r1, [r1, #0]
 8002626:	0020      	movs	r0, r4
 8002628:	9100      	str	r1, [sp, #0]
 800262a:	4926      	ldr	r1, [pc, #152]	; (80026c4 <partition+0x644>)
 800262c:	585b      	ldr	r3, [r3, r1]
 800262e:	4926      	ldr	r1, [pc, #152]	; (80026c8 <partition+0x648>)
 8002630:	f003 f966 	bl	8005900 <siprintf>
					SSD1306_PutsXY(0, 4, bf, 1);
 8002634:	2301      	movs	r3, #1
 8002636:	0022      	movs	r2, r4
					SSD1306_PutsXY(0, 4, "(NONE)", 1);
 8002638:	2104      	movs	r1, #4
 800263a:	2000      	movs	r0, #0
			for(uint8_t i = 0; i < 36; i++){
 800263c:	3501      	adds	r5, #1
					SSD1306_PutsXY(0, 4, "(NONE)", 1);
 800263e:	f7fe f8d3 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < 36; i++){
 8002642:	3710      	adds	r7, #16
 8002644:	2d24      	cmp	r5, #36	; 0x24
 8002646:	d1dc      	bne.n	8002602 <partition+0x582>
 8002648:	e677      	b.n	800233a <partition+0x2ba>
					SSD1306_PutsXY(0, 4, "(NONE)", 1);
 800264a:	2301      	movs	r3, #1
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <partition+0x634>)
 800264e:	e7f3      	b.n	8002638 <partition+0x5b8>
 8002650:	20000956 	.word	0x20000956
 8002654:	2000095a 	.word	0x2000095a
 8002658:	2000070c 	.word	0x2000070c
 800265c:	2000095b 	.word	0x2000095b
 8002660:	2000095c 	.word	0x2000095c
 8002664:	2000095d 	.word	0x2000095d
 8002668:	200005ce 	.word	0x200005ce
 800266c:	200005cc 	.word	0x200005cc
 8002670:	200005cf 	.word	0x200005cf
 8002674:	200005cd 	.word	0x200005cd
 8002678:	2000094c 	.word	0x2000094c
 800267c:	20000414 	.word	0x20000414
 8002680:	2000095e 	.word	0x2000095e
 8002684:	20000017 	.word	0x20000017
 8002688:	20000019 	.word	0x20000019
 800268c:	20000018 	.word	0x20000018
 8002690:	20000016 	.word	0x20000016
 8002694:	200005d3 	.word	0x200005d3
 8002698:	08006bb3 	.word	0x08006bb3
 800269c:	08006bc5 	.word	0x08006bc5
 80026a0:	200005e9 	.word	0x200005e9
 80026a4:	200005d2 	.word	0x200005d2
 80026a8:	20000958 	.word	0x20000958
 80026ac:	20000008 	.word	0x20000008
 80026b0:	2000001a 	.word	0x2000001a
 80026b4:	08006ac9 	.word	0x08006ac9
 80026b8:	08006be3 	.word	0x08006be3
 80026bc:	08006bf4 	.word	0x08006bf4
 80026c0:	200005ca 	.word	0x200005ca
 80026c4:	08006cc4 	.word	0x08006cc4
 80026c8:	08006bd6 	.word	0x08006bd6

080026cc <logM>:

MODE logM(){
 80026cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 80026ce:	4c4f      	ldr	r4, [pc, #316]	; (800280c <logM+0x140>)
MODE logM(){
 80026d0:	b085      	sub	sp, #20
	if(firstF){
 80026d2:	7823      	ldrb	r3, [r4, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <logM+0x14>
		firstF = false;
 80026d8:	2300      	movs	r3, #0
		sel = 0;
 80026da:	4a4d      	ldr	r2, [pc, #308]	; (8002810 <logM+0x144>)
		firstF = false;
 80026dc:	7023      	strb	r3, [r4, #0]
		sel = 0;
 80026de:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 80026e0:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <logM+0x148>)
 80026e2:	4d4d      	ldr	r5, [pc, #308]	; (8002818 <logM+0x14c>)
 80026e4:	781a      	ldrb	r2, [r3, #0]
 80026e6:	2a63      	cmp	r2, #99	; 0x63
 80026e8:	d91a      	bls.n	8002720 <logM+0x54>
		reC = 0;
 80026ea:	2000      	movs	r0, #0
 80026ec:	7018      	strb	r0, [r3, #0]
		if(JOY_L){
 80026ee:	2396      	movs	r3, #150	; 0x96
 80026f0:	4a4a      	ldr	r2, [pc, #296]	; (800281c <logM+0x150>)
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	8811      	ldrh	r1, [r2, #0]
 80026f6:	4299      	cmp	r1, r3
 80026f8:	d205      	bcs.n	8002706 <logM+0x3a>
			firstF = true;
 80026fa:	3b2c      	subs	r3, #44	; 0x2c
 80026fc:	3bff      	subs	r3, #255	; 0xff
 80026fe:	7023      	strb	r3, [r4, #0]
			udf = true;
 8002700:	702b      	strb	r3, [r5, #0]
		}
		SSD1306_PutsXY(0, sel + 2, ">", 1);
		SSD1306_UpdateScreen();
	}
	return PLOG;
}
 8002702:	b005      	add	sp, #20
 8002704:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_U && sel) sel--;
 8002706:	21fa      	movs	r1, #250	; 0xfa
 8002708:	8852      	ldrh	r2, [r2, #2]
 800270a:	0109      	lsls	r1, r1, #4
 800270c:	428a      	cmp	r2, r1
 800270e:	d91d      	bls.n	800274c <logM+0x80>
 8002710:	4a3f      	ldr	r2, [pc, #252]	; (8002810 <logM+0x144>)
 8002712:	7813      	ldrb	r3, [r2, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <logM+0x50>
 8002718:	3b01      	subs	r3, #1
		if(JOY_D && (sel < ((logC > 6) ? 5 : logC - 1))) sel++;
 800271a:	7013      	strb	r3, [r2, #0]
		if(JOY_U || JOY_D) udf = true;
 800271c:	2301      	movs	r3, #1
 800271e:	702b      	strb	r3, [r5, #0]
	if(JOY_P){
 8002720:	20a0      	movs	r0, #160	; 0xa0
 8002722:	2104      	movs	r1, #4
 8002724:	05c0      	lsls	r0, r0, #23
 8002726:	f001 fbe1 	bl	8003eec <HAL_GPIO_ReadPin>
		if(!oldsw){
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <logM+0x154>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4318      	orrs	r0, r3
 8002730:	b2c0      	uxtb	r0, r0
 8002732:	2800      	cmp	r0, #0
 8002734:	d118      	bne.n	8002768 <logM+0x9c>
			swS();
 8002736:	f7fe f875 	bl	8000824 <swS>
			firstF = true;
 800273a:	2301      	movs	r3, #1
 800273c:	7023      	strb	r3, [r4, #0]
			udf = true;
 800273e:	702b      	strb	r3, [r5, #0]
			selLog = sel;
 8002740:	4b33      	ldr	r3, [pc, #204]	; (8002810 <logM+0x144>)
			return LOGD;
 8002742:	2009      	movs	r0, #9
			selLog = sel;
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <logM+0x158>)
 8002748:	701a      	strb	r2, [r3, #0]
			return LOGD;
 800274a:	e7da      	b.n	8002702 <logM+0x36>
		if(JOY_D && (sel < ((logC > 6) ? 5 : logC - 1))) sel++;
 800274c:	429a      	cmp	r2, r3
 800274e:	d2e7      	bcs.n	8002720 <logM+0x54>
 8002750:	4935      	ldr	r1, [pc, #212]	; (8002828 <logM+0x15c>)
 8002752:	4a2f      	ldr	r2, [pc, #188]	; (8002810 <logM+0x144>)
 8002754:	7808      	ldrb	r0, [r1, #0]
 8002756:	7813      	ldrb	r3, [r2, #0]
 8002758:	2105      	movs	r1, #5
 800275a:	2806      	cmp	r0, #6
 800275c:	d800      	bhi.n	8002760 <logM+0x94>
 800275e:	1e41      	subs	r1, r0, #1
 8002760:	428b      	cmp	r3, r1
 8002762:	dadb      	bge.n	800271c <logM+0x50>
 8002764:	3301      	adds	r3, #1
 8002766:	e7d8      	b.n	800271a <logM+0x4e>
	if(udf){
 8002768:	782b      	ldrb	r3, [r5, #0]
	return PLOG;
 800276a:	2008      	movs	r0, #8
	if(udf){
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0c8      	beq.n	8002702 <logM+0x36>
		udf = false;
 8002770:	2400      	movs	r4, #0
 8002772:	702c      	strb	r4, [r5, #0]
		basicScreen();
 8002774:	f7fe f848 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Log", 0);
 8002778:	0023      	movs	r3, r4
 800277a:	0021      	movs	r1, r4
 800277c:	0020      	movs	r0, r4
 800277e:	4a2b      	ldr	r2, [pc, #172]	; (800282c <logM+0x160>)
 8002780:	f7fe f832 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < ((logC > 6) ? 6 : logC); i++){
 8002784:	4d2a      	ldr	r5, [pc, #168]	; (8002830 <logM+0x164>)
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <logM+0x15c>)
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	1c13      	adds	r3, r2, #0
 800278c:	2a06      	cmp	r2, #6
 800278e:	d900      	bls.n	8002792 <logM+0xc6>
 8002790:	2306      	movs	r3, #6
 8002792:	b2db      	uxtb	r3, r3
 8002794:	42a3      	cmp	r3, r4
 8002796:	d80c      	bhi.n	80027b2 <logM+0xe6>
		SSD1306_PutsXY(0, sel + 2, ">", 1);
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <logM+0x144>)
 800279a:	2000      	movs	r0, #0
 800279c:	7819      	ldrb	r1, [r3, #0]
 800279e:	4a25      	ldr	r2, [pc, #148]	; (8002834 <logM+0x168>)
 80027a0:	3102      	adds	r1, #2
 80027a2:	2301      	movs	r3, #1
 80027a4:	b2c9      	uxtb	r1, r1
 80027a6:	f7fe f81f 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 80027aa:	f000 fc67 	bl	800307c <SSD1306_UpdateScreen>
	return PLOG;
 80027ae:	2008      	movs	r0, #8
 80027b0:	e7a7      	b.n	8002702 <logM+0x36>
			if(pLog[i].date.year){
 80027b2:	1d6b      	adds	r3, r5, #5
 80027b4:	881f      	ldrh	r7, [r3, #0]
 80027b6:	2f00      	cmp	r7, #0
 80027b8:	d0ee      	beq.n	8002798 <logM+0xcc>
				String bf = (String)calloc(0, sizeof(char) * 30);
 80027ba:	211e      	movs	r1, #30
 80027bc:	2000      	movs	r0, #0
 80027be:	f002 ff1d 	bl	80055fc <calloc>
				sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[i].date.year - 1800, pLog[i].date.month, pLog[i].date.day, pLog[i].time.hour, pLog[i].time.min, ptWorkCate[pLog[i].workCate - 1]);
 80027c2:	0029      	movs	r1, r5
				String bf = (String)calloc(0, sizeof(char) * 30);
 80027c4:	0006      	movs	r6, r0
				sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[i].date.year - 1800, pLog[i].date.month, pLog[i].date.day, pLog[i].time.hour, pLog[i].time.min, ptWorkCate[pLog[i].workCate - 1]);
 80027c6:	392d      	subs	r1, #45	; 0x2d
 80027c8:	7809      	ldrb	r1, [r1, #0]
 80027ca:	481b      	ldr	r0, [pc, #108]	; (8002838 <logM+0x16c>)
 80027cc:	3901      	subs	r1, #1
 80027ce:	0089      	lsls	r1, r1, #2
 80027d0:	5809      	ldr	r1, [r1, r0]
 80027d2:	792b      	ldrb	r3, [r5, #4]
 80027d4:	9103      	str	r1, [sp, #12]
 80027d6:	7869      	ldrb	r1, [r5, #1]
 80027d8:	4a18      	ldr	r2, [pc, #96]	; (800283c <logM+0x170>)
 80027da:	9102      	str	r1, [sp, #8]
 80027dc:	7829      	ldrb	r1, [r5, #0]
 80027de:	18ba      	adds	r2, r7, r2
 80027e0:	9101      	str	r1, [sp, #4]
 80027e2:	78e9      	ldrb	r1, [r5, #3]
 80027e4:	0030      	movs	r0, r6
 80027e6:	9100      	str	r1, [sp, #0]
 80027e8:	4915      	ldr	r1, [pc, #84]	; (8002840 <logM+0x174>)
 80027ea:	f003 f889 	bl	8005900 <siprintf>
				SSD1306_PutsXY(1, i + 2, bf, 1);
 80027ee:	2301      	movs	r3, #1
 80027f0:	1ca1      	adds	r1, r4, #2
 80027f2:	0018      	movs	r0, r3
 80027f4:	0032      	movs	r2, r6
 80027f6:	b2c9      	uxtb	r1, r1
 80027f8:	f7fd fff6 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < ((logC > 6) ? 6 : logC); i++){
 80027fc:	3401      	adds	r4, #1
				free(bf);
 80027fe:	0030      	movs	r0, r6
 8002800:	f002 ff30 	bl	8005664 <free>
		for(uint8_t i = 0; i < ((logC > 6) ? 6 : logC); i++){
 8002804:	b2e4      	uxtb	r4, r4
 8002806:	3534      	adds	r5, #52	; 0x34
 8002808:	e7bd      	b.n	8002786 <logM+0xba>
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	20000008 	.word	0x20000008
 8002810:	20000958 	.word	0x20000958
 8002814:	20000957 	.word	0x20000957
 8002818:	2000001a 	.word	0x2000001a
 800281c:	2000040c 	.word	0x2000040c
 8002820:	20000015 	.word	0x20000015
 8002824:	20000959 	.word	0x20000959
 8002828:	200005cb 	.word	0x200005cb
 800282c:	08006c29 	.word	0x08006c29
 8002830:	200005ff 	.word	0x200005ff
 8002834:	08006a8b 	.word	0x08006a8b
 8002838:	08006cd4 	.word	0x08006cd4
 800283c:	fffff8f8 	.word	0xfffff8f8
 8002840:	08006c2e 	.word	0x08006c2e

08002844 <logD>:

MODE logD(){
 8002844:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF) firstF = false;
 8002846:	4b39      	ldr	r3, [pc, #228]	; (800292c <logD+0xe8>)
MODE logD(){
 8002848:	b087      	sub	sp, #28
	if(firstF) firstF = false;
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	2a00      	cmp	r2, #0
 800284e:	d001      	beq.n	8002854 <logD+0x10>
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
	if(JOY_P){
 8002854:	20a0      	movs	r0, #160	; 0xa0
 8002856:	2104      	movs	r1, #4
 8002858:	05c0      	lsls	r0, r0, #23
 800285a:	f001 fb47 	bl	8003eec <HAL_GPIO_ReadPin>
		if(!oldsw){
 800285e:	4b34      	ldr	r3, [pc, #208]	; (8002930 <logD+0xec>)
 8002860:	4e34      	ldr	r6, [pc, #208]	; (8002934 <logD+0xf0>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4318      	orrs	r0, r3
 8002866:	b2c0      	uxtb	r0, r0
 8002868:	2800      	cmp	r0, #0
 800286a:	d108      	bne.n	800287e <logD+0x3a>
			swS();
 800286c:	f7fd ffda 	bl	8000824 <swS>
			udf = true;
 8002870:	2301      	movs	r3, #1
 8002872:	7033      	strb	r3, [r6, #0]
			return PLOG;
 8002874:	3307      	adds	r3, #7
 8002876:	9304      	str	r3, [sp, #16]
		SSD1306_PutsXY(0, 5, pLog[selLog].content[1], 1);
		free(bf);
		SSD1306_UpdateScreen();
	}
	return LOGD;
}
 8002878:	9804      	ldr	r0, [sp, #16]
 800287a:	b007      	add	sp, #28
 800287c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return LOGD;
 800287e:	2209      	movs	r2, #9
	if(udf){
 8002880:	7833      	ldrb	r3, [r6, #0]
	return LOGD;
 8002882:	9204      	str	r2, [sp, #16]
	if(udf){
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f7      	beq.n	8002878 <logD+0x34>
		String bf = (String)calloc(0, sizeof(char) * 30);
 8002888:	211e      	movs	r1, #30
 800288a:	2000      	movs	r0, #0
 800288c:	f002 feb6 	bl	80055fc <calloc>
		udf = false;
 8002890:	2400      	movs	r4, #0
		sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[selLog].date.year  - 1800, pLog[selLog].date.month, pLog[selLog].date.day, pLog[selLog].time.hour, pLog[selLog].time.min, ptWorkCate[pLog[selLog].workCate - 1]);
 8002892:	2734      	movs	r7, #52	; 0x34
		String bf = (String)calloc(0, sizeof(char) * 30);
 8002894:	0005      	movs	r5, r0
		udf = false;
 8002896:	7034      	strb	r4, [r6, #0]
		basicScreen();
 8002898:	f7fd ffb6 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Log detail", 0);
 800289c:	0023      	movs	r3, r4
 800289e:	0021      	movs	r1, r4
 80028a0:	0020      	movs	r0, r4
 80028a2:	4a25      	ldr	r2, [pc, #148]	; (8002938 <logD+0xf4>)
 80028a4:	f7fd ffa0 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[selLog].date.year  - 1800, pLog[selLog].date.month, pLog[selLog].date.day, pLog[selLog].time.hour, pLog[selLog].time.min, ptWorkCate[pLog[selLog].workCate - 1]);
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <logD+0xf8>)
 80028aa:	4e25      	ldr	r6, [pc, #148]	; (8002940 <logD+0xfc>)
 80028ac:	7818      	ldrb	r0, [r3, #0]
 80028ae:	4378      	muls	r0, r7
 80028b0:	1831      	adds	r1, r6, r0
 80028b2:	000b      	movs	r3, r1
 80028b4:	3331      	adds	r3, #49	; 0x31
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 80028ba:	5d80      	ldrb	r0, [r0, r6]
 80028bc:	9305      	str	r3, [sp, #20]
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <logD+0x100>)
 80028c0:	3801      	subs	r0, #1
 80028c2:	18d2      	adds	r2, r2, r3
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <logD+0x104>)
 80028c6:	0080      	lsls	r0, r0, #2
 80028c8:	58c3      	ldr	r3, [r0, r3]
 80028ca:	0008      	movs	r0, r1
 80028cc:	9303      	str	r3, [sp, #12]
 80028ce:	302e      	adds	r0, #46	; 0x2e
 80028d0:	7800      	ldrb	r0, [r0, #0]
 80028d2:	9b05      	ldr	r3, [sp, #20]
 80028d4:	9002      	str	r0, [sp, #8]
 80028d6:	0008      	movs	r0, r1
 80028d8:	302d      	adds	r0, #45	; 0x2d
 80028da:	7800      	ldrb	r0, [r0, #0]
 80028dc:	3130      	adds	r1, #48	; 0x30
 80028de:	9001      	str	r0, [sp, #4]
 80028e0:	7809      	ldrb	r1, [r1, #0]
 80028e2:	0028      	movs	r0, r5
 80028e4:	9100      	str	r1, [sp, #0]
 80028e6:	4919      	ldr	r1, [pc, #100]	; (800294c <logD+0x108>)
 80028e8:	f003 f80a 	bl	8005900 <siprintf>
		SSD1306_PutsXY(0, 2, bf, 1);
 80028ec:	002a      	movs	r2, r5
 80028ee:	0020      	movs	r0, r4
 80028f0:	2301      	movs	r3, #1
 80028f2:	2102      	movs	r1, #2
 80028f4:	f7fd ff78 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 4, pLog[selLog].content[0], 1);
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <logD+0xf8>)
 80028fa:	0020      	movs	r0, r4
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	2104      	movs	r1, #4
 8002900:	437a      	muls	r2, r7
 8002902:	3201      	adds	r2, #1
 8002904:	1992      	adds	r2, r2, r6
 8002906:	2301      	movs	r3, #1
 8002908:	f7fd ff6e 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 5, pLog[selLog].content[1], 1);
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <logD+0xf8>)
 800290e:	2105      	movs	r1, #5
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	0020      	movs	r0, r4
 8002914:	437a      	muls	r2, r7
 8002916:	3217      	adds	r2, #23
 8002918:	2301      	movs	r3, #1
 800291a:	1992      	adds	r2, r2, r6
 800291c:	f7fd ff64 	bl	80007e8 <SSD1306_PutsXY>
		free(bf);
 8002920:	0028      	movs	r0, r5
 8002922:	f002 fe9f 	bl	8005664 <free>
		SSD1306_UpdateScreen();
 8002926:	f000 fba9 	bl	800307c <SSD1306_UpdateScreen>
 800292a:	e7a5      	b.n	8002878 <logD+0x34>
 800292c:	20000008 	.word	0x20000008
 8002930:	20000015 	.word	0x20000015
 8002934:	2000001a 	.word	0x2000001a
 8002938:	08006c4a 	.word	0x08006c4a
 800293c:	20000959 	.word	0x20000959
 8002940:	200005d2 	.word	0x200005d2
 8002944:	fffff8f8 	.word	0xfffff8f8
 8002948:	08006cd4 	.word	0x08006cd4
 800294c:	08006c2e 	.word	0x08006c2e

08002950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002950:	b510      	push	{r4, lr}
 8002952:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002954:	2224      	movs	r2, #36	; 0x24
 8002956:	2100      	movs	r1, #0
 8002958:	a80f      	add	r0, sp, #60	; 0x3c
 800295a:	f002 fea9 	bl	80056b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800295e:	2214      	movs	r2, #20
 8002960:	2100      	movs	r1, #0
 8002962:	a801      	add	r0, sp, #4
 8002964:	f002 fea4 	bl	80056b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002968:	2220      	movs	r2, #32
 800296a:	2100      	movs	r1, #0
 800296c:	a806      	add	r0, sp, #24
 800296e:	f002 fe9f 	bl	80056b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002972:	491b      	ldr	r1, [pc, #108]	; (80029e0 <SystemClock_Config+0x90>)
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <SystemClock_Config+0x94>)
 8002976:	680b      	ldr	r3, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002978:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800297a:	401a      	ands	r2, r3
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002984:	2302      	movs	r3, #2
 8002986:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002988:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800298a:	2300      	movs	r3, #0
 800298c:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800298e:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002990:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002992:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002994:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002996:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002998:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800299a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800299c:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299e:	f001 fe81 	bl	80046a4 <HAL_RCC_OscConfig>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d001      	beq.n	80029aa <SystemClock_Config+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029a8:	e7fe      	b.n	80029a8 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029aa:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ac:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ae:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029b0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b2:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b4:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029b6:	0021      	movs	r1, r4
 80029b8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ba:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029bc:	f002 f8f4 	bl	8004ba8 <HAL_RCC_ClockConfig>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d001      	beq.n	80029c8 <SystemClock_Config+0x78>
 80029c4:	b672      	cpsid	i
	while (1) {
 80029c6:	e7fe      	b.n	80029c6 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029c8:	2308      	movs	r3, #8
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029ca:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029cc:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029ce:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d0:	f002 f9b8 	bl	8004d44 <HAL_RCCEx_PeriphCLKConfig>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d001      	beq.n	80029dc <SystemClock_Config+0x8c>
 80029d8:	b672      	cpsid	i
	while (1) {
 80029da:	e7fe      	b.n	80029da <SystemClock_Config+0x8a>
}
 80029dc:	b01c      	add	sp, #112	; 0x70
 80029de:	bd10      	pop	{r4, pc}
 80029e0:	40007000 	.word	0x40007000
 80029e4:	ffffe7ff 	.word	0xffffe7ff

080029e8 <main>:
{
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2601      	movs	r6, #1
{
 80029ec:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80029ee:	f000 fd75 	bl	80034dc <HAL_Init>
  SystemClock_Config();
 80029f2:	f7ff ffad 	bl	8002950 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f6:	2214      	movs	r2, #20
 80029f8:	2100      	movs	r1, #0
 80029fa:	a805      	add	r0, sp, #20
 80029fc:	f002 fe58 	bl	80056b0 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a00:	2102      	movs	r1, #2
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a02:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a04:	4ccd      	ldr	r4, [pc, #820]	; (8002d3c <main+0x354>)
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a06:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	4333      	orrs	r3, r6
 8002a0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pin = BUZ_Pin;
 8002a12:	2708      	movs	r7, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	4033      	ands	r3, r6
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002a20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a24:	400b      	ands	r3, r1
 8002a26:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a28:	3106      	adds	r1, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a2c:	f001 fa64 	bl	8003ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RGB_DATA_GPIO_Port, RGB_DATA_Pin, GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	0031      	movs	r1, r6
 8002a34:	48c2      	ldr	r0, [pc, #776]	; (8002d40 <main+0x358>)
 8002a36:	f001 fa5f 	bl	8003ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = JOY_SW_Pin;
 8002a3c:	2304      	movs	r3, #4
  HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	a905      	add	r1, sp, #20
 8002a40:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = JOY_SW_Pin;
 8002a42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a44:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a46:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f001 f990 	bl	8003d6c <HAL_GPIO_Init>
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	20a0      	movs	r0, #160	; 0xa0
 8002a4e:	a905      	add	r1, sp, #20
 8002a50:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUZ_Pin;
 8002a52:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a54:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f001 f987 	bl	8003d6c <HAL_GPIO_Init>
  HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 8002a5e:	48b8      	ldr	r0, [pc, #736]	; (8002d40 <main+0x358>)
 8002a60:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RGB_DATA_Pin;
 8002a62:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a64:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f001 f97f 	bl	8003d6c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002a70:	002a      	movs	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a72:	4333      	orrs	r3, r6
 8002a74:	6323      	str	r3, [r4, #48]	; 0x30
 8002a76:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002a78:	0029      	movs	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a7a:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002a7c:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002a82:	f000 ff77 	bl	8003974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002a86:	200a      	movs	r0, #10
 8002a88:	f000 ff9e 	bl	80039c8 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a8c:	003a      	movs	r2, r7
 8002a8e:	0029      	movs	r1, r5
 8002a90:	a805      	add	r0, sp, #20
 8002a92:	f002 fe0d 	bl	80056b0 <memset>
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8002a96:	2306      	movs	r3, #6
  hadc.Init.OversamplingMode = DISABLE;
 8002a98:	4caa      	ldr	r4, [pc, #680]	; (8002d44 <main+0x35c>)
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8002a9a:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a9c:	23c2      	movs	r3, #194	; 0xc2
 8002a9e:	33ff      	adds	r3, #255	; 0xff
 8002aa0:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Instance = ADC1;
 8002aa2:	4ba9      	ldr	r3, [pc, #676]	; (8002d48 <main+0x360>)
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002aa4:	0022      	movs	r2, r4
  hadc.Instance = ADC1;
 8002aa6:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002aa8:	2304      	movs	r3, #4
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002aaa:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002aac:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode = DISABLE;
 8002aae:	8425      	strh	r5, [r4, #32]
  hadc.Init.OversamplingMode = DISABLE;
 8002ab0:	63e5      	str	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ab2:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ab4:	7015      	strb	r5, [r2, #0]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ab6:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002ab8:	6365      	str	r5, [r4, #52]	; 0x34
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002aba:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002abc:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002abe:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002ac0:	6126      	str	r6, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ac2:	6163      	str	r3, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002ac4:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002ac6:	61e5      	str	r5, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ac8:	f000 fd92 	bl	80035f0 <HAL_ADC_Init>
 8002acc:	42a8      	cmp	r0, r5
 8002ace:	d001      	beq.n	8002ad4 <main+0xec>
 8002ad0:	b672      	cpsid	i
	while (1) {
 8002ad2:	e7fe      	b.n	8002ad2 <main+0xea>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002ad4:	2580      	movs	r5, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ad6:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002ad8:	016d      	lsls	r5, r5, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ada:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_0;
 8002adc:	9605      	str	r6, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002ade:	9506      	str	r5, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ae0:	f000 fef4 	bl	80038cc <HAL_ADC_ConfigChannel>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d001      	beq.n	8002aec <main+0x104>
 8002ae8:	b672      	cpsid	i
	while (1) {
 8002aea:	e7fe      	b.n	8002aea <main+0x102>
  sConfig.Channel = ADC_CHANNEL_1;
 8002aec:	4b97      	ldr	r3, [pc, #604]	; (8002d4c <main+0x364>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002aee:	0020      	movs	r0, r4
 8002af0:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_1;
 8002af2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002af4:	f000 feea 	bl	80038cc <HAL_ADC_ConfigChannel>
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d001      	beq.n	8002b00 <main+0x118>
 8002afc:	b672      	cpsid	i
	while (1) {
 8002afe:	e7fe      	b.n	8002afe <main+0x116>
  hi2c1.Instance = I2C1;
 8002b00:	4c93      	ldr	r4, [pc, #588]	; (8002d50 <main+0x368>)
 8002b02:	4b94      	ldr	r3, [pc, #592]	; (8002d54 <main+0x36c>)
  hi2c1.Init.OwnAddress1 = 0;
 8002b04:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8002b06:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00200C28;
 8002b08:	4b93      	ldr	r3, [pc, #588]	; (8002d58 <main+0x370>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b0a:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0c:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b0e:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b10:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b12:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b14:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00200C28;
 8002b16:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b18:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b1a:	f001 fb13 	bl	8004144 <HAL_I2C_Init>
 8002b1e:	1e01      	subs	r1, r0, #0
 8002b20:	d001      	beq.n	8002b26 <main+0x13e>
 8002b22:	b672      	cpsid	i
	while (1) {
 8002b24:	e7fe      	b.n	8002b24 <main+0x13c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b26:	0020      	movs	r0, r4
 8002b28:	f001 fd2a 	bl	8004580 <HAL_I2CEx_ConfigAnalogFilter>
 8002b2c:	1e01      	subs	r1, r0, #0
 8002b2e:	d001      	beq.n	8002b34 <main+0x14c>
 8002b30:	b672      	cpsid	i
	while (1) {
 8002b32:	e7fe      	b.n	8002b32 <main+0x14a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b34:	0020      	movs	r0, r4
 8002b36:	f001 fd49 	bl	80045cc <HAL_I2CEx_ConfigDigitalFilter>
 8002b3a:	1e03      	subs	r3, r0, #0
 8002b3c:	d001      	beq.n	8002b42 <main+0x15a>
 8002b3e:	b672      	cpsid	i
	while (1) {
 8002b40:	e7fe      	b.n	8002b40 <main+0x158>
  hspi1.Instance = SPI1;
 8002b42:	4886      	ldr	r0, [pc, #536]	; (8002d5c <main+0x374>)
 8002b44:	4a86      	ldr	r2, [pc, #536]	; (8002d60 <main+0x378>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b46:	6083      	str	r3, [r0, #8]
  hspi1.Instance = SPI1;
 8002b48:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b4a:	2282      	movs	r2, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b4c:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b4e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b50:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b52:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b54:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b56:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b58:	2410      	movs	r4, #16
  hspi1.Init.CRCPolynomial = 7;
 8002b5a:	2307      	movs	r3, #7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b5c:	0052      	lsls	r2, r2, #1
 8002b5e:	6042      	str	r2, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b60:	32fc      	adds	r2, #252	; 0xfc
 8002b62:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b64:	61c4      	str	r4, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8002b66:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b68:	f002 fa4c 	bl	8005004 <HAL_SPI_Init>
 8002b6c:	1e06      	subs	r6, r0, #0
 8002b6e:	d001      	beq.n	8002b74 <main+0x18c>
 8002b70:	b672      	cpsid	i
	while (1) {
 8002b72:	e7fe      	b.n	8002b72 <main+0x18a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b74:	0022      	movs	r2, r4
 8002b76:	0001      	movs	r1, r0
 8002b78:	a805      	add	r0, sp, #20
 8002b7a:	f002 fd99 	bl	80056b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7e:	003a      	movs	r2, r7
 8002b80:	0031      	movs	r1, r6
 8002b82:	a803      	add	r0, sp, #12
 8002b84:	f002 fd94 	bl	80056b0 <memset>
  htim2.Instance = TIM2;
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	4c76      	ldr	r4, [pc, #472]	; (8002d64 <main+0x37c>)
 8002b8c:	05db      	lsls	r3, r3, #23
 8002b8e:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 32-1;
 8002b90:	231f      	movs	r3, #31
 8002b92:	6063      	str	r3, [r4, #4]
  htim2.Init.Period = 1000-1;
 8002b94:	4b74      	ldr	r3, [pc, #464]	; (8002d68 <main+0x380>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b96:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b98:	60a6      	str	r6, [r4, #8]
  htim2.Init.Period = 1000-1;
 8002b9a:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9c:	6126      	str	r6, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9e:	6166      	str	r6, [r4, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ba0:	f002 fb76 	bl	8005290 <HAL_TIM_Base_Init>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d001      	beq.n	8002bac <main+0x1c4>
 8002ba8:	b672      	cpsid	i
	while (1) {
 8002baa:	e7fe      	b.n	8002baa <main+0x1c2>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bac:	0020      	movs	r0, r4
 8002bae:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb0:	9505      	str	r5, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bb2:	f002 fbbd 	bl	8005330 <HAL_TIM_ConfigClockSource>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d001      	beq.n	8002bbe <main+0x1d6>
 8002bba:	b672      	cpsid	i
	while (1) {
 8002bbc:	e7fe      	b.n	8002bbc <main+0x1d4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbe:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc0:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bc2:	a903      	add	r1, sp, #12
 8002bc4:	0020      	movs	r0, r4
 8002bc6:	f002 fced 	bl	80055a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d001      	beq.n	8002bd2 <main+0x1ea>
 8002bce:	b672      	cpsid	i
	while (1) {
 8002bd0:	e7fe      	b.n	8002bd0 <main+0x1e8>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	200f      	movs	r0, #15
 8002bd6:	0011      	movs	r1, r2
 8002bd8:	f000 fecc 	bl	8003974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bdc:	200f      	movs	r0, #15
 8002bde:	f000 fef3 	bl	80039c8 <HAL_NVIC_EnableIRQ>
	SSD1306_Init();
 8002be2:	f000 fa75 	bl	80030d0 <SSD1306_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8002be6:	0020      	movs	r0, r4
 8002be8:	f002 fb76 	bl	80052d8 <HAL_TIM_Base_Start_IT>
	ptFindName = (String)calloc(0, sizeof(char) * 11);
 8002bec:	210b      	movs	r1, #11
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f002 fd04 	bl	80055fc <calloc>
	memset(pLog, 0, (size_t)sizeof(pLog));
 8002bf4:	229c      	movs	r2, #156	; 0x9c
	ptFindName = (String)calloc(0, sizeof(char) * 11);
 8002bf6:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <main+0x384>)
	memset(pLog, 0, (size_t)sizeof(pLog));
 8002bf8:	2100      	movs	r1, #0
	ptFindName = (String)calloc(0, sizeof(char) * 11);
 8002bfa:	6018      	str	r0, [r3, #0]
	memset(pLog, 0, (size_t)sizeof(pLog));
 8002bfc:	0052      	lsls	r2, r2, #1
 8002bfe:	485c      	ldr	r0, [pc, #368]	; (8002d70 <main+0x388>)
 8002c00:	f002 fd56 	bl	80056b0 <memset>
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 8002c04:	2104      	movs	r1, #4
	for (uint8_t i = 0; i < 36; i++)
 8002c06:	2400      	movs	r4, #0
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 8002c08:	000d      	movs	r5, r1
 8002c0a:	1fa3      	subs	r3, r4, #6
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	002a      	movs	r2, r5
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d906      	bls.n	8002c22 <main+0x23a>
 8002c14:	0023      	movs	r3, r4
 8002c16:	3b18      	subs	r3, #24
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d800      	bhi.n	8002c22 <main+0x23a>
 8002c20:	002a      	movs	r2, r5
 8002c22:	0020      	movs	r0, r4
 8002c24:	380c      	subs	r0, #12
 8002c26:	b2c0      	uxtb	r0, r0
 8002c28:	002b      	movs	r3, r5
 8002c2a:	2805      	cmp	r0, #5
 8002c2c:	d906      	bls.n	8002c3c <main+0x254>
 8002c2e:	0020      	movs	r0, r4
 8002c30:	381e      	subs	r0, #30
 8002c32:	b2c0      	uxtb	r0, r0
 8002c34:	2300      	movs	r3, #0
 8002c36:	2805      	cmp	r0, #5
 8002c38:	d800      	bhi.n	8002c3c <main+0x254>
 8002c3a:	002b      	movs	r3, r5
 8002c3c:	0020      	movs	r0, r4
 8002c3e:	f7fd fd7b 	bl	8000738 <led_color>
	for (uint8_t i = 0; i < 36; i++)
 8002c42:	1c63      	adds	r3, r4, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b24      	cmp	r3, #36	; 0x24
 8002c48:	d140      	bne.n	8002ccc <main+0x2e4>
	led_update();
 8002c4a:	f7fd fd81 	bl	8000750 <led_update>
 8002c4e:	241c      	movs	r4, #28
		SSD1306_Fill(0);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f000 f89b 	bl	8002d8c <SSD1306_Fill>
		SSD1306_GotoXY(46, 28 + i);
 8002c56:	0021      	movs	r1, r4
 8002c58:	202e      	movs	r0, #46	; 0x2e
 8002c5a:	f000 f8cd 	bl	8002df8 <SSD1306_GotoXY>
		SSD1306_Puts("Drawer", &Font_6x8, 0);
 8002c5e:	4d45      	ldr	r5, [pc, #276]	; (8002d74 <main+0x38c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	0029      	movs	r1, r5
 8002c64:	4844      	ldr	r0, [pc, #272]	; (8002d78 <main+0x390>)
 8002c66:	f000 f903 	bl	8002e70 <SSD1306_Puts>
		SSD1306_GotoXY(43, 28);
 8002c6a:	211c      	movs	r1, #28
 8002c6c:	202b      	movs	r0, #43	; 0x2b
 8002c6e:	f000 f8c3 	bl	8002df8 <SSD1306_GotoXY>
	for (uint8_t i = 0; i < 8; i++) {
 8002c72:	3401      	adds	r4, #1
		SSD1306_Puts(" Parts ", &Font_6x8, 1);
 8002c74:	2201      	movs	r2, #1
 8002c76:	0029      	movs	r1, r5
 8002c78:	4840      	ldr	r0, [pc, #256]	; (8002d7c <main+0x394>)
 8002c7a:	f000 f8f9 	bl	8002e70 <SSD1306_Puts>
	for (uint8_t i = 0; i < 8; i++) {
 8002c7e:	b2a4      	uxth	r4, r4
		SSD1306_UpdateScreen();
 8002c80:	f000 f9fc 	bl	800307c <SSD1306_UpdateScreen>
		HAL_Delay(200);
 8002c84:	20c8      	movs	r0, #200	; 0xc8
 8002c86:	f000 fc4f 	bl	8003528 <HAL_Delay>
	for (uint8_t i = 0; i < 8; i++) {
 8002c8a:	2c24      	cmp	r4, #36	; 0x24
 8002c8c:	d1e0      	bne.n	8002c50 <main+0x268>
	HAL_Delay(1000);
 8002c8e:	20fa      	movs	r0, #250	; 0xfa
 8002c90:	0080      	lsls	r0, r0, #2
 8002c92:	f000 fc49 	bl	8003528 <HAL_Delay>
	memset(pt, 0, (size_t)sizeof(pt));
 8002c96:	2290      	movs	r2, #144	; 0x90
 8002c98:	2100      	movs	r1, #0
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4838      	ldr	r0, [pc, #224]	; (8002d80 <main+0x398>)
 8002c9e:	f002 fd07 	bl	80056b0 <memset>
	SSD1306_Clear();
 8002ca2:	f000 fa0d 	bl	80030c0 <SSD1306_Clear>
	led_clear();
 8002ca6:	f7fd fd7d 	bl	80007a4 <led_clear>
	UPDATE;
 8002caa:	f000 f9e7 	bl	800307c <SSD1306_UpdateScreen>
 8002cae:	f7fd fd4f 	bl	8000750 <led_update>
	firstOn = eepReadData(0);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 faca 	bl	800324c <eepReadData>
	timeSet(firstOn);
 8002cb8:	f7fd ff94 	bl	8000be4 <timeSet>
		if(modeFlag == MAIN) modeFlag = mainM();
 8002cbc:	4c31      	ldr	r4, [pc, #196]	; (8002d84 <main+0x39c>)
 8002cbe:	7823      	ldrb	r3, [r4, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10e      	bne.n	8002ce2 <main+0x2fa>
 8002cc4:	f7fe f8be 	bl	8000e44 <mainM>
		else if(modeFlag == LOGD) modeFlag = logD();
 8002cc8:	7020      	strb	r0, [r4, #0]
 8002cca:	e7f7      	b.n	8002cbc <main+0x2d4>
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 8002ccc:	0029      	movs	r1, r5
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d905      	bls.n	8002cde <main+0x2f6>
 8002cd2:	3c11      	subs	r4, #17
 8002cd4:	b2e4      	uxtb	r4, r4
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	2c05      	cmp	r4, #5
 8002cda:	d800      	bhi.n	8002cde <main+0x2f6>
 8002cdc:	0029      	movs	r1, r5
 8002cde:	001c      	movs	r4, r3
 8002ce0:	e793      	b.n	8002c0a <main+0x222>
		else if(modeFlag == PSAVE) modeFlag = partS();
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d102      	bne.n	8002cec <main+0x304>
 8002ce6:	f7fe f9c9 	bl	800107c <partS>
 8002cea:	e7ed      	b.n	8002cc8 <main+0x2e0>
		else if(modeFlag == PUSE) modeFlag = pUseM();
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d102      	bne.n	8002cf6 <main+0x30e>
 8002cf0:	f7fe fcb8 	bl	8001664 <pUseM>
 8002cf4:	e7e8      	b.n	8002cc8 <main+0x2e0>
		else if(modeFlag == USE) modeFlag = use();
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d102      	bne.n	8002d00 <main+0x318>
 8002cfa:	f7fe fdf1 	bl	80018e0 <use>
 8002cfe:	e7e3      	b.n	8002cc8 <main+0x2e0>
		else if(modeFlag == REFILL) modeFlag = refill();
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d102      	bne.n	8002d0a <main+0x322>
 8002d04:	f7fe feca 	bl	8001a9c <refill>
 8002d08:	e7de      	b.n	8002cc8 <main+0x2e0>
		else if(modeFlag == PFIND) modeFlag = pFind();
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d102      	bne.n	8002d14 <main+0x32c>
 8002d0e:	f7fe ffc5 	bl	8001c9c <pFind>
 8002d12:	e7d9      	b.n	8002cc8 <main+0x2e0>
		else if(modeFlag == FINDR) modeFlag = findR();
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d102      	bne.n	8002d1e <main+0x336>
 8002d18:	f7ff f85c 	bl	8001dd4 <findR>
 8002d1c:	e7d4      	b.n	8002cc8 <main+0x2e0>
		else if(modeFlag == PARTITION) modeFlag = partition();
 8002d1e:	2b07      	cmp	r3, #7
 8002d20:	d102      	bne.n	8002d28 <main+0x340>
 8002d22:	f7ff f9ad 	bl	8002080 <partition>
 8002d26:	e7cf      	b.n	8002cc8 <main+0x2e0>
		else if(modeFlag == PLOG) modeFlag = logM();
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d102      	bne.n	8002d32 <main+0x34a>
 8002d2c:	f7ff fcce 	bl	80026cc <logM>
 8002d30:	e7ca      	b.n	8002cc8 <main+0x2e0>
		else if(modeFlag == LOGD) modeFlag = logD();
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d1c2      	bne.n	8002cbc <main+0x2d4>
 8002d36:	f7ff fd85 	bl	8002844 <logD>
 8002d3a:	e7c5      	b.n	8002cc8 <main+0x2e0>
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	50000400 	.word	0x50000400
 8002d44:	20000440 	.word	0x20000440
 8002d48:	40012400 	.word	0x40012400
 8002d4c:	04000002 	.word	0x04000002
 8002d50:	200004e4 	.word	0x200004e4
 8002d54:	40005400 	.word	0x40005400
 8002d58:	00200c28 	.word	0x00200c28
 8002d5c:	20000530 	.word	0x20000530
 8002d60:	40013000 	.word	0x40013000
 8002d64:	20000588 	.word	0x20000588
 8002d68:	000003e7 	.word	0x000003e7
 8002d6c:	20000950 	.word	0x20000950
 8002d70:	200005d2 	.word	0x200005d2
 8002d74:	20000000 	.word	0x20000000
 8002d78:	08006c56 	.word	0x08006c56
 8002d7c:	08006c5d 	.word	0x08006c5d
 8002d80:	2000070c 	.word	0x2000070c
 8002d84:	200005d0 	.word	0x200005d0

08002d88 <Error_Handler>:
 8002d88:	b672      	cpsid	i
	while (1) {
 8002d8a:	e7fe      	b.n	8002d8a <Error_Handler+0x2>

08002d8c <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002d8c:	2100      	movs	r1, #0
void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002d8e:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002d90:	4288      	cmp	r0, r1
 8002d92:	d000      	beq.n	8002d96 <SSD1306_Fill+0xa>
 8002d94:	31ff      	adds	r1, #255	; 0xff
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <SSD1306_Fill+0x18>)
 8002d9a:	00d2      	lsls	r2, r2, #3
 8002d9c:	f002 fc88 	bl	80056b0 <memset>
}
 8002da0:	bd10      	pop	{r4, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	20000968 	.word	0x20000968

08002da8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002da8:	b530      	push	{r4, r5, lr}
 8002daa:	0004      	movs	r4, r0
	if (
 8002dac:	287f      	cmp	r0, #127	; 0x7f
 8002dae:	d812      	bhi.n	8002dd6 <SSD1306_DrawPixel+0x2e>
			x >= SSD1306_WIDTH ||
 8002db0:	293f      	cmp	r1, #63	; 0x3f
 8002db2:	d810      	bhi.n	8002dd6 <SSD1306_DrawPixel+0x2e>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <SSD1306_DrawPixel+0x48>)
 8002db6:	4d0f      	ldr	r5, [pc, #60]	; (8002df4 <SSD1306_DrawPixel+0x4c>)
 8002db8:	7918      	ldrb	r0, [r3, #4]
 8002dba:	08cb      	lsrs	r3, r1, #3
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d00b      	beq.n	8002dd8 <SSD1306_DrawPixel+0x30>
		color = (SSD1306_COLOR_t)!color;
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	d10b      	bne.n	8002ddc <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002dc4:	01d8      	lsls	r0, r3, #7
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	4019      	ands	r1, r3
 8002dca:	3b06      	subs	r3, #6
 8002dcc:	408b      	lsls	r3, r1
 8002dce:	1900      	adds	r0, r0, r4
 8002dd0:	5c2a      	ldrb	r2, [r5, r0]
 8002dd2:	4313      	orrs	r3, r2
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002dd4:	542b      	strb	r3, [r5, r0]
	}
}
 8002dd6:	bd30      	pop	{r4, r5, pc}
	if (color == SSD1306_COLOR_WHITE) {
 8002dd8:	2a01      	cmp	r2, #1
 8002dda:	d0f3      	beq.n	8002dc4 <SSD1306_DrawPixel+0x1c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ddc:	01d8      	lsls	r0, r3, #7
 8002dde:	2307      	movs	r3, #7
 8002de0:	2201      	movs	r2, #1
 8002de2:	4019      	ands	r1, r3
 8002de4:	408a      	lsls	r2, r1
 8002de6:	1900      	adds	r0, r0, r4
 8002de8:	5c2b      	ldrb	r3, [r5, r0]
 8002dea:	4393      	bics	r3, r2
 8002dec:	e7f2      	b.n	8002dd4 <SSD1306_DrawPixel+0x2c>
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	20000962 	.word	0x20000962
 8002df4:	20000968 	.word	0x20000968

08002df8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002df8:	4b01      	ldr	r3, [pc, #4]	; (8002e00 <SSD1306_GotoXY+0x8>)
 8002dfa:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002dfc:	8059      	strh	r1, [r3, #2]
}
 8002dfe:	4770      	bx	lr
 8002e00:	20000962 	.word	0x20000962

08002e04 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e06:	0007      	movs	r7, r0
 8002e08:	000c      	movs	r4, r1
	//		/* Error */
	//		return 0;
	//	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002e0a:	2500      	movs	r5, #0
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002e0c:	9200      	str	r2, [sp, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 8002e0e:	7863      	ldrb	r3, [r4, #1]
 8002e10:	42ab      	cmp	r3, r5
 8002e12:	d806      	bhi.n	8002e22 <SSD1306_Putc+0x1e>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <SSD1306_Putc+0x68>)
 8002e16:	7823      	ldrb	r3, [r4, #0]
 8002e18:	8811      	ldrh	r1, [r2, #0]

	/* Return character written */
	return ch;
}
 8002e1a:	0038      	movs	r0, r7
	SSD1306.CurrentX += Font->FontWidth;
 8002e1c:	185b      	adds	r3, r3, r1
 8002e1e:	8013      	strh	r3, [r2, #0]
}
 8002e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002e22:	003a      	movs	r2, r7
		for (j = 0; j < Font->FontWidth; j++) {
 8002e24:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002e26:	3a20      	subs	r2, #32
 8002e28:	4353      	muls	r3, r2
 8002e2a:	6862      	ldr	r2, [r4, #4]
 8002e2c:	195b      	adds	r3, r3, r5
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	5a9b      	ldrh	r3, [r3, r2]
 8002e32:	9301      	str	r3, [sp, #4]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <SSD1306_Putc+0x68>)
		for (j = 0; j < Font->FontWidth; j++) {
 8002e36:	7822      	ldrb	r2, [r4, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e38:	8818      	ldrh	r0, [r3, #0]
		for (j = 0; j < Font->FontWidth; j++) {
 8002e3a:	42b2      	cmp	r2, r6
 8002e3c:	d801      	bhi.n	8002e42 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002e3e:	3501      	adds	r5, #1
 8002e40:	e7e5      	b.n	8002e0e <SSD1306_Putc+0xa>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e42:	8859      	ldrh	r1, [r3, #2]
			if ((b << j) & 0x8000) {
 8002e44:	9b01      	ldr	r3, [sp, #4]
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	40b3      	lsls	r3, r6
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e4a:	1980      	adds	r0, r0, r6
 8002e4c:	1949      	adds	r1, r1, r5
			if ((b << j) & 0x8000) {
 8002e4e:	0212      	lsls	r2, r2, #8
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e50:	b280      	uxth	r0, r0
 8002e52:	b289      	uxth	r1, r1
			if ((b << j) & 0x8000) {
 8002e54:	4213      	tst	r3, r2
 8002e56:	d004      	beq.n	8002e62 <SSD1306_Putc+0x5e>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e58:	9a00      	ldr	r2, [sp, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002e5a:	f7ff ffa5 	bl	8002da8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002e5e:	3601      	adds	r6, #1
 8002e60:	e7e8      	b.n	8002e34 <SSD1306_Putc+0x30>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002e62:	9b00      	ldr	r3, [sp, #0]
 8002e64:	425a      	negs	r2, r3
 8002e66:	415a      	adcs	r2, r3
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	e7f6      	b.n	8002e5a <SSD1306_Putc+0x56>
 8002e6c:	20000962 	.word	0x20000962

08002e70 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	0004      	movs	r4, r0
 8002e74:	000d      	movs	r5, r1
 8002e76:	0016      	movs	r6, r2
	/* Write characters */
	while (*str) {
 8002e78:	7820      	ldrb	r0, [r4, #0]
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d100      	bne.n	8002e80 <SSD1306_Puts+0x10>
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
}
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002e80:	0032      	movs	r2, r6
 8002e82:	0029      	movs	r1, r5
 8002e84:	f7ff ffbe 	bl	8002e04 <SSD1306_Putc>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	7820      	ldrb	r0, [r4, #0]
 8002e8c:	4283      	cmp	r3, r0
 8002e8e:	d1f6      	bne.n	8002e7e <SSD1306_Puts+0xe>
		str++;
 8002e90:	3401      	adds	r4, #1
 8002e92:	e7f1      	b.n	8002e78 <SSD1306_Puts+0x8>

08002e94 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	b087      	sub	sp, #28
 8002e98:	ac0c      	add	r4, sp, #48	; 0x30
 8002e9a:	7824      	ldrb	r4, [r4, #0]
 8002e9c:	9405      	str	r4, [sp, #20]
 8002e9e:	1c04      	adds	r4, r0, #0
 8002ea0:	287f      	cmp	r0, #127	; 0x7f
 8002ea2:	d900      	bls.n	8002ea6 <SSD1306_DrawLine+0x12>
 8002ea4:	247f      	movs	r4, #127	; 0x7f
 8002ea6:	b2a4      	uxth	r4, r4

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8002ea8:	1c16      	adds	r6, r2, #0
 8002eaa:	2a7f      	cmp	r2, #127	; 0x7f
 8002eac:	d900      	bls.n	8002eb0 <SSD1306_DrawLine+0x1c>
 8002eae:	267f      	movs	r6, #127	; 0x7f
 8002eb0:	b2b6      	uxth	r6, r6
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 8002eb2:	1c0d      	adds	r5, r1, #0
 8002eb4:	293f      	cmp	r1, #63	; 0x3f
 8002eb6:	d900      	bls.n	8002eba <SSD1306_DrawLine+0x26>
 8002eb8:	253f      	movs	r5, #63	; 0x3f
 8002eba:	b2ad      	uxth	r5, r5
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002ebc:	1c1f      	adds	r7, r3, #0
 8002ebe:	2b3f      	cmp	r3, #63	; 0x3f
 8002ec0:	d900      	bls.n	8002ec4 <SSD1306_DrawLine+0x30>
 8002ec2:	273f      	movs	r7, #63	; 0x3f
 8002ec4:	b2bf      	uxth	r7, r7
		y1 = SSD1306_HEIGHT - 1;
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002ec6:	1b33      	subs	r3, r6, r4
 8002ec8:	42a6      	cmp	r6, r4
 8002eca:	d800      	bhi.n	8002ece <SSD1306_DrawLine+0x3a>
 8002ecc:	1ba3      	subs	r3, r4, r6
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	9300      	str	r3, [sp, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002ed2:	42bd      	cmp	r5, r7
 8002ed4:	d224      	bcs.n	8002f20 <SSD1306_DrawLine+0x8c>
 8002ed6:	1b7b      	subs	r3, r7, r5
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 8002edc:	2301      	movs	r3, #1
 8002ede:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8002ee0:	9304      	str	r3, [sp, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002ee2:	42a6      	cmp	r6, r4
 8002ee4:	d801      	bhi.n	8002eea <SSD1306_DrawLine+0x56>
 8002ee6:	3b02      	subs	r3, #2
 8002ee8:	9303      	str	r3, [sp, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002eea:	9b00      	ldr	r3, [sp, #0]
 8002eec:	9a01      	ldr	r2, [sp, #4]
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	dd23      	ble.n	8002f3a <SSD1306_DrawLine+0xa6>
 8002ef2:	9a00      	ldr	r2, [sp, #0]
 8002ef4:	0fdb      	lsrs	r3, r3, #31
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	105b      	asrs	r3, r3, #1
 8002efa:	9302      	str	r3, [sp, #8]

	if (dx == 0) {
 8002efc:	9b00      	ldr	r3, [sp, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d12b      	bne.n	8002f5a <SSD1306_DrawLine+0xc6>
		if (y1 < y0) {
 8002f02:	42bd      	cmp	r5, r7
 8002f04:	d902      	bls.n	8002f0c <SSD1306_DrawLine+0x78>
 8002f06:	002b      	movs	r3, r5
 8002f08:	003d      	movs	r5, r7
 8002f0a:	001f      	movs	r7, r3
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}

		if (x1 < x0) {
 8002f0c:	1c33      	adds	r3, r6, #0
 8002f0e:	42a6      	cmp	r6, r4
 8002f10:	d900      	bls.n	8002f14 <SSD1306_DrawLine+0x80>
 8002f12:	1c23      	adds	r3, r4, #0
 8002f14:	b29c      	uxth	r4, r3
			x1 = x0;
			x0 = tmp;
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002f16:	b22d      	sxth	r5, r5
 8002f18:	42bd      	cmp	r5, r7
 8002f1a:	dd16      	ble.n	8002f4a <SSD1306_DrawLine+0xb6>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8002f1c:	b007      	add	sp, #28
 8002f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002f20:	1beb      	subs	r3, r5, r7
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 8002f26:	2301      	movs	r3, #1
 8002f28:	42a6      	cmp	r6, r4
 8002f2a:	d903      	bls.n	8002f34 <SSD1306_DrawLine+0xa0>
 8002f2c:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8002f2e:	3b02      	subs	r3, #2
 8002f30:	9304      	str	r3, [sp, #16]
 8002f32:	e7da      	b.n	8002eea <SSD1306_DrawLine+0x56>
	sx = (x0 < x1) ? 1 : -1; 
 8002f34:	425b      	negs	r3, r3
 8002f36:	9303      	str	r3, [sp, #12]
 8002f38:	e7fa      	b.n	8002f30 <SSD1306_DrawLine+0x9c>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002f3a:	9b01      	ldr	r3, [sp, #4]
 8002f3c:	9a01      	ldr	r2, [sp, #4]
 8002f3e:	0fdb      	lsrs	r3, r3, #31
 8002f40:	189b      	adds	r3, r3, r2
 8002f42:	105b      	asrs	r3, r3, #1
 8002f44:	425b      	negs	r3, r3
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	e7d7      	b.n	8002efa <SSD1306_DrawLine+0x66>
			SSD1306_DrawPixel(x0, i, c);
 8002f4a:	b2ad      	uxth	r5, r5
 8002f4c:	0029      	movs	r1, r5
 8002f4e:	0020      	movs	r0, r4
 8002f50:	9a05      	ldr	r2, [sp, #20]
 8002f52:	f7ff ff29 	bl	8002da8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002f56:	3501      	adds	r5, #1
 8002f58:	e7dd      	b.n	8002f16 <SSD1306_DrawLine+0x82>
	if (dy == 0) {
 8002f5a:	9b01      	ldr	r3, [sp, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d115      	bne.n	8002f8c <SSD1306_DrawLine+0xf8>
		if (y1 < y0) {
 8002f60:	1c2b      	adds	r3, r5, #0
 8002f62:	42bd      	cmp	r5, r7
 8002f64:	d900      	bls.n	8002f68 <SSD1306_DrawLine+0xd4>
 8002f66:	1c3b      	adds	r3, r7, #0
 8002f68:	b29d      	uxth	r5, r3
		if (x1 < x0) {
 8002f6a:	42a6      	cmp	r6, r4
 8002f6c:	d202      	bcs.n	8002f74 <SSD1306_DrawLine+0xe0>
 8002f6e:	0023      	movs	r3, r4
 8002f70:	0034      	movs	r4, r6
 8002f72:	001e      	movs	r6, r3
		for (i = x0; i <= x1; i++) {
 8002f74:	b224      	sxth	r4, r4
 8002f76:	42b4      	cmp	r4, r6
 8002f78:	dcd0      	bgt.n	8002f1c <SSD1306_DrawLine+0x88>
			SSD1306_DrawPixel(i, y0, c);
 8002f7a:	b2a4      	uxth	r4, r4
 8002f7c:	0020      	movs	r0, r4
 8002f7e:	0029      	movs	r1, r5
 8002f80:	9a05      	ldr	r2, [sp, #20]
 8002f82:	f7ff ff11 	bl	8002da8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002f86:	3401      	adds	r4, #1
 8002f88:	e7f4      	b.n	8002f74 <SSD1306_DrawLine+0xe0>
		if (x1 < x0) {
 8002f8a:	9302      	str	r3, [sp, #8]
		SSD1306_DrawPixel(x0, y0, c);
 8002f8c:	0029      	movs	r1, r5
 8002f8e:	0020      	movs	r0, r4
 8002f90:	9a05      	ldr	r2, [sp, #20]
 8002f92:	f7ff ff09 	bl	8002da8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002f96:	42a6      	cmp	r6, r4
 8002f98:	d101      	bne.n	8002f9e <SSD1306_DrawLine+0x10a>
 8002f9a:	42bd      	cmp	r5, r7
 8002f9c:	d0be      	beq.n	8002f1c <SSD1306_DrawLine+0x88>
		if (e2 > -dx) {
 8002f9e:	9b00      	ldr	r3, [sp, #0]
 8002fa0:	425a      	negs	r2, r3
 8002fa2:	9b02      	ldr	r3, [sp, #8]
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	dd05      	ble.n	8002fb4 <SSD1306_DrawLine+0x120>
			err -= dy;
 8002fa8:	9a01      	ldr	r2, [sp, #4]
 8002faa:	1a9b      	subs	r3, r3, r2
			x0 += sx;
 8002fac:	9a03      	ldr	r2, [sp, #12]
			err -= dy;
 8002fae:	b21b      	sxth	r3, r3
			x0 += sx;
 8002fb0:	18a4      	adds	r4, r4, r2
 8002fb2:	b2a4      	uxth	r4, r4
		if (e2 < dy) {
 8002fb4:	9a02      	ldr	r2, [sp, #8]
 8002fb6:	9901      	ldr	r1, [sp, #4]
 8002fb8:	428a      	cmp	r2, r1
 8002fba:	dae6      	bge.n	8002f8a <SSD1306_DrawLine+0xf6>
			err += dx;
 8002fbc:	9a00      	ldr	r2, [sp, #0]
 8002fbe:	189b      	adds	r3, r3, r2
			y0 += sy;
 8002fc0:	9a04      	ldr	r2, [sp, #16]
			err += dx;
 8002fc2:	b21b      	sxth	r3, r3
			y0 += sy;
 8002fc4:	18ad      	adds	r5, r5, r2
 8002fc6:	b2ad      	uxth	r5, r5
 8002fc8:	e7df      	b.n	8002f8a <SSD1306_DrawLine+0xf6>

08002fca <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	0005      	movs	r5, r0
 8002fd6:	000f      	movs	r7, r1
 8002fd8:	0014      	movs	r4, r2
 8002fda:	9303      	str	r3, [sp, #12]
	uint8_t i;

	/* Check input parameters */
	if (
 8002fdc:	287f      	cmp	r0, #127	; 0x7f
 8002fde:	d814      	bhi.n	800300a <SSD1306_DrawFilledRectangle+0x40>
			x >= SSD1306_WIDTH ||
 8002fe0:	293f      	cmp	r1, #63	; 0x3f
 8002fe2:	d812      	bhi.n	800300a <SSD1306_DrawFilledRectangle+0x40>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002fe4:	1883      	adds	r3, r0, r2
 8002fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe8:	dd02      	ble.n	8002ff0 <SSD1306_DrawFilledRectangle+0x26>
		w = SSD1306_WIDTH - x;
 8002fea:	2480      	movs	r4, #128	; 0x80
 8002fec:	1a24      	subs	r4, r4, r0
 8002fee:	b2a4      	uxth	r4, r4
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8002ff0:	9b02      	ldr	r3, [sp, #8]
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	2b3f      	cmp	r3, #63	; 0x3f
 8002ff6:	dd03      	ble.n	8003000 <SSD1306_DrawFilledRectangle+0x36>
		h = SSD1306_HEIGHT - y;
 8002ff8:	2340      	movs	r3, #64	; 0x40
 8002ffa:	1bdb      	subs	r3, r3, r7
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	9302      	str	r3, [sp, #8]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8003000:	2600      	movs	r6, #0
 8003002:	9b02      	ldr	r3, [sp, #8]
 8003004:	b2b1      	uxth	r1, r6
 8003006:	429e      	cmp	r6, r3
 8003008:	d901      	bls.n	800300e <SSD1306_DrawFilledRectangle+0x44>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}
 800300a:	b005      	add	sp, #20
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 800300e:	9b03      	ldr	r3, [sp, #12]
 8003010:	19c9      	adds	r1, r1, r7
 8003012:	b289      	uxth	r1, r1
 8003014:	1962      	adds	r2, r4, r5
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	0028      	movs	r0, r5
 800301a:	000b      	movs	r3, r1
 800301c:	b292      	uxth	r2, r2
	for (i = 0; i <= h; i++) {
 800301e:	3601      	adds	r6, #1
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8003020:	f7ff ff38 	bl	8002e94 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8003024:	b2f6      	uxtb	r6, r6
 8003026:	e7ec      	b.n	8003002 <SSD1306_DrawFilledRectangle+0x38>

08003028 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003028:	b570      	push	{r4, r5, r6, lr}
	uint8_t dt[256];
	dt[0] = reg;
	uint8_t i;
	for(i = 0; i < count; i++)
 800302a:	2400      	movs	r4, #0
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800302c:	b0c2      	sub	sp, #264	; 0x108
 800302e:	0015      	movs	r5, r2
	dt[0] = reg;
 8003030:	aa02      	add	r2, sp, #8
 8003032:	7011      	strb	r1, [r2, #0]
	for(i = 0; i < count; i++)
 8003034:	429c      	cmp	r4, r3
 8003036:	d309      	bcc.n	800304c <ssd1306_I2C_WriteMulti+0x24>
		dt[i+1] = data[i];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003038:	b281      	uxth	r1, r0
 800303a:	200a      	movs	r0, #10
 800303c:	3301      	adds	r3, #1
 800303e:	9000      	str	r0, [sp, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <ssd1306_I2C_WriteMulti+0x30>)
 8003044:	f001 f8d4 	bl	80041f0 <HAL_I2C_Master_Transmit>
}
 8003048:	b042      	add	sp, #264	; 0x108
 800304a:	bd70      	pop	{r4, r5, r6, pc}
		dt[i+1] = data[i];
 800304c:	5d2e      	ldrb	r6, [r5, r4]
 800304e:	1911      	adds	r1, r2, r4
	for(i = 0; i < count; i++)
 8003050:	3401      	adds	r4, #1
		dt[i+1] = data[i];
 8003052:	704e      	strb	r6, [r1, #1]
	for(i = 0; i < count; i++)
 8003054:	b2e4      	uxtb	r4, r4
 8003056:	e7ed      	b.n	8003034 <ssd1306_I2C_WriteMulti+0xc>
 8003058:	200004e4 	.word	0x200004e4

0800305c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800305c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
 800305e:	466b      	mov	r3, sp
 8003060:	7319      	strb	r1, [r3, #12]
	dt[1] = data;
 8003062:	735a      	strb	r2, [r3, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003064:	230a      	movs	r3, #10
 8003066:	0001      	movs	r1, r0
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	aa03      	add	r2, sp, #12
 800306c:	3b08      	subs	r3, #8
 800306e:	4802      	ldr	r0, [pc, #8]	; (8003078 <ssd1306_I2C_Write+0x1c>)
 8003070:	f001 f8be 	bl	80041f0 <HAL_I2C_Master_Transmit>
}
 8003074:	b005      	add	sp, #20
 8003076:	bd00      	pop	{pc}
 8003078:	200004e4 	.word	0x200004e4

0800307c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003080:	2578      	movs	r5, #120	; 0x78
 8003082:	4e0e      	ldr	r6, [pc, #56]	; (80030bc <SSD1306_UpdateScreen+0x40>)
 8003084:	0022      	movs	r2, r4
 8003086:	2100      	movs	r1, #0
 8003088:	0028      	movs	r0, r5
 800308a:	f7ff ffe7 	bl	800305c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800308e:	2200      	movs	r2, #0
 8003090:	0028      	movs	r0, r5
 8003092:	0011      	movs	r1, r2
 8003094:	f7ff ffe2 	bl	800305c <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 8003098:	3401      	adds	r4, #1
		SSD1306_WRITECOMMAND(0x10);
 800309a:	2210      	movs	r2, #16
 800309c:	2100      	movs	r1, #0
 800309e:	0028      	movs	r0, r5
 80030a0:	f7ff ffdc 	bl	800305c <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 80030a4:	b2e4      	uxtb	r4, r4
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80030a6:	0032      	movs	r2, r6
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	2140      	movs	r1, #64	; 0x40
 80030ac:	0028      	movs	r0, r5
 80030ae:	f7ff ffbb 	bl	8003028 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80030b2:	3680      	adds	r6, #128	; 0x80
 80030b4:	2cb8      	cmp	r4, #184	; 0xb8
 80030b6:	d1e5      	bne.n	8003084 <SSD1306_UpdateScreen+0x8>
}
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	20000968 	.word	0x20000968

080030c0 <SSD1306_Clear>:
{
 80030c0:	b510      	push	{r4, lr}
	SSD1306_Fill (0);
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7ff fe62 	bl	8002d8c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80030c8:	f7ff ffd8 	bl	800307c <SSD1306_UpdateScreen>
}
 80030cc:	bd10      	pop	{r4, pc}
	...

080030d0 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80030d0:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80030d2:	2201      	movs	r2, #1
 80030d4:	2178      	movs	r1, #120	; 0x78
 80030d6:	4b52      	ldr	r3, [pc, #328]	; (8003220 <SSD1306_Init+0x150>)
 80030d8:	4852      	ldr	r0, [pc, #328]	; (8003224 <SSD1306_Init+0x154>)
 80030da:	f001 f9ad 	bl	8004438 <HAL_I2C_IsDeviceReady>
		return 0;
 80030de:	2400      	movs	r4, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80030e0:	42a0      	cmp	r0, r4
 80030e2:	d000      	beq.n	80030e6 <SSD1306_Init+0x16>
 80030e4:	e09a      	b.n	800321c <SSD1306_Init+0x14c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80030e6:	0021      	movs	r1, r4
 80030e8:	22ae      	movs	r2, #174	; 0xae
 80030ea:	2078      	movs	r0, #120	; 0x78
 80030ec:	f7ff ffb6 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80030f0:	0021      	movs	r1, r4
 80030f2:	2220      	movs	r2, #32
 80030f4:	2078      	movs	r0, #120	; 0x78
 80030f6:	f7ff ffb1 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80030fa:	0021      	movs	r1, r4
 80030fc:	2210      	movs	r2, #16
 80030fe:	2078      	movs	r0, #120	; 0x78
 8003100:	f7ff ffac 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003104:	0021      	movs	r1, r4
 8003106:	22b0      	movs	r2, #176	; 0xb0
 8003108:	2078      	movs	r0, #120	; 0x78
 800310a:	f7ff ffa7 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800310e:	0021      	movs	r1, r4
 8003110:	22c8      	movs	r2, #200	; 0xc8
 8003112:	2078      	movs	r0, #120	; 0x78
 8003114:	f7ff ffa2 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003118:	0022      	movs	r2, r4
 800311a:	0021      	movs	r1, r4
 800311c:	2078      	movs	r0, #120	; 0x78
 800311e:	f7ff ff9d 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003122:	0021      	movs	r1, r4
 8003124:	2210      	movs	r2, #16
 8003126:	2078      	movs	r0, #120	; 0x78
 8003128:	f7ff ff98 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800312c:	0021      	movs	r1, r4
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	2078      	movs	r0, #120	; 0x78
 8003132:	f7ff ff93 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003136:	0021      	movs	r1, r4
 8003138:	2281      	movs	r2, #129	; 0x81
 800313a:	2078      	movs	r0, #120	; 0x78
 800313c:	f7ff ff8e 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003140:	0021      	movs	r1, r4
 8003142:	22ff      	movs	r2, #255	; 0xff
 8003144:	2078      	movs	r0, #120	; 0x78
 8003146:	f7ff ff89 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800314a:	0021      	movs	r1, r4
 800314c:	22a1      	movs	r2, #161	; 0xa1
 800314e:	2078      	movs	r0, #120	; 0x78
 8003150:	f7ff ff84 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003154:	0021      	movs	r1, r4
 8003156:	22a6      	movs	r2, #166	; 0xa6
 8003158:	2078      	movs	r0, #120	; 0x78
 800315a:	f7ff ff7f 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800315e:	0021      	movs	r1, r4
 8003160:	22a8      	movs	r2, #168	; 0xa8
 8003162:	2078      	movs	r0, #120	; 0x78
 8003164:	f7ff ff7a 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003168:	0021      	movs	r1, r4
 800316a:	223f      	movs	r2, #63	; 0x3f
 800316c:	2078      	movs	r0, #120	; 0x78
 800316e:	f7ff ff75 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003172:	0021      	movs	r1, r4
 8003174:	22a4      	movs	r2, #164	; 0xa4
 8003176:	2078      	movs	r0, #120	; 0x78
 8003178:	f7ff ff70 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800317c:	0021      	movs	r1, r4
 800317e:	22d3      	movs	r2, #211	; 0xd3
 8003180:	2078      	movs	r0, #120	; 0x78
 8003182:	f7ff ff6b 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003186:	0022      	movs	r2, r4
 8003188:	0021      	movs	r1, r4
 800318a:	2078      	movs	r0, #120	; 0x78
 800318c:	f7ff ff66 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003190:	0021      	movs	r1, r4
 8003192:	22d5      	movs	r2, #213	; 0xd5
 8003194:	2078      	movs	r0, #120	; 0x78
 8003196:	f7ff ff61 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800319a:	0021      	movs	r1, r4
 800319c:	22f0      	movs	r2, #240	; 0xf0
 800319e:	2078      	movs	r0, #120	; 0x78
 80031a0:	f7ff ff5c 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80031a4:	0021      	movs	r1, r4
 80031a6:	22d9      	movs	r2, #217	; 0xd9
 80031a8:	2078      	movs	r0, #120	; 0x78
 80031aa:	f7ff ff57 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80031ae:	0021      	movs	r1, r4
 80031b0:	2222      	movs	r2, #34	; 0x22
 80031b2:	2078      	movs	r0, #120	; 0x78
 80031b4:	f7ff ff52 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80031b8:	0021      	movs	r1, r4
 80031ba:	22da      	movs	r2, #218	; 0xda
 80031bc:	2078      	movs	r0, #120	; 0x78
 80031be:	f7ff ff4d 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80031c2:	0021      	movs	r1, r4
 80031c4:	2212      	movs	r2, #18
 80031c6:	2078      	movs	r0, #120	; 0x78
 80031c8:	f7ff ff48 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80031cc:	0021      	movs	r1, r4
 80031ce:	22db      	movs	r2, #219	; 0xdb
 80031d0:	2078      	movs	r0, #120	; 0x78
 80031d2:	f7ff ff43 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80031d6:	0021      	movs	r1, r4
 80031d8:	2220      	movs	r2, #32
 80031da:	2078      	movs	r0, #120	; 0x78
 80031dc:	f7ff ff3e 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80031e0:	0021      	movs	r1, r4
 80031e2:	228d      	movs	r2, #141	; 0x8d
 80031e4:	2078      	movs	r0, #120	; 0x78
 80031e6:	f7ff ff39 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80031ea:	0021      	movs	r1, r4
 80031ec:	2214      	movs	r2, #20
 80031ee:	2078      	movs	r0, #120	; 0x78
 80031f0:	f7ff ff34 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80031f4:	0021      	movs	r1, r4
 80031f6:	22af      	movs	r2, #175	; 0xaf
 80031f8:	2078      	movs	r0, #120	; 0x78
 80031fa:	f7ff ff2f 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80031fe:	0021      	movs	r1, r4
 8003200:	222e      	movs	r2, #46	; 0x2e
 8003202:	2078      	movs	r0, #120	; 0x78
 8003204:	f7ff ff2a 	bl	800305c <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003208:	0020      	movs	r0, r4
 800320a:	f7ff fdbf 	bl	8002d8c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800320e:	f7ff ff35 	bl	800307c <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SSD1306_Init+0x158>)
 8003214:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8003216:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 8003218:	3401      	adds	r4, #1
 800321a:	715c      	strb	r4, [r3, #5]
}
 800321c:	0020      	movs	r0, r4
 800321e:	bd10      	pop	{r4, pc}
 8003220:	00004e20 	.word	0x00004e20
 8003224:	200004e4 	.word	0x200004e4
 8003228:	20000962 	.word	0x20000962

0800322c <eepWriteData>:
 */
#include "stm32l0xx_EEPROM.h"
#include "stm32l052xx.h"

void eepWriteData(uint16_t addr, uint8_t inData)
{
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	000d      	movs	r5, r1
 8003230:	0004      	movs	r4, r0
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8003232:	f000 fd4f 	bl	8003cd4 <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE,(DATA_EEPROM_BASE+addr),inData);
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <eepWriteData+0x1c>)
 8003238:	002a      	movs	r2, r5
 800323a:	18e1      	adds	r1, r4, r3
 800323c:	2000      	movs	r0, #0
 800323e:	f000 fd6b 	bl	8003d18 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_FLASHEx_DATAEEPROM_Lock();
 8003242:	f000 fd5f 	bl	8003d04 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	08080000 	.word	0x08080000

0800324c <eepReadData>:
uint8_t eepReadData(uint16_t addr)
{
	//return (*(__IO uint32_t *)(EEP_START_ADRESS+addr));
	return (*(__IO uint8_t*)(DATA_EEPROM_BASE+addr));
 800324c:	4b02      	ldr	r3, [pc, #8]	; (8003258 <eepReadData+0xc>)
 800324e:	18c0      	adds	r0, r0, r3
 8003250:	7800      	ldrb	r0, [r0, #0]
 8003252:	b2c0      	uxtb	r0, r0
}
 8003254:	4770      	bx	lr
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	08080000 	.word	0x08080000

0800325c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325c:	2201      	movs	r2, #1
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_MspInit+0x18>)
 8003260:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003262:	430a      	orrs	r2, r1
 8003264:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	2280      	movs	r2, #128	; 0x80
 8003268:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800326a:	0552      	lsls	r2, r2, #21
 800326c:	430a      	orrs	r2, r1
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003270:	4770      	bx	lr
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	40021000 	.word	0x40021000

08003278 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003278:	b510      	push	{r4, lr}
 800327a:	0004      	movs	r4, r0
 800327c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327e:	2214      	movs	r2, #20
 8003280:	2100      	movs	r1, #0
 8003282:	a801      	add	r0, sp, #4
 8003284:	f002 fa14 	bl	80056b0 <memset>
  if(hadc->Instance==ADC1)
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_ADC_MspInit+0x48>)
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d115      	bne.n	80032bc <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_ADC_MspInit+0x4c>)
 8003294:	0092      	lsls	r2, r2, #2
 8003296:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003298:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800329a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329c:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a4:	430a      	orrs	r2, r1
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	400b      	ands	r3, r1
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 80032b0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 80032b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032b6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b8:	f000 fd58 	bl	8003d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032bc:	b006      	add	sp, #24
 80032be:	bd10      	pop	{r4, pc}
 80032c0:	40012400 	.word	0x40012400
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032c8:	b510      	push	{r4, lr}
 80032ca:	0004      	movs	r4, r0
 80032cc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ce:	2214      	movs	r2, #20
 80032d0:	2100      	movs	r1, #0
 80032d2:	a801      	add	r0, sp, #4
 80032d4:	f002 f9ec 	bl	80056b0 <memset>
  if(hi2c->Instance==I2C1)
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_I2C_MspInit+0x50>)
 80032da:	6822      	ldr	r2, [r4, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d119      	bne.n	8003314 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e0:	2102      	movs	r1, #2
 80032e2:	4c0e      	ldr	r4, [pc, #56]	; (800331c <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	480e      	ldr	r0, [pc, #56]	; (8003320 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032e8:	430a      	orrs	r2, r1
 80032ea:	62e2      	str	r2, [r4, #44]	; 0x2c
 80032ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80032ee:	400b      	ands	r3, r1
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032f4:	23c0      	movs	r3, #192	; 0xc0
 80032f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032f8:	3bae      	subs	r3, #174	; 0xae
 80032fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fc:	3b0f      	subs	r3, #15
 80032fe:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003300:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003302:	3b02      	subs	r3, #2
 8003304:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003306:	f000 fd31 	bl	8003d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800330e:	039b      	lsls	r3, r3, #14
 8003310:	4313      	orrs	r3, r2
 8003312:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003314:	b006      	add	sp, #24
 8003316:	bd10      	pop	{r4, pc}
 8003318:	40005400 	.word	0x40005400
 800331c:	40021000 	.word	0x40021000
 8003320:	50000400 	.word	0x50000400

08003324 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	0005      	movs	r5, r0
 8003328:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332a:	2214      	movs	r2, #20
 800332c:	2100      	movs	r1, #0
 800332e:	a801      	add	r0, sp, #4
 8003330:	f002 f9be 	bl	80056b0 <memset>
  if(hspi->Instance==SPI1)
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_SPI_MspInit+0x7c>)
 8003336:	682a      	ldr	r2, [r5, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d12f      	bne.n	800339c <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800333c:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	2601      	movs	r6, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_SPI_MspInit+0x80>)
 8003342:	0152      	lsls	r2, r2, #5
 8003344:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003346:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003348:	430a      	orrs	r2, r1
 800334a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003350:	4332      	orrs	r2, r6
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4033      	ands	r3, r6
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800335e:	23a0      	movs	r3, #160	; 0xa0
 8003360:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	3b9e      	subs	r3, #158	; 0x9e
 8003364:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003366:	199b      	adds	r3, r3, r6
 8003368:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336a:	f000 fcff 	bl	8003d6c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800336e:	4c0e      	ldr	r4, [pc, #56]	; (80033a8 <HAL_SPI_MspInit+0x84>)
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_SPI_MspInit+0x88>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003372:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003374:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003376:	2310      	movs	r3, #16
 8003378:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800337a:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800337c:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800337e:	6066      	str	r6, [r4, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003380:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003382:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003384:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003386:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003388:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800338a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800338c:	f000 fb42 	bl	8003a14 <HAL_DMA_Init>
 8003390:	2800      	cmp	r0, #0
 8003392:	d001      	beq.n	8003398 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8003394:	f7ff fcf8 	bl	8002d88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003398:	64ac      	str	r4, [r5, #72]	; 0x48
 800339a:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800339c:	b006      	add	sp, #24
 800339e:	bd70      	pop	{r4, r5, r6, pc}
 80033a0:	40013000 	.word	0x40013000
 80033a4:	40021000 	.word	0x40021000
 80033a8:	2000049c 	.word	0x2000049c
 80033ac:	40020030 	.word	0x40020030

080033b0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	6802      	ldr	r2, [r0, #0]
 80033b4:	05db      	lsls	r3, r3, #23
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d104      	bne.n	80033c4 <HAL_TIM_Base_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033ba:	2301      	movs	r3, #1
 80033bc:	4a02      	ldr	r2, [pc, #8]	; (80033c8 <HAL_TIM_Base_MspInit+0x18>)
 80033be:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033c4:	4770      	bx	lr
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	40021000 	.word	0x40021000

080033cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <NMI_Handler>

080033ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ce:	e7fe      	b.n	80033ce <HardFault_Handler>

080033d0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033d0:	4770      	bx	lr

080033d2 <PendSV_Handler>:
 80033d2:	4770      	bx	lr

080033d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033d6:	f000 f895 	bl	8003504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033da:	bd10      	pop	{r4, pc}

080033dc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80033dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033de:	4802      	ldr	r0, [pc, #8]	; (80033e8 <DMA1_Channel2_3_IRQHandler+0xc>)
 80033e0:	f000 fb9c 	bl	8003b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80033e4:	bd10      	pop	{r4, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	2000049c 	.word	0x2000049c

080033ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033ee:	4802      	ldr	r0, [pc, #8]	; (80033f8 <TIM2_IRQHandler+0xc>)
 80033f0:	f002 f850 	bl	8005494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	20000588 	.word	0x20000588

080033fc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033fc:	4a0b      	ldr	r2, [pc, #44]	; (800342c <_sbrk+0x30>)
 80033fe:	490c      	ldr	r1, [pc, #48]	; (8003430 <_sbrk+0x34>)
{
 8003400:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003402:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <_sbrk+0x38>)
{
 8003406:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003408:	6810      	ldr	r0, [r2, #0]
 800340a:	2800      	cmp	r0, #0
 800340c:	d101      	bne.n	8003412 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800340e:	480a      	ldr	r0, [pc, #40]	; (8003438 <_sbrk+0x3c>)
 8003410:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003412:	6810      	ldr	r0, [r2, #0]
 8003414:	18c3      	adds	r3, r0, r3
 8003416:	428b      	cmp	r3, r1
 8003418:	d906      	bls.n	8003428 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800341a:	f002 f8f9 	bl	8005610 <__errno>
 800341e:	230c      	movs	r3, #12
 8003420:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003422:	2001      	movs	r0, #1
 8003424:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003426:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003428:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800342a:	e7fc      	b.n	8003426 <_sbrk+0x2a>
 800342c:	00000400 	.word	0x00000400
 8003430:	20002000 	.word	0x20002000
 8003434:	20000d68 	.word	0x20000d68
 8003438:	20000d98 	.word	0x20000d98

0800343c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800343c:	4770      	bx	lr
	...

08003440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003440:	480d      	ldr	r0, [pc, #52]	; (8003478 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003442:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003444:	480d      	ldr	r0, [pc, #52]	; (800347c <LoopForever+0x6>)
  ldr r1, =_edata
 8003446:	490e      	ldr	r1, [pc, #56]	; (8003480 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003448:	4a0e      	ldr	r2, [pc, #56]	; (8003484 <LoopForever+0xe>)
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800344c:	e002      	b.n	8003454 <LoopCopyDataInit>

0800344e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800344e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003452:	3304      	adds	r3, #4

08003454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003458:	d3f9      	bcc.n	800344e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800345a:	4a0b      	ldr	r2, [pc, #44]	; (8003488 <LoopForever+0x12>)
  ldr r4, =_ebss
 800345c:	4c0b      	ldr	r4, [pc, #44]	; (800348c <LoopForever+0x16>)
  movs r3, #0
 800345e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003460:	e001      	b.n	8003466 <LoopFillZerobss>

08003462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003464:	3204      	adds	r2, #4

08003466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003468:	d3fb      	bcc.n	8003462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800346a:	f7ff ffe7 	bl	800343c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800346e:	f002 f8d5 	bl	800561c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003472:	f7ff fab9 	bl	80029e8 <main>

08003476 <LoopForever>:

LoopForever:
    b LoopForever
 8003476:	e7fe      	b.n	8003476 <LoopForever>
   ldr   r0, =_estack
 8003478:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800347c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003480:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003484:	08006d40 	.word	0x08006d40
  ldr r2, =_sbss
 8003488:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800348c:	20000d98 	.word	0x20000d98

08003490 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003490:	e7fe      	b.n	8003490 <ADC1_COMP_IRQHandler>
	...

08003494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003498:	20fa      	movs	r0, #250	; 0xfa
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <HAL_InitTick+0x3c>)
 800349c:	0080      	lsls	r0, r0, #2
 800349e:	7819      	ldrb	r1, [r3, #0]
 80034a0:	f7fc fe50 	bl	8000144 <__udivsi3>
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_InitTick+0x40>)
 80034a6:	0001      	movs	r1, r0
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	f7fc fe4b 	bl	8000144 <__udivsi3>
 80034ae:	f000 fa97 	bl	80039e0 <HAL_SYSTICK_Config>
 80034b2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80034b4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034b6:	2c00      	cmp	r4, #0
 80034b8:	d109      	bne.n	80034ce <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ba:	2d03      	cmp	r5, #3
 80034bc:	d807      	bhi.n	80034ce <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034be:	3802      	subs	r0, #2
 80034c0:	0022      	movs	r2, r4
 80034c2:	0029      	movs	r1, r5
 80034c4:	f000 fa56 	bl	8003974 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c8:	0020      	movs	r0, r4
 80034ca:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <HAL_InitTick+0x44>)
 80034cc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	20000020 	.word	0x20000020
 80034d4:	2000001c 	.word	0x2000001c
 80034d8:	20000024 	.word	0x20000024

080034dc <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80034dc:	2340      	movs	r3, #64	; 0x40
 80034de:	4a08      	ldr	r2, [pc, #32]	; (8003500 <HAL_Init+0x24>)
{
 80034e0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80034e2:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034e4:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80034e6:	430b      	orrs	r3, r1
 80034e8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ea:	f7ff ffd3 	bl	8003494 <HAL_InitTick>
 80034ee:	1e04      	subs	r4, r0, #0
 80034f0:	d103      	bne.n	80034fa <HAL_Init+0x1e>
    HAL_MspInit();
 80034f2:	f7ff feb3 	bl	800325c <HAL_MspInit>
}
 80034f6:	0020      	movs	r0, r4
 80034f8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80034fa:	2401      	movs	r4, #1
 80034fc:	e7fb      	b.n	80034f6 <HAL_Init+0x1a>
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	40022000 	.word	0x40022000

08003504 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003504:	4a03      	ldr	r2, [pc, #12]	; (8003514 <HAL_IncTick+0x10>)
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <HAL_IncTick+0x14>)
 8003508:	6811      	ldr	r1, [r2, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	185b      	adds	r3, r3, r1
 800350e:	6013      	str	r3, [r2, #0]
}
 8003510:	4770      	bx	lr
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	20000d6c 	.word	0x20000d6c
 8003518:	20000020 	.word	0x20000020

0800351c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800351c:	4b01      	ldr	r3, [pc, #4]	; (8003524 <HAL_GetTick+0x8>)
 800351e:	6818      	ldr	r0, [r3, #0]
}
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	20000d6c 	.word	0x20000d6c

08003528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7ff fff6 	bl	800351c <HAL_GetTick>
 8003530:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003532:	1c63      	adds	r3, r4, #1
 8003534:	d002      	beq.n	800353c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_Delay+0x20>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800353c:	f7ff ffee 	bl	800351c <HAL_GetTick>
 8003540:	1b40      	subs	r0, r0, r5
 8003542:	42a0      	cmp	r0, r4
 8003544:	d3fa      	bcc.n	800353c <HAL_Delay+0x14>
  {
  }
}
 8003546:	bd70      	pop	{r4, r5, r6, pc}
 8003548:	20000020 	.word	0x20000020

0800354c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <ADC_DelayMicroSecond+0x24>)
{
 800354e:	b513      	push	{r0, r1, r4, lr}
 8003550:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <ADC_DelayMicroSecond+0x28>)
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	f7fc fdf5 	bl	8000144 <__udivsi3>
 800355a:	4344      	muls	r4, r0
 800355c:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800355e:	9b01      	ldr	r3, [sp, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d100      	bne.n	8003566 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8003564:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	e7f7      	b.n	800355e <ADC_DelayMicroSecond+0x12>
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	2000001c 	.word	0x2000001c
 8003574:	000f4240 	.word	0x000f4240

08003578 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003578:	2103      	movs	r1, #3
 800357a:	6803      	ldr	r3, [r0, #0]
{
 800357c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800357e:	689a      	ldr	r2, [r3, #8]
{
 8003580:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003582:	400a      	ands	r2, r1
 8003584:	2a01      	cmp	r2, #1
 8003586:	d104      	bne.n	8003592 <ADC_Enable+0x1a>
 8003588:	6819      	ldr	r1, [r3, #0]
 800358a:	4211      	tst	r1, r2
 800358c:	d001      	beq.n	8003592 <ADC_Enable+0x1a>
  return HAL_OK;
 800358e:	2000      	movs	r0, #0
}
 8003590:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	4a15      	ldr	r2, [pc, #84]	; (80035ec <ADC_Enable+0x74>)
 8003596:	4211      	tst	r1, r2
 8003598:	d008      	beq.n	80035ac <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80035a0:	4313      	orrs	r3, r2
 80035a2:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035a6:	4303      	orrs	r3, r0
 80035a8:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80035aa:	e7f1      	b.n	8003590 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 80035ac:	2501      	movs	r5, #1
 80035ae:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80035b0:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80035b2:	432a      	orrs	r2, r5
 80035b4:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80035b6:	f7ff ffc9 	bl	800354c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80035ba:	f7ff ffaf 	bl	800351c <HAL_GetTick>
 80035be:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	422b      	tst	r3, r5
 80035c6:	d1e2      	bne.n	800358e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035c8:	f7ff ffa8 	bl	800351c <HAL_GetTick>
 80035cc:	1b80      	subs	r0, r0, r6
 80035ce:	280a      	cmp	r0, #10
 80035d0:	d9f6      	bls.n	80035c0 <ADC_Enable+0x48>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	422b      	tst	r3, r5
 80035d8:	d1f2      	bne.n	80035c0 <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035da:	2310      	movs	r3, #16
 80035dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 80035de:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e0:	4313      	orrs	r3, r2
 80035e2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035e6:	431d      	orrs	r5, r3
 80035e8:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 80035ea:	e7d1      	b.n	8003590 <ADC_Enable+0x18>
 80035ec:	80000017 	.word	0x80000017

080035f0 <HAL_ADC_Init>:
{
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80035f4:	2001      	movs	r0, #1
  if(hadc == NULL)
 80035f6:	2c00      	cmp	r4, #0
 80035f8:	d01b      	beq.n	8003632 <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d106      	bne.n	800360e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8003600:	0022      	movs	r2, r4
 8003602:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8003604:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8003606:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003608:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800360a:	f7ff fe35 	bl	8003278 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800360e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003610:	06db      	lsls	r3, r3, #27
 8003612:	d406      	bmi.n	8003622 <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	2204      	movs	r2, #4
 8003618:	6899      	ldr	r1, [r3, #8]
 800361a:	0008      	movs	r0, r1
 800361c:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800361e:	4211      	tst	r1, r2
 8003620:	d008      	beq.n	8003634 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003622:	2310      	movs	r3, #16
 8003624:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8003626:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003628:	4313      	orrs	r3, r2
 800362a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800362c:	2300      	movs	r3, #0
 800362e:	3450      	adds	r4, #80	; 0x50
 8003630:	7023      	strb	r3, [r4, #0]
}
 8003632:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8003634:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003636:	4955      	ldr	r1, [pc, #340]	; (800378c <HAL_ADC_Init+0x19c>)
 8003638:	4011      	ands	r1, r2
 800363a:	2202      	movs	r2, #2
 800363c:	430a      	orrs	r2, r1
 800363e:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003640:	2203      	movs	r2, #3
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	4011      	ands	r1, r2
 8003646:	4a52      	ldr	r2, [pc, #328]	; (8003790 <HAL_ADC_Init+0x1a0>)
 8003648:	2901      	cmp	r1, #1
 800364a:	d102      	bne.n	8003652 <HAL_ADC_Init+0x62>
 800364c:	681d      	ldr	r5, [r3, #0]
 800364e:	420d      	tst	r5, r1
 8003650:	d119      	bne.n	8003686 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003652:	2680      	movs	r6, #128	; 0x80
 8003654:	6861      	ldr	r1, [r4, #4]
 8003656:	05f6      	lsls	r6, r6, #23
 8003658:	004d      	lsls	r5, r1, #1
 800365a:	086d      	lsrs	r5, r5, #1
 800365c:	42b5      	cmp	r5, r6
 800365e:	d003      	beq.n	8003668 <HAL_ADC_Init+0x78>
 8003660:	2580      	movs	r5, #128	; 0x80
 8003662:	062d      	lsls	r5, r5, #24
 8003664:	42a9      	cmp	r1, r5
 8003666:	d176      	bne.n	8003756 <HAL_ADC_Init+0x166>
 8003668:	691d      	ldr	r5, [r3, #16]
 800366a:	00ad      	lsls	r5, r5, #2
 800366c:	08ad      	lsrs	r5, r5, #2
 800366e:	611d      	str	r5, [r3, #16]
 8003670:	691d      	ldr	r5, [r3, #16]
 8003672:	4329      	orrs	r1, r5
 8003674:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003676:	2518      	movs	r5, #24
 8003678:	68d9      	ldr	r1, [r3, #12]
 800367a:	43a9      	bics	r1, r5
 800367c:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800367e:	68d9      	ldr	r1, [r3, #12]
 8003680:	68a5      	ldr	r5, [r4, #8]
 8003682:	4329      	orrs	r1, r5
 8003684:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003686:	6811      	ldr	r1, [r2, #0]
 8003688:	4d42      	ldr	r5, [pc, #264]	; (8003794 <HAL_ADC_Init+0x1a4>)
 800368a:	4029      	ands	r1, r5
 800368c:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800368e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003690:	6815      	ldr	r5, [r2, #0]
 8003692:	0649      	lsls	r1, r1, #25
 8003694:	4329      	orrs	r1, r5
 8003696:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	6899      	ldr	r1, [r3, #8]
 800369c:	0552      	lsls	r2, r2, #21
 800369e:	4211      	tst	r1, r2
 80036a0:	d102      	bne.n	80036a8 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	493b      	ldr	r1, [pc, #236]	; (8003798 <HAL_ADC_Init+0x1a8>)
 80036ac:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80036ae:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80036b0:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036b2:	68dd      	ldr	r5, [r3, #12]
 80036b4:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80036b6:	2902      	cmp	r1, #2
 80036b8:	d100      	bne.n	80036bc <HAL_ADC_Init+0xcc>
 80036ba:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036bc:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036be:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036c0:	4332      	orrs	r2, r6
 80036c2:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80036c4:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036c6:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80036c8:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036ca:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80036cc:	69e5      	ldr	r5, [r4, #28]
 80036ce:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036d0:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036d2:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036d4:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80036d6:	0025      	movs	r5, r4
 80036d8:	352c      	adds	r5, #44	; 0x2c
 80036da:	782d      	ldrb	r5, [r5, #0]
 80036dc:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036de:	432a      	orrs	r2, r5
 80036e0:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e2:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036e4:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036e8:	30ff      	adds	r0, #255	; 0xff
 80036ea:	4282      	cmp	r2, r0
 80036ec:	d004      	beq.n	80036f8 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80036ee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80036f0:	68d8      	ldr	r0, [r3, #12]
 80036f2:	432a      	orrs	r2, r5
 80036f4:	4302      	orrs	r2, r0
 80036f6:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036f8:	1ca2      	adds	r2, r4, #2
 80036fa:	7fd2      	ldrb	r2, [r2, #31]
 80036fc:	2a01      	cmp	r2, #1
 80036fe:	d106      	bne.n	800370e <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003700:	2900      	cmp	r1, #0
 8003702:	d134      	bne.n	800376e <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	68d9      	ldr	r1, [r3, #12]
 8003708:	0252      	lsls	r2, r2, #9
 800370a:	430a      	orrs	r2, r1
 800370c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800370e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003710:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8003712:	2901      	cmp	r1, #1
 8003714:	d133      	bne.n	800377e <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003716:	4821      	ldr	r0, [pc, #132]	; (800379c <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003718:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800371a:	4002      	ands	r2, r0
 800371c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800371e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003720:	6918      	ldr	r0, [r3, #16]
 8003722:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8003724:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003726:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003728:	4302      	orrs	r2, r0
 800372a:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	4311      	orrs	r1, r2
 8003730:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003732:	2107      	movs	r1, #7
 8003734:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8003736:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003738:	438a      	bics	r2, r1
 800373a:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003740:	430a      	orrs	r2, r1
 8003742:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8003744:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8003746:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8003748:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800374a:	4393      	bics	r3, r2
 800374c:	001a      	movs	r2, r3
 800374e:	2301      	movs	r3, #1
 8003750:	4313      	orrs	r3, r2
 8003752:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8003754:	e76d      	b.n	8003632 <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003756:	691d      	ldr	r5, [r3, #16]
 8003758:	4e11      	ldr	r6, [pc, #68]	; (80037a0 <HAL_ADC_Init+0x1b0>)
 800375a:	00ad      	lsls	r5, r5, #2
 800375c:	08ad      	lsrs	r5, r5, #2
 800375e:	611d      	str	r5, [r3, #16]
 8003760:	6815      	ldr	r5, [r2, #0]
 8003762:	4035      	ands	r5, r6
 8003764:	6015      	str	r5, [r2, #0]
 8003766:	6815      	ldr	r5, [r2, #0]
 8003768:	4329      	orrs	r1, r5
 800376a:	6011      	str	r1, [r2, #0]
 800376c:	e783      	b.n	8003676 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800376e:	2120      	movs	r1, #32
 8003770:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003772:	4301      	orrs	r1, r0
 8003774:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003776:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003778:	430a      	orrs	r2, r1
 800377a:	65a2      	str	r2, [r4, #88]	; 0x58
 800377c:	e7c7      	b.n	800370e <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800377e:	2101      	movs	r1, #1
 8003780:	420a      	tst	r2, r1
 8003782:	d0d6      	beq.n	8003732 <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	438a      	bics	r2, r1
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e7d2      	b.n	8003732 <HAL_ADC_Init+0x142>
 800378c:	fffffefd 	.word	0xfffffefd
 8003790:	40012708 	.word	0x40012708
 8003794:	fdffffff 	.word	0xfdffffff
 8003798:	fffe0219 	.word	0xfffe0219
 800379c:	fffffc03 	.word	0xfffffc03
 80037a0:	ffc3ffff 	.word	0xffc3ffff

080037a4 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037a4:	6803      	ldr	r3, [r0, #0]
{
 80037a6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037a8:	689b      	ldr	r3, [r3, #8]
{
 80037aa:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80037ac:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037ae:	075b      	lsls	r3, r3, #29
 80037b0:	d41a      	bmi.n	80037e8 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80037b2:	0025      	movs	r5, r4
 80037b4:	3550      	adds	r5, #80	; 0x50
 80037b6:	782b      	ldrb	r3, [r5, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d015      	beq.n	80037e8 <HAL_ADC_Start+0x44>
 80037bc:	2301      	movs	r3, #1
 80037be:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037c0:	69e3      	ldr	r3, [r4, #28]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d111      	bne.n	80037ea <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80037c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037c8:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80037ca:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80037cc:	401a      	ands	r2, r3
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037d4:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80037d6:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80037d8:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80037da:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80037e0:	6899      	ldr	r1, [r3, #8]
 80037e2:	3a18      	subs	r2, #24
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80037ea:	0020      	movs	r0, r4
 80037ec:	f7ff fec4 	bl	8003578 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d0e8      	beq.n	80037c6 <HAL_ADC_Start+0x22>
 80037f4:	e7f8      	b.n	80037e8 <HAL_ADC_Start+0x44>
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	fffff0fe 	.word	0xfffff0fe

080037fc <HAL_ADC_PollForConversion>:
{
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037fe:	6945      	ldr	r5, [r0, #20]
{
 8003800:	0004      	movs	r4, r0
 8003802:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003804:	2d08      	cmp	r5, #8
 8003806:	d00d      	beq.n	8003824 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003808:	6803      	ldr	r3, [r0, #0]
 800380a:	2001      	movs	r0, #1
 800380c:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800380e:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003810:	4203      	tst	r3, r0
 8003812:	d007      	beq.n	8003824 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003814:	2320      	movs	r3, #32
 8003816:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003818:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381a:	4313      	orrs	r3, r2
 800381c:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800381e:	2300      	movs	r3, #0
 8003820:	7023      	strb	r3, [r4, #0]
}
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003824:	f7ff fe7a 	bl	800351c <HAL_GetTick>
 8003828:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4215      	tst	r5, r2
 8003830:	d024      	beq.n	800387c <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003836:	0092      	lsls	r2, r2, #2
 8003838:	430a      	orrs	r2, r1
 800383a:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800383c:	22c0      	movs	r2, #192	; 0xc0
 800383e:	68d9      	ldr	r1, [r3, #12]
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	4211      	tst	r1, r2
 8003844:	d113      	bne.n	800386e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003846:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003848:	7fd2      	ldrb	r2, [r2, #31]
 800384a:	2a00      	cmp	r2, #0
 800384c:	d10f      	bne.n	800386e <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	0712      	lsls	r2, r2, #28
 8003852:	d50c      	bpl.n	800386e <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	0752      	lsls	r2, r2, #29
 8003858:	d428      	bmi.n	80038ac <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800385a:	210c      	movs	r1, #12
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	438a      	bics	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8003862:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_ADC_PollForConversion+0xc4>)
 8003866:	4011      	ands	r1, r2
 8003868:	2201      	movs	r2, #1
 800386a:	430a      	orrs	r2, r1
 800386c:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 800386e:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003870:	69a2      	ldr	r2, [r4, #24]
 8003872:	4282      	cmp	r2, r0
 8003874:	d1d5      	bne.n	8003822 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003876:	220c      	movs	r2, #12
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e7d2      	b.n	8003822 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 800387c:	1c72      	adds	r2, r6, #1
 800387e:	d0d5      	beq.n	800382c <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003880:	2e00      	cmp	r6, #0
 8003882:	d10d      	bne.n	80038a0 <HAL_ADC_PollForConversion+0xa4>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003884:	002a      	movs	r2, r5
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	401a      	ands	r2, r3
 800388c:	421d      	tst	r5, r3
 800388e:	d1cc      	bne.n	800382a <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003890:	2304      	movs	r3, #4
 8003892:	6d61      	ldr	r1, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8003894:	3450      	adds	r4, #80	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003896:	430b      	orrs	r3, r1
 8003898:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 800389a:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800389c:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 800389e:	e7c0      	b.n	8003822 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80038a0:	f7ff fe3c 	bl	800351c <HAL_GetTick>
 80038a4:	1bc0      	subs	r0, r0, r7
 80038a6:	42b0      	cmp	r0, r6
 80038a8:	d8ec      	bhi.n	8003884 <HAL_ADC_PollForConversion+0x88>
 80038aa:	e7be      	b.n	800382a <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ac:	2220      	movs	r2, #32
 80038ae:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80038b0:	430a      	orrs	r2, r1
 80038b2:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b4:	2201      	movs	r2, #1
 80038b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038b8:	430a      	orrs	r2, r1
 80038ba:	65a2      	str	r2, [r4, #88]	; 0x58
 80038bc:	e7d7      	b.n	800386e <HAL_ADC_PollForConversion+0x72>
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	fffffefe 	.word	0xfffffefe

080038c4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80038c4:	6803      	ldr	r3, [r0, #0]
 80038c6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_ADC_ConfigChannel>:
{
 80038cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80038ce:	0004      	movs	r4, r0
 80038d0:	3450      	adds	r4, #80	; 0x50
 80038d2:	7822      	ldrb	r2, [r4, #0]
{
 80038d4:	0003      	movs	r3, r0
 80038d6:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80038d8:	2002      	movs	r0, #2
 80038da:	2a01      	cmp	r2, #1
 80038dc:	d00b      	beq.n	80038f6 <HAL_ADC_ConfigChannel+0x2a>
 80038de:	3801      	subs	r0, #1
 80038e0:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	6891      	ldr	r1, [r2, #8]
 80038e6:	0749      	lsls	r1, r1, #29
 80038e8:	d506      	bpl.n	80038f8 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ea:	2220      	movs	r2, #32
 80038ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038ee:	430a      	orrs	r2, r1
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80038f2:	2300      	movs	r3, #0
 80038f4:	7023      	strb	r3, [r4, #0]
}
 80038f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80038f8:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80038fa:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 80038fc:	4e19      	ldr	r6, [pc, #100]	; (8003964 <HAL_ADC_ConfigChannel+0x98>)
 80038fe:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003900:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003902:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003904:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003906:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 8003908:	42b7      	cmp	r7, r6
 800390a:	d019      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800390c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800390e:	4301      	orrs	r1, r0
 8003910:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <HAL_ADC_ConfigChannel+0x9c>)
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800391e:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8003920:	430b      	orrs	r3, r1
 8003922:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003924:	f7ff fe12 	bl	800354c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	039b      	lsls	r3, r3, #14
 800392c:	d505      	bpl.n	800393a <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <HAL_ADC_ConfigChannel+0x9c>)
 8003932:	03db      	lsls	r3, r3, #15
 8003934:	6811      	ldr	r1, [r2, #0]
 8003936:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003938:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800393a:	2000      	movs	r0, #0
 800393c:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800393e:	e7da      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003940:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8003942:	438d      	bics	r5, r1
 8003944:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <HAL_ADC_ConfigChannel+0x9c>)
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <HAL_ADC_ConfigChannel+0xa0>)
 800394e:	6813      	ldr	r3, [r2, #0]
 8003950:	400b      	ands	r3, r1
 8003952:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003954:	0383      	lsls	r3, r0, #14
 8003956:	d5f0      	bpl.n	800393a <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003958:	4a03      	ldr	r2, [pc, #12]	; (8003968 <HAL_ADC_ConfigChannel+0x9c>)
 800395a:	4905      	ldr	r1, [pc, #20]	; (8003970 <HAL_ADC_ConfigChannel+0xa4>)
 800395c:	6813      	ldr	r3, [r2, #0]
 800395e:	400b      	ands	r3, r1
 8003960:	e7ea      	b.n	8003938 <HAL_ADC_ConfigChannel+0x6c>
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	00001001 	.word	0x00001001
 8003968:	40012708 	.word	0x40012708
 800396c:	ff7fffff 	.word	0xff7fffff
 8003970:	ffbfffff 	.word	0xffbfffff

08003974 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003974:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003976:	25ff      	movs	r5, #255	; 0xff
 8003978:	2403      	movs	r4, #3
 800397a:	002a      	movs	r2, r5
 800397c:	4004      	ands	r4, r0
 800397e:	00e4      	lsls	r4, r4, #3
 8003980:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003982:	0189      	lsls	r1, r1, #6
 8003984:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003986:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003988:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800398a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800398c:	2800      	cmp	r0, #0
 800398e:	db0a      	blt.n	80039a6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003990:	24c0      	movs	r4, #192	; 0xc0
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_NVIC_SetPriority+0x4c>)
 8003994:	0880      	lsrs	r0, r0, #2
 8003996:	0080      	lsls	r0, r0, #2
 8003998:	18c0      	adds	r0, r0, r3
 800399a:	00a4      	lsls	r4, r4, #2
 800399c:	5903      	ldr	r3, [r0, r4]
 800399e:	401a      	ands	r2, r3
 80039a0:	4311      	orrs	r1, r2
 80039a2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80039a4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039a6:	200f      	movs	r0, #15
 80039a8:	4003      	ands	r3, r0
 80039aa:	3b08      	subs	r3, #8
 80039ac:	4805      	ldr	r0, [pc, #20]	; (80039c4 <HAL_NVIC_SetPriority+0x50>)
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	181b      	adds	r3, r3, r0
 80039b4:	69d8      	ldr	r0, [r3, #28]
 80039b6:	4002      	ands	r2, r0
 80039b8:	4311      	orrs	r1, r2
 80039ba:	61d9      	str	r1, [r3, #28]
 80039bc:	e7f2      	b.n	80039a4 <HAL_NVIC_SetPriority+0x30>
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80039c8:	2800      	cmp	r0, #0
 80039ca:	db05      	blt.n	80039d8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039cc:	231f      	movs	r3, #31
 80039ce:	4018      	ands	r0, r3
 80039d0:	3b1e      	subs	r3, #30
 80039d2:	4083      	lsls	r3, r0
 80039d4:	4a01      	ldr	r2, [pc, #4]	; (80039dc <HAL_NVIC_EnableIRQ+0x14>)
 80039d6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80039d8:	4770      	bx	lr
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	e000e100 	.word	0xe000e100

080039e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	1e43      	subs	r3, r0, #1
 80039e4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80039e6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d20d      	bcs.n	8003a08 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ec:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ee:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039f0:	4807      	ldr	r0, [pc, #28]	; (8003a10 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039f2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039f4:	6a03      	ldr	r3, [r0, #32]
 80039f6:	0609      	lsls	r1, r1, #24
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a00:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a02:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a04:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a06:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003a08:	4770      	bx	lr
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	e000e010 	.word	0xe000e010
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003a18:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003a1a:	2c00      	cmp	r4, #0
 8003a1c:	d035      	beq.n	8003a8a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a1e:	6825      	ldr	r5, [r4, #0]
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <HAL_DMA_Init+0x78>)
 8003a22:	2114      	movs	r1, #20
 8003a24:	18e8      	adds	r0, r5, r3
 8003a26:	f7fc fb8d 	bl	8000144 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a2c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003a2e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a34:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a36:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a38:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a3c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a3e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003a40:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a42:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8003a44:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a46:	433b      	orrs	r3, r7
 8003a48:	6967      	ldr	r7, [r4, #20]
 8003a4a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4c:	69a7      	ldr	r7, [r4, #24]
 8003a4e:	433b      	orrs	r3, r7
 8003a50:	69e7      	ldr	r7, [r4, #28]
 8003a52:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a54:	6a27      	ldr	r7, [r4, #32]
 8003a56:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003a58:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a5a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	01db      	lsls	r3, r3, #7
 8003a60:	4299      	cmp	r1, r3
 8003a62:	d00c      	beq.n	8003a7e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a64:	251c      	movs	r5, #28
 8003a66:	4028      	ands	r0, r5
 8003a68:	3d0d      	subs	r5, #13
 8003a6a:	4085      	lsls	r5, r0
 8003a6c:	490a      	ldr	r1, [pc, #40]	; (8003a98 <HAL_DMA_Init+0x84>)
 8003a6e:	680b      	ldr	r3, [r1, #0]
 8003a70:	43ab      	bics	r3, r5
 8003a72:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	680d      	ldr	r5, [r1, #0]
 8003a78:	4083      	lsls	r3, r0
 8003a7a:	432b      	orrs	r3, r5
 8003a7c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a80:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a82:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a84:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003a86:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003a88:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a8c:	bffdfff8 	.word	0xbffdfff8
 8003a90:	40020000 	.word	0x40020000
 8003a94:	ffff800f 	.word	0xffff800f
 8003a98:	400200a8 	.word	0x400200a8

08003a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a9e:	1d45      	adds	r5, r0, #5
{
 8003aa0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8003aa2:	7feb      	ldrb	r3, [r5, #31]
{
 8003aa4:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003aa6:	2002      	movs	r0, #2
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d029      	beq.n	8003b00 <HAL_DMA_Start_IT+0x64>
 8003aac:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8003aae:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8003ab0:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ab2:	7ffb      	ldrb	r3, [r7, #31]
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	469c      	mov	ip, r3
 8003ab8:	4660      	mov	r0, ip
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2801      	cmp	r0, #1
 8003abe:	d12a      	bne.n	8003b16 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ac4:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac6:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ac8:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003aca:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003acc:	361c      	adds	r6, #28
 8003ace:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8003ad0:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ad2:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8003ad4:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ad6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003ad8:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ada:	9b01      	ldr	r3, [sp, #4]
 8003adc:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ade:	68a3      	ldr	r3, [r4, #8]
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d10e      	bne.n	8003b02 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ae4:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ae6:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003ae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aee:	230e      	movs	r3, #14
 8003af0:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003af2:	4313      	orrs	r3, r2
 8003af4:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8003af6:	2301      	movs	r3, #1
 8003af8:	6802      	ldr	r2, [r0, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afe:	2000      	movs	r0, #0
}
 8003b00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003b02:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003b04:	60c2      	str	r2, [r0, #12]
 8003b06:	e7ef      	b.n	8003ae8 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b08:	2204      	movs	r2, #4
 8003b0a:	6803      	ldr	r3, [r0, #0]
 8003b0c:	4393      	bics	r3, r2
 8003b0e:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b10:	6802      	ldr	r2, [r0, #0]
 8003b12:	230a      	movs	r3, #10
 8003b14:	e7ed      	b.n	8003af2 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8003b16:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8003b18:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8003b1a:	e7f1      	b.n	8003b00 <HAL_DMA_Start_IT+0x64>

08003b1c <HAL_DMA_IRQHandler>:
{
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b1e:	221c      	movs	r2, #28
 8003b20:	2704      	movs	r7, #4
 8003b22:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b24:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b26:	4032      	ands	r2, r6
 8003b28:	003e      	movs	r6, r7
 8003b2a:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b2c:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003b2e:	6803      	ldr	r3, [r0, #0]
 8003b30:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b32:	4235      	tst	r5, r6
 8003b34:	d00d      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x36>
 8003b36:	423c      	tst	r4, r7
 8003b38:	d00b      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	0692      	lsls	r2, r2, #26
 8003b3e:	d402      	bmi.n	8003b46 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	43ba      	bics	r2, r7
 8003b44:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003b46:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003b48:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d019      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003b4e:	4798      	blx	r3
  return;
 8003b50:	e017      	b.n	8003b82 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b52:	2702      	movs	r7, #2
 8003b54:	003e      	movs	r6, r7
 8003b56:	4096      	lsls	r6, r2
 8003b58:	4235      	tst	r5, r6
 8003b5a:	d013      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x68>
 8003b5c:	423c      	tst	r4, r7
 8003b5e:	d011      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	0692      	lsls	r2, r2, #26
 8003b64:	d406      	bmi.n	8003b74 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b66:	240a      	movs	r4, #10
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	43a2      	bics	r2, r4
 8003b6c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	2201      	movs	r2, #1
 8003b70:	1d83      	adds	r3, r0, #6
 8003b72:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003b74:	2200      	movs	r2, #0
 8003b76:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b78:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003b7a:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003b7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d1e5      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x32>
}
 8003b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003b84:	2608      	movs	r6, #8
 8003b86:	0037      	movs	r7, r6
 8003b88:	4097      	lsls	r7, r2
 8003b8a:	423d      	tst	r5, r7
 8003b8c:	d0f9      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x66>
 8003b8e:	4234      	tst	r4, r6
 8003b90:	d0f7      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b92:	250e      	movs	r5, #14
 8003b94:	681c      	ldr	r4, [r3, #0]
 8003b96:	43ac      	bics	r4, r5
 8003b98:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	001c      	movs	r4, r3
 8003b9e:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003ba0:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ba2:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ba4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	1d43      	adds	r3, r0, #5
 8003bac:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003bae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bb0:	e7e5      	b.n	8003b7e <HAL_DMA_IRQHandler+0x62>
	...

08003bb4 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <FLASH_SetErrorCode+0xa4>)
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	6990      	ldr	r0, [r2, #24]
 8003bba:	0049      	lsls	r1, r1, #1
 8003bbc:	0003      	movs	r3, r0
{
 8003bbe:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	4208      	tst	r0, r1
 8003bc4:	d005      	beq.n	8003bd2 <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	4824      	ldr	r0, [pc, #144]	; (8003c5c <FLASH_SetErrorCode+0xa8>)
 8003bca:	6944      	ldr	r4, [r0, #20]
 8003bcc:	4323      	orrs	r3, r4
 8003bce:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003bd0:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003bd2:	2080      	movs	r0, #128	; 0x80
 8003bd4:	6991      	ldr	r1, [r2, #24]
 8003bd6:	0080      	lsls	r0, r0, #2
 8003bd8:	4201      	tst	r1, r0
 8003bda:	d005      	beq.n	8003be8 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4c1f      	ldr	r4, [pc, #124]	; (8003c5c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8003be0:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003be2:	6965      	ldr	r5, [r4, #20]
 8003be4:	4329      	orrs	r1, r5
 8003be6:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003be8:	2080      	movs	r0, #128	; 0x80
 8003bea:	6991      	ldr	r1, [r2, #24]
 8003bec:	00c0      	lsls	r0, r0, #3
 8003bee:	4201      	tst	r1, r0
 8003bf0:	d005      	beq.n	8003bfe <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003bf2:	2108      	movs	r1, #8
 8003bf4:	4c19      	ldr	r4, [pc, #100]	; (8003c5c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8003bf6:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003bf8:	6965      	ldr	r5, [r4, #20]
 8003bfa:	4329      	orrs	r1, r5
 8003bfc:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003bfe:	2080      	movs	r0, #128	; 0x80
 8003c00:	6991      	ldr	r1, [r2, #24]
 8003c02:	0100      	lsls	r0, r0, #4
 8003c04:	4201      	tst	r1, r0
 8003c06:	d005      	beq.n	8003c14 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003c08:	2104      	movs	r1, #4
 8003c0a:	4c14      	ldr	r4, [pc, #80]	; (8003c5c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8003c0c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003c0e:	6965      	ldr	r5, [r4, #20]
 8003c10:	4329      	orrs	r1, r5
 8003c12:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8003c14:	2080      	movs	r0, #128	; 0x80
 8003c16:	6991      	ldr	r1, [r2, #24]
 8003c18:	0180      	lsls	r0, r0, #6
 8003c1a:	4201      	tst	r1, r0
 8003c1c:	d005      	beq.n	8003c2a <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003c1e:	2110      	movs	r1, #16
 8003c20:	4c0e      	ldr	r4, [pc, #56]	; (8003c5c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 8003c22:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003c24:	6965      	ldr	r5, [r4, #20]
 8003c26:	4329      	orrs	r1, r5
 8003c28:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003c2a:	6991      	ldr	r1, [r2, #24]
 8003c2c:	0389      	lsls	r1, r1, #14
 8003c2e:	d505      	bpl.n	8003c3c <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003c30:	2020      	movs	r0, #32
 8003c32:	4c0a      	ldr	r4, [pc, #40]	; (8003c5c <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003c34:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003c36:	6961      	ldr	r1, [r4, #20]
 8003c38:	4301      	orrs	r1, r0
 8003c3a:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003c3c:	2080      	movs	r0, #128	; 0x80
 8003c3e:	6991      	ldr	r1, [r2, #24]
 8003c40:	0240      	lsls	r0, r0, #9
 8003c42:	4201      	tst	r1, r0
 8003c44:	d005      	beq.n	8003c52 <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8003c46:	2140      	movs	r1, #64	; 0x40
 8003c48:	4c04      	ldr	r4, [pc, #16]	; (8003c5c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8003c4a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8003c4c:	6965      	ldr	r5, [r4, #20]
 8003c4e:	4329      	orrs	r1, r5
 8003c50:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003c52:	6193      	str	r3, [r2, #24]
}  
 8003c54:	bd30      	pop	{r4, r5, pc}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	20000d70 	.word	0x20000d70

08003c60 <FLASH_WaitForLastOperation>:
{
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003c64:	f7ff fc5a 	bl	800351c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003c68:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8003c6a:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <FLASH_WaitForLastOperation+0x70>)
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	4232      	tst	r2, r6
 8003c72:	d121      	bne.n	8003cb8 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003c74:	2202      	movs	r2, #2
 8003c76:	6999      	ldr	r1, [r3, #24]
 8003c78:	4211      	tst	r1, r2
 8003c7a:	d000      	beq.n	8003c7e <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c7c:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	05d2      	lsls	r2, r2, #23
 8003c82:	d415      	bmi.n	8003cb0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003c84:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003c86:	0592      	lsls	r2, r2, #22
 8003c88:	d412      	bmi.n	8003cb0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003c8a:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003c8c:	0552      	lsls	r2, r2, #21
 8003c8e:	d40f      	bmi.n	8003cb0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003c90:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003c92:	0512      	lsls	r2, r2, #20
 8003c94:	d40c      	bmi.n	8003cb0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003c96:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003c98:	0492      	lsls	r2, r2, #18
 8003c9a:	d409      	bmi.n	8003cb0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003c9c:	6999      	ldr	r1, [r3, #24]
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	0008      	movs	r0, r1
 8003ca2:	0292      	lsls	r2, r2, #10
 8003ca4:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003ca6:	4211      	tst	r1, r2
 8003ca8:	d102      	bne.n	8003cb0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003caa:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003cac:	03db      	lsls	r3, r3, #15
 8003cae:	d508      	bpl.n	8003cc2 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8003cb0:	f7ff ff80 	bl	8003bb4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	e004      	b.n	8003cc2 <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8003cb8:	1c62      	adds	r2, r4, #1
 8003cba:	d0d8      	beq.n	8003c6e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cbc:	2c00      	cmp	r4, #0
 8003cbe:	d101      	bne.n	8003cc4 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 8003cc0:	2003      	movs	r0, #3
}
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cc4:	f7ff fc2a 	bl	800351c <HAL_GetTick>
 8003cc8:	1b40      	subs	r0, r0, r5
 8003cca:	42a0      	cmp	r0, r4
 8003ccc:	d9ce      	bls.n	8003c6c <FLASH_WaitForLastOperation+0xc>
 8003cce:	e7f7      	b.n	8003cc0 <FLASH_WaitForLastOperation+0x60>
 8003cd0:	40022000 	.word	0x40022000

08003cd4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8003cd8:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	4211      	tst	r1, r2
 8003cde:	d00a      	beq.n	8003cf6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce4:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 8003ce6:	4805      	ldr	r0, [pc, #20]	; (8003cfc <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003ce8:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003cec:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cee:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003cf2:	6858      	ldr	r0, [r3, #4]
 8003cf4:	4010      	ands	r0, r2
}
 8003cf6:	4770      	bx	lr
 8003cf8:	40022000 	.word	0x40022000
 8003cfc:	89abcdef 	.word	0x89abcdef
 8003d00:	02030405 	.word	0x02030405

08003d04 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003d04:	2301      	movs	r3, #1
 8003d06:	4a03      	ldr	r2, [pc, #12]	; (8003d14 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8003d08:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003d0a:	6851      	ldr	r1, [r2, #4]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6053      	str	r3, [r2, #4]
}
 8003d10:	4770      	bx	lr
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	40022000 	.word	0x40022000

08003d18 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d1a:	4f12      	ldr	r7, [pc, #72]	; (8003d64 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 8003d1c:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8003d1e:	7c3b      	ldrb	r3, [r7, #16]
{
 8003d20:	000d      	movs	r5, r1
 8003d22:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 8003d24:	2002      	movs	r0, #2
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d00c      	beq.n	8003d44 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8003d2a:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d2c:	480e      	ldr	r0, [pc, #56]	; (8003d68 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 8003d2e:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d30:	f7ff ff96 	bl	8003c60 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d103      	bne.n	8003d40 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d38:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003d3a:	2e02      	cmp	r6, #2
 8003d3c:	d103      	bne.n	8003d46 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8003d3e:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d40:	2300      	movs	r3, #0
 8003d42:	743b      	strb	r3, [r7, #16]

  return status;
}
 8003d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8003d46:	2e01      	cmp	r6, #1
 8003d48:	d102      	bne.n	8003d50 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8003d4a:	b2a4      	uxth	r4, r4
 8003d4c:	802c      	strh	r4, [r5, #0]
 8003d4e:	e7f7      	b.n	8003d40 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003d50:	2e00      	cmp	r6, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d54:	4804      	ldr	r0, [pc, #16]	; (8003d68 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8003d56:	f7ff ff83 	bl	8003c60 <FLASH_WaitForLastOperation>
 8003d5a:	e7f1      	b.n	8003d40 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8003d5c:	b2e4      	uxtb	r4, r4
 8003d5e:	702c      	strb	r4, [r5, #0]
 8003d60:	e7ee      	b.n	8003d40 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	20000d70 	.word	0x20000d70
 8003d68:	0000c350 	.word	0x0000c350

08003d6c <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d6c:	4a58      	ldr	r2, [pc, #352]	; (8003ed0 <HAL_GPIO_Init+0x164>)
{
 8003d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d70:	1882      	adds	r2, r0, r2
 8003d72:	1e54      	subs	r4, r2, #1
 8003d74:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003d76:	2300      	movs	r3, #0
{
 8003d78:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d7a:	3205      	adds	r2, #5
{
 8003d7c:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d7e:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d80:	9a03      	ldr	r2, [sp, #12]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	0014      	movs	r4, r2
 8003d86:	40dc      	lsrs	r4, r3
 8003d88:	d101      	bne.n	8003d8e <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003d8a:	b007      	add	sp, #28
 8003d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d8e:	2101      	movs	r1, #1
 8003d90:	000d      	movs	r5, r1
 8003d92:	0014      	movs	r4, r2
 8003d94:	409d      	lsls	r5, r3
 8003d96:	402c      	ands	r4, r5
 8003d98:	468c      	mov	ip, r1
 8003d9a:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8003d9c:	422a      	tst	r2, r5
 8003d9e:	d100      	bne.n	8003da2 <HAL_GPIO_Init+0x36>
 8003da0:	e094      	b.n	8003ecc <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003da2:	2403      	movs	r4, #3
 8003da4:	9a03      	ldr	r2, [sp, #12]
 8003da6:	005e      	lsls	r6, r3, #1
 8003da8:	6852      	ldr	r2, [r2, #4]
 8003daa:	9201      	str	r2, [sp, #4]
 8003dac:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003dae:	40b4      	lsls	r4, r6
 8003db0:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003db2:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003db4:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003db6:	4564      	cmp	r4, ip
 8003db8:	d82a      	bhi.n	8003e10 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8003dba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003dbc:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dbe:	9903      	ldr	r1, [sp, #12]
 8003dc0:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc2:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dc4:	40b4      	lsls	r4, r6
 8003dc6:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8003dc8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003dca:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dcc:	43ac      	bics	r4, r5
 8003dce:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd0:	090c      	lsrs	r4, r1, #4
 8003dd2:	4661      	mov	r1, ip
 8003dd4:	400c      	ands	r4, r1
 8003dd6:	409c      	lsls	r4, r3
 8003dd8:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003dda:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003ddc:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dde:	9904      	ldr	r1, [sp, #16]
 8003de0:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de2:	9903      	ldr	r1, [sp, #12]
 8003de4:	688c      	ldr	r4, [r1, #8]
 8003de6:	40b4      	lsls	r4, r6
 8003de8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003dea:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dec:	2a02      	cmp	r2, #2
 8003dee:	d111      	bne.n	8003e14 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003df0:	2507      	movs	r5, #7
 8003df2:	210f      	movs	r1, #15
 8003df4:	401d      	ands	r5, r3
 8003df6:	00ad      	lsls	r5, r5, #2
 8003df8:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8003dfa:	08dc      	lsrs	r4, r3, #3
 8003dfc:	00a4      	lsls	r4, r4, #2
 8003dfe:	1904      	adds	r4, r0, r4
 8003e00:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003e02:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003e04:	9903      	ldr	r1, [sp, #12]
 8003e06:	6909      	ldr	r1, [r1, #16]
 8003e08:	40a9      	lsls	r1, r5
 8003e0a:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003e0c:	6227      	str	r7, [r4, #32]
 8003e0e:	e001      	b.n	8003e14 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e10:	2a03      	cmp	r2, #3
 8003e12:	d1e3      	bne.n	8003ddc <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e14:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8003e16:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e18:	9904      	ldr	r1, [sp, #16]
 8003e1a:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e1c:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8003e1e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e20:	22c0      	movs	r2, #192	; 0xc0
 8003e22:	9901      	ldr	r1, [sp, #4]
 8003e24:	0292      	lsls	r2, r2, #10
 8003e26:	4211      	tst	r1, r2
 8003e28:	d050      	beq.n	8003ecc <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2a:	2701      	movs	r7, #1
 8003e2c:	4c29      	ldr	r4, [pc, #164]	; (8003ed4 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e2e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e30:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e32:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e34:	433a      	orrs	r2, r7
 8003e36:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <HAL_GPIO_Init+0x16c>)
 8003e3a:	089c      	lsrs	r4, r3, #2
 8003e3c:	00a4      	lsls	r4, r4, #2
 8003e3e:	18a4      	adds	r4, r4, r2
 8003e40:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e42:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e44:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e46:	220f      	movs	r2, #15
 8003e48:	00ad      	lsls	r5, r5, #2
 8003e4a:	40aa      	lsls	r2, r5
 8003e4c:	4661      	mov	r1, ip
 8003e4e:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e50:	22a0      	movs	r2, #160	; 0xa0
 8003e52:	05d2      	lsls	r2, r2, #23
 8003e54:	4694      	mov	ip, r2
 8003e56:	2200      	movs	r2, #0
 8003e58:	4560      	cmp	r0, ip
 8003e5a:	d00d      	beq.n	8003e78 <HAL_GPIO_Init+0x10c>
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <HAL_GPIO_Init+0x170>)
 8003e5e:	4694      	mov	ip, r2
 8003e60:	003a      	movs	r2, r7
 8003e62:	4560      	cmp	r0, ip
 8003e64:	d008      	beq.n	8003e78 <HAL_GPIO_Init+0x10c>
 8003e66:	4f1e      	ldr	r7, [pc, #120]	; (8003ee0 <HAL_GPIO_Init+0x174>)
 8003e68:	1892      	adds	r2, r2, r2
 8003e6a:	42b8      	cmp	r0, r7
 8003e6c:	d004      	beq.n	8003e78 <HAL_GPIO_Init+0x10c>
 8003e6e:	4f1d      	ldr	r7, [pc, #116]	; (8003ee4 <HAL_GPIO_Init+0x178>)
 8003e70:	0032      	movs	r2, r6
 8003e72:	42b8      	cmp	r0, r7
 8003e74:	d000      	beq.n	8003e78 <HAL_GPIO_Init+0x10c>
 8003e76:	9a05      	ldr	r2, [sp, #20]
 8003e78:	40aa      	lsls	r2, r5
 8003e7a:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003e7c:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e7e:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8003e80:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 8003e82:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8003e84:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 8003e86:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e88:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003e8a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e8c:	03c9      	lsls	r1, r1, #15
 8003e8e:	d401      	bmi.n	8003e94 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8003e90:	0035      	movs	r5, r6
 8003e92:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8003e94:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003e96:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003e98:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e9a:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003e9c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e9e:	0389      	lsls	r1, r1, #14
 8003ea0:	d401      	bmi.n	8003ea6 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8003ea2:	0035      	movs	r5, r6
 8003ea4:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003ea6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003ea8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003eaa:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eac:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003eae:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eb0:	02c9      	lsls	r1, r1, #11
 8003eb2:	d401      	bmi.n	8003eb8 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8003eb4:	0035      	movs	r5, r6
 8003eb6:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003eb8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003eba:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003ebc:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ebe:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003ec0:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ec2:	0289      	lsls	r1, r1, #10
 8003ec4:	d401      	bmi.n	8003eca <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 8003ec6:	4025      	ands	r5, r4
 8003ec8:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003eca:	60d6      	str	r6, [r2, #12]
    position++;
 8003ecc:	3301      	adds	r3, #1
 8003ece:	e757      	b.n	8003d80 <HAL_GPIO_Init+0x14>
 8003ed0:	afffe400 	.word	0xafffe400
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	50000400 	.word	0x50000400
 8003ee0:	50000800 	.word	0x50000800
 8003ee4:	50000c00 	.word	0x50000c00
 8003ee8:	40010400 	.word	0x40010400

08003eec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eec:	6900      	ldr	r0, [r0, #16]
 8003eee:	4008      	ands	r0, r1
 8003ef0:	1e43      	subs	r3, r0, #1
 8003ef2:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003ef4:	b2c0      	uxtb	r0, r0
}
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003efe:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003f00:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003f02:	e7fc      	b.n	8003efe <HAL_GPIO_WritePin+0x6>

08003f04 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f04:	6803      	ldr	r3, [r0, #0]
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	0792      	lsls	r2, r2, #30
 8003f0a:	d501      	bpl.n	8003f10 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f10:	2201      	movs	r2, #1
 8003f12:	6999      	ldr	r1, [r3, #24]
 8003f14:	4211      	tst	r1, r2
 8003f16:	d102      	bne.n	8003f1e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	619a      	str	r2, [r3, #24]
  }
}
 8003f1e:	4770      	bx	lr

08003f20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f20:	b530      	push	{r4, r5, lr}
 8003f22:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003f24:	0412      	lsls	r2, r2, #16
 8003f26:	6800      	ldr	r0, [r0, #0]
 8003f28:	4322      	orrs	r2, r4
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <I2C_TransferConfig+0x24>)
 8003f2e:	6845      	ldr	r5, [r0, #4]
 8003f30:	0589      	lsls	r1, r1, #22
 8003f32:	0d64      	lsrs	r4, r4, #21
 8003f34:	0d89      	lsrs	r1, r1, #22
 8003f36:	431c      	orrs	r4, r3
 8003f38:	43a5      	bics	r5, r4
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	432a      	orrs	r2, r5
 8003f3e:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003f40:	bd30      	pop	{r4, r5, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	03ff63ff 	.word	0x03ff63ff

08003f48 <I2C_IsAcknowledgeFailed>:
{
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f4a:	6803      	ldr	r3, [r0, #0]
{
 8003f4c:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f4e:	699a      	ldr	r2, [r3, #24]
{
 8003f50:	0004      	movs	r4, r0
 8003f52:	000d      	movs	r5, r1
  return HAL_OK;
 8003f54:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f56:	06d2      	lsls	r2, r2, #27
 8003f58:	d536      	bpl.n	8003fc8 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	0192      	lsls	r2, r2, #6
 8003f5e:	d404      	bmi.n	8003f6a <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	01d2      	lsls	r2, r2, #7
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f6a:	2720      	movs	r7, #32
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	423a      	tst	r2, r7
 8003f72:	d012      	beq.n	8003f9a <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f74:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8003f76:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f78:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f7a:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003f7c:	f7ff ffc2 	bl	8003f04 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003f80:	6822      	ldr	r2, [r4, #0]
 8003f82:	4912      	ldr	r1, [pc, #72]	; (8003fcc <I2C_IsAcknowledgeFailed+0x84>)
 8003f84:	6853      	ldr	r3, [r2, #4]
 8003f86:	400b      	ands	r3, r1
 8003f88:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	0023      	movs	r3, r4
 8003f94:	3341      	adds	r3, #65	; 0x41
 8003f96:	701f      	strb	r7, [r3, #0]
 8003f98:	e00f      	b.n	8003fba <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 8003f9a:	1c6a      	adds	r2, r5, #1
 8003f9c:	d0e7      	beq.n	8003f6e <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7ff fabd 	bl	800351c <HAL_GetTick>
 8003fa2:	1b80      	subs	r0, r0, r6
 8003fa4:	4285      	cmp	r5, r0
 8003fa6:	d301      	bcc.n	8003fac <I2C_IsAcknowledgeFailed+0x64>
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	d1df      	bne.n	8003f6c <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fac:	2220      	movs	r2, #32
 8003fae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	0023      	movs	r3, r4
 8003fb6:	3341      	adds	r3, #65	; 0x41
 8003fb8:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fba:	0022      	movs	r2, r4
 8003fbc:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003fbe:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8003fc2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003fc6:	7023      	strb	r3, [r4, #0]
}
 8003fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	fe00e800 	.word	0xfe00e800

08003fd0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	0004      	movs	r4, r0
 8003fd4:	000d      	movs	r5, r1
 8003fd6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fd8:	2702      	movs	r7, #2
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	423b      	tst	r3, r7
 8003fe0:	d001      	beq.n	8003fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003fe2:	2000      	movs	r0, #0
}
 8003fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe6:	0032      	movs	r2, r6
 8003fe8:	0029      	movs	r1, r5
 8003fea:	0020      	movs	r0, r4
 8003fec:	f7ff ffac 	bl	8003f48 <I2C_IsAcknowledgeFailed>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d115      	bne.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	1c6b      	adds	r3, r5, #1
 8003ff6:	d0f0      	beq.n	8003fda <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff8:	f7ff fa90 	bl	800351c <HAL_GetTick>
 8003ffc:	1b80      	subs	r0, r0, r6
 8003ffe:	42a8      	cmp	r0, r5
 8004000:	d801      	bhi.n	8004006 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8004002:	2d00      	cmp	r5, #0
 8004004:	d1e9      	bne.n	8003fda <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004006:	2220      	movs	r2, #32
 8004008:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800400a:	4313      	orrs	r3, r2
 800400c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800400e:	0023      	movs	r3, r4
 8004010:	3341      	adds	r3, #65	; 0x41
 8004012:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	0022      	movs	r2, r4
 8004016:	2300      	movs	r3, #0
 8004018:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800401a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800401e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8004020:	2001      	movs	r0, #1
 8004022:	e7df      	b.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08004024 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	0004      	movs	r4, r0
 8004028:	000d      	movs	r5, r1
 800402a:	0016      	movs	r6, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800402c:	2720      	movs	r7, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800402e:	2204      	movs	r2, #4
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	4213      	tst	r3, r2
 8004036:	d111      	bne.n	800405c <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004038:	0032      	movs	r2, r6
 800403a:	0029      	movs	r1, r5
 800403c:	0020      	movs	r0, r4
 800403e:	f7ff ff83 	bl	8003f48 <I2C_IsAcknowledgeFailed>
 8004042:	2800      	cmp	r0, #0
 8004044:	d119      	bne.n	800407a <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	423a      	tst	r2, r7
 800404c:	d017      	beq.n	800407e <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800404e:	2104      	movs	r1, #4
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	420a      	tst	r2, r1
 8004054:	d004      	beq.n	8004060 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 8004056:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004058:	2a00      	cmp	r2, #0
 800405a:	d001      	beq.n	8004060 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
        return HAL_OK;
 800405c:	2000      	movs	r0, #0
}
 800405e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004060:	61df      	str	r7, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	490e      	ldr	r1, [pc, #56]	; (80040a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8004066:	400a      	ands	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800406a:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800406c:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800406e:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004070:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004072:	7017      	strb	r7, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8004074:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004076:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8004078:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800407a:	2001      	movs	r0, #1
 800407c:	e7ef      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7ff fa4d 	bl	800351c <HAL_GetTick>
 8004082:	1b80      	subs	r0, r0, r6
 8004084:	42a8      	cmp	r0, r5
 8004086:	d801      	bhi.n	800408c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8004088:	2d00      	cmp	r5, #0
 800408a:	d1d0      	bne.n	800402e <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800408c:	2220      	movs	r2, #32
 800408e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004090:	4313      	orrs	r3, r2
 8004092:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004094:	0023      	movs	r3, r4
 8004096:	3341      	adds	r3, #65	; 0x41
 8004098:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800409a:	3440      	adds	r4, #64	; 0x40
 800409c:	2300      	movs	r3, #0
 800409e:	e7eb      	b.n	8004078 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80040a0:	fe00e800 	.word	0xfe00e800

080040a4 <I2C_WaitOnFlagUntilTimeout>:
{
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	0004      	movs	r4, r0
 80040a8:	000e      	movs	r6, r1
 80040aa:	0017      	movs	r7, r2
 80040ac:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	6993      	ldr	r3, [r2, #24]
 80040b2:	4033      	ands	r3, r6
 80040b4:	1b9b      	subs	r3, r3, r6
 80040b6:	4259      	negs	r1, r3
 80040b8:	414b      	adcs	r3, r1
 80040ba:	42bb      	cmp	r3, r7
 80040bc:	d001      	beq.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80040be:	2000      	movs	r0, #0
 80040c0:	e017      	b.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	1c6b      	adds	r3, r5, #1
 80040c4:	d0f4      	beq.n	80040b0 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7ff fa29 	bl	800351c <HAL_GetTick>
 80040ca:	9b06      	ldr	r3, [sp, #24]
 80040cc:	1ac0      	subs	r0, r0, r3
 80040ce:	42a8      	cmp	r0, r5
 80040d0:	d801      	bhi.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0x32>
 80040d2:	2d00      	cmp	r5, #0
 80040d4:	d1eb      	bne.n	80040ae <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040d6:	2220      	movs	r2, #32
 80040d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80040da:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	4313      	orrs	r3, r2
 80040de:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	0023      	movs	r3, r4
 80040e2:	3341      	adds	r3, #65	; 0x41
 80040e4:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e6:	0022      	movs	r2, r4
 80040e8:	2300      	movs	r3, #0
 80040ea:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80040ec:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ee:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80040f0:	7023      	strb	r3, [r4, #0]
}
 80040f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	0004      	movs	r4, r0
 80040f8:	000d      	movs	r5, r1
 80040fa:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040fc:	2720      	movs	r7, #32
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	423b      	tst	r3, r7
 8004104:	d001      	beq.n	800410a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8004106:	2000      	movs	r0, #0
}
 8004108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800410a:	0032      	movs	r2, r6
 800410c:	0029      	movs	r1, r5
 800410e:	0020      	movs	r0, r4
 8004110:	f7ff ff1a 	bl	8003f48 <I2C_IsAcknowledgeFailed>
 8004114:	2800      	cmp	r0, #0
 8004116:	d113      	bne.n	8004140 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004118:	f7ff fa00 	bl	800351c <HAL_GetTick>
 800411c:	1b80      	subs	r0, r0, r6
 800411e:	42a8      	cmp	r0, r5
 8004120:	d801      	bhi.n	8004126 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8004122:	2d00      	cmp	r5, #0
 8004124:	d1eb      	bne.n	80040fe <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004126:	2220      	movs	r2, #32
 8004128:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800412a:	4313      	orrs	r3, r2
 800412c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800412e:	0023      	movs	r3, r4
 8004130:	3341      	adds	r3, #65	; 0x41
 8004132:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004134:	0022      	movs	r2, r4
 8004136:	2300      	movs	r3, #0
 8004138:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800413a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800413c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800413e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8004140:	2001      	movs	r0, #1
 8004142:	e7e1      	b.n	8004108 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08004144 <HAL_I2C_Init>:
{
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004148:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800414a:	2c00      	cmp	r4, #0
 800414c:	d03f      	beq.n	80041ce <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414e:	0025      	movs	r5, r4
 8004150:	3541      	adds	r5, #65	; 0x41
 8004152:	782b      	ldrb	r3, [r5, #0]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800415a:	0023      	movs	r3, r4
 800415c:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800415e:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8004160:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8004162:	f7ff f8b1 	bl	80032c8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004166:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004168:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800416a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800416c:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800416e:	481d      	ldr	r0, [pc, #116]	; (80041e4 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8004170:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004172:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8004174:	438a      	bics	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004178:	6861      	ldr	r1, [r4, #4]
 800417a:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <HAL_I2C_Init+0xa4>)
 800417c:	400a      	ands	r2, r1
 800417e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	4002      	ands	r2, r0
 8004184:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004186:	68e2      	ldr	r2, [r4, #12]
 8004188:	2a01      	cmp	r2, #1
 800418a:	d121      	bne.n	80041d0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	0209      	lsls	r1, r1, #8
 8004190:	4331      	orrs	r1, r6
 8004192:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4915      	ldr	r1, [pc, #84]	; (80041ec <HAL_I2C_Init+0xa8>)
 8004198:	4311      	orrs	r1, r2
 800419a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800419c:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800419e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041a0:	4002      	ands	r2, r0
 80041a2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041a4:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a6:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041a8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041aa:	69a1      	ldr	r1, [r4, #24]
 80041ac:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041ae:	430a      	orrs	r2, r1
 80041b0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041b2:	6a21      	ldr	r1, [r4, #32]
 80041b4:	69e2      	ldr	r2, [r4, #28]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80041ba:	2201      	movs	r2, #1
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ca:	3442      	adds	r4, #66	; 0x42
 80041cc:	7020      	strb	r0, [r4, #0]
}
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041d0:	2184      	movs	r1, #132	; 0x84
 80041d2:	0209      	lsls	r1, r1, #8
 80041d4:	4331      	orrs	r1, r6
 80041d6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041d8:	2a02      	cmp	r2, #2
 80041da:	d1db      	bne.n	8004194 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041dc:	2280      	movs	r2, #128	; 0x80
 80041de:	0112      	lsls	r2, r2, #4
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	e7d7      	b.n	8004194 <HAL_I2C_Init+0x50>
 80041e4:	ffff7fff 	.word	0xffff7fff
 80041e8:	f0ffffff 	.word	0xf0ffffff
 80041ec:	02008000 	.word	0x02008000

080041f0 <HAL_I2C_Master_Transmit>:
{
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	b087      	sub	sp, #28
 80041f4:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f6:	0003      	movs	r3, r0
 80041f8:	3341      	adds	r3, #65	; 0x41
{
 80041fa:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fc:	9303      	str	r3, [sp, #12]
 80041fe:	781b      	ldrb	r3, [r3, #0]
{
 8004200:	0004      	movs	r4, r0
 8004202:	000f      	movs	r7, r1
    return HAL_BUSY;
 8004204:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004206:	2b20      	cmp	r3, #32
 8004208:	d114      	bne.n	8004234 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 800420a:	0023      	movs	r3, r4
 800420c:	3340      	adds	r3, #64	; 0x40
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	2a01      	cmp	r2, #1
 8004212:	d00f      	beq.n	8004234 <HAL_I2C_Master_Transmit+0x44>
 8004214:	2601      	movs	r6, #1
 8004216:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8004218:	f7ff f980 	bl	800351c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800421c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800421e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004220:	9000      	str	r0, [sp, #0]
 8004222:	2319      	movs	r3, #25
 8004224:	0032      	movs	r2, r6
 8004226:	0020      	movs	r0, r4
 8004228:	0209      	lsls	r1, r1, #8
 800422a:	f7ff ff3b 	bl	80040a4 <I2C_WaitOnFlagUntilTimeout>
 800422e:	2800      	cmp	r0, #0
 8004230:	d002      	beq.n	8004238 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8004232:	2001      	movs	r0, #1
}
 8004234:	b007      	add	sp, #28
 8004236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004238:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800423a:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800423c:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800423e:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004240:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004242:	3b11      	subs	r3, #17
 8004244:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8004246:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004248:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800424a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800424c:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800424e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8004250:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004252:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004254:	4b2d      	ldr	r3, [pc, #180]	; (800430c <HAL_I2C_Master_Transmit+0x11c>)
 8004256:	2aff      	cmp	r2, #255	; 0xff
 8004258:	d920      	bls.n	800429c <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800425a:	22ff      	movs	r2, #255	; 0xff
 800425c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004264:	0039      	movs	r1, r7
 8004266:	0020      	movs	r0, r4
 8004268:	f7ff fe5a 	bl	8003f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800426c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426e:	002a      	movs	r2, r5
 8004270:	0020      	movs	r0, r4
 8004272:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8004274:	2b00      	cmp	r3, #0
 8004276:	d119      	bne.n	80042ac <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004278:	f7ff ff3c 	bl	80040f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800427c:	2800      	cmp	r0, #0
 800427e:	d1d8      	bne.n	8004232 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004280:	2120      	movs	r1, #32
 8004282:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004284:	4d22      	ldr	r5, [pc, #136]	; (8004310 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004286:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	402a      	ands	r2, r5
 800428c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800428e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8004290:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8004292:	3341      	adds	r3, #65	; 0x41
 8004294:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004296:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8004298:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800429a:	e7cb      	b.n	8004234 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800429c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800429e:	b292      	uxth	r2, r2
 80042a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	049b      	lsls	r3, r3, #18
 80042aa:	e7db      	b.n	8004264 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ac:	f7ff fe90 	bl	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d1be      	bne.n	8004232 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80042ba:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042bc:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80042be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80042c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80042c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80042ca:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80042ce:	b292      	uxth	r2, r2
 80042d0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ca      	beq.n	800426c <HAL_I2C_Master_Transmit+0x7c>
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	d1c8      	bne.n	800426c <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042da:	2180      	movs	r1, #128	; 0x80
 80042dc:	0020      	movs	r0, r4
 80042de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042e0:	9500      	str	r5, [sp, #0]
 80042e2:	f7ff fedf 	bl	80040a4 <I2C_WaitOnFlagUntilTimeout>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d1a3      	bne.n	8004232 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042ec:	2bff      	cmp	r3, #255	; 0xff
 80042ee:	d906      	bls.n	80042fe <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042f0:	23ff      	movs	r3, #255	; 0xff
 80042f2:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	22ff      	movs	r2, #255	; 0xff
 80042f8:	9000      	str	r0, [sp, #0]
 80042fa:	045b      	lsls	r3, r3, #17
 80042fc:	e7b2      	b.n	8004264 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 80042fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004300:	b292      	uxth	r2, r2
 8004302:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	9000      	str	r0, [sp, #0]
 8004308:	e7cd      	b.n	80042a6 <HAL_I2C_Master_Transmit+0xb6>
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	80002000 	.word	0x80002000
 8004310:	fe00e800 	.word	0xfe00e800

08004314 <HAL_I2C_Master_Receive>:
{
 8004314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004316:	b087      	sub	sp, #28
 8004318:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800431a:	0003      	movs	r3, r0
 800431c:	3341      	adds	r3, #65	; 0x41
{
 800431e:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004320:	9303      	str	r3, [sp, #12]
 8004322:	781b      	ldrb	r3, [r3, #0]
{
 8004324:	0004      	movs	r4, r0
 8004326:	000f      	movs	r7, r1
    return HAL_BUSY;
 8004328:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800432a:	2b20      	cmp	r3, #32
 800432c:	d114      	bne.n	8004358 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 800432e:	0023      	movs	r3, r4
 8004330:	3340      	adds	r3, #64	; 0x40
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	2a01      	cmp	r2, #1
 8004336:	d00f      	beq.n	8004358 <HAL_I2C_Master_Receive+0x44>
 8004338:	2601      	movs	r6, #1
 800433a:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800433c:	f7ff f8ee 	bl	800351c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004340:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8004342:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004344:	9000      	str	r0, [sp, #0]
 8004346:	2319      	movs	r3, #25
 8004348:	0032      	movs	r2, r6
 800434a:	0020      	movs	r0, r4
 800434c:	0209      	lsls	r1, r1, #8
 800434e:	f7ff fea9 	bl	80040a4 <I2C_WaitOnFlagUntilTimeout>
 8004352:	2800      	cmp	r0, #0
 8004354:	d002      	beq.n	800435c <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8004356:	2001      	movs	r0, #1
}
 8004358:	b007      	add	sp, #28
 800435a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800435c:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800435e:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004360:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004362:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004364:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004366:	3b12      	subs	r3, #18
 8004368:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800436a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800436c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800436e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004370:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8004372:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8004374:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004376:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004378:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <HAL_I2C_Master_Receive+0x11c>)
 800437a:	2aff      	cmp	r2, #255	; 0xff
 800437c:	d920      	bls.n	80043c0 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004388:	0039      	movs	r1, r7
 800438a:	0020      	movs	r0, r4
 800438c:	f7ff fdc8 	bl	8003f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004390:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004392:	002a      	movs	r2, r5
 8004394:	0020      	movs	r0, r4
 8004396:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8004398:	2b00      	cmp	r3, #0
 800439a:	d119      	bne.n	80043d0 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439c:	f7ff feaa 	bl	80040f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d1d8      	bne.n	8004356 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a4:	2120      	movs	r1, #32
 80043a6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80043a8:	4d22      	ldr	r5, [pc, #136]	; (8004434 <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043aa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	402a      	ands	r2, r5
 80043b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80043b4:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	3341      	adds	r3, #65	; 0x41
 80043b8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ba:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80043bc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80043be:	e7cb      	b.n	8004358 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80043c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043c2:	b292      	uxth	r2, r2
 80043c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	049b      	lsls	r3, r3, #18
 80043ce:	e7db      	b.n	8004388 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d0:	f7ff fe28 	bl	8004024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d1be      	bne.n	8004356 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80043e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80043e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80043e4:	3301      	adds	r3, #1
 80043e6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80043e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80043ea:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80043f4:	b292      	uxth	r2, r2
 80043f6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0c9      	beq.n	8004390 <HAL_I2C_Master_Receive+0x7c>
 80043fc:	2a00      	cmp	r2, #0
 80043fe:	d1c7      	bne.n	8004390 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	0020      	movs	r0, r4
 8004404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004406:	9500      	str	r5, [sp, #0]
 8004408:	f7ff fe4c 	bl	80040a4 <I2C_WaitOnFlagUntilTimeout>
 800440c:	2800      	cmp	r0, #0
 800440e:	d1a2      	bne.n	8004356 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004412:	2bff      	cmp	r3, #255	; 0xff
 8004414:	d906      	bls.n	8004424 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004416:	23ff      	movs	r3, #255	; 0xff
 8004418:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800441a:	2380      	movs	r3, #128	; 0x80
 800441c:	22ff      	movs	r2, #255	; 0xff
 800441e:	9000      	str	r0, [sp, #0]
 8004420:	045b      	lsls	r3, r3, #17
 8004422:	e7b1      	b.n	8004388 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8004424:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004426:	b292      	uxth	r2, r2
 8004428:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	9000      	str	r0, [sp, #0]
 800442e:	e7cc      	b.n	80043ca <HAL_I2C_Master_Receive+0xb6>
 8004430:	80002400 	.word	0x80002400
 8004434:	fe00e800 	.word	0xfe00e800

08004438 <HAL_I2C_IsDeviceReady>:
{
 8004438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443a:	001e      	movs	r6, r3
  __IO uint32_t I2C_Trials = 0UL;
 800443c:	2300      	movs	r3, #0
{
 800443e:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 8004440:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004442:	0003      	movs	r3, r0
{
 8004444:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004446:	3341      	adds	r3, #65	; 0x41
 8004448:	781a      	ldrb	r2, [r3, #0]
{
 800444a:	0004      	movs	r4, r0
    return HAL_BUSY;
 800444c:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800444e:	2a20      	cmp	r2, #32
 8004450:	d15b      	bne.n	800450a <HAL_I2C_IsDeviceReady+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004452:	6802      	ldr	r2, [r0, #0]
 8004454:	6997      	ldr	r7, [r2, #24]
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	0038      	movs	r0, r7
 800445a:	0212      	lsls	r2, r2, #8
 800445c:	4010      	ands	r0, r2
 800445e:	4217      	tst	r7, r2
 8004460:	d153      	bne.n	800450a <HAL_I2C_IsDeviceReady+0xd2>
    __HAL_LOCK(hi2c);
 8004462:	0022      	movs	r2, r4
 8004464:	3240      	adds	r2, #64	; 0x40
 8004466:	7817      	ldrb	r7, [r2, #0]
 8004468:	2f01      	cmp	r7, #1
 800446a:	d04e      	beq.n	800450a <HAL_I2C_IsDeviceReady+0xd2>
 800446c:	3d01      	subs	r5, #1
 800446e:	7015      	strb	r5, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004470:	2224      	movs	r2, #36	; 0x24
 8004472:	0589      	lsls	r1, r1, #22
 8004474:	701a      	strb	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004476:	0d8b      	lsrs	r3, r1, #22
 8004478:	6460      	str	r0, [r4, #68]	; 0x44
 800447a:	9304      	str	r3, [sp, #16]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800447c:	68e3      	ldr	r3, [r4, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d12b      	bne.n	80044da <HAL_I2C_IsDeviceReady+0xa2>
 8004482:	4b3e      	ldr	r3, [pc, #248]	; (800457c <HAL_I2C_IsDeviceReady+0x144>)
 8004484:	9a04      	ldr	r2, [sp, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	6822      	ldr	r2, [r4, #0]
 800448a:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800448c:	f7ff f846 	bl	800351c <HAL_GetTick>
 8004490:	9003      	str	r0, [sp, #12]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004492:	2201      	movs	r2, #1
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800449a:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800449c:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800449e:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044a0:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80044a2:	431d      	orrs	r5, r3
 80044a4:	d01c      	beq.n	80044e0 <HAL_I2C_IsDeviceReady+0xa8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	2710      	movs	r7, #16
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	001a      	movs	r2, r3
 80044ae:	403a      	ands	r2, r7
 80044b0:	423b      	tst	r3, r7
 80044b2:	d12d      	bne.n	8004510 <HAL_I2C_IsDeviceReady+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	2120      	movs	r1, #32
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	0020      	movs	r0, r4
 80044bc:	0033      	movs	r3, r6
 80044be:	f7ff fdf1 	bl	80040a4 <I2C_WaitOnFlagUntilTimeout>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d121      	bne.n	800450a <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c6:	2320      	movs	r3, #32
 80044c8:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 80044ca:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044cc:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 80044d0:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	3241      	adds	r2, #65	; 0x41
 80044d4:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80044d6:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 80044d8:	e017      	b.n	800450a <HAL_I2C_IsDeviceReady+0xd2>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80044da:	23a0      	movs	r3, #160	; 0xa0
 80044dc:	019b      	lsls	r3, r3, #6
 80044de:	e7d1      	b.n	8004484 <HAL_I2C_IsDeviceReady+0x4c>
        if (Timeout != HAL_MAX_DELAY)
 80044e0:	1c73      	adds	r3, r6, #1
 80044e2:	d0d6      	beq.n	8004492 <HAL_I2C_IsDeviceReady+0x5a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7ff f81a 	bl	800351c <HAL_GetTick>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	1ac0      	subs	r0, r0, r3
 80044ec:	42b0      	cmp	r0, r6
 80044ee:	d801      	bhi.n	80044f4 <HAL_I2C_IsDeviceReady+0xbc>
 80044f0:	2e00      	cmp	r6, #0
 80044f2:	d1ce      	bne.n	8004492 <HAL_I2C_IsDeviceReady+0x5a>
            hi2c->State = HAL_I2C_STATE_READY;
 80044f4:	0022      	movs	r2, r4
 80044f6:	2320      	movs	r3, #32
 80044f8:	3241      	adds	r2, #65	; 0x41
 80044fa:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 80044fe:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	4313      	orrs	r3, r2
 8004502:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8004504:	2300      	movs	r3, #0
 8004506:	3440      	adds	r4, #64	; 0x40
 8004508:	7023      	strb	r3, [r4, #0]
}
 800450a:	0028      	movs	r0, r5
 800450c:	b009      	add	sp, #36	; 0x24
 800450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2120      	movs	r1, #32
 8004518:	0033      	movs	r3, r6
 800451a:	0020      	movs	r0, r4
 800451c:	f7ff fdc2 	bl	80040a4 <I2C_WaitOnFlagUntilTimeout>
 8004520:	1e02      	subs	r2, r0, #0
 8004522:	d1f2      	bne.n	800450a <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004524:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8004526:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004528:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800452a:	2720      	movs	r7, #32
 800452c:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 800452e:	9907      	ldr	r1, [sp, #28]
 8004530:	4281      	cmp	r1, r0
 8004532:	d10f      	bne.n	8004554 <HAL_I2C_IsDeviceReady+0x11c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	6858      	ldr	r0, [r3, #4]
 8004538:	01c9      	lsls	r1, r1, #7
 800453a:	4301      	orrs	r1, r0
 800453c:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800453e:	9b03      	ldr	r3, [sp, #12]
 8004540:	0039      	movs	r1, r7
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	0020      	movs	r0, r4
 8004546:	0033      	movs	r3, r6
 8004548:	f7ff fdac 	bl	80040a4 <I2C_WaitOnFlagUntilTimeout>
 800454c:	2800      	cmp	r0, #0
 800454e:	d1dc      	bne.n	800450a <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8004554:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8004556:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8004558:	3301      	adds	r3, #1
 800455a:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 800455c:	9b07      	ldr	r3, [sp, #28]
 800455e:	4293      	cmp	r3, r2
 8004560:	d200      	bcs.n	8004564 <HAL_I2C_IsDeviceReady+0x12c>
 8004562:	e78b      	b.n	800447c <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8004564:	0022      	movs	r2, r4
 8004566:	2320      	movs	r3, #32
 8004568:	3241      	adds	r2, #65	; 0x41
 800456a:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800456c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800456e:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004570:	4313      	orrs	r3, r2
 8004572:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8004574:	2300      	movs	r3, #0
 8004576:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8004578:	e7c7      	b.n	800450a <HAL_I2C_IsDeviceReady+0xd2>
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	02002000 	.word	0x02002000

08004580 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004582:	0004      	movs	r4, r0
 8004584:	3441      	adds	r4, #65	; 0x41
 8004586:	7822      	ldrb	r2, [r4, #0]
{
 8004588:	0003      	movs	r3, r0
 800458a:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800458c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800458e:	b2d6      	uxtb	r6, r2
 8004590:	2a20      	cmp	r2, #32
 8004592:	d118      	bne.n	80045c6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8004594:	001d      	movs	r5, r3
 8004596:	3540      	adds	r5, #64	; 0x40
 8004598:	782a      	ldrb	r2, [r5, #0]
 800459a:	2a01      	cmp	r2, #1
 800459c:	d013      	beq.n	80045c6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3a23      	subs	r2, #35	; 0x23
 80045a6:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045a8:	4807      	ldr	r0, [pc, #28]	; (80045c8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80045aa:	4391      	bics	r1, r2
 80045ac:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 80045b2:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045b4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	4339      	orrs	r1, r7
 80045ba:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80045bc:	6819      	ldr	r1, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80045c4:	7028      	strb	r0, [r5, #0]
  }
}
 80045c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c8:	ffffefff 	.word	0xffffefff

080045cc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045cc:	0002      	movs	r2, r0
{
 80045ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d0:	3241      	adds	r2, #65	; 0x41
 80045d2:	7814      	ldrb	r4, [r2, #0]
{
 80045d4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d6:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045da:	2c20      	cmp	r4, #32
 80045dc:	d117      	bne.n	800460e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80045de:	001c      	movs	r4, r3
 80045e0:	3440      	adds	r4, #64	; 0x40
 80045e2:	7826      	ldrb	r6, [r4, #0]
 80045e4:	2e01      	cmp	r6, #1
 80045e6:	d012      	beq.n	800460e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e8:	3022      	adds	r0, #34	; 0x22
 80045ea:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3823      	subs	r0, #35	; 0x23
 80045f0:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80045f2:	4f07      	ldr	r7, [pc, #28]	; (8004610 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80045f4:	4386      	bics	r6, r0
 80045f6:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80045f8:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80045fa:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80045fc:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80045fe:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8004600:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004602:	6819      	ldr	r1, [r3, #0]
 8004604:	4308      	orrs	r0, r1
 8004606:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004608:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800460a:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800460c:	7020      	strb	r0, [r4, #0]
  }
}
 800460e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004610:	fffff0ff 	.word	0xfffff0ff

08004614 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004614:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004616:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCC_GetSysClockFreq+0x78>)
{
 8004618:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800461a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800461c:	4022      	ands	r2, r4
 800461e:	2a08      	cmp	r2, #8
 8004620:	d031      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0x72>
 8004622:	2a0c      	cmp	r2, #12
 8004624:	d009      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x26>
 8004626:	2a04      	cmp	r2, #4
 8004628:	d125      	bne.n	8004676 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800462a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800462e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8004630:	17c0      	asrs	r0, r0, #31
 8004632:	4018      	ands	r0, r3
 8004634:	4b17      	ldr	r3, [pc, #92]	; (8004694 <HAL_RCC_GetSysClockFreq+0x80>)
 8004636:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8004638:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800463a:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800463c:	4816      	ldr	r0, [pc, #88]	; (8004698 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800463e:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004640:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004642:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004644:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004646:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004648:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800464c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464e:	4211      	tst	r1, r2
 8004650:	d009      	beq.n	8004666 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <HAL_RCC_GetSysClockFreq+0x88>)
 8004654:	2300      	movs	r3, #0
 8004656:	2100      	movs	r1, #0
 8004658:	f7fb fe20 	bl	800029c <__aeabi_lmul>
 800465c:	0022      	movs	r2, r4
 800465e:	2300      	movs	r3, #0
 8004660:	f7fb fdfc 	bl	800025c <__aeabi_uldivmod>
 8004664:	e7e8      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	2310      	movs	r3, #16
 800466a:	421a      	tst	r2, r3
 800466c:	d001      	beq.n	8004672 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800466e:	4a0c      	ldr	r2, [pc, #48]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004670:	e7f0      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004672:	4a08      	ldr	r2, [pc, #32]	; (8004694 <HAL_RCC_GetSysClockFreq+0x80>)
 8004674:	e7ee      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004676:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004678:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800467a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004680:	3301      	adds	r3, #1
 8004682:	4098      	lsls	r0, r3
      break;
 8004684:	e7d8      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8004686:	4805      	ldr	r0, [pc, #20]	; (800469c <HAL_RCC_GetSysClockFreq+0x88>)
 8004688:	e7d6      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x24>
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	40021000 	.word	0x40021000
 8004690:	ff48e500 	.word	0xff48e500
 8004694:	00f42400 	.word	0x00f42400
 8004698:	08006cf4 	.word	0x08006cf4
 800469c:	007a1200 	.word	0x007a1200
 80046a0:	003d0900 	.word	0x003d0900

080046a4 <HAL_RCC_OscConfig>:
{
 80046a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a6:	0005      	movs	r5, r0
 80046a8:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d05a      	beq.n	8004764 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ae:	230c      	movs	r3, #12
 80046b0:	4cbe      	ldr	r4, [pc, #760]	; (80049ac <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b2:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b6:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	025b      	lsls	r3, r3, #9
 80046be:	0019      	movs	r1, r3
 80046c0:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c2:	07d2      	lsls	r2, r2, #31
 80046c4:	d442      	bmi.n	800474c <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c6:	682b      	ldr	r3, [r5, #0]
 80046c8:	079b      	lsls	r3, r3, #30
 80046ca:	d500      	bpl.n	80046ce <HAL_RCC_OscConfig+0x2a>
 80046cc:	e08b      	b.n	80047e6 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046ce:	682b      	ldr	r3, [r5, #0]
 80046d0:	06db      	lsls	r3, r3, #27
 80046d2:	d529      	bpl.n	8004728 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046d4:	2e00      	cmp	r6, #0
 80046d6:	d000      	beq.n	80046da <HAL_RCC_OscConfig+0x36>
 80046d8:	e0dc      	b.n	8004894 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	059b      	lsls	r3, r3, #22
 80046de:	d502      	bpl.n	80046e6 <HAL_RCC_OscConfig+0x42>
 80046e0:	69eb      	ldr	r3, [r5, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d03e      	beq.n	8004764 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046e6:	6862      	ldr	r2, [r4, #4]
 80046e8:	49b1      	ldr	r1, [pc, #708]	; (80049b0 <HAL_RCC_OscConfig+0x30c>)
 80046ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046ec:	400a      	ands	r2, r1
 80046ee:	431a      	orrs	r2, r3
 80046f0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046f2:	6861      	ldr	r1, [r4, #4]
 80046f4:	6a2a      	ldr	r2, [r5, #32]
 80046f6:	0209      	lsls	r1, r1, #8
 80046f8:	0a09      	lsrs	r1, r1, #8
 80046fa:	0612      	lsls	r2, r2, #24
 80046fc:	430a      	orrs	r2, r1
 80046fe:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	0b5b      	lsrs	r3, r3, #13
 8004704:	3301      	adds	r3, #1
 8004706:	0212      	lsls	r2, r2, #8
 8004708:	409a      	lsls	r2, r3
 800470a:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800470c:	68e1      	ldr	r1, [r4, #12]
 800470e:	060a      	lsls	r2, r1, #24
 8004710:	49a8      	ldr	r1, [pc, #672]	; (80049b4 <HAL_RCC_OscConfig+0x310>)
 8004712:	0f12      	lsrs	r2, r2, #28
 8004714:	5c8a      	ldrb	r2, [r1, r2]
 8004716:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004718:	4aa7      	ldr	r2, [pc, #668]	; (80049b8 <HAL_RCC_OscConfig+0x314>)
 800471a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800471c:	4ba7      	ldr	r3, [pc, #668]	; (80049bc <HAL_RCC_OscConfig+0x318>)
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	f7fe feb8 	bl	8003494 <HAL_InitTick>
        if(status != HAL_OK)
 8004724:	2800      	cmp	r0, #0
 8004726:	d134      	bne.n	8004792 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	071b      	lsls	r3, r3, #28
 800472c:	d500      	bpl.n	8004730 <HAL_RCC_OscConfig+0x8c>
 800472e:	e0e8      	b.n	8004902 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	075b      	lsls	r3, r3, #29
 8004734:	d500      	bpl.n	8004738 <HAL_RCC_OscConfig+0x94>
 8004736:	e10a      	b.n	800494e <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	069b      	lsls	r3, r3, #26
 800473c:	d500      	bpl.n	8004740 <HAL_RCC_OscConfig+0x9c>
 800473e:	e18e      	b.n	8004a5e <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004740:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004742:	2b00      	cmp	r3, #0
 8004744:	d000      	beq.n	8004748 <HAL_RCC_OscConfig+0xa4>
 8004746:	e1bd      	b.n	8004ac4 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8004748:	2000      	movs	r0, #0
 800474a:	e022      	b.n	8004792 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800474c:	2e08      	cmp	r6, #8
 800474e:	d003      	beq.n	8004758 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004750:	2e0c      	cmp	r6, #12
 8004752:	d109      	bne.n	8004768 <HAL_RCC_OscConfig+0xc4>
 8004754:	2f00      	cmp	r7, #0
 8004756:	d007      	beq.n	8004768 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	039b      	lsls	r3, r3, #14
 800475c:	d5b3      	bpl.n	80046c6 <HAL_RCC_OscConfig+0x22>
 800475e:	686b      	ldr	r3, [r5, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1b0      	bne.n	80046c6 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8004764:	2001      	movs	r0, #1
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004768:	686a      	ldr	r2, [r5, #4]
 800476a:	428a      	cmp	r2, r1
 800476c:	d113      	bne.n	8004796 <HAL_RCC_OscConfig+0xf2>
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	4313      	orrs	r3, r2
 8004772:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004774:	f7fe fed2 	bl	800351c <HAL_GetTick>
 8004778:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800477a:	2280      	movs	r2, #128	; 0x80
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	0292      	lsls	r2, r2, #10
 8004780:	4213      	tst	r3, r2
 8004782:	d1a0      	bne.n	80046c6 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004784:	f7fe feca 	bl	800351c <HAL_GetTick>
 8004788:	9b00      	ldr	r3, [sp, #0]
 800478a:	1ac0      	subs	r0, r0, r3
 800478c:	2864      	cmp	r0, #100	; 0x64
 800478e:	d9f4      	bls.n	800477a <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8004790:	2003      	movs	r0, #3
}
 8004792:	b005      	add	sp, #20
 8004794:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004796:	21a0      	movs	r1, #160	; 0xa0
 8004798:	02c9      	lsls	r1, r1, #11
 800479a:	428a      	cmp	r2, r1
 800479c:	d105      	bne.n	80047aa <HAL_RCC_OscConfig+0x106>
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	6821      	ldr	r1, [r4, #0]
 80047a2:	02d2      	lsls	r2, r2, #11
 80047a4:	430a      	orrs	r2, r1
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	e7e1      	b.n	800476e <HAL_RCC_OscConfig+0xca>
 80047aa:	6821      	ldr	r1, [r4, #0]
 80047ac:	4884      	ldr	r0, [pc, #528]	; (80049c0 <HAL_RCC_OscConfig+0x31c>)
 80047ae:	4001      	ands	r1, r0
 80047b0:	6021      	str	r1, [r4, #0]
 80047b2:	6821      	ldr	r1, [r4, #0]
 80047b4:	400b      	ands	r3, r1
 80047b6:	9303      	str	r3, [sp, #12]
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	4982      	ldr	r1, [pc, #520]	; (80049c4 <HAL_RCC_OscConfig+0x320>)
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	400b      	ands	r3, r1
 80047c0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	d1d6      	bne.n	8004774 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 80047c6:	f7fe fea9 	bl	800351c <HAL_GetTick>
 80047ca:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	0292      	lsls	r2, r2, #10
 80047d2:	4213      	tst	r3, r2
 80047d4:	d100      	bne.n	80047d8 <HAL_RCC_OscConfig+0x134>
 80047d6:	e776      	b.n	80046c6 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fe fea0 	bl	800351c <HAL_GetTick>
 80047dc:	9b00      	ldr	r3, [sp, #0]
 80047de:	1ac0      	subs	r0, r0, r3
 80047e0:	2864      	cmp	r0, #100	; 0x64
 80047e2:	d9f3      	bls.n	80047cc <HAL_RCC_OscConfig+0x128>
 80047e4:	e7d4      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 80047e6:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047e8:	2e04      	cmp	r6, #4
 80047ea:	d003      	beq.n	80047f4 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ec:	2e0c      	cmp	r6, #12
 80047ee:	d124      	bne.n	800483a <HAL_RCC_OscConfig+0x196>
 80047f0:	2f00      	cmp	r7, #0
 80047f2:	d122      	bne.n	800483a <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	075b      	lsls	r3, r3, #29
 80047f8:	d501      	bpl.n	80047fe <HAL_RCC_OscConfig+0x15a>
 80047fa:	2a00      	cmp	r2, #0
 80047fc:	d0b2      	beq.n	8004764 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fe:	6861      	ldr	r1, [r4, #4]
 8004800:	692b      	ldr	r3, [r5, #16]
 8004802:	4871      	ldr	r0, [pc, #452]	; (80049c8 <HAL_RCC_OscConfig+0x324>)
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	4001      	ands	r1, r0
 8004808:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800480a:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	438b      	bics	r3, r1
 8004812:	4313      	orrs	r3, r2
 8004814:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004816:	f7ff fefd 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 800481a:	68e3      	ldr	r3, [r4, #12]
 800481c:	4a65      	ldr	r2, [pc, #404]	; (80049b4 <HAL_RCC_OscConfig+0x310>)
 800481e:	061b      	lsls	r3, r3, #24
 8004820:	0f1b      	lsrs	r3, r3, #28
 8004822:	5cd3      	ldrb	r3, [r2, r3]
 8004824:	40d8      	lsrs	r0, r3
 8004826:	4b64      	ldr	r3, [pc, #400]	; (80049b8 <HAL_RCC_OscConfig+0x314>)
 8004828:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800482a:	4b64      	ldr	r3, [pc, #400]	; (80049bc <HAL_RCC_OscConfig+0x318>)
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	f7fe fe31 	bl	8003494 <HAL_InitTick>
      if(status != HAL_OK)
 8004832:	2800      	cmp	r0, #0
 8004834:	d100      	bne.n	8004838 <HAL_RCC_OscConfig+0x194>
 8004836:	e74a      	b.n	80046ce <HAL_RCC_OscConfig+0x2a>
 8004838:	e7ab      	b.n	8004792 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800483a:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 800483c:	2a00      	cmp	r2, #0
 800483e:	d018      	beq.n	8004872 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004840:	2109      	movs	r1, #9
 8004842:	438b      	bics	r3, r1
 8004844:	4313      	orrs	r3, r2
 8004846:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004848:	f7fe fe68 	bl	800351c <HAL_GetTick>
 800484c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800484e:	2204      	movs	r2, #4
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	4213      	tst	r3, r2
 8004854:	d007      	beq.n	8004866 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004856:	6862      	ldr	r2, [r4, #4]
 8004858:	692b      	ldr	r3, [r5, #16]
 800485a:	495b      	ldr	r1, [pc, #364]	; (80049c8 <HAL_RCC_OscConfig+0x324>)
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	400a      	ands	r2, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	6063      	str	r3, [r4, #4]
 8004864:	e733      	b.n	80046ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004866:	f7fe fe59 	bl	800351c <HAL_GetTick>
 800486a:	1bc0      	subs	r0, r0, r7
 800486c:	2802      	cmp	r0, #2
 800486e:	d9ee      	bls.n	800484e <HAL_RCC_OscConfig+0x1aa>
 8004870:	e78e      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8004872:	2201      	movs	r2, #1
 8004874:	4393      	bics	r3, r2
 8004876:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004878:	f7fe fe50 	bl	800351c <HAL_GetTick>
 800487c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800487e:	2204      	movs	r2, #4
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	4213      	tst	r3, r2
 8004884:	d100      	bne.n	8004888 <HAL_RCC_OscConfig+0x1e4>
 8004886:	e722      	b.n	80046ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004888:	f7fe fe48 	bl	800351c <HAL_GetTick>
 800488c:	1bc0      	subs	r0, r0, r7
 800488e:	2802      	cmp	r0, #2
 8004890:	d9f5      	bls.n	800487e <HAL_RCC_OscConfig+0x1da>
 8004892:	e77d      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004894:	69eb      	ldr	r3, [r5, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d020      	beq.n	80048dc <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	4313      	orrs	r3, r2
 80048a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80048a4:	f7fe fe3a 	bl	800351c <HAL_GetTick>
 80048a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048aa:	2280      	movs	r2, #128	; 0x80
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	0092      	lsls	r2, r2, #2
 80048b0:	4213      	tst	r3, r2
 80048b2:	d00d      	beq.n	80048d0 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	4a3e      	ldr	r2, [pc, #248]	; (80049b0 <HAL_RCC_OscConfig+0x30c>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80048bc:	4313      	orrs	r3, r2
 80048be:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c0:	6862      	ldr	r2, [r4, #4]
 80048c2:	6a2b      	ldr	r3, [r5, #32]
 80048c4:	0212      	lsls	r2, r2, #8
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	0a12      	lsrs	r2, r2, #8
 80048ca:	4313      	orrs	r3, r2
 80048cc:	6063      	str	r3, [r4, #4]
 80048ce:	e72b      	b.n	8004728 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048d0:	f7fe fe24 	bl	800351c <HAL_GetTick>
 80048d4:	1bc0      	subs	r0, r0, r7
 80048d6:	2802      	cmp	r0, #2
 80048d8:	d9e7      	bls.n	80048aa <HAL_RCC_OscConfig+0x206>
 80048da:	e759      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	4a3b      	ldr	r2, [pc, #236]	; (80049cc <HAL_RCC_OscConfig+0x328>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80048e4:	f7fe fe1a 	bl	800351c <HAL_GetTick>
 80048e8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80048ea:	2280      	movs	r2, #128	; 0x80
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	4213      	tst	r3, r2
 80048f2:	d100      	bne.n	80048f6 <HAL_RCC_OscConfig+0x252>
 80048f4:	e718      	b.n	8004728 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048f6:	f7fe fe11 	bl	800351c <HAL_GetTick>
 80048fa:	1bc0      	subs	r0, r0, r7
 80048fc:	2802      	cmp	r0, #2
 80048fe:	d9f4      	bls.n	80048ea <HAL_RCC_OscConfig+0x246>
 8004900:	e746      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004902:	696a      	ldr	r2, [r5, #20]
 8004904:	2301      	movs	r3, #1
 8004906:	2a00      	cmp	r2, #0
 8004908:	d010      	beq.n	800492c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 800490a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800490c:	4313      	orrs	r3, r2
 800490e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004910:	f7fe fe04 	bl	800351c <HAL_GetTick>
 8004914:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004916:	2202      	movs	r2, #2
 8004918:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800491a:	4213      	tst	r3, r2
 800491c:	d000      	beq.n	8004920 <HAL_RCC_OscConfig+0x27c>
 800491e:	e707      	b.n	8004730 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004920:	f7fe fdfc 	bl	800351c <HAL_GetTick>
 8004924:	1bc0      	subs	r0, r0, r7
 8004926:	2802      	cmp	r0, #2
 8004928:	d9f5      	bls.n	8004916 <HAL_RCC_OscConfig+0x272>
 800492a:	e731      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 800492c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800492e:	439a      	bics	r2, r3
 8004930:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004932:	f7fe fdf3 	bl	800351c <HAL_GetTick>
 8004936:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004938:	2202      	movs	r2, #2
 800493a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800493c:	4213      	tst	r3, r2
 800493e:	d100      	bne.n	8004942 <HAL_RCC_OscConfig+0x29e>
 8004940:	e6f6      	b.n	8004730 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004942:	f7fe fdeb 	bl	800351c <HAL_GetTick>
 8004946:	1bc0      	subs	r0, r0, r7
 8004948:	2802      	cmp	r0, #2
 800494a:	d9f5      	bls.n	8004938 <HAL_RCC_OscConfig+0x294>
 800494c:	e720      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004950:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004952:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004954:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004956:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004958:	421a      	tst	r2, r3
 800495a:	d104      	bne.n	8004966 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800495c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800495e:	4313      	orrs	r3, r2
 8004960:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004962:	2301      	movs	r3, #1
 8004964:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	2280      	movs	r2, #128	; 0x80
 8004968:	4f19      	ldr	r7, [pc, #100]	; (80049d0 <HAL_RCC_OscConfig+0x32c>)
 800496a:	0052      	lsls	r2, r2, #1
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4213      	tst	r3, r2
 8004970:	d008      	beq.n	8004984 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004972:	2280      	movs	r2, #128	; 0x80
 8004974:	68ab      	ldr	r3, [r5, #8]
 8004976:	0052      	lsls	r2, r2, #1
 8004978:	4293      	cmp	r3, r2
 800497a:	d12b      	bne.n	80049d4 <HAL_RCC_OscConfig+0x330>
 800497c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800497e:	4313      	orrs	r3, r2
 8004980:	6523      	str	r3, [r4, #80]	; 0x50
 8004982:	e04c      	b.n	8004a1e <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	0052      	lsls	r2, r2, #1
 800498a:	4313      	orrs	r3, r2
 800498c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800498e:	f7fe fdc5 	bl	800351c <HAL_GetTick>
 8004992:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	0052      	lsls	r2, r2, #1
 800499a:	4213      	tst	r3, r2
 800499c:	d1e9      	bne.n	8004972 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499e:	f7fe fdbd 	bl	800351c <HAL_GetTick>
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	1ac0      	subs	r0, r0, r3
 80049a6:	2864      	cmp	r0, #100	; 0x64
 80049a8:	d9f4      	bls.n	8004994 <HAL_RCC_OscConfig+0x2f0>
 80049aa:	e6f1      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
 80049ac:	40021000 	.word	0x40021000
 80049b0:	ffff1fff 	.word	0xffff1fff
 80049b4:	08006ce4 	.word	0x08006ce4
 80049b8:	2000001c 	.word	0x2000001c
 80049bc:	20000024 	.word	0x20000024
 80049c0:	fffeffff 	.word	0xfffeffff
 80049c4:	fffbffff 	.word	0xfffbffff
 80049c8:	ffffe0ff 	.word	0xffffe0ff
 80049cc:	fffffeff 	.word	0xfffffeff
 80049d0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d116      	bne.n	8004a06 <HAL_RCC_OscConfig+0x362>
 80049d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049da:	4a6b      	ldr	r2, [pc, #428]	; (8004b88 <HAL_RCC_OscConfig+0x4e4>)
 80049dc:	4013      	ands	r3, r2
 80049de:	6523      	str	r3, [r4, #80]	; 0x50
 80049e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049e2:	4a6a      	ldr	r2, [pc, #424]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80049e8:	f7fe fd98 	bl	800351c <HAL_GetTick>
 80049ec:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	4213      	tst	r3, r2
 80049f6:	d01a      	beq.n	8004a2e <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fe fd90 	bl	800351c <HAL_GetTick>
 80049fc:	4b64      	ldr	r3, [pc, #400]	; (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 80049fe:	1bc0      	subs	r0, r0, r7
 8004a00:	4298      	cmp	r0, r3
 8004a02:	d9f4      	bls.n	80049ee <HAL_RCC_OscConfig+0x34a>
 8004a04:	e6c4      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a06:	21a0      	movs	r1, #160	; 0xa0
 8004a08:	00c9      	lsls	r1, r1, #3
 8004a0a:	428b      	cmp	r3, r1
 8004a0c:	d118      	bne.n	8004a40 <HAL_RCC_OscConfig+0x39c>
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6523      	str	r3, [r4, #80]	; 0x50
 8004a18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004a1e:	f7fe fd7d 	bl	800351c <HAL_GetTick>
 8004a22:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a24:	2280      	movs	r2, #128	; 0x80
 8004a26:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a28:	0092      	lsls	r2, r2, #2
 8004a2a:	4213      	tst	r3, r2
 8004a2c:	d010      	beq.n	8004a50 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 8004a2e:	9b00      	ldr	r3, [sp, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d000      	beq.n	8004a36 <HAL_RCC_OscConfig+0x392>
 8004a34:	e680      	b.n	8004738 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a38:	4a56      	ldr	r2, [pc, #344]	; (8004b94 <HAL_RCC_OscConfig+0x4f0>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a3e:	e67b      	b.n	8004738 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a42:	4a51      	ldr	r2, [pc, #324]	; (8004b88 <HAL_RCC_OscConfig+0x4e4>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	6523      	str	r3, [r4, #80]	; 0x50
 8004a48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a4a:	4a50      	ldr	r2, [pc, #320]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	e797      	b.n	8004980 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7fe fd64 	bl	800351c <HAL_GetTick>
 8004a54:	4b4e      	ldr	r3, [pc, #312]	; (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004a56:	1bc0      	subs	r0, r0, r7
 8004a58:	4298      	cmp	r0, r3
 8004a5a:	d9e3      	bls.n	8004a24 <HAL_RCC_OscConfig+0x380>
 8004a5c:	e698      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a5e:	69a9      	ldr	r1, [r5, #24]
 8004a60:	2301      	movs	r3, #1
 8004a62:	4a4d      	ldr	r2, [pc, #308]	; (8004b98 <HAL_RCC_OscConfig+0x4f4>)
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d018      	beq.n	8004a9a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8004a68:	68a1      	ldr	r1, [r4, #8]
 8004a6a:	4319      	orrs	r1, r3
 8004a6c:	60a1      	str	r1, [r4, #8]
 8004a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6363      	str	r3, [r4, #52]	; 0x34
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	6a11      	ldr	r1, [r2, #32]
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004a7e:	f7fe fd4d 	bl	800351c <HAL_GetTick>
 8004a82:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a84:	2202      	movs	r2, #2
 8004a86:	68a3      	ldr	r3, [r4, #8]
 8004a88:	4213      	tst	r3, r2
 8004a8a:	d000      	beq.n	8004a8e <HAL_RCC_OscConfig+0x3ea>
 8004a8c:	e658      	b.n	8004740 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a8e:	f7fe fd45 	bl	800351c <HAL_GetTick>
 8004a92:	1bc0      	subs	r0, r0, r7
 8004a94:	2802      	cmp	r0, #2
 8004a96:	d9f5      	bls.n	8004a84 <HAL_RCC_OscConfig+0x3e0>
 8004a98:	e67a      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 8004a9a:	68a1      	ldr	r1, [r4, #8]
 8004a9c:	4399      	bics	r1, r3
 8004a9e:	60a1      	str	r1, [r4, #8]
 8004aa0:	6a13      	ldr	r3, [r2, #32]
 8004aa2:	493e      	ldr	r1, [pc, #248]	; (8004b9c <HAL_RCC_OscConfig+0x4f8>)
 8004aa4:	400b      	ands	r3, r1
 8004aa6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004aa8:	f7fe fd38 	bl	800351c <HAL_GetTick>
 8004aac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aae:	2202      	movs	r2, #2
 8004ab0:	68a3      	ldr	r3, [r4, #8]
 8004ab2:	4213      	tst	r3, r2
 8004ab4:	d100      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x414>
 8004ab6:	e643      	b.n	8004740 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ab8:	f7fe fd30 	bl	800351c <HAL_GetTick>
 8004abc:	1bc0      	subs	r0, r0, r7
 8004abe:	2802      	cmp	r0, #2
 8004ac0:	d9f5      	bls.n	8004aae <HAL_RCC_OscConfig+0x40a>
 8004ac2:	e665      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ac4:	2e0c      	cmp	r6, #12
 8004ac6:	d043      	beq.n	8004b50 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac8:	4a35      	ldr	r2, [pc, #212]	; (8004ba0 <HAL_RCC_OscConfig+0x4fc>)
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d12e      	bne.n	8004b2c <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8004ace:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ad0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004ad6:	f7fe fd21 	bl	800351c <HAL_GetTick>
 8004ada:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004adc:	04bf      	lsls	r7, r7, #18
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	423b      	tst	r3, r7
 8004ae2:	d11d      	bne.n	8004b20 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004ae6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004ae8:	68e2      	ldr	r2, [r4, #12]
 8004aea:	430b      	orrs	r3, r1
 8004aec:	492d      	ldr	r1, [pc, #180]	; (8004ba4 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004aee:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af0:	400a      	ands	r2, r1
 8004af2:	4313      	orrs	r3, r2
 8004af4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004af6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	045b      	lsls	r3, r3, #17
 8004b02:	4313      	orrs	r3, r2
 8004b04:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004b06:	f7fe fd09 	bl	800351c <HAL_GetTick>
 8004b0a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	4233      	tst	r3, r6
 8004b10:	d000      	beq.n	8004b14 <HAL_RCC_OscConfig+0x470>
 8004b12:	e619      	b.n	8004748 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b14:	f7fe fd02 	bl	800351c <HAL_GetTick>
 8004b18:	1b40      	subs	r0, r0, r5
 8004b1a:	2802      	cmp	r0, #2
 8004b1c:	d9f6      	bls.n	8004b0c <HAL_RCC_OscConfig+0x468>
 8004b1e:	e637      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fe fcfc 	bl	800351c <HAL_GetTick>
 8004b24:	1b80      	subs	r0, r0, r6
 8004b26:	2802      	cmp	r0, #2
 8004b28:	d9d9      	bls.n	8004ade <HAL_RCC_OscConfig+0x43a>
 8004b2a:	e631      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8004b2c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b2e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004b30:	4013      	ands	r3, r2
 8004b32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004b34:	f7fe fcf2 	bl	800351c <HAL_GetTick>
 8004b38:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b3a:	04b6      	lsls	r6, r6, #18
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	4233      	tst	r3, r6
 8004b40:	d100      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4a0>
 8004b42:	e601      	b.n	8004748 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fe fcea 	bl	800351c <HAL_GetTick>
 8004b48:	1b40      	subs	r0, r0, r5
 8004b4a:	2802      	cmp	r0, #2
 8004b4c:	d9f6      	bls.n	8004b3c <HAL_RCC_OscConfig+0x498>
 8004b4e:	e61f      	b.n	8004790 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8004b50:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d100      	bne.n	8004b58 <HAL_RCC_OscConfig+0x4b4>
 8004b56:	e61c      	b.n	8004792 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8004b5a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004b5e:	0252      	lsls	r2, r2, #9
 8004b60:	401a      	ands	r2, r3
 8004b62:	428a      	cmp	r2, r1
 8004b64:	d000      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4c4>
 8004b66:	e5fd      	b.n	8004764 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b68:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b6c:	0392      	lsls	r2, r2, #14
 8004b6e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b70:	428a      	cmp	r2, r1
 8004b72:	d000      	beq.n	8004b76 <HAL_RCC_OscConfig+0x4d2>
 8004b74:	e5f6      	b.n	8004764 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004b76:	22c0      	movs	r2, #192	; 0xc0
 8004b78:	0412      	lsls	r2, r2, #16
 8004b7a:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b7c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d100      	bne.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
 8004b82:	e5e1      	b.n	8004748 <HAL_RCC_OscConfig+0xa4>
 8004b84:	e5ee      	b.n	8004764 <HAL_RCC_OscConfig+0xc0>
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	fffffeff 	.word	0xfffffeff
 8004b8c:	fffffbff 	.word	0xfffffbff
 8004b90:	00001388 	.word	0x00001388
 8004b94:	efffffff 	.word	0xefffffff
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	ffffdfff 	.word	0xffffdfff
 8004ba0:	feffffff 	.word	0xfeffffff
 8004ba4:	ff02ffff 	.word	0xff02ffff

08004ba8 <HAL_RCC_ClockConfig>:
{
 8004ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004baa:	1e04      	subs	r4, r0, #0
 8004bac:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004bb0:	2001      	movs	r0, #1
}
 8004bb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	2501      	movs	r5, #1
 8004bb6:	4e5b      	ldr	r6, [pc, #364]	; (8004d24 <HAL_RCC_ClockConfig+0x17c>)
 8004bb8:	9a01      	ldr	r2, [sp, #4]
 8004bba:	6833      	ldr	r3, [r6, #0]
 8004bbc:	402b      	ands	r3, r5
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d331      	bcc.n	8004c26 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc2:	6822      	ldr	r2, [r4, #0]
 8004bc4:	0793      	lsls	r3, r2, #30
 8004bc6:	d443      	bmi.n	8004c50 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc8:	07d3      	lsls	r3, r2, #31
 8004bca:	d449      	bmi.n	8004c60 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bcc:	2501      	movs	r5, #1
 8004bce:	6833      	ldr	r3, [r6, #0]
 8004bd0:	9a01      	ldr	r2, [sp, #4]
 8004bd2:	402b      	ands	r3, r5
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d909      	bls.n	8004bec <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd8:	6833      	ldr	r3, [r6, #0]
 8004bda:	43ab      	bics	r3, r5
 8004bdc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004bde:	f7fe fc9d 	bl	800351c <HAL_GetTick>
 8004be2:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	422b      	tst	r3, r5
 8004be8:	d000      	beq.n	8004bec <HAL_RCC_ClockConfig+0x44>
 8004bea:	e08c      	b.n	8004d06 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bec:	6822      	ldr	r2, [r4, #0]
 8004bee:	4d4e      	ldr	r5, [pc, #312]	; (8004d28 <HAL_RCC_ClockConfig+0x180>)
 8004bf0:	0753      	lsls	r3, r2, #29
 8004bf2:	d500      	bpl.n	8004bf6 <HAL_RCC_ClockConfig+0x4e>
 8004bf4:	e08f      	b.n	8004d16 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf6:	0713      	lsls	r3, r2, #28
 8004bf8:	d506      	bpl.n	8004c08 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bfa:	68e9      	ldr	r1, [r5, #12]
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	4a4b      	ldr	r2, [pc, #300]	; (8004d2c <HAL_RCC_ClockConfig+0x184>)
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	400a      	ands	r2, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c08:	f7ff fd04 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 8004c0c:	68eb      	ldr	r3, [r5, #12]
 8004c0e:	4a48      	ldr	r2, [pc, #288]	; (8004d30 <HAL_RCC_ClockConfig+0x188>)
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	0f1b      	lsrs	r3, r3, #28
 8004c14:	5cd3      	ldrb	r3, [r2, r3]
 8004c16:	40d8      	lsrs	r0, r3
 8004c18:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <HAL_RCC_ClockConfig+0x18c>)
 8004c1a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004c1c:	4b46      	ldr	r3, [pc, #280]	; (8004d38 <HAL_RCC_ClockConfig+0x190>)
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	f7fe fc38 	bl	8003494 <HAL_InitTick>
  if(status != HAL_OK)
 8004c24:	e7c5      	b.n	8004bb2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c26:	6833      	ldr	r3, [r6, #0]
 8004c28:	9a01      	ldr	r2, [sp, #4]
 8004c2a:	43ab      	bics	r3, r5
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004c30:	f7fe fc74 	bl	800351c <HAL_GetTick>
 8004c34:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	6833      	ldr	r3, [r6, #0]
 8004c38:	9a01      	ldr	r2, [sp, #4]
 8004c3a:	402b      	ands	r3, r5
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d0c0      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c40:	f7fe fc6c 	bl	800351c <HAL_GetTick>
 8004c44:	4b3d      	ldr	r3, [pc, #244]	; (8004d3c <HAL_RCC_ClockConfig+0x194>)
 8004c46:	1bc0      	subs	r0, r0, r7
 8004c48:	4298      	cmp	r0, r3
 8004c4a:	d9f4      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8004c4c:	2003      	movs	r0, #3
 8004c4e:	e7b0      	b.n	8004bb2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c50:	20f0      	movs	r0, #240	; 0xf0
 8004c52:	4935      	ldr	r1, [pc, #212]	; (8004d28 <HAL_RCC_ClockConfig+0x180>)
 8004c54:	68cb      	ldr	r3, [r1, #12]
 8004c56:	4383      	bics	r3, r0
 8004c58:	68a0      	ldr	r0, [r4, #8]
 8004c5a:	4303      	orrs	r3, r0
 8004c5c:	60cb      	str	r3, [r1, #12]
 8004c5e:	e7b3      	b.n	8004bc8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c60:	4d31      	ldr	r5, [pc, #196]	; (8004d28 <HAL_RCC_ClockConfig+0x180>)
 8004c62:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c64:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c66:	2a02      	cmp	r2, #2
 8004c68:	d118      	bne.n	8004c9c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c6a:	039b      	lsls	r3, r3, #14
 8004c6c:	d5a0      	bpl.n	8004bb0 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6e:	2103      	movs	r1, #3
 8004c70:	68eb      	ldr	r3, [r5, #12]
 8004c72:	438b      	bics	r3, r1
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004c78:	f7fe fc50 	bl	800351c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c7c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004c7e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d118      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c84:	220c      	movs	r2, #12
 8004c86:	68eb      	ldr	r3, [r5, #12]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d09e      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8e:	f7fe fc45 	bl	800351c <HAL_GetTick>
 8004c92:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <HAL_RCC_ClockConfig+0x194>)
 8004c94:	1bc0      	subs	r0, r0, r7
 8004c96:	4298      	cmp	r0, r3
 8004c98:	d9f4      	bls.n	8004c84 <HAL_RCC_ClockConfig+0xdc>
 8004c9a:	e7d7      	b.n	8004c4c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c9c:	2a03      	cmp	r2, #3
 8004c9e:	d102      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	d4e4      	bmi.n	8004c6e <HAL_RCC_ClockConfig+0xc6>
 8004ca4:	e784      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ca6:	2a01      	cmp	r2, #1
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004caa:	075b      	lsls	r3, r3, #29
 8004cac:	d4df      	bmi.n	8004c6e <HAL_RCC_ClockConfig+0xc6>
 8004cae:	e77f      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cb0:	059b      	lsls	r3, r3, #22
 8004cb2:	d4dc      	bmi.n	8004c6e <HAL_RCC_ClockConfig+0xc6>
 8004cb4:	e77c      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cba:	220c      	movs	r2, #12
 8004cbc:	68eb      	ldr	r3, [r5, #12]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d083      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fe fc2a 	bl	800351c <HAL_GetTick>
 8004cc8:	4b1c      	ldr	r3, [pc, #112]	; (8004d3c <HAL_RCC_ClockConfig+0x194>)
 8004cca:	1bc0      	subs	r0, r0, r7
 8004ccc:	4298      	cmp	r0, r3
 8004cce:	d9f4      	bls.n	8004cba <HAL_RCC_ClockConfig+0x112>
 8004cd0:	e7bc      	b.n	8004c4c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d011      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cd6:	220c      	movs	r2, #12
 8004cd8:	68eb      	ldr	r3, [r5, #12]
 8004cda:	4213      	tst	r3, r2
 8004cdc:	d100      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x138>
 8004cde:	e775      	b.n	8004bcc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce0:	f7fe fc1c 	bl	800351c <HAL_GetTick>
 8004ce4:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <HAL_RCC_ClockConfig+0x194>)
 8004ce6:	1bc0      	subs	r0, r0, r7
 8004ce8:	4298      	cmp	r0, r3
 8004cea:	d9f4      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x12e>
 8004cec:	e7ae      	b.n	8004c4c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cee:	f7fe fc15 	bl	800351c <HAL_GetTick>
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_RCC_ClockConfig+0x194>)
 8004cf4:	1bc0      	subs	r0, r0, r7
 8004cf6:	4298      	cmp	r0, r3
 8004cf8:	d8a8      	bhi.n	8004c4c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cfa:	220c      	movs	r2, #12
 8004cfc:	68eb      	ldr	r3, [r5, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d1f4      	bne.n	8004cee <HAL_RCC_ClockConfig+0x146>
 8004d04:	e762      	b.n	8004bcc <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d06:	f7fe fc09 	bl	800351c <HAL_GetTick>
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <HAL_RCC_ClockConfig+0x194>)
 8004d0c:	1bc0      	subs	r0, r0, r7
 8004d0e:	4298      	cmp	r0, r3
 8004d10:	d800      	bhi.n	8004d14 <HAL_RCC_ClockConfig+0x16c>
 8004d12:	e767      	b.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
 8004d14:	e79a      	b.n	8004c4c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d16:	68eb      	ldr	r3, [r5, #12]
 8004d18:	4909      	ldr	r1, [pc, #36]	; (8004d40 <HAL_RCC_ClockConfig+0x198>)
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	68e1      	ldr	r1, [r4, #12]
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	60eb      	str	r3, [r5, #12]
 8004d22:	e768      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x4e>
 8004d24:	40022000 	.word	0x40022000
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	ffffc7ff 	.word	0xffffc7ff
 8004d30:	08006ce4 	.word	0x08006ce4
 8004d34:	2000001c 	.word	0x2000001c
 8004d38:	20000024 	.word	0x20000024
 8004d3c:	00001388 	.word	0x00001388
 8004d40:	fffff8ff 	.word	0xfffff8ff

08004d44 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d44:	6803      	ldr	r3, [r0, #0]
{
 8004d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d48:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d4a:	069b      	lsls	r3, r3, #26
 8004d4c:	d53c      	bpl.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004d50:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d52:	4c5a      	ldr	r4, [pc, #360]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004d54:	055b      	lsls	r3, r3, #21
 8004d56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004d58:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5a:	421a      	tst	r2, r3
 8004d5c:	d104      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d60:	4313      	orrs	r3, r2
 8004d62:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004d64:	2301      	movs	r3, #1
 8004d66:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d68:	2780      	movs	r7, #128	; 0x80
 8004d6a:	4e55      	ldr	r6, [pc, #340]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004d6c:	007f      	lsls	r7, r7, #1
 8004d6e:	6833      	ldr	r3, [r6, #0]
 8004d70:	423b      	tst	r3, r7
 8004d72:	d062      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d74:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d76:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d78:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d7a:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004d7c:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d7e:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d84:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004d86:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d88:	428a      	cmp	r2, r1
 8004d8a:	d167      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x118>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004d8c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004d8e:	0011      	movs	r1, r2
 8004d90:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004d92:	421a      	tst	r2, r3
 8004d94:	d16a      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d96:	6869      	ldr	r1, [r5, #4]
 8004d98:	23c0      	movs	r3, #192	; 0xc0
 8004d9a:	000a      	movs	r2, r1
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	401a      	ands	r2, r3
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d107      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	4847      	ldr	r0, [pc, #284]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004da8:	4003      	ands	r3, r0
 8004daa:	20c0      	movs	r0, #192	; 0xc0
 8004dac:	0380      	lsls	r0, r0, #14
 8004dae:	4001      	ands	r1, r0
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004db6:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004db8:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dba:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d103      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dc2:	4a41      	ldr	r2, [pc, #260]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	07da      	lsls	r2, r3, #31
 8004dcc:	d506      	bpl.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dce:	2003      	movs	r0, #3
 8004dd0:	493a      	ldr	r1, [pc, #232]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004dd2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004dd4:	4382      	bics	r2, r0
 8004dd6:	68a8      	ldr	r0, [r5, #8]
 8004dd8:	4302      	orrs	r2, r0
 8004dda:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ddc:	079a      	lsls	r2, r3, #30
 8004dde:	d506      	bpl.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004de0:	200c      	movs	r0, #12
 8004de2:	4936      	ldr	r1, [pc, #216]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004de4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004de6:	4382      	bics	r2, r0
 8004de8:	68e8      	ldr	r0, [r5, #12]
 8004dea:	4302      	orrs	r2, r0
 8004dec:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dee:	075a      	lsls	r2, r3, #29
 8004df0:	d506      	bpl.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004df2:	4932      	ldr	r1, [pc, #200]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004df4:	4835      	ldr	r0, [pc, #212]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004df6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004df8:	4002      	ands	r2, r0
 8004dfa:	6928      	ldr	r0, [r5, #16]
 8004dfc:	4302      	orrs	r2, r0
 8004dfe:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e00:	071a      	lsls	r2, r3, #28
 8004e02:	d506      	bpl.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e04:	492d      	ldr	r1, [pc, #180]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e06:	4832      	ldr	r0, [pc, #200]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004e08:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e0a:	4002      	ands	r2, r0
 8004e0c:	6968      	ldr	r0, [r5, #20]
 8004e0e:	4302      	orrs	r2, r0
 8004e10:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e12:	065a      	lsls	r2, r3, #25
 8004e14:	d506      	bpl.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e16:	4929      	ldr	r1, [pc, #164]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e18:	482e      	ldr	r0, [pc, #184]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e1a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e1c:	4002      	ands	r2, r0
 8004e1e:	69e8      	ldr	r0, [r5, #28]
 8004e20:	4302      	orrs	r2, r0
 8004e22:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004e24:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e26:	061b      	lsls	r3, r3, #24
 8004e28:	d517      	bpl.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004e2a:	4a24      	ldr	r2, [pc, #144]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e2c:	492a      	ldr	r1, [pc, #168]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004e2e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004e30:	400b      	ands	r3, r1
 8004e32:	69a9      	ldr	r1, [r5, #24]
 8004e34:	430b      	orrs	r3, r1
 8004e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e38:	e00f      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x116>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3a:	6833      	ldr	r3, [r6, #0]
 8004e3c:	433b      	orrs	r3, r7
 8004e3e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004e40:	f7fe fb6c 	bl	800351c <HAL_GetTick>
 8004e44:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e46:	6833      	ldr	r3, [r6, #0]
 8004e48:	423b      	tst	r3, r7
 8004e4a:	d193      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4c:	f7fe fb66 	bl	800351c <HAL_GetTick>
 8004e50:	9b01      	ldr	r3, [sp, #4]
 8004e52:	1ac0      	subs	r0, r0, r3
 8004e54:	2864      	cmp	r0, #100	; 0x64
 8004e56:	d9f6      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x102>
          return HAL_TIMEOUT;
 8004e58:	2003      	movs	r0, #3
}
 8004e5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004e5c:	429e      	cmp	r6, r3
 8004e5e:	d195      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e60:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8004e62:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e64:	0392      	lsls	r2, r2, #14
 8004e66:	d400      	bmi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x126>
 8004e68:	e790      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004e6a:	e7f6      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x116>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004e6c:	42b1      	cmp	r1, r6
 8004e6e:	d100      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8004e70:	e791      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	069b      	lsls	r3, r3, #26
 8004e76:	d400      	bmi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e78:	e78d      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e7a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e7c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e7e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004e80:	0312      	lsls	r2, r2, #12
 8004e82:	4302      	orrs	r2, r0
 8004e84:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e86:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e88:	4b14      	ldr	r3, [pc, #80]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x198>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8a:	4815      	ldr	r0, [pc, #84]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e8c:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8e:	4002      	ands	r2, r0
 8004e90:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004e92:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004e94:	05cb      	lsls	r3, r1, #23
 8004e96:	d400      	bmi.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004e98:	e77d      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8004e9a:	f7fe fb3f 	bl	800351c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e9e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004ea0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ea2:	00bf      	lsls	r7, r7, #2
 8004ea4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004ea6:	423b      	tst	r3, r7
 8004ea8:	d000      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004eaa:	e774      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eac:	f7fe fb36 	bl	800351c <HAL_GetTick>
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004eb2:	1b80      	subs	r0, r0, r6
 8004eb4:	4298      	cmp	r0, r3
 8004eb6:	d9f5      	bls.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004eb8:	e7ce      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	ffcfffff 	.word	0xffcfffff
 8004ec8:	efffffff 	.word	0xefffffff
 8004ecc:	fffff3ff 	.word	0xfffff3ff
 8004ed0:	ffffcfff 	.word	0xffffcfff
 8004ed4:	fbffffff 	.word	0xfbffffff
 8004ed8:	fff3ffff 	.word	0xfff3ffff
 8004edc:	fffcffff 	.word	0xfffcffff
 8004ee0:	fff7ffff 	.word	0xfff7ffff
 8004ee4:	00001388 	.word	0x00001388

08004ee8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eea:	001d      	movs	r5, r3
 8004eec:	0017      	movs	r7, r2
 8004eee:	b085      	sub	sp, #20
 8004ef0:	000e      	movs	r6, r1
 8004ef2:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ef4:	f7fe fb12 	bl	800351c <HAL_GetTick>
 8004ef8:	19ed      	adds	r5, r5, r7
 8004efa:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004efc:	f7fe fb0e 	bl	800351c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f00:	4b25      	ldr	r3, [pc, #148]	; (8004f98 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8004f02:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	015b      	lsls	r3, r3, #5
 8004f08:	0d1b      	lsrs	r3, r3, #20
 8004f0a:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f0c:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004f0e:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f10:	6893      	ldr	r3, [r2, #8]
 8004f12:	4033      	ands	r3, r6
 8004f14:	429e      	cmp	r6, r3
 8004f16:	d001      	beq.n	8004f1c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e032      	b.n	8004f82 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	1c7b      	adds	r3, r7, #1
 8004f1e:	d0f7      	beq.n	8004f10 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f20:	f7fe fafc 	bl	800351c <HAL_GetTick>
 8004f24:	9b01      	ldr	r3, [sp, #4]
 8004f26:	1ac0      	subs	r0, r0, r3
 8004f28:	42a8      	cmp	r0, r5
 8004f2a:	d32c      	bcc.n	8004f86 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f2c:	21e0      	movs	r1, #224	; 0xe0
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	438a      	bics	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f36:	2282      	movs	r2, #130	; 0x82
 8004f38:	6861      	ldr	r1, [r4, #4]
 8004f3a:	0052      	lsls	r2, r2, #1
 8004f3c:	4291      	cmp	r1, r2
 8004f3e:	d10c      	bne.n	8004f5a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	68a2      	ldr	r2, [r4, #8]
 8004f44:	0209      	lsls	r1, r1, #8
 8004f46:	428a      	cmp	r2, r1
 8004f48:	d003      	beq.n	8004f52 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f4a:	2180      	movs	r1, #128	; 0x80
 8004f4c:	00c9      	lsls	r1, r1, #3
 8004f4e:	428a      	cmp	r2, r1
 8004f50:	d103      	bne.n	8004f5a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8004f52:	2140      	movs	r1, #64	; 0x40
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	438a      	bics	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f5a:	2180      	movs	r1, #128	; 0x80
 8004f5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f5e:	0189      	lsls	r1, r1, #6
 8004f60:	428a      	cmp	r2, r1
 8004f62:	d106      	bne.n	8004f72 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	480d      	ldr	r0, [pc, #52]	; (8004f9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8004f68:	4001      	ands	r1, r0
 8004f6a:	6019      	str	r1, [r3, #0]
 8004f6c:	6819      	ldr	r1, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004f72:	0023      	movs	r3, r4
 8004f74:	2201      	movs	r2, #1
 8004f76:	3351      	adds	r3, #81	; 0x51
 8004f78:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004f7a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004f7c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004f7e:	3450      	adds	r4, #80	; 0x50
 8004f80:	7023      	strb	r3, [r4, #0]
}
 8004f82:	b005      	add	sp, #20
 8004f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004f86:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004f88:	1e5a      	subs	r2, r3, #1
 8004f8a:	4193      	sbcs	r3, r2
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	401d      	ands	r5, r3
      count--;
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	e7ba      	b.n	8004f0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	2000001c 	.word	0x2000001c
 8004f9c:	ffffdfff 	.word	0xffffdfff

08004fa0 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fa0:	4b16      	ldr	r3, [pc, #88]	; (8004ffc <SPI_EndRxTxTransaction+0x5c>)
{
 8004fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fa4:	0004      	movs	r4, r0
 8004fa6:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	4915      	ldr	r1, [pc, #84]	; (8005000 <SPI_EndRxTxTransaction+0x60>)
{
 8004fac:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fae:	f7fb f8c9 	bl	8000144 <__udivsi3>
 8004fb2:	23fa      	movs	r3, #250	; 0xfa
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4343      	muls	r3, r0
 8004fb8:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fba:	2382      	movs	r3, #130	; 0x82
 8004fbc:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fbe:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4299      	cmp	r1, r3
 8004fc4:	d10d      	bne.n	8004fe2 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc6:	0033      	movs	r3, r6
 8004fc8:	002a      	movs	r2, r5
 8004fca:	2180      	movs	r1, #128	; 0x80
 8004fcc:	0020      	movs	r0, r4
 8004fce:	f7ff ff8b 	bl	8004ee8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d00f      	beq.n	8004ff6 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd6:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004fd8:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8004fe0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8004fe2:	9b01      	ldr	r3, [sp, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <SPI_EndRxTxTransaction+0x56>
      count--;
 8004fe8:	9b01      	ldr	r3, [sp, #4]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4213      	tst	r3, r2
 8004ff4:	d1f5      	bne.n	8004fe2 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e7f2      	b.n	8004fe0 <SPI_EndRxTxTransaction+0x40>
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	2000001c 	.word	0x2000001c
 8005000:	016e3600 	.word	0x016e3600

08005004 <HAL_SPI_Init>:
{
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005008:	2001      	movs	r0, #1
  if (hspi == NULL)
 800500a:	2c00      	cmp	r4, #0
 800500c:	d054      	beq.n	80050b8 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800500e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d152      	bne.n	80050ba <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005014:	2282      	movs	r2, #130	; 0x82
 8005016:	6861      	ldr	r1, [r4, #4]
 8005018:	0052      	lsls	r2, r2, #1
 800501a:	4291      	cmp	r1, r2
 800501c:	d000      	beq.n	8005020 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800501e:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005020:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005022:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005024:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005026:	3551      	adds	r5, #81	; 0x51
 8005028:	782b      	ldrb	r3, [r5, #0]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8005030:	0023      	movs	r3, r4
 8005032:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8005034:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005036:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8005038:	f7fe f974 	bl	8003324 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800503c:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 800503e:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8005040:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005042:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005044:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8005046:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005048:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800504a:	4393      	bics	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800504e:	2382      	movs	r3, #130	; 0x82
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	4033      	ands	r3, r6
 8005054:	2684      	movs	r6, #132	; 0x84
 8005056:	0236      	lsls	r6, r6, #8
 8005058:	403e      	ands	r6, r7
 800505a:	4333      	orrs	r3, r6
 800505c:	2680      	movs	r6, #128	; 0x80
 800505e:	68e7      	ldr	r7, [r4, #12]
 8005060:	0136      	lsls	r6, r6, #4
 8005062:	403e      	ands	r6, r7
 8005064:	4333      	orrs	r3, r6
 8005066:	6926      	ldr	r6, [r4, #16]
 8005068:	69a2      	ldr	r2, [r4, #24]
 800506a:	4030      	ands	r0, r6
 800506c:	2601      	movs	r6, #1
 800506e:	4303      	orrs	r3, r0
 8005070:	6960      	ldr	r0, [r4, #20]
 8005072:	69e7      	ldr	r7, [r4, #28]
 8005074:	4030      	ands	r0, r6
 8005076:	4303      	orrs	r3, r0
 8005078:	2080      	movs	r0, #128	; 0x80
 800507a:	0080      	lsls	r0, r0, #2
 800507c:	4010      	ands	r0, r2
 800507e:	4303      	orrs	r3, r0
 8005080:	2038      	movs	r0, #56	; 0x38
 8005082:	4038      	ands	r0, r7
 8005084:	4303      	orrs	r3, r0
 8005086:	2080      	movs	r0, #128	; 0x80
 8005088:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800508a:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800508c:	4038      	ands	r0, r7
 800508e:	4303      	orrs	r3, r0
 8005090:	2080      	movs	r0, #128	; 0x80
 8005092:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005094:	0180      	lsls	r0, r0, #6
 8005096:	4038      	ands	r0, r7
 8005098:	4303      	orrs	r3, r0
 800509a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800509c:	2304      	movs	r3, #4
 800509e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80050a0:	401a      	ands	r2, r3
 80050a2:	330c      	adds	r3, #12
 80050a4:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050a6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050a8:	431a      	orrs	r2, r3
 80050aa:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ac:	69cb      	ldr	r3, [r1, #28]
 80050ae:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <HAL_SPI_Init+0xc0>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050b6:	702e      	strb	r6, [r5, #0]
}
 80050b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050ba:	2300      	movs	r3, #0
 80050bc:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050be:	6163      	str	r3, [r4, #20]
 80050c0:	e7ae      	b.n	8005020 <HAL_SPI_Init+0x1c>
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	fffff7ff 	.word	0xfffff7ff

080050c8 <HAL_SPI_Transmit_DMA>:
{
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80050ca:	0006      	movs	r6, r0
 80050cc:	3650      	adds	r6, #80	; 0x50
 80050ce:	7833      	ldrb	r3, [r6, #0]
{
 80050d0:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80050d2:	2502      	movs	r5, #2
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d03e      	beq.n	8005156 <HAL_SPI_Transmit_DMA+0x8e>
 80050d8:	2301      	movs	r3, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80050da:	0007      	movs	r7, r0
  __HAL_LOCK(hspi);
 80050dc:	7033      	strb	r3, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80050de:	3751      	adds	r7, #81	; 0x51
 80050e0:	783b      	ldrb	r3, [r7, #0]
 80050e2:	b2dd      	uxtb	r5, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d14a      	bne.n	800517e <HAL_SPI_Transmit_DMA+0xb6>
  if ((pData == NULL) || (Size == 0U))
 80050e8:	2900      	cmp	r1, #0
 80050ea:	d032      	beq.n	8005152 <HAL_SPI_Transmit_DMA+0x8a>
 80050ec:	2a00      	cmp	r2, #0
 80050ee:	d030      	beq.n	8005152 <HAL_SPI_Transmit_DMA+0x8a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050f0:	3302      	adds	r3, #2
 80050f2:	703b      	strb	r3, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050f8:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050fa:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->TxISR       = NULL;
 80050fc:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050fe:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005100:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005102:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005104:	2380      	movs	r3, #128	; 0x80
  hspi->TxXferSize  = Size;
 8005106:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005108:	6301      	str	r1, [r0, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 800510a:	6802      	ldr	r2, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800510c:	6880      	ldr	r0, [r0, #8]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	4298      	cmp	r0, r3
 8005112:	d108      	bne.n	8005126 <HAL_SPI_Transmit_DMA+0x5e>
    __HAL_SPI_DISABLE(hspi);
 8005114:	2040      	movs	r0, #64	; 0x40
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	4383      	bics	r3, r0
 800511a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	6810      	ldr	r0, [r2, #0]
 8005120:	01db      	lsls	r3, r3, #7
 8005122:	4303      	orrs	r3, r0
 8005124:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005126:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005128:	4b16      	ldr	r3, [pc, #88]	; (8005184 <HAL_SPI_Transmit_DMA+0xbc>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800512a:	320c      	adds	r2, #12
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800512c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800512e:	4b16      	ldr	r3, [pc, #88]	; (8005188 <HAL_SPI_Transmit_DMA+0xc0>)
 8005130:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005132:	4b16      	ldr	r3, [pc, #88]	; (800518c <HAL_SPI_Transmit_DMA+0xc4>)
 8005134:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 800513a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800513c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800513e:	f7fe fcad 	bl	8003a9c <HAL_DMA_Start_IT>
 8005142:	2800      	cmp	r0, #0
 8005144:	d009      	beq.n	800515a <HAL_SPI_Transmit_DMA+0x92>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005146:	2310      	movs	r3, #16
 8005148:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800514a:	4313      	orrs	r3, r2
 800514c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800514e:	2301      	movs	r3, #1
 8005150:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 8005152:	2300      	movs	r3, #0
 8005154:	7033      	strb	r3, [r6, #0]
}
 8005156:	0028      	movs	r0, r5
 8005158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800515a:	2240      	movs	r2, #64	; 0x40
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	4211      	tst	r1, r2
 8005162:	d102      	bne.n	800516a <HAL_SPI_Transmit_DMA+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800516a:	2220      	movs	r2, #32
 800516c:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800516e:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005174:	2202      	movs	r2, #2
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
 800517c:	e7e9      	b.n	8005152 <HAL_SPI_Transmit_DMA+0x8a>
    errorcode = HAL_BUSY;
 800517e:	2502      	movs	r5, #2
 8005180:	e7e7      	b.n	8005152 <HAL_SPI_Transmit_DMA+0x8a>
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	08005195 	.word	0x08005195
 8005188:	080051c5 	.word	0x080051c5
 800518c:	080051a1 	.word	0x080051a1

08005190 <HAL_SPI_TxCpltCallback>:
 8005190:	4770      	bx	lr

08005192 <HAL_SPI_TxHalfCpltCallback>:
 8005192:	4770      	bx	lr

08005194 <SPI_DMAHalfTransmitCplt>:
{
 8005194:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005196:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005198:	f7ff fffb 	bl	8005192 <HAL_SPI_TxHalfCpltCallback>
}
 800519c:	bd10      	pop	{r4, pc}

0800519e <HAL_SPI_ErrorCallback>:
 800519e:	4770      	bx	lr

080051a0 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051a0:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80051a4:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051a6:	6802      	ldr	r2, [r0, #0]
 80051a8:	6853      	ldr	r3, [r2, #4]
 80051aa:	438b      	bics	r3, r1
 80051ac:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051ae:	2310      	movs	r3, #16
 80051b0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80051b2:	4313      	orrs	r3, r2
 80051b4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80051b6:	0003      	movs	r3, r0
 80051b8:	2201      	movs	r2, #1
 80051ba:	3351      	adds	r3, #81	; 0x51
 80051bc:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 80051be:	f7ff ffee 	bl	800519e <HAL_SPI_ErrorCallback>
}
 80051c2:	bd10      	pop	{r4, pc}

080051c4 <SPI_DMATransmitCplt>:
{
 80051c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051c6:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051c8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80051ca:	f7fe f9a7 	bl	800351c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80051ce:	682b      	ldr	r3, [r5, #0]
 80051d0:	2520      	movs	r5, #32
 80051d2:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80051d4:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80051d6:	422b      	tst	r3, r5
 80051d8:	d127      	bne.n	800522a <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80051da:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	43a9      	bics	r1, r5
 80051e2:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80051e4:	6859      	ldr	r1, [r3, #4]
 80051e6:	4381      	bics	r1, r0
 80051e8:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051ea:	0020      	movs	r0, r4
 80051ec:	2164      	movs	r1, #100	; 0x64
 80051ee:	f7ff fed7 	bl	8004fa0 <SPI_EndRxTxTransaction>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d002      	beq.n	80051fc <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051f8:	431d      	orrs	r5, r3
 80051fa:	6565      	str	r5, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051fc:	68a3      	ldr	r3, [r4, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	9201      	str	r2, [sp, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005214:	0023      	movs	r3, r4
 8005216:	2201      	movs	r2, #1
 8005218:	3351      	adds	r3, #81	; 0x51
 800521a:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800521c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8005222:	0020      	movs	r0, r4
 8005224:	f7ff ffbb 	bl	800519e <HAL_SPI_ErrorCallback>
}
 8005228:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 800522a:	0020      	movs	r0, r4
 800522c:	f7ff ffb0 	bl	8005190 <HAL_SPI_TxCpltCallback>
 8005230:	e7fa      	b.n	8005228 <SPI_DMATransmitCplt+0x64>
	...

08005234 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005234:	2280      	movs	r2, #128	; 0x80
{
 8005236:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8005238:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523a:	05d2      	lsls	r2, r2, #23
 800523c:	4290      	cmp	r0, r2
 800523e:	d005      	beq.n	800524c <TIM_Base_SetConfig+0x18>
 8005240:	4c10      	ldr	r4, [pc, #64]	; (8005284 <TIM_Base_SetConfig+0x50>)
 8005242:	42a0      	cmp	r0, r4
 8005244:	d002      	beq.n	800524c <TIM_Base_SetConfig+0x18>
 8005246:	4c10      	ldr	r4, [pc, #64]	; (8005288 <TIM_Base_SetConfig+0x54>)
 8005248:	42a0      	cmp	r0, r4
 800524a:	d10f      	bne.n	800526c <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800524c:	2470      	movs	r4, #112	; 0x70
 800524e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8005250:	684c      	ldr	r4, [r1, #4]
 8005252:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005254:	4290      	cmp	r0, r2
 8005256:	d005      	beq.n	8005264 <TIM_Base_SetConfig+0x30>
 8005258:	4a0a      	ldr	r2, [pc, #40]	; (8005284 <TIM_Base_SetConfig+0x50>)
 800525a:	4290      	cmp	r0, r2
 800525c:	d002      	beq.n	8005264 <TIM_Base_SetConfig+0x30>
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <TIM_Base_SetConfig+0x54>)
 8005260:	4290      	cmp	r0, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005264:	4a09      	ldr	r2, [pc, #36]	; (800528c <TIM_Base_SetConfig+0x58>)
 8005266:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005268:	68ca      	ldr	r2, [r1, #12]
 800526a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	4393      	bics	r3, r2
 8005270:	690a      	ldr	r2, [r1, #16]
 8005272:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005274:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005276:	688b      	ldr	r3, [r1, #8]
 8005278:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800527a:	680b      	ldr	r3, [r1, #0]
 800527c:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800527e:	2301      	movs	r3, #1
 8005280:	6143      	str	r3, [r0, #20]
}
 8005282:	bd10      	pop	{r4, pc}
 8005284:	40010800 	.word	0x40010800
 8005288:	40011400 	.word	0x40011400
 800528c:	fffffcff 	.word	0xfffffcff

08005290 <HAL_TIM_Base_Init>:
{
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005294:	2001      	movs	r0, #1
  if (htim == NULL)
 8005296:	2c00      	cmp	r4, #0
 8005298:	d01d      	beq.n	80052d6 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	0025      	movs	r5, r4
 800529c:	3539      	adds	r5, #57	; 0x39
 800529e:	782b      	ldrb	r3, [r5, #0]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d105      	bne.n	80052b2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80052a6:	0023      	movs	r3, r4
 80052a8:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80052aa:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80052ac:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80052ae:	f7fe f87f 	bl	80033b0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80052b2:	2302      	movs	r3, #2
 80052b4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b6:	6820      	ldr	r0, [r4, #0]
 80052b8:	1d21      	adds	r1, r4, #4
 80052ba:	f7ff ffbb 	bl	8005234 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052be:	0022      	movs	r2, r4
 80052c0:	2301      	movs	r3, #1
  return HAL_OK;
 80052c2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c4:	323e      	adds	r2, #62	; 0x3e
 80052c6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	343d      	adds	r4, #61	; 0x3d
 80052ca:	3a04      	subs	r2, #4
 80052cc:	7013      	strb	r3, [r2, #0]
 80052ce:	7053      	strb	r3, [r2, #1]
 80052d0:	7093      	strb	r3, [r2, #2]
 80052d2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	702b      	strb	r3, [r5, #0]
}
 80052d6:	bd70      	pop	{r4, r5, r6, pc}

080052d8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80052d8:	0002      	movs	r2, r0
{
 80052da:	0003      	movs	r3, r0
    return HAL_ERROR;
 80052dc:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80052de:	3239      	adds	r2, #57	; 0x39
 80052e0:	7811      	ldrb	r1, [r2, #0]
 80052e2:	4281      	cmp	r1, r0
 80052e4:	d119      	bne.n	800531a <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80052e6:	2102      	movs	r1, #2
 80052e8:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	4302      	orrs	r2, r0
 80052f0:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f2:	2280      	movs	r2, #128	; 0x80
 80052f4:	05d2      	lsls	r2, r2, #23
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d005      	beq.n	8005306 <HAL_TIM_Base_Start_IT+0x2e>
 80052fa:	4a0b      	ldr	r2, [pc, #44]	; (8005328 <HAL_TIM_Base_Start_IT+0x50>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d002      	beq.n	8005306 <HAL_TIM_Base_Start_IT+0x2e>
 8005300:	4a0a      	ldr	r2, [pc, #40]	; (800532c <HAL_TIM_Base_Start_IT+0x54>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d10a      	bne.n	800531c <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005306:	2107      	movs	r1, #7
 8005308:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 800530a:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530e:	2a06      	cmp	r2, #6
 8005310:	d003      	beq.n	800531a <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 8005312:	2201      	movs	r2, #1
 8005314:	6819      	ldr	r1, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
}
 800531a:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4310      	orrs	r0, r2
 8005320:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8005322:	2000      	movs	r0, #0
 8005324:	e7f9      	b.n	800531a <HAL_TIM_Base_Start_IT+0x42>
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	40010800 	.word	0x40010800
 800532c:	40011400 	.word	0x40011400

08005330 <HAL_TIM_ConfigClockSource>:
{
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005332:	0005      	movs	r5, r0
 8005334:	2202      	movs	r2, #2
 8005336:	3538      	adds	r5, #56	; 0x38
 8005338:	782c      	ldrb	r4, [r5, #0]
{
 800533a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800533c:	0010      	movs	r0, r2
 800533e:	2c01      	cmp	r4, #1
 8005340:	d01d      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8005342:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8005344:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005346:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8005348:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800534a:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 800534c:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800534e:	484c      	ldr	r0, [pc, #304]	; (8005480 <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 8005350:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005352:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8005354:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8005356:	680a      	ldr	r2, [r1, #0]
 8005358:	2a60      	cmp	r2, #96	; 0x60
 800535a:	d05f      	beq.n	800541c <HAL_TIM_ConfigClockSource+0xec>
 800535c:	d832      	bhi.n	80053c4 <HAL_TIM_ConfigClockSource+0x94>
 800535e:	2a40      	cmp	r2, #64	; 0x40
 8005360:	d100      	bne.n	8005364 <HAL_TIM_ConfigClockSource+0x34>
 8005362:	e074      	b.n	800544e <HAL_TIM_ConfigClockSource+0x11e>
 8005364:	d814      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x60>
 8005366:	2a20      	cmp	r2, #32
 8005368:	d00c      	beq.n	8005384 <HAL_TIM_ConfigClockSource+0x54>
 800536a:	d809      	bhi.n	8005380 <HAL_TIM_ConfigClockSource+0x50>
 800536c:	2110      	movs	r1, #16
 800536e:	0010      	movs	r0, r2
 8005370:	4388      	bics	r0, r1
 8005372:	d007      	beq.n	8005384 <HAL_TIM_ConfigClockSource+0x54>
 8005374:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8005376:	2301      	movs	r3, #1
 8005378:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 800537a:	2300      	movs	r3, #0
 800537c:	702b      	strb	r3, [r5, #0]
}
 800537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8005380:	2a30      	cmp	r2, #48	; 0x30
 8005382:	d1f7      	bne.n	8005374 <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005384:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8005386:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005388:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800538a:	430a      	orrs	r2, r1
 800538c:	2107      	movs	r1, #7
 800538e:	e032      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8005390:	2a50      	cmp	r2, #80	; 0x50
 8005392:	d1ef      	bne.n	8005374 <HAL_TIM_ConfigClockSource+0x44>
  tmpccer = TIMx->CCER;
 8005394:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005396:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005398:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539a:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800539c:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800539e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a4:	43a2      	bics	r2, r4
 80053a6:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a8:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053aa:	210a      	movs	r1, #10
 80053ac:	438f      	bics	r7, r1
 80053ae:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b0:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 80053b2:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80053b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b6:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b8:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80053ba:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053bc:	438a      	bics	r2, r1
 80053be:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053c0:	2257      	movs	r2, #87	; 0x57
 80053c2:	e018      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80053c4:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 80053c8:	017f      	lsls	r7, r7, #5
 80053ca:	42ba      	cmp	r2, r7
 80053cc:	d0d3      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x46>
 80053ce:	2080      	movs	r0, #128	; 0x80
 80053d0:	0180      	lsls	r0, r0, #6
 80053d2:	4282      	cmp	r2, r0
 80053d4:	d013      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0xce>
 80053d6:	0020      	movs	r0, r4
 80053d8:	2a70      	cmp	r2, #112	; 0x70
 80053da:	d1cc      	bne.n	8005376 <HAL_TIM_ConfigClockSource+0x46>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053dc:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053de:	4829      	ldr	r0, [pc, #164]	; (8005484 <HAL_TIM_ConfigClockSource+0x154>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e0:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e2:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e4:	688a      	ldr	r2, [r1, #8]
 80053e6:	68c9      	ldr	r1, [r1, #12]
 80053e8:	4322      	orrs	r2, r4
 80053ea:	0209      	lsls	r1, r1, #8
 80053ec:	430a      	orrs	r2, r1
 80053ee:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f0:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f2:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80053f4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f6:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80053fa:	609a      	str	r2, [r3, #8]
}
 80053fc:	e7bb      	b.n	8005376 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 80053fe:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005400:	4820      	ldr	r0, [pc, #128]	; (8005484 <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005402:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005404:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005406:	688a      	ldr	r2, [r1, #8]
 8005408:	68c9      	ldr	r1, [r1, #12]
 800540a:	4322      	orrs	r2, r4
 800540c:	0209      	lsls	r1, r1, #8
 800540e:	430a      	orrs	r2, r1
 8005410:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8005412:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005414:	2280      	movs	r2, #128	; 0x80
 8005416:	6899      	ldr	r1, [r3, #8]
 8005418:	01d2      	lsls	r2, r2, #7
 800541a:	e7ec      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800541c:	6848      	ldr	r0, [r1, #4]
 800541e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005420:	2110      	movs	r1, #16
 8005422:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005424:	4c18      	ldr	r4, [pc, #96]	; (8005488 <HAL_TIM_ConfigClockSource+0x158>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005426:	438a      	bics	r2, r1
 8005428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800542c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800542e:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005430:	24a0      	movs	r4, #160	; 0xa0
 8005432:	43a2      	bics	r2, r4
 8005434:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005436:	033f      	lsls	r7, r7, #12
 8005438:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 800543a:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800543c:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 800543e:	0102      	lsls	r2, r0, #4
 8005440:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8005442:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8005444:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005446:	438a      	bics	r2, r1
 8005448:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800544a:	2267      	movs	r2, #103	; 0x67
 800544c:	e7d3      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0xc6>
  tmpccer = TIMx->CCER;
 800544e:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005450:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005454:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005456:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005458:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800545e:	43a2      	bics	r2, r4
 8005460:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005462:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005464:	210a      	movs	r1, #10
 8005466:	438f      	bics	r7, r1
 8005468:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800546a:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 800546c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800546e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005470:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005472:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8005474:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005476:	438a      	bics	r2, r1
 8005478:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800547a:	2247      	movs	r2, #71	; 0x47
 800547c:	e7bb      	b.n	80053f6 <HAL_TIM_ConfigClockSource+0xc6>
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	ffff0088 	.word	0xffff0088
 8005484:	ffff00ff 	.word	0xffff00ff
 8005488:	ffff0fff 	.word	0xffff0fff

0800548c <HAL_TIM_OC_DelayElapsedCallback>:
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_IC_CaptureCallback>:
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005490:	4770      	bx	lr

08005492 <HAL_TIM_TriggerCallback>:
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005494:	2202      	movs	r2, #2
 8005496:	6803      	ldr	r3, [r0, #0]
{
 8005498:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800549a:	6919      	ldr	r1, [r3, #16]
{
 800549c:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800549e:	4211      	tst	r1, r2
 80054a0:	d00d      	beq.n	80054be <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054a2:	68d9      	ldr	r1, [r3, #12]
 80054a4:	4211      	tst	r1, r2
 80054a6:	d00a      	beq.n	80054be <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054a8:	3a05      	subs	r2, #5
 80054aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ac:	3204      	adds	r2, #4
 80054ae:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	079b      	lsls	r3, r3, #30
 80054b4:	d05e      	beq.n	8005574 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	f7ff ffea 	bl	800548e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	2300      	movs	r3, #0
 80054bc:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054be:	2204      	movs	r2, #4
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	6919      	ldr	r1, [r3, #16]
 80054c4:	4211      	tst	r1, r2
 80054c6:	d010      	beq.n	80054ea <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054c8:	68d9      	ldr	r1, [r3, #12]
 80054ca:	4211      	tst	r1, r2
 80054cc:	d00d      	beq.n	80054ea <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054ce:	3a09      	subs	r2, #9
 80054d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054d2:	3207      	adds	r2, #7
 80054d4:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	23c0      	movs	r3, #192	; 0xc0
 80054da:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80054dc:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054de:	421a      	tst	r2, r3
 80054e0:	d04e      	beq.n	8005580 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	f7ff ffd4 	bl	800548e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	2300      	movs	r3, #0
 80054e8:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054ea:	2208      	movs	r2, #8
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	6919      	ldr	r1, [r3, #16]
 80054f0:	4211      	tst	r1, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054f4:	68d9      	ldr	r1, [r3, #12]
 80054f6:	4211      	tst	r1, r2
 80054f8:	d00b      	beq.n	8005512 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054fa:	3a11      	subs	r2, #17
 80054fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fe:	320d      	adds	r2, #13
 8005500:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005502:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005504:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005506:	079b      	lsls	r3, r3, #30
 8005508:	d040      	beq.n	800558c <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 800550a:	f7ff ffc0 	bl	800548e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	2300      	movs	r3, #0
 8005510:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005512:	2210      	movs	r2, #16
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	6919      	ldr	r1, [r3, #16]
 8005518:	4211      	tst	r1, r2
 800551a:	d010      	beq.n	800553e <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800551c:	68d9      	ldr	r1, [r3, #12]
 800551e:	4211      	tst	r1, r2
 8005520:	d00d      	beq.n	800553e <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005522:	3a21      	subs	r2, #33	; 0x21
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005526:	3219      	adds	r2, #25
 8005528:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	23c0      	movs	r3, #192	; 0xc0
 800552e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8005530:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005532:	421a      	tst	r2, r3
 8005534:	d030      	beq.n	8005598 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8005536:	f7ff ffaa 	bl	800548e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	2300      	movs	r3, #0
 800553c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800553e:	2201      	movs	r2, #1
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	6919      	ldr	r1, [r3, #16]
 8005544:	4211      	tst	r1, r2
 8005546:	d007      	beq.n	8005558 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005548:	68d9      	ldr	r1, [r3, #12]
 800554a:	4211      	tst	r1, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800554e:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8005550:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005552:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005554:	f7fb f974 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005558:	2240      	movs	r2, #64	; 0x40
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	6919      	ldr	r1, [r3, #16]
 800555e:	4211      	tst	r1, r2
 8005560:	d007      	beq.n	8005572 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005562:	68d9      	ldr	r1, [r3, #12]
 8005564:	4211      	tst	r1, r2
 8005566:	d004      	beq.n	8005572 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005568:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 800556a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800556c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800556e:	f7ff ff90 	bl	8005492 <HAL_TIM_TriggerCallback>
}
 8005572:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005574:	f7ff ff8a 	bl	800548c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	0020      	movs	r0, r4
 800557a:	f7ff ff89 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
 800557e:	e79c      	b.n	80054ba <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005580:	f7ff ff84 	bl	800548c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	0020      	movs	r0, r4
 8005586:	f7ff ff83 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
 800558a:	e7ac      	b.n	80054e6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558c:	f7ff ff7e 	bl	800548c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	0020      	movs	r0, r4
 8005592:	f7ff ff7d 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
 8005596:	e7ba      	b.n	800550e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005598:	f7ff ff78 	bl	800548c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	0020      	movs	r0, r4
 800559e:	f7ff ff77 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
 80055a2:	e7ca      	b.n	800553a <HAL_TIM_IRQHandler+0xa6>

080055a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	0004      	movs	r4, r0
 80055a8:	2202      	movs	r2, #2
 80055aa:	3438      	adds	r4, #56	; 0x38
 80055ac:	7825      	ldrb	r5, [r4, #0]
{
 80055ae:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80055b0:	0010      	movs	r0, r2
 80055b2:	2d01      	cmp	r5, #1
 80055b4:	d01d      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b6:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b8:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80055ba:	3539      	adds	r5, #57	; 0x39
 80055bc:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80055c2:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c4:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055c6:	680e      	ldr	r6, [r1, #0]
 80055c8:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ca:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055cc:	2080      	movs	r0, #128	; 0x80
 80055ce:	05c0      	lsls	r0, r0, #23
 80055d0:	4283      	cmp	r3, r0
 80055d2:	d005      	beq.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80055d4:	4807      	ldr	r0, [pc, #28]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80055d6:	4283      	cmp	r3, r0
 80055d8:	d002      	beq.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80055da:	4807      	ldr	r0, [pc, #28]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80055dc:	4283      	cmp	r3, r0
 80055de:	d104      	bne.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e0:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055e2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e4:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055e6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ea:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80055ec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80055ee:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80055f0:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	40010800 	.word	0x40010800
 80055f8:	40011400 	.word	0x40011400

080055fc <calloc>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	4b03      	ldr	r3, [pc, #12]	; (800560c <calloc+0x10>)
 8005600:	000a      	movs	r2, r1
 8005602:	0001      	movs	r1, r0
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	f000 f85b 	bl	80056c0 <_calloc_r>
 800560a:	bd10      	pop	{r4, pc}
 800560c:	20000028 	.word	0x20000028

08005610 <__errno>:
 8005610:	4b01      	ldr	r3, [pc, #4]	; (8005618 <__errno+0x8>)
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	4770      	bx	lr
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	20000028 	.word	0x20000028

0800561c <__libc_init_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	2600      	movs	r6, #0
 8005620:	4d0c      	ldr	r5, [pc, #48]	; (8005654 <__libc_init_array+0x38>)
 8005622:	4c0d      	ldr	r4, [pc, #52]	; (8005658 <__libc_init_array+0x3c>)
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	42a6      	cmp	r6, r4
 800562a:	d109      	bne.n	8005640 <__libc_init_array+0x24>
 800562c:	2600      	movs	r6, #0
 800562e:	f000 fcbf 	bl	8005fb0 <_init>
 8005632:	4d0a      	ldr	r5, [pc, #40]	; (800565c <__libc_init_array+0x40>)
 8005634:	4c0a      	ldr	r4, [pc, #40]	; (8005660 <__libc_init_array+0x44>)
 8005636:	1b64      	subs	r4, r4, r5
 8005638:	10a4      	asrs	r4, r4, #2
 800563a:	42a6      	cmp	r6, r4
 800563c:	d105      	bne.n	800564a <__libc_init_array+0x2e>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	00b3      	lsls	r3, r6, #2
 8005642:	58eb      	ldr	r3, [r5, r3]
 8005644:	4798      	blx	r3
 8005646:	3601      	adds	r6, #1
 8005648:	e7ee      	b.n	8005628 <__libc_init_array+0xc>
 800564a:	00b3      	lsls	r3, r6, #2
 800564c:	58eb      	ldr	r3, [r5, r3]
 800564e:	4798      	blx	r3
 8005650:	3601      	adds	r6, #1
 8005652:	e7f2      	b.n	800563a <__libc_init_array+0x1e>
 8005654:	08006d38 	.word	0x08006d38
 8005658:	08006d38 	.word	0x08006d38
 800565c:	08006d38 	.word	0x08006d38
 8005660:	08006d3c 	.word	0x08006d3c

08005664 <free>:
 8005664:	b510      	push	{r4, lr}
 8005666:	4b03      	ldr	r3, [pc, #12]	; (8005674 <free+0x10>)
 8005668:	0001      	movs	r1, r0
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	f000 f854 	bl	8005718 <_free_r>
 8005670:	bd10      	pop	{r4, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	20000028 	.word	0x20000028

08005678 <memcpy>:
 8005678:	2300      	movs	r3, #0
 800567a:	b510      	push	{r4, lr}
 800567c:	429a      	cmp	r2, r3
 800567e:	d100      	bne.n	8005682 <memcpy+0xa>
 8005680:	bd10      	pop	{r4, pc}
 8005682:	5ccc      	ldrb	r4, [r1, r3]
 8005684:	54c4      	strb	r4, [r0, r3]
 8005686:	3301      	adds	r3, #1
 8005688:	e7f8      	b.n	800567c <memcpy+0x4>

0800568a <memmove>:
 800568a:	b510      	push	{r4, lr}
 800568c:	4288      	cmp	r0, r1
 800568e:	d902      	bls.n	8005696 <memmove+0xc>
 8005690:	188b      	adds	r3, r1, r2
 8005692:	4298      	cmp	r0, r3
 8005694:	d303      	bcc.n	800569e <memmove+0x14>
 8005696:	2300      	movs	r3, #0
 8005698:	e007      	b.n	80056aa <memmove+0x20>
 800569a:	5c8b      	ldrb	r3, [r1, r2]
 800569c:	5483      	strb	r3, [r0, r2]
 800569e:	3a01      	subs	r2, #1
 80056a0:	d2fb      	bcs.n	800569a <memmove+0x10>
 80056a2:	bd10      	pop	{r4, pc}
 80056a4:	5ccc      	ldrb	r4, [r1, r3]
 80056a6:	54c4      	strb	r4, [r0, r3]
 80056a8:	3301      	adds	r3, #1
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d1fa      	bne.n	80056a4 <memmove+0x1a>
 80056ae:	e7f8      	b.n	80056a2 <memmove+0x18>

080056b0 <memset>:
 80056b0:	0003      	movs	r3, r0
 80056b2:	1882      	adds	r2, r0, r2
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d100      	bne.n	80056ba <memset+0xa>
 80056b8:	4770      	bx	lr
 80056ba:	7019      	strb	r1, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	e7f9      	b.n	80056b4 <memset+0x4>

080056c0 <_calloc_r>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	0c13      	lsrs	r3, r2, #16
 80056c4:	0c0d      	lsrs	r5, r1, #16
 80056c6:	d11e      	bne.n	8005706 <_calloc_r+0x46>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10c      	bne.n	80056e6 <_calloc_r+0x26>
 80056cc:	b289      	uxth	r1, r1
 80056ce:	b294      	uxth	r4, r2
 80056d0:	434c      	muls	r4, r1
 80056d2:	0021      	movs	r1, r4
 80056d4:	f000 f88c 	bl	80057f0 <_malloc_r>
 80056d8:	1e05      	subs	r5, r0, #0
 80056da:	d01b      	beq.n	8005714 <_calloc_r+0x54>
 80056dc:	0022      	movs	r2, r4
 80056de:	2100      	movs	r1, #0
 80056e0:	f7ff ffe6 	bl	80056b0 <memset>
 80056e4:	e016      	b.n	8005714 <_calloc_r+0x54>
 80056e6:	1c1d      	adds	r5, r3, #0
 80056e8:	1c0b      	adds	r3, r1, #0
 80056ea:	b292      	uxth	r2, r2
 80056ec:	b289      	uxth	r1, r1
 80056ee:	b29c      	uxth	r4, r3
 80056f0:	4351      	muls	r1, r2
 80056f2:	b2ab      	uxth	r3, r5
 80056f4:	4363      	muls	r3, r4
 80056f6:	0c0c      	lsrs	r4, r1, #16
 80056f8:	191c      	adds	r4, r3, r4
 80056fa:	0c22      	lsrs	r2, r4, #16
 80056fc:	d107      	bne.n	800570e <_calloc_r+0x4e>
 80056fe:	0424      	lsls	r4, r4, #16
 8005700:	b289      	uxth	r1, r1
 8005702:	430c      	orrs	r4, r1
 8005704:	e7e5      	b.n	80056d2 <_calloc_r+0x12>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <_calloc_r+0x4e>
 800570a:	1c13      	adds	r3, r2, #0
 800570c:	e7ed      	b.n	80056ea <_calloc_r+0x2a>
 800570e:	230c      	movs	r3, #12
 8005710:	2500      	movs	r5, #0
 8005712:	6003      	str	r3, [r0, #0]
 8005714:	0028      	movs	r0, r5
 8005716:	bd70      	pop	{r4, r5, r6, pc}

08005718 <_free_r>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	0005      	movs	r5, r0
 800571c:	2900      	cmp	r1, #0
 800571e:	d010      	beq.n	8005742 <_free_r+0x2a>
 8005720:	1f0c      	subs	r4, r1, #4
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	da00      	bge.n	800572a <_free_r+0x12>
 8005728:	18e4      	adds	r4, r4, r3
 800572a:	0028      	movs	r0, r5
 800572c:	f000 f908 	bl	8005940 <__malloc_lock>
 8005730:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <_free_r+0x90>)
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <_free_r+0x2c>
 8005738:	6063      	str	r3, [r4, #4]
 800573a:	6014      	str	r4, [r2, #0]
 800573c:	0028      	movs	r0, r5
 800573e:	f000 f907 	bl	8005950 <__malloc_unlock>
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	42a3      	cmp	r3, r4
 8005746:	d908      	bls.n	800575a <_free_r+0x42>
 8005748:	6821      	ldr	r1, [r4, #0]
 800574a:	1860      	adds	r0, r4, r1
 800574c:	4283      	cmp	r3, r0
 800574e:	d1f3      	bne.n	8005738 <_free_r+0x20>
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	1841      	adds	r1, r0, r1
 8005756:	6021      	str	r1, [r4, #0]
 8005758:	e7ee      	b.n	8005738 <_free_r+0x20>
 800575a:	001a      	movs	r2, r3
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <_free_r+0x4e>
 8005762:	42a3      	cmp	r3, r4
 8005764:	d9f9      	bls.n	800575a <_free_r+0x42>
 8005766:	6811      	ldr	r1, [r2, #0]
 8005768:	1850      	adds	r0, r2, r1
 800576a:	42a0      	cmp	r0, r4
 800576c:	d10b      	bne.n	8005786 <_free_r+0x6e>
 800576e:	6820      	ldr	r0, [r4, #0]
 8005770:	1809      	adds	r1, r1, r0
 8005772:	1850      	adds	r0, r2, r1
 8005774:	6011      	str	r1, [r2, #0]
 8005776:	4283      	cmp	r3, r0
 8005778:	d1e0      	bne.n	800573c <_free_r+0x24>
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	1841      	adds	r1, r0, r1
 8005780:	6011      	str	r1, [r2, #0]
 8005782:	6053      	str	r3, [r2, #4]
 8005784:	e7da      	b.n	800573c <_free_r+0x24>
 8005786:	42a0      	cmp	r0, r4
 8005788:	d902      	bls.n	8005790 <_free_r+0x78>
 800578a:	230c      	movs	r3, #12
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	e7d5      	b.n	800573c <_free_r+0x24>
 8005790:	6821      	ldr	r1, [r4, #0]
 8005792:	1860      	adds	r0, r4, r1
 8005794:	4283      	cmp	r3, r0
 8005796:	d103      	bne.n	80057a0 <_free_r+0x88>
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	1841      	adds	r1, r0, r1
 800579e:	6021      	str	r1, [r4, #0]
 80057a0:	6063      	str	r3, [r4, #4]
 80057a2:	6054      	str	r4, [r2, #4]
 80057a4:	e7ca      	b.n	800573c <_free_r+0x24>
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	20000d88 	.word	0x20000d88

080057ac <sbrk_aligned>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4e0f      	ldr	r6, [pc, #60]	; (80057ec <sbrk_aligned+0x40>)
 80057b0:	000d      	movs	r5, r1
 80057b2:	6831      	ldr	r1, [r6, #0]
 80057b4:	0004      	movs	r4, r0
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d102      	bne.n	80057c0 <sbrk_aligned+0x14>
 80057ba:	f000 f88f 	bl	80058dc <_sbrk_r>
 80057be:	6030      	str	r0, [r6, #0]
 80057c0:	0029      	movs	r1, r5
 80057c2:	0020      	movs	r0, r4
 80057c4:	f000 f88a 	bl	80058dc <_sbrk_r>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d00a      	beq.n	80057e2 <sbrk_aligned+0x36>
 80057cc:	2303      	movs	r3, #3
 80057ce:	1cc5      	adds	r5, r0, #3
 80057d0:	439d      	bics	r5, r3
 80057d2:	42a8      	cmp	r0, r5
 80057d4:	d007      	beq.n	80057e6 <sbrk_aligned+0x3a>
 80057d6:	1a29      	subs	r1, r5, r0
 80057d8:	0020      	movs	r0, r4
 80057da:	f000 f87f 	bl	80058dc <_sbrk_r>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	d101      	bne.n	80057e6 <sbrk_aligned+0x3a>
 80057e2:	2501      	movs	r5, #1
 80057e4:	426d      	negs	r5, r5
 80057e6:	0028      	movs	r0, r5
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	20000d8c 	.word	0x20000d8c

080057f0 <_malloc_r>:
 80057f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f2:	2203      	movs	r2, #3
 80057f4:	1ccb      	adds	r3, r1, #3
 80057f6:	4393      	bics	r3, r2
 80057f8:	3308      	adds	r3, #8
 80057fa:	0006      	movs	r6, r0
 80057fc:	001f      	movs	r7, r3
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d232      	bcs.n	8005868 <_malloc_r+0x78>
 8005802:	270c      	movs	r7, #12
 8005804:	42b9      	cmp	r1, r7
 8005806:	d831      	bhi.n	800586c <_malloc_r+0x7c>
 8005808:	0030      	movs	r0, r6
 800580a:	f000 f899 	bl	8005940 <__malloc_lock>
 800580e:	4d32      	ldr	r5, [pc, #200]	; (80058d8 <_malloc_r+0xe8>)
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	001c      	movs	r4, r3
 8005814:	2c00      	cmp	r4, #0
 8005816:	d12e      	bne.n	8005876 <_malloc_r+0x86>
 8005818:	0039      	movs	r1, r7
 800581a:	0030      	movs	r0, r6
 800581c:	f7ff ffc6 	bl	80057ac <sbrk_aligned>
 8005820:	0004      	movs	r4, r0
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	d11e      	bne.n	8005864 <_malloc_r+0x74>
 8005826:	682c      	ldr	r4, [r5, #0]
 8005828:	0025      	movs	r5, r4
 800582a:	2d00      	cmp	r5, #0
 800582c:	d14a      	bne.n	80058c4 <_malloc_r+0xd4>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	0029      	movs	r1, r5
 8005832:	18e3      	adds	r3, r4, r3
 8005834:	0030      	movs	r0, r6
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	f000 f850 	bl	80058dc <_sbrk_r>
 800583c:	9b01      	ldr	r3, [sp, #4]
 800583e:	4283      	cmp	r3, r0
 8005840:	d143      	bne.n	80058ca <_malloc_r+0xda>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	3703      	adds	r7, #3
 8005846:	1aff      	subs	r7, r7, r3
 8005848:	2303      	movs	r3, #3
 800584a:	439f      	bics	r7, r3
 800584c:	3708      	adds	r7, #8
 800584e:	2f0c      	cmp	r7, #12
 8005850:	d200      	bcs.n	8005854 <_malloc_r+0x64>
 8005852:	270c      	movs	r7, #12
 8005854:	0039      	movs	r1, r7
 8005856:	0030      	movs	r0, r6
 8005858:	f7ff ffa8 	bl	80057ac <sbrk_aligned>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d034      	beq.n	80058ca <_malloc_r+0xda>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	19df      	adds	r7, r3, r7
 8005864:	6027      	str	r7, [r4, #0]
 8005866:	e013      	b.n	8005890 <_malloc_r+0xa0>
 8005868:	2b00      	cmp	r3, #0
 800586a:	dacb      	bge.n	8005804 <_malloc_r+0x14>
 800586c:	230c      	movs	r3, #12
 800586e:	2500      	movs	r5, #0
 8005870:	6033      	str	r3, [r6, #0]
 8005872:	0028      	movs	r0, r5
 8005874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005876:	6822      	ldr	r2, [r4, #0]
 8005878:	1bd1      	subs	r1, r2, r7
 800587a:	d420      	bmi.n	80058be <_malloc_r+0xce>
 800587c:	290b      	cmp	r1, #11
 800587e:	d917      	bls.n	80058b0 <_malloc_r+0xc0>
 8005880:	19e2      	adds	r2, r4, r7
 8005882:	6027      	str	r7, [r4, #0]
 8005884:	42a3      	cmp	r3, r4
 8005886:	d111      	bne.n	80058ac <_malloc_r+0xbc>
 8005888:	602a      	str	r2, [r5, #0]
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	6011      	str	r1, [r2, #0]
 800588e:	6053      	str	r3, [r2, #4]
 8005890:	0030      	movs	r0, r6
 8005892:	0025      	movs	r5, r4
 8005894:	f000 f85c 	bl	8005950 <__malloc_unlock>
 8005898:	2207      	movs	r2, #7
 800589a:	350b      	adds	r5, #11
 800589c:	1d23      	adds	r3, r4, #4
 800589e:	4395      	bics	r5, r2
 80058a0:	1aea      	subs	r2, r5, r3
 80058a2:	429d      	cmp	r5, r3
 80058a4:	d0e5      	beq.n	8005872 <_malloc_r+0x82>
 80058a6:	1b5b      	subs	r3, r3, r5
 80058a8:	50a3      	str	r3, [r4, r2]
 80058aa:	e7e2      	b.n	8005872 <_malloc_r+0x82>
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	e7ec      	b.n	800588a <_malloc_r+0x9a>
 80058b0:	6862      	ldr	r2, [r4, #4]
 80058b2:	42a3      	cmp	r3, r4
 80058b4:	d101      	bne.n	80058ba <_malloc_r+0xca>
 80058b6:	602a      	str	r2, [r5, #0]
 80058b8:	e7ea      	b.n	8005890 <_malloc_r+0xa0>
 80058ba:	605a      	str	r2, [r3, #4]
 80058bc:	e7e8      	b.n	8005890 <_malloc_r+0xa0>
 80058be:	0023      	movs	r3, r4
 80058c0:	6864      	ldr	r4, [r4, #4]
 80058c2:	e7a7      	b.n	8005814 <_malloc_r+0x24>
 80058c4:	002c      	movs	r4, r5
 80058c6:	686d      	ldr	r5, [r5, #4]
 80058c8:	e7af      	b.n	800582a <_malloc_r+0x3a>
 80058ca:	230c      	movs	r3, #12
 80058cc:	0030      	movs	r0, r6
 80058ce:	6033      	str	r3, [r6, #0]
 80058d0:	f000 f83e 	bl	8005950 <__malloc_unlock>
 80058d4:	e7cd      	b.n	8005872 <_malloc_r+0x82>
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	20000d88 	.word	0x20000d88

080058dc <_sbrk_r>:
 80058dc:	2300      	movs	r3, #0
 80058de:	b570      	push	{r4, r5, r6, lr}
 80058e0:	4d06      	ldr	r5, [pc, #24]	; (80058fc <_sbrk_r+0x20>)
 80058e2:	0004      	movs	r4, r0
 80058e4:	0008      	movs	r0, r1
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	f7fd fd88 	bl	80033fc <_sbrk>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d103      	bne.n	80058f8 <_sbrk_r+0x1c>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d000      	beq.n	80058f8 <_sbrk_r+0x1c>
 80058f6:	6023      	str	r3, [r4, #0]
 80058f8:	bd70      	pop	{r4, r5, r6, pc}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	20000d90 	.word	0x20000d90

08005900 <siprintf>:
 8005900:	b40e      	push	{r1, r2, r3}
 8005902:	b500      	push	{lr}
 8005904:	490b      	ldr	r1, [pc, #44]	; (8005934 <siprintf+0x34>)
 8005906:	b09c      	sub	sp, #112	; 0x70
 8005908:	ab1d      	add	r3, sp, #116	; 0x74
 800590a:	9002      	str	r0, [sp, #8]
 800590c:	9006      	str	r0, [sp, #24]
 800590e:	9107      	str	r1, [sp, #28]
 8005910:	9104      	str	r1, [sp, #16]
 8005912:	4809      	ldr	r0, [pc, #36]	; (8005938 <siprintf+0x38>)
 8005914:	4909      	ldr	r1, [pc, #36]	; (800593c <siprintf+0x3c>)
 8005916:	cb04      	ldmia	r3!, {r2}
 8005918:	9105      	str	r1, [sp, #20]
 800591a:	6800      	ldr	r0, [r0, #0]
 800591c:	a902      	add	r1, sp, #8
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	f000 f880 	bl	8005a24 <_svfiprintf_r>
 8005924:	2300      	movs	r3, #0
 8005926:	9a02      	ldr	r2, [sp, #8]
 8005928:	7013      	strb	r3, [r2, #0]
 800592a:	b01c      	add	sp, #112	; 0x70
 800592c:	bc08      	pop	{r3}
 800592e:	b003      	add	sp, #12
 8005930:	4718      	bx	r3
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	7fffffff 	.word	0x7fffffff
 8005938:	20000028 	.word	0x20000028
 800593c:	ffff0208 	.word	0xffff0208

08005940 <__malloc_lock>:
 8005940:	b510      	push	{r4, lr}
 8005942:	4802      	ldr	r0, [pc, #8]	; (800594c <__malloc_lock+0xc>)
 8005944:	f000 faf0 	bl	8005f28 <__retarget_lock_acquire_recursive>
 8005948:	bd10      	pop	{r4, pc}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	20000d94 	.word	0x20000d94

08005950 <__malloc_unlock>:
 8005950:	b510      	push	{r4, lr}
 8005952:	4802      	ldr	r0, [pc, #8]	; (800595c <__malloc_unlock+0xc>)
 8005954:	f000 fae9 	bl	8005f2a <__retarget_lock_release_recursive>
 8005958:	bd10      	pop	{r4, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	20000d94 	.word	0x20000d94

08005960 <__ssputs_r>:
 8005960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005962:	688e      	ldr	r6, [r1, #8]
 8005964:	b085      	sub	sp, #20
 8005966:	0007      	movs	r7, r0
 8005968:	000c      	movs	r4, r1
 800596a:	9203      	str	r2, [sp, #12]
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	429e      	cmp	r6, r3
 8005970:	d83c      	bhi.n	80059ec <__ssputs_r+0x8c>
 8005972:	2390      	movs	r3, #144	; 0x90
 8005974:	898a      	ldrh	r2, [r1, #12]
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	421a      	tst	r2, r3
 800597a:	d034      	beq.n	80059e6 <__ssputs_r+0x86>
 800597c:	6909      	ldr	r1, [r1, #16]
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	6960      	ldr	r0, [r4, #20]
 8005982:	1a5b      	subs	r3, r3, r1
 8005984:	9302      	str	r3, [sp, #8]
 8005986:	2303      	movs	r3, #3
 8005988:	4343      	muls	r3, r0
 800598a:	0fdd      	lsrs	r5, r3, #31
 800598c:	18ed      	adds	r5, r5, r3
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	9802      	ldr	r0, [sp, #8]
 8005992:	3301      	adds	r3, #1
 8005994:	181b      	adds	r3, r3, r0
 8005996:	106d      	asrs	r5, r5, #1
 8005998:	42ab      	cmp	r3, r5
 800599a:	d900      	bls.n	800599e <__ssputs_r+0x3e>
 800599c:	001d      	movs	r5, r3
 800599e:	0553      	lsls	r3, r2, #21
 80059a0:	d532      	bpl.n	8005a08 <__ssputs_r+0xa8>
 80059a2:	0029      	movs	r1, r5
 80059a4:	0038      	movs	r0, r7
 80059a6:	f7ff ff23 	bl	80057f0 <_malloc_r>
 80059aa:	1e06      	subs	r6, r0, #0
 80059ac:	d109      	bne.n	80059c2 <__ssputs_r+0x62>
 80059ae:	230c      	movs	r3, #12
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	2340      	movs	r3, #64	; 0x40
 80059b4:	2001      	movs	r0, #1
 80059b6:	89a2      	ldrh	r2, [r4, #12]
 80059b8:	4240      	negs	r0, r0
 80059ba:	4313      	orrs	r3, r2
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	b005      	add	sp, #20
 80059c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c2:	9a02      	ldr	r2, [sp, #8]
 80059c4:	6921      	ldr	r1, [r4, #16]
 80059c6:	f7ff fe57 	bl	8005678 <memcpy>
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	4a14      	ldr	r2, [pc, #80]	; (8005a20 <__ssputs_r+0xc0>)
 80059ce:	401a      	ands	r2, r3
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	4313      	orrs	r3, r2
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	9b02      	ldr	r3, [sp, #8]
 80059d8:	6126      	str	r6, [r4, #16]
 80059da:	18f6      	adds	r6, r6, r3
 80059dc:	6026      	str	r6, [r4, #0]
 80059de:	6165      	str	r5, [r4, #20]
 80059e0:	9e01      	ldr	r6, [sp, #4]
 80059e2:	1aed      	subs	r5, r5, r3
 80059e4:	60a5      	str	r5, [r4, #8]
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	429e      	cmp	r6, r3
 80059ea:	d900      	bls.n	80059ee <__ssputs_r+0x8e>
 80059ec:	9e01      	ldr	r6, [sp, #4]
 80059ee:	0032      	movs	r2, r6
 80059f0:	9903      	ldr	r1, [sp, #12]
 80059f2:	6820      	ldr	r0, [r4, #0]
 80059f4:	f7ff fe49 	bl	800568a <memmove>
 80059f8:	68a3      	ldr	r3, [r4, #8]
 80059fa:	2000      	movs	r0, #0
 80059fc:	1b9b      	subs	r3, r3, r6
 80059fe:	60a3      	str	r3, [r4, #8]
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	199e      	adds	r6, r3, r6
 8005a04:	6026      	str	r6, [r4, #0]
 8005a06:	e7da      	b.n	80059be <__ssputs_r+0x5e>
 8005a08:	002a      	movs	r2, r5
 8005a0a:	0038      	movs	r0, r7
 8005a0c:	f000 fa99 	bl	8005f42 <_realloc_r>
 8005a10:	1e06      	subs	r6, r0, #0
 8005a12:	d1e0      	bne.n	80059d6 <__ssputs_r+0x76>
 8005a14:	0038      	movs	r0, r7
 8005a16:	6921      	ldr	r1, [r4, #16]
 8005a18:	f7ff fe7e 	bl	8005718 <_free_r>
 8005a1c:	e7c7      	b.n	80059ae <__ssputs_r+0x4e>
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	fffffb7f 	.word	0xfffffb7f

08005a24 <_svfiprintf_r>:
 8005a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a26:	b0a1      	sub	sp, #132	; 0x84
 8005a28:	9003      	str	r0, [sp, #12]
 8005a2a:	001d      	movs	r5, r3
 8005a2c:	898b      	ldrh	r3, [r1, #12]
 8005a2e:	000f      	movs	r7, r1
 8005a30:	0016      	movs	r6, r2
 8005a32:	061b      	lsls	r3, r3, #24
 8005a34:	d511      	bpl.n	8005a5a <_svfiprintf_r+0x36>
 8005a36:	690b      	ldr	r3, [r1, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10e      	bne.n	8005a5a <_svfiprintf_r+0x36>
 8005a3c:	2140      	movs	r1, #64	; 0x40
 8005a3e:	f7ff fed7 	bl	80057f0 <_malloc_r>
 8005a42:	6038      	str	r0, [r7, #0]
 8005a44:	6138      	str	r0, [r7, #16]
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d105      	bne.n	8005a56 <_svfiprintf_r+0x32>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	9a03      	ldr	r2, [sp, #12]
 8005a4e:	3801      	subs	r0, #1
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	b021      	add	sp, #132	; 0x84
 8005a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	ac08      	add	r4, sp, #32
 8005a5e:	6163      	str	r3, [r4, #20]
 8005a60:	3320      	adds	r3, #32
 8005a62:	7663      	strb	r3, [r4, #25]
 8005a64:	3310      	adds	r3, #16
 8005a66:	76a3      	strb	r3, [r4, #26]
 8005a68:	9507      	str	r5, [sp, #28]
 8005a6a:	0035      	movs	r5, r6
 8005a6c:	782b      	ldrb	r3, [r5, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <_svfiprintf_r+0x52>
 8005a72:	2b25      	cmp	r3, #37	; 0x25
 8005a74:	d147      	bne.n	8005b06 <_svfiprintf_r+0xe2>
 8005a76:	1bab      	subs	r3, r5, r6
 8005a78:	9305      	str	r3, [sp, #20]
 8005a7a:	42b5      	cmp	r5, r6
 8005a7c:	d00c      	beq.n	8005a98 <_svfiprintf_r+0x74>
 8005a7e:	0032      	movs	r2, r6
 8005a80:	0039      	movs	r1, r7
 8005a82:	9803      	ldr	r0, [sp, #12]
 8005a84:	f7ff ff6c 	bl	8005960 <__ssputs_r>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d100      	bne.n	8005a8e <_svfiprintf_r+0x6a>
 8005a8c:	e0ae      	b.n	8005bec <_svfiprintf_r+0x1c8>
 8005a8e:	6962      	ldr	r2, [r4, #20]
 8005a90:	9b05      	ldr	r3, [sp, #20]
 8005a92:	4694      	mov	ip, r2
 8005a94:	4463      	add	r3, ip
 8005a96:	6163      	str	r3, [r4, #20]
 8005a98:	782b      	ldrb	r3, [r5, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d100      	bne.n	8005aa0 <_svfiprintf_r+0x7c>
 8005a9e:	e0a5      	b.n	8005bec <_svfiprintf_r+0x1c8>
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	4252      	negs	r2, r2
 8005aa6:	6062      	str	r2, [r4, #4]
 8005aa8:	a904      	add	r1, sp, #16
 8005aaa:	3254      	adds	r2, #84	; 0x54
 8005aac:	1852      	adds	r2, r2, r1
 8005aae:	1c6e      	adds	r6, r5, #1
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	60e3      	str	r3, [r4, #12]
 8005ab4:	60a3      	str	r3, [r4, #8]
 8005ab6:	7013      	strb	r3, [r2, #0]
 8005ab8:	65a3      	str	r3, [r4, #88]	; 0x58
 8005aba:	2205      	movs	r2, #5
 8005abc:	7831      	ldrb	r1, [r6, #0]
 8005abe:	4854      	ldr	r0, [pc, #336]	; (8005c10 <_svfiprintf_r+0x1ec>)
 8005ac0:	f000 fa34 	bl	8005f2c <memchr>
 8005ac4:	1c75      	adds	r5, r6, #1
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d11f      	bne.n	8005b0a <_svfiprintf_r+0xe6>
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	06d3      	lsls	r3, r2, #27
 8005ace:	d504      	bpl.n	8005ada <_svfiprintf_r+0xb6>
 8005ad0:	2353      	movs	r3, #83	; 0x53
 8005ad2:	a904      	add	r1, sp, #16
 8005ad4:	185b      	adds	r3, r3, r1
 8005ad6:	2120      	movs	r1, #32
 8005ad8:	7019      	strb	r1, [r3, #0]
 8005ada:	0713      	lsls	r3, r2, #28
 8005adc:	d504      	bpl.n	8005ae8 <_svfiprintf_r+0xc4>
 8005ade:	2353      	movs	r3, #83	; 0x53
 8005ae0:	a904      	add	r1, sp, #16
 8005ae2:	185b      	adds	r3, r3, r1
 8005ae4:	212b      	movs	r1, #43	; 0x2b
 8005ae6:	7019      	strb	r1, [r3, #0]
 8005ae8:	7833      	ldrb	r3, [r6, #0]
 8005aea:	2b2a      	cmp	r3, #42	; 0x2a
 8005aec:	d016      	beq.n	8005b1c <_svfiprintf_r+0xf8>
 8005aee:	0035      	movs	r5, r6
 8005af0:	2100      	movs	r1, #0
 8005af2:	200a      	movs	r0, #10
 8005af4:	68e3      	ldr	r3, [r4, #12]
 8005af6:	782a      	ldrb	r2, [r5, #0]
 8005af8:	1c6e      	adds	r6, r5, #1
 8005afa:	3a30      	subs	r2, #48	; 0x30
 8005afc:	2a09      	cmp	r2, #9
 8005afe:	d94e      	bls.n	8005b9e <_svfiprintf_r+0x17a>
 8005b00:	2900      	cmp	r1, #0
 8005b02:	d111      	bne.n	8005b28 <_svfiprintf_r+0x104>
 8005b04:	e017      	b.n	8005b36 <_svfiprintf_r+0x112>
 8005b06:	3501      	adds	r5, #1
 8005b08:	e7b0      	b.n	8005a6c <_svfiprintf_r+0x48>
 8005b0a:	4b41      	ldr	r3, [pc, #260]	; (8005c10 <_svfiprintf_r+0x1ec>)
 8005b0c:	6822      	ldr	r2, [r4, #0]
 8005b0e:	1ac0      	subs	r0, r0, r3
 8005b10:	2301      	movs	r3, #1
 8005b12:	4083      	lsls	r3, r0
 8005b14:	4313      	orrs	r3, r2
 8005b16:	002e      	movs	r6, r5
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	e7ce      	b.n	8005aba <_svfiprintf_r+0x96>
 8005b1c:	9b07      	ldr	r3, [sp, #28]
 8005b1e:	1d19      	adds	r1, r3, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	9107      	str	r1, [sp, #28]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	db01      	blt.n	8005b2c <_svfiprintf_r+0x108>
 8005b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b2a:	e004      	b.n	8005b36 <_svfiprintf_r+0x112>
 8005b2c:	425b      	negs	r3, r3
 8005b2e:	60e3      	str	r3, [r4, #12]
 8005b30:	2302      	movs	r3, #2
 8005b32:	4313      	orrs	r3, r2
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	782b      	ldrb	r3, [r5, #0]
 8005b38:	2b2e      	cmp	r3, #46	; 0x2e
 8005b3a:	d10a      	bne.n	8005b52 <_svfiprintf_r+0x12e>
 8005b3c:	786b      	ldrb	r3, [r5, #1]
 8005b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b40:	d135      	bne.n	8005bae <_svfiprintf_r+0x18a>
 8005b42:	9b07      	ldr	r3, [sp, #28]
 8005b44:	3502      	adds	r5, #2
 8005b46:	1d1a      	adds	r2, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	9207      	str	r2, [sp, #28]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	db2b      	blt.n	8005ba8 <_svfiprintf_r+0x184>
 8005b50:	9309      	str	r3, [sp, #36]	; 0x24
 8005b52:	4e30      	ldr	r6, [pc, #192]	; (8005c14 <_svfiprintf_r+0x1f0>)
 8005b54:	2203      	movs	r2, #3
 8005b56:	0030      	movs	r0, r6
 8005b58:	7829      	ldrb	r1, [r5, #0]
 8005b5a:	f000 f9e7 	bl	8005f2c <memchr>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d006      	beq.n	8005b70 <_svfiprintf_r+0x14c>
 8005b62:	2340      	movs	r3, #64	; 0x40
 8005b64:	1b80      	subs	r0, r0, r6
 8005b66:	4083      	lsls	r3, r0
 8005b68:	6822      	ldr	r2, [r4, #0]
 8005b6a:	3501      	adds	r5, #1
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	6023      	str	r3, [r4, #0]
 8005b70:	7829      	ldrb	r1, [r5, #0]
 8005b72:	2206      	movs	r2, #6
 8005b74:	4828      	ldr	r0, [pc, #160]	; (8005c18 <_svfiprintf_r+0x1f4>)
 8005b76:	1c6e      	adds	r6, r5, #1
 8005b78:	7621      	strb	r1, [r4, #24]
 8005b7a:	f000 f9d7 	bl	8005f2c <memchr>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d03c      	beq.n	8005bfc <_svfiprintf_r+0x1d8>
 8005b82:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <_svfiprintf_r+0x1f8>)
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d125      	bne.n	8005bd4 <_svfiprintf_r+0x1b0>
 8005b88:	2207      	movs	r2, #7
 8005b8a:	9b07      	ldr	r3, [sp, #28]
 8005b8c:	3307      	adds	r3, #7
 8005b8e:	4393      	bics	r3, r2
 8005b90:	3308      	adds	r3, #8
 8005b92:	9307      	str	r3, [sp, #28]
 8005b94:	6963      	ldr	r3, [r4, #20]
 8005b96:	9a04      	ldr	r2, [sp, #16]
 8005b98:	189b      	adds	r3, r3, r2
 8005b9a:	6163      	str	r3, [r4, #20]
 8005b9c:	e765      	b.n	8005a6a <_svfiprintf_r+0x46>
 8005b9e:	4343      	muls	r3, r0
 8005ba0:	0035      	movs	r5, r6
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	189b      	adds	r3, r3, r2
 8005ba6:	e7a6      	b.n	8005af6 <_svfiprintf_r+0xd2>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	425b      	negs	r3, r3
 8005bac:	e7d0      	b.n	8005b50 <_svfiprintf_r+0x12c>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	200a      	movs	r0, #10
 8005bb2:	001a      	movs	r2, r3
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	7829      	ldrb	r1, [r5, #0]
 8005bba:	1c6e      	adds	r6, r5, #1
 8005bbc:	3930      	subs	r1, #48	; 0x30
 8005bbe:	2909      	cmp	r1, #9
 8005bc0:	d903      	bls.n	8005bca <_svfiprintf_r+0x1a6>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0c5      	beq.n	8005b52 <_svfiprintf_r+0x12e>
 8005bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc8:	e7c3      	b.n	8005b52 <_svfiprintf_r+0x12e>
 8005bca:	4342      	muls	r2, r0
 8005bcc:	0035      	movs	r5, r6
 8005bce:	2301      	movs	r3, #1
 8005bd0:	1852      	adds	r2, r2, r1
 8005bd2:	e7f1      	b.n	8005bb8 <_svfiprintf_r+0x194>
 8005bd4:	ab07      	add	r3, sp, #28
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	003a      	movs	r2, r7
 8005bda:	0021      	movs	r1, r4
 8005bdc:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <_svfiprintf_r+0x1fc>)
 8005bde:	9803      	ldr	r0, [sp, #12]
 8005be0:	e000      	b.n	8005be4 <_svfiprintf_r+0x1c0>
 8005be2:	bf00      	nop
 8005be4:	9004      	str	r0, [sp, #16]
 8005be6:	9b04      	ldr	r3, [sp, #16]
 8005be8:	3301      	adds	r3, #1
 8005bea:	d1d3      	bne.n	8005b94 <_svfiprintf_r+0x170>
 8005bec:	89bb      	ldrh	r3, [r7, #12]
 8005bee:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bf0:	065b      	lsls	r3, r3, #25
 8005bf2:	d400      	bmi.n	8005bf6 <_svfiprintf_r+0x1d2>
 8005bf4:	e72d      	b.n	8005a52 <_svfiprintf_r+0x2e>
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	4240      	negs	r0, r0
 8005bfa:	e72a      	b.n	8005a52 <_svfiprintf_r+0x2e>
 8005bfc:	ab07      	add	r3, sp, #28
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	003a      	movs	r2, r7
 8005c02:	0021      	movs	r1, r4
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <_svfiprintf_r+0x1fc>)
 8005c06:	9803      	ldr	r0, [sp, #12]
 8005c08:	f000 f87c 	bl	8005d04 <_printf_i>
 8005c0c:	e7ea      	b.n	8005be4 <_svfiprintf_r+0x1c0>
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	08006cfd 	.word	0x08006cfd
 8005c14:	08006d03 	.word	0x08006d03
 8005c18:	08006d07 	.word	0x08006d07
 8005c1c:	00000000 	.word	0x00000000
 8005c20:	08005961 	.word	0x08005961

08005c24 <_printf_common>:
 8005c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c26:	0015      	movs	r5, r2
 8005c28:	9301      	str	r3, [sp, #4]
 8005c2a:	688a      	ldr	r2, [r1, #8]
 8005c2c:	690b      	ldr	r3, [r1, #16]
 8005c2e:	000c      	movs	r4, r1
 8005c30:	9000      	str	r0, [sp, #0]
 8005c32:	4293      	cmp	r3, r2
 8005c34:	da00      	bge.n	8005c38 <_printf_common+0x14>
 8005c36:	0013      	movs	r3, r2
 8005c38:	0022      	movs	r2, r4
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	3243      	adds	r2, #67	; 0x43
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d001      	beq.n	8005c48 <_printf_common+0x24>
 8005c44:	3301      	adds	r3, #1
 8005c46:	602b      	str	r3, [r5, #0]
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	069b      	lsls	r3, r3, #26
 8005c4c:	d502      	bpl.n	8005c54 <_printf_common+0x30>
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	3302      	adds	r3, #2
 8005c52:	602b      	str	r3, [r5, #0]
 8005c54:	6822      	ldr	r2, [r4, #0]
 8005c56:	2306      	movs	r3, #6
 8005c58:	0017      	movs	r7, r2
 8005c5a:	401f      	ands	r7, r3
 8005c5c:	421a      	tst	r2, r3
 8005c5e:	d027      	beq.n	8005cb0 <_printf_common+0x8c>
 8005c60:	0023      	movs	r3, r4
 8005c62:	3343      	adds	r3, #67	; 0x43
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	1e5a      	subs	r2, r3, #1
 8005c68:	4193      	sbcs	r3, r2
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	0692      	lsls	r2, r2, #26
 8005c6e:	d430      	bmi.n	8005cd2 <_printf_common+0xae>
 8005c70:	0022      	movs	r2, r4
 8005c72:	9901      	ldr	r1, [sp, #4]
 8005c74:	9800      	ldr	r0, [sp, #0]
 8005c76:	9e08      	ldr	r6, [sp, #32]
 8005c78:	3243      	adds	r2, #67	; 0x43
 8005c7a:	47b0      	blx	r6
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d025      	beq.n	8005ccc <_printf_common+0xa8>
 8005c80:	2306      	movs	r3, #6
 8005c82:	6820      	ldr	r0, [r4, #0]
 8005c84:	682a      	ldr	r2, [r5, #0]
 8005c86:	68e1      	ldr	r1, [r4, #12]
 8005c88:	2500      	movs	r5, #0
 8005c8a:	4003      	ands	r3, r0
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d103      	bne.n	8005c98 <_printf_common+0x74>
 8005c90:	1a8d      	subs	r5, r1, r2
 8005c92:	43eb      	mvns	r3, r5
 8005c94:	17db      	asrs	r3, r3, #31
 8005c96:	401d      	ands	r5, r3
 8005c98:	68a3      	ldr	r3, [r4, #8]
 8005c9a:	6922      	ldr	r2, [r4, #16]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	dd01      	ble.n	8005ca4 <_printf_common+0x80>
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	18ed      	adds	r5, r5, r3
 8005ca4:	2700      	movs	r7, #0
 8005ca6:	42bd      	cmp	r5, r7
 8005ca8:	d120      	bne.n	8005cec <_printf_common+0xc8>
 8005caa:	2000      	movs	r0, #0
 8005cac:	e010      	b.n	8005cd0 <_printf_common+0xac>
 8005cae:	3701      	adds	r7, #1
 8005cb0:	68e3      	ldr	r3, [r4, #12]
 8005cb2:	682a      	ldr	r2, [r5, #0]
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	42bb      	cmp	r3, r7
 8005cb8:	ddd2      	ble.n	8005c60 <_printf_common+0x3c>
 8005cba:	0022      	movs	r2, r4
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	9901      	ldr	r1, [sp, #4]
 8005cc0:	9800      	ldr	r0, [sp, #0]
 8005cc2:	9e08      	ldr	r6, [sp, #32]
 8005cc4:	3219      	adds	r2, #25
 8005cc6:	47b0      	blx	r6
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d1f0      	bne.n	8005cae <_printf_common+0x8a>
 8005ccc:	2001      	movs	r0, #1
 8005cce:	4240      	negs	r0, r0
 8005cd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cd2:	2030      	movs	r0, #48	; 0x30
 8005cd4:	18e1      	adds	r1, r4, r3
 8005cd6:	3143      	adds	r1, #67	; 0x43
 8005cd8:	7008      	strb	r0, [r1, #0]
 8005cda:	0021      	movs	r1, r4
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	3145      	adds	r1, #69	; 0x45
 8005ce0:	7809      	ldrb	r1, [r1, #0]
 8005ce2:	18a2      	adds	r2, r4, r2
 8005ce4:	3243      	adds	r2, #67	; 0x43
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	7011      	strb	r1, [r2, #0]
 8005cea:	e7c1      	b.n	8005c70 <_printf_common+0x4c>
 8005cec:	0022      	movs	r2, r4
 8005cee:	2301      	movs	r3, #1
 8005cf0:	9901      	ldr	r1, [sp, #4]
 8005cf2:	9800      	ldr	r0, [sp, #0]
 8005cf4:	9e08      	ldr	r6, [sp, #32]
 8005cf6:	321a      	adds	r2, #26
 8005cf8:	47b0      	blx	r6
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	d0e6      	beq.n	8005ccc <_printf_common+0xa8>
 8005cfe:	3701      	adds	r7, #1
 8005d00:	e7d1      	b.n	8005ca6 <_printf_common+0x82>
	...

08005d04 <_printf_i>:
 8005d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d06:	b08b      	sub	sp, #44	; 0x2c
 8005d08:	9206      	str	r2, [sp, #24]
 8005d0a:	000a      	movs	r2, r1
 8005d0c:	3243      	adds	r2, #67	; 0x43
 8005d0e:	9307      	str	r3, [sp, #28]
 8005d10:	9005      	str	r0, [sp, #20]
 8005d12:	9204      	str	r2, [sp, #16]
 8005d14:	7e0a      	ldrb	r2, [r1, #24]
 8005d16:	000c      	movs	r4, r1
 8005d18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d1a:	2a78      	cmp	r2, #120	; 0x78
 8005d1c:	d807      	bhi.n	8005d2e <_printf_i+0x2a>
 8005d1e:	2a62      	cmp	r2, #98	; 0x62
 8005d20:	d809      	bhi.n	8005d36 <_printf_i+0x32>
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	d100      	bne.n	8005d28 <_printf_i+0x24>
 8005d26:	e0c1      	b.n	8005eac <_printf_i+0x1a8>
 8005d28:	2a58      	cmp	r2, #88	; 0x58
 8005d2a:	d100      	bne.n	8005d2e <_printf_i+0x2a>
 8005d2c:	e08c      	b.n	8005e48 <_printf_i+0x144>
 8005d2e:	0026      	movs	r6, r4
 8005d30:	3642      	adds	r6, #66	; 0x42
 8005d32:	7032      	strb	r2, [r6, #0]
 8005d34:	e022      	b.n	8005d7c <_printf_i+0x78>
 8005d36:	0010      	movs	r0, r2
 8005d38:	3863      	subs	r0, #99	; 0x63
 8005d3a:	2815      	cmp	r0, #21
 8005d3c:	d8f7      	bhi.n	8005d2e <_printf_i+0x2a>
 8005d3e:	f7fa f9f7 	bl	8000130 <__gnu_thumb1_case_shi>
 8005d42:	0016      	.short	0x0016
 8005d44:	fff6001f 	.word	0xfff6001f
 8005d48:	fff6fff6 	.word	0xfff6fff6
 8005d4c:	001ffff6 	.word	0x001ffff6
 8005d50:	fff6fff6 	.word	0xfff6fff6
 8005d54:	fff6fff6 	.word	0xfff6fff6
 8005d58:	003600a8 	.word	0x003600a8
 8005d5c:	fff6009a 	.word	0xfff6009a
 8005d60:	00b9fff6 	.word	0x00b9fff6
 8005d64:	0036fff6 	.word	0x0036fff6
 8005d68:	fff6fff6 	.word	0xfff6fff6
 8005d6c:	009e      	.short	0x009e
 8005d6e:	0026      	movs	r6, r4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	3642      	adds	r6, #66	; 0x42
 8005d74:	1d11      	adds	r1, r2, #4
 8005d76:	6019      	str	r1, [r3, #0]
 8005d78:	6813      	ldr	r3, [r2, #0]
 8005d7a:	7033      	strb	r3, [r6, #0]
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0a7      	b.n	8005ed0 <_printf_i+0x1cc>
 8005d80:	6808      	ldr	r0, [r1, #0]
 8005d82:	6819      	ldr	r1, [r3, #0]
 8005d84:	1d0a      	adds	r2, r1, #4
 8005d86:	0605      	lsls	r5, r0, #24
 8005d88:	d50b      	bpl.n	8005da2 <_printf_i+0x9e>
 8005d8a:	680d      	ldr	r5, [r1, #0]
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	da03      	bge.n	8005d9a <_printf_i+0x96>
 8005d92:	232d      	movs	r3, #45	; 0x2d
 8005d94:	9a04      	ldr	r2, [sp, #16]
 8005d96:	426d      	negs	r5, r5
 8005d98:	7013      	strb	r3, [r2, #0]
 8005d9a:	4b61      	ldr	r3, [pc, #388]	; (8005f20 <_printf_i+0x21c>)
 8005d9c:	270a      	movs	r7, #10
 8005d9e:	9303      	str	r3, [sp, #12]
 8005da0:	e01b      	b.n	8005dda <_printf_i+0xd6>
 8005da2:	680d      	ldr	r5, [r1, #0]
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	0641      	lsls	r1, r0, #25
 8005da8:	d5f1      	bpl.n	8005d8e <_printf_i+0x8a>
 8005daa:	b22d      	sxth	r5, r5
 8005dac:	e7ef      	b.n	8005d8e <_printf_i+0x8a>
 8005dae:	680d      	ldr	r5, [r1, #0]
 8005db0:	6819      	ldr	r1, [r3, #0]
 8005db2:	1d08      	adds	r0, r1, #4
 8005db4:	6018      	str	r0, [r3, #0]
 8005db6:	062e      	lsls	r6, r5, #24
 8005db8:	d501      	bpl.n	8005dbe <_printf_i+0xba>
 8005dba:	680d      	ldr	r5, [r1, #0]
 8005dbc:	e003      	b.n	8005dc6 <_printf_i+0xc2>
 8005dbe:	066d      	lsls	r5, r5, #25
 8005dc0:	d5fb      	bpl.n	8005dba <_printf_i+0xb6>
 8005dc2:	680d      	ldr	r5, [r1, #0]
 8005dc4:	b2ad      	uxth	r5, r5
 8005dc6:	4b56      	ldr	r3, [pc, #344]	; (8005f20 <_printf_i+0x21c>)
 8005dc8:	2708      	movs	r7, #8
 8005dca:	9303      	str	r3, [sp, #12]
 8005dcc:	2a6f      	cmp	r2, #111	; 0x6f
 8005dce:	d000      	beq.n	8005dd2 <_printf_i+0xce>
 8005dd0:	3702      	adds	r7, #2
 8005dd2:	0023      	movs	r3, r4
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	3343      	adds	r3, #67	; 0x43
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	6863      	ldr	r3, [r4, #4]
 8005ddc:	60a3      	str	r3, [r4, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	db03      	blt.n	8005dea <_printf_i+0xe6>
 8005de2:	2204      	movs	r2, #4
 8005de4:	6821      	ldr	r1, [r4, #0]
 8005de6:	4391      	bics	r1, r2
 8005de8:	6021      	str	r1, [r4, #0]
 8005dea:	2d00      	cmp	r5, #0
 8005dec:	d102      	bne.n	8005df4 <_printf_i+0xf0>
 8005dee:	9e04      	ldr	r6, [sp, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00c      	beq.n	8005e0e <_printf_i+0x10a>
 8005df4:	9e04      	ldr	r6, [sp, #16]
 8005df6:	0028      	movs	r0, r5
 8005df8:	0039      	movs	r1, r7
 8005dfa:	f7fa fa29 	bl	8000250 <__aeabi_uidivmod>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	3e01      	subs	r6, #1
 8005e02:	5c5b      	ldrb	r3, [r3, r1]
 8005e04:	7033      	strb	r3, [r6, #0]
 8005e06:	002b      	movs	r3, r5
 8005e08:	0005      	movs	r5, r0
 8005e0a:	429f      	cmp	r7, r3
 8005e0c:	d9f3      	bls.n	8005df6 <_printf_i+0xf2>
 8005e0e:	2f08      	cmp	r7, #8
 8005e10:	d109      	bne.n	8005e26 <_printf_i+0x122>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	07db      	lsls	r3, r3, #31
 8005e16:	d506      	bpl.n	8005e26 <_printf_i+0x122>
 8005e18:	6863      	ldr	r3, [r4, #4]
 8005e1a:	6922      	ldr	r2, [r4, #16]
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	dc02      	bgt.n	8005e26 <_printf_i+0x122>
 8005e20:	2330      	movs	r3, #48	; 0x30
 8005e22:	3e01      	subs	r6, #1
 8005e24:	7033      	strb	r3, [r6, #0]
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	1b9b      	subs	r3, r3, r6
 8005e2a:	6123      	str	r3, [r4, #16]
 8005e2c:	9b07      	ldr	r3, [sp, #28]
 8005e2e:	0021      	movs	r1, r4
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	9805      	ldr	r0, [sp, #20]
 8005e34:	9b06      	ldr	r3, [sp, #24]
 8005e36:	aa09      	add	r2, sp, #36	; 0x24
 8005e38:	f7ff fef4 	bl	8005c24 <_printf_common>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d14c      	bne.n	8005eda <_printf_i+0x1d6>
 8005e40:	2001      	movs	r0, #1
 8005e42:	4240      	negs	r0, r0
 8005e44:	b00b      	add	sp, #44	; 0x2c
 8005e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e48:	3145      	adds	r1, #69	; 0x45
 8005e4a:	700a      	strb	r2, [r1, #0]
 8005e4c:	4a34      	ldr	r2, [pc, #208]	; (8005f20 <_printf_i+0x21c>)
 8005e4e:	9203      	str	r2, [sp, #12]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	6821      	ldr	r1, [r4, #0]
 8005e54:	ca20      	ldmia	r2!, {r5}
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	0608      	lsls	r0, r1, #24
 8005e5a:	d516      	bpl.n	8005e8a <_printf_i+0x186>
 8005e5c:	07cb      	lsls	r3, r1, #31
 8005e5e:	d502      	bpl.n	8005e66 <_printf_i+0x162>
 8005e60:	2320      	movs	r3, #32
 8005e62:	4319      	orrs	r1, r3
 8005e64:	6021      	str	r1, [r4, #0]
 8005e66:	2710      	movs	r7, #16
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	d1b2      	bne.n	8005dd2 <_printf_i+0xce>
 8005e6c:	2320      	movs	r3, #32
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	439a      	bics	r2, r3
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	e7ad      	b.n	8005dd2 <_printf_i+0xce>
 8005e76:	2220      	movs	r2, #32
 8005e78:	6809      	ldr	r1, [r1, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	6022      	str	r2, [r4, #0]
 8005e7e:	0022      	movs	r2, r4
 8005e80:	2178      	movs	r1, #120	; 0x78
 8005e82:	3245      	adds	r2, #69	; 0x45
 8005e84:	7011      	strb	r1, [r2, #0]
 8005e86:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <_printf_i+0x220>)
 8005e88:	e7e1      	b.n	8005e4e <_printf_i+0x14a>
 8005e8a:	0648      	lsls	r0, r1, #25
 8005e8c:	d5e6      	bpl.n	8005e5c <_printf_i+0x158>
 8005e8e:	b2ad      	uxth	r5, r5
 8005e90:	e7e4      	b.n	8005e5c <_printf_i+0x158>
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	680d      	ldr	r5, [r1, #0]
 8005e96:	1d10      	adds	r0, r2, #4
 8005e98:	6949      	ldr	r1, [r1, #20]
 8005e9a:	6018      	str	r0, [r3, #0]
 8005e9c:	6813      	ldr	r3, [r2, #0]
 8005e9e:	062e      	lsls	r6, r5, #24
 8005ea0:	d501      	bpl.n	8005ea6 <_printf_i+0x1a2>
 8005ea2:	6019      	str	r1, [r3, #0]
 8005ea4:	e002      	b.n	8005eac <_printf_i+0x1a8>
 8005ea6:	066d      	lsls	r5, r5, #25
 8005ea8:	d5fb      	bpl.n	8005ea2 <_printf_i+0x19e>
 8005eaa:	8019      	strh	r1, [r3, #0]
 8005eac:	2300      	movs	r3, #0
 8005eae:	9e04      	ldr	r6, [sp, #16]
 8005eb0:	6123      	str	r3, [r4, #16]
 8005eb2:	e7bb      	b.n	8005e2c <_printf_i+0x128>
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	1d11      	adds	r1, r2, #4
 8005eb8:	6019      	str	r1, [r3, #0]
 8005eba:	6816      	ldr	r6, [r2, #0]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	0030      	movs	r0, r6
 8005ec0:	6862      	ldr	r2, [r4, #4]
 8005ec2:	f000 f833 	bl	8005f2c <memchr>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d001      	beq.n	8005ece <_printf_i+0x1ca>
 8005eca:	1b80      	subs	r0, r0, r6
 8005ecc:	6060      	str	r0, [r4, #4]
 8005ece:	6863      	ldr	r3, [r4, #4]
 8005ed0:	6123      	str	r3, [r4, #16]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9a04      	ldr	r2, [sp, #16]
 8005ed6:	7013      	strb	r3, [r2, #0]
 8005ed8:	e7a8      	b.n	8005e2c <_printf_i+0x128>
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	0032      	movs	r2, r6
 8005ede:	9906      	ldr	r1, [sp, #24]
 8005ee0:	9805      	ldr	r0, [sp, #20]
 8005ee2:	9d07      	ldr	r5, [sp, #28]
 8005ee4:	47a8      	blx	r5
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d0aa      	beq.n	8005e40 <_printf_i+0x13c>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	079b      	lsls	r3, r3, #30
 8005eee:	d415      	bmi.n	8005f1c <_printf_i+0x218>
 8005ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	4298      	cmp	r0, r3
 8005ef6:	daa5      	bge.n	8005e44 <_printf_i+0x140>
 8005ef8:	0018      	movs	r0, r3
 8005efa:	e7a3      	b.n	8005e44 <_printf_i+0x140>
 8005efc:	0022      	movs	r2, r4
 8005efe:	2301      	movs	r3, #1
 8005f00:	9906      	ldr	r1, [sp, #24]
 8005f02:	9805      	ldr	r0, [sp, #20]
 8005f04:	9e07      	ldr	r6, [sp, #28]
 8005f06:	3219      	adds	r2, #25
 8005f08:	47b0      	blx	r6
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	d098      	beq.n	8005e40 <_printf_i+0x13c>
 8005f0e:	3501      	adds	r5, #1
 8005f10:	68e3      	ldr	r3, [r4, #12]
 8005f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	42ab      	cmp	r3, r5
 8005f18:	dcf0      	bgt.n	8005efc <_printf_i+0x1f8>
 8005f1a:	e7e9      	b.n	8005ef0 <_printf_i+0x1ec>
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	e7f7      	b.n	8005f10 <_printf_i+0x20c>
 8005f20:	08006d0e 	.word	0x08006d0e
 8005f24:	08006d1f 	.word	0x08006d1f

08005f28 <__retarget_lock_acquire_recursive>:
 8005f28:	4770      	bx	lr

08005f2a <__retarget_lock_release_recursive>:
 8005f2a:	4770      	bx	lr

08005f2c <memchr>:
 8005f2c:	b2c9      	uxtb	r1, r1
 8005f2e:	1882      	adds	r2, r0, r2
 8005f30:	4290      	cmp	r0, r2
 8005f32:	d101      	bne.n	8005f38 <memchr+0xc>
 8005f34:	2000      	movs	r0, #0
 8005f36:	4770      	bx	lr
 8005f38:	7803      	ldrb	r3, [r0, #0]
 8005f3a:	428b      	cmp	r3, r1
 8005f3c:	d0fb      	beq.n	8005f36 <memchr+0xa>
 8005f3e:	3001      	adds	r0, #1
 8005f40:	e7f6      	b.n	8005f30 <memchr+0x4>

08005f42 <_realloc_r>:
 8005f42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f44:	0007      	movs	r7, r0
 8005f46:	000e      	movs	r6, r1
 8005f48:	0014      	movs	r4, r2
 8005f4a:	2900      	cmp	r1, #0
 8005f4c:	d105      	bne.n	8005f5a <_realloc_r+0x18>
 8005f4e:	0011      	movs	r1, r2
 8005f50:	f7ff fc4e 	bl	80057f0 <_malloc_r>
 8005f54:	0005      	movs	r5, r0
 8005f56:	0028      	movs	r0, r5
 8005f58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	d103      	bne.n	8005f66 <_realloc_r+0x24>
 8005f5e:	f7ff fbdb 	bl	8005718 <_free_r>
 8005f62:	0025      	movs	r5, r4
 8005f64:	e7f7      	b.n	8005f56 <_realloc_r+0x14>
 8005f66:	f000 f81b 	bl	8005fa0 <_malloc_usable_size_r>
 8005f6a:	9001      	str	r0, [sp, #4]
 8005f6c:	4284      	cmp	r4, r0
 8005f6e:	d803      	bhi.n	8005f78 <_realloc_r+0x36>
 8005f70:	0035      	movs	r5, r6
 8005f72:	0843      	lsrs	r3, r0, #1
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d3ee      	bcc.n	8005f56 <_realloc_r+0x14>
 8005f78:	0021      	movs	r1, r4
 8005f7a:	0038      	movs	r0, r7
 8005f7c:	f7ff fc38 	bl	80057f0 <_malloc_r>
 8005f80:	1e05      	subs	r5, r0, #0
 8005f82:	d0e8      	beq.n	8005f56 <_realloc_r+0x14>
 8005f84:	9b01      	ldr	r3, [sp, #4]
 8005f86:	0022      	movs	r2, r4
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	d900      	bls.n	8005f8e <_realloc_r+0x4c>
 8005f8c:	001a      	movs	r2, r3
 8005f8e:	0031      	movs	r1, r6
 8005f90:	0028      	movs	r0, r5
 8005f92:	f7ff fb71 	bl	8005678 <memcpy>
 8005f96:	0031      	movs	r1, r6
 8005f98:	0038      	movs	r0, r7
 8005f9a:	f7ff fbbd 	bl	8005718 <_free_r>
 8005f9e:	e7da      	b.n	8005f56 <_realloc_r+0x14>

08005fa0 <_malloc_usable_size_r>:
 8005fa0:	1f0b      	subs	r3, r1, #4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	1f18      	subs	r0, r3, #4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	da01      	bge.n	8005fae <_malloc_usable_size_r+0xe>
 8005faa:	580b      	ldr	r3, [r1, r0]
 8005fac:	18c0      	adds	r0, r0, r3
 8005fae:	4770      	bx	lr

08005fb0 <_init>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr

08005fbc <_fini>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc2:	bc08      	pop	{r3}
 8005fc4:	469e      	mov	lr, r3
 8005fc6:	4770      	bx	lr
