
PARTS_DRAWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d68  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d50  08006d50  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d50  08006d50  00016d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d58  08006d58  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  2000008c  08006dec  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d98  08006dec  00020d98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b410  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bfe  00000000  00000000  0003b4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001138b  00000000  00000000  0003f0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00050450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a68  00000000  00000000  000513e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015eda  00000000  00000000  00052e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e748  00000000  00000000  00068d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081073  00000000  00000000  0008746a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001084dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000354c  00000000  00000000  00108530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005fd0 	.word	0x08005fd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08005fd0 	.word	0x08005fd0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d111      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d10f      	bne.n	8000284 <__aeabi_uldivmod+0x28>
 8000264:	2900      	cmp	r1, #0
 8000266:	d100      	bne.n	800026a <__aeabi_uldivmod+0xe>
 8000268:	2800      	cmp	r0, #0
 800026a:	d002      	beq.n	8000272 <__aeabi_uldivmod+0x16>
 800026c:	2100      	movs	r1, #0
 800026e:	43c9      	mvns	r1, r1
 8000270:	0008      	movs	r0, r1
 8000272:	b407      	push	{r0, r1, r2}
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__aeabi_uldivmod+0x24>)
 8000276:	a102      	add	r1, pc, #8	; (adr r1, 8000280 <__aeabi_uldivmod+0x24>)
 8000278:	1840      	adds	r0, r0, r1
 800027a:	9002      	str	r0, [sp, #8]
 800027c:	bd03      	pop	{r0, r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	ffffffd9 	.word	0xffffffd9
 8000284:	b403      	push	{r0, r1}
 8000286:	4668      	mov	r0, sp
 8000288:	b501      	push	{r0, lr}
 800028a:	9802      	ldr	r0, [sp, #8]
 800028c:	f000 f834 	bl	80002f8 <__udivmoddi4>
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	469e      	mov	lr, r3
 8000294:	b002      	add	sp, #8
 8000296:	bc0c      	pop	{r2, r3}
 8000298:	4770      	bx	lr
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	4699      	mov	r9, r3
 80002a8:	0c3b      	lsrs	r3, r7, #16
 80002aa:	469c      	mov	ip, r3
 80002ac:	0413      	lsls	r3, r2, #16
 80002ae:	0c1b      	lsrs	r3, r3, #16
 80002b0:	001d      	movs	r5, r3
 80002b2:	000e      	movs	r6, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	0400      	lsls	r0, r0, #16
 80002b8:	0c14      	lsrs	r4, r2, #16
 80002ba:	0c00      	lsrs	r0, r0, #16
 80002bc:	4345      	muls	r5, r0
 80002be:	434b      	muls	r3, r1
 80002c0:	4360      	muls	r0, r4
 80002c2:	4361      	muls	r1, r4
 80002c4:	18c0      	adds	r0, r0, r3
 80002c6:	0c2c      	lsrs	r4, r5, #16
 80002c8:	1820      	adds	r0, r4, r0
 80002ca:	468c      	mov	ip, r1
 80002cc:	4283      	cmp	r3, r0
 80002ce:	d903      	bls.n	80002d8 <__aeabi_lmul+0x3c>
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	025b      	lsls	r3, r3, #9
 80002d4:	4698      	mov	r8, r3
 80002d6:	44c4      	add	ip, r8
 80002d8:	4649      	mov	r1, r9
 80002da:	4379      	muls	r1, r7
 80002dc:	4372      	muls	r2, r6
 80002de:	0c03      	lsrs	r3, r0, #16
 80002e0:	4463      	add	r3, ip
 80002e2:	042d      	lsls	r5, r5, #16
 80002e4:	0c2d      	lsrs	r5, r5, #16
 80002e6:	18c9      	adds	r1, r1, r3
 80002e8:	0400      	lsls	r0, r0, #16
 80002ea:	1940      	adds	r0, r0, r5
 80002ec:	1889      	adds	r1, r1, r2
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f000 f8ba 	bl	8000490 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 f8b5 	bl	8000490 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f000 f807 	bl	80004a8 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f000 f802 	bl	80004a8 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	; (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <DS3231_set_time>:

void DS3231_set_time(uint8_t sec, uint8_t minute, uint8_t hour)
{
  uint8_t buffer[4];

  buffer[0] = SECONDS_AD;
 80004e4:	2300      	movs	r3, #0
{
 80004e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e8:	b087      	sub	sp, #28
  buffer[0] = SECONDS_AD;
 80004ea:	ac05      	add	r4, sp, #20
{
 80004ec:	000e      	movs	r6, r1
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004ee:	210a      	movs	r1, #10
{
 80004f0:	0015      	movs	r5, r2
 80004f2:	0007      	movs	r7, r0
  buffer[0] = SECONDS_AD;
 80004f4:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004f6:	f7ff fe25 	bl	8000144 <__udivsi3>
 80004fa:	210a      	movs	r1, #10
 80004fc:	0103      	lsls	r3, r0, #4
 80004fe:	0038      	movs	r0, r7
 8000500:	9303      	str	r3, [sp, #12]
 8000502:	f7ff fea5 	bl	8000250 <__aeabi_uidivmod>
 8000506:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000508:	0030      	movs	r0, r6
  buffer[1] = ((sec/10)<<4) + (sec%10);
 800050a:	1859      	adds	r1, r3, r1
 800050c:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 800050e:	210a      	movs	r1, #10
 8000510:	f7ff fe18 	bl	8000144 <__udivsi3>
 8000514:	210a      	movs	r1, #10
 8000516:	0107      	lsls	r7, r0, #4
 8000518:	0030      	movs	r0, r6
 800051a:	f7ff fe99 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800051e:	0028      	movs	r0, r5
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000520:	187f      	adds	r7, r7, r1
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000522:	210a      	movs	r1, #10
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000524:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000526:	f7ff fe0d 	bl	8000144 <__udivsi3>
 800052a:	0106      	lsls	r6, r0, #4
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	210a      	movs	r1, #10
 8000530:	4006      	ands	r6, r0
 8000532:	0028      	movs	r0, r5
 8000534:	f7ff fe8c 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000538:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800053a:	1876      	adds	r6, r6, r1
 800053c:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800053e:	0022      	movs	r2, r4
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	21d0      	movs	r1, #208	; 0xd0
 8000544:	3b60      	subs	r3, #96	; 0x60
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <DS3231_set_time+0x6c>)
 8000548:	f003 fe58 	bl	80041fc <HAL_I2C_Master_Transmit>
}
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	200004e4 	.word	0x200004e4

08000554 <DS3231_get_time>:

void DS3231_get_time(uint8_t *get_second, uint8_t *get_minute, uint8_t *get_hour)
{
  uint8_t buffer;

  buffer = SECONDS_AD;
 8000554:	2300      	movs	r3, #0
{
 8000556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	0016      	movs	r6, r2
  buffer = SECONDS_AD;
 800055c:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800055e:	2564      	movs	r5, #100	; 0x64
  buffer = SECONDS_AD;
 8000560:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000562:	220f      	movs	r2, #15
 8000564:	4c29      	ldr	r4, [pc, #164]	; (800060c <DS3231_get_time+0xb8>)
{
 8000566:	9103      	str	r1, [sp, #12]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000568:	a902      	add	r1, sp, #8
{
 800056a:	9002      	str	r0, [sp, #8]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800056c:	1852      	adds	r2, r2, r1
 800056e:	0020      	movs	r0, r4
 8000570:	21d1      	movs	r1, #209	; 0xd1
 8000572:	9500      	str	r5, [sp, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	f003 fe41 	bl	80041fc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_second, 1, 100);
 800057a:	9a02      	ldr	r2, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	21d1      	movs	r1, #209	; 0xd1
 8000580:	0020      	movs	r0, r4
 8000582:	9500      	str	r5, [sp, #0]
 8000584:	f003 fecc 	bl	8004320 <HAL_I2C_Master_Receive>

  buffer = MINUTES_AD;
 8000588:	2701      	movs	r7, #1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058a:	220f      	movs	r2, #15
  buffer = MINUTES_AD;
 800058c:	ab02      	add	r3, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800058e:	a902      	add	r1, sp, #8
  buffer = MINUTES_AD;
 8000590:	73df      	strb	r7, [r3, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000592:	1852      	adds	r2, r2, r1
 8000594:	003b      	movs	r3, r7
 8000596:	21d1      	movs	r1, #209	; 0xd1
 8000598:	0020      	movs	r0, r4
 800059a:	9500      	str	r5, [sp, #0]
 800059c:	f003 fe2e 	bl	80041fc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_minute, 1, 100);
 80005a0:	003b      	movs	r3, r7
 80005a2:	9a03      	ldr	r2, [sp, #12]
 80005a4:	21d1      	movs	r1, #209	; 0xd1
 80005a6:	0020      	movs	r0, r4
 80005a8:	9500      	str	r5, [sp, #0]
 80005aa:	f003 feb9 	bl	8004320 <HAL_I2C_Master_Receive>

  buffer = HOURS_AD;
 80005ae:	2302      	movs	r3, #2
 80005b0:	aa02      	add	r2, sp, #8
 80005b2:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80005b4:	220f      	movs	r2, #15
 80005b6:	a902      	add	r1, sp, #8
 80005b8:	003b      	movs	r3, r7
 80005ba:	1852      	adds	r2, r2, r1
 80005bc:	0020      	movs	r0, r4
 80005be:	21d1      	movs	r1, #209	; 0xd1
 80005c0:	9500      	str	r5, [sp, #0]
 80005c2:	f003 fe1b 	bl	80041fc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_hour, 1, 100);
 80005c6:	003b      	movs	r3, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	21d1      	movs	r1, #209	; 0xd1
 80005cc:	0020      	movs	r0, r4
 80005ce:	9500      	str	r5, [sp, #0]
 80005d0:	f003 fea6 	bl	8004320 <HAL_I2C_Master_Receive>

  *get_hour = (((*get_hour & 0x30) >> 4) * 10) + (*get_hour & 0x0f);
 80005d4:	230a      	movs	r3, #10
 80005d6:	210f      	movs	r1, #15
 80005d8:	7830      	ldrb	r0, [r6, #0]
 80005da:	0682      	lsls	r2, r0, #26
 80005dc:	0f92      	lsrs	r2, r2, #30
 80005de:	435a      	muls	r2, r3
 80005e0:	4008      	ands	r0, r1
 80005e2:	1812      	adds	r2, r2, r0
 80005e4:	7032      	strb	r2, [r6, #0]
  *get_minute = ((*get_minute >> 4) * 10) + (*get_minute & 0x0f);
 80005e6:	9a03      	ldr	r2, [sp, #12]
 80005e8:	7810      	ldrb	r0, [r2, #0]
 80005ea:	0902      	lsrs	r2, r0, #4
 80005ec:	435a      	muls	r2, r3
 80005ee:	4008      	ands	r0, r1
 80005f0:	1812      	adds	r2, r2, r0
 80005f2:	9803      	ldr	r0, [sp, #12]
 80005f4:	7002      	strb	r2, [r0, #0]
  *get_second = ((*get_second >> 4) * 10) + (*get_second & 0x0f);
 80005f6:	9a02      	ldr	r2, [sp, #8]
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	0910      	lsrs	r0, r2, #4
 80005fc:	4343      	muls	r3, r0
 80005fe:	400a      	ands	r2, r1
 8000600:	189b      	adds	r3, r3, r2
 8000602:	9a02      	ldr	r2, [sp, #8]
 8000604:	7013      	strb	r3, [r2, #0]
}
 8000606:	b007      	add	sp, #28
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	200004e4 	.word	0x200004e4

08000610 <DS3231_set_date>:

void DS3231_set_date(uint8_t day, uint8_t month, uint8_t year)
{
  uint8_t buffer[4];

  buffer[0] = DATE_AD;
 8000610:	2304      	movs	r3, #4
{
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000614:	b087      	sub	sp, #28
  buffer[0] = DATE_AD;
 8000616:	ac05      	add	r4, sp, #20
{
 8000618:	000e      	movs	r6, r1
  buffer[1] = ((day/10)<<4) + (day%10);
 800061a:	210a      	movs	r1, #10
{
 800061c:	0015      	movs	r5, r2
 800061e:	0007      	movs	r7, r0
  buffer[0] = DATE_AD;
 8000620:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((day/10)<<4) + (day%10);
 8000622:	f7ff fd8f 	bl	8000144 <__udivsi3>
 8000626:	210a      	movs	r1, #10
 8000628:	0103      	lsls	r3, r0, #4
 800062a:	0038      	movs	r0, r7
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	f7ff fe0f 	bl	8000250 <__aeabi_uidivmod>
 8000632:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((month/10)<<4) + (month%10);
 8000634:	0030      	movs	r0, r6
  buffer[1] = ((day/10)<<4) + (day%10);
 8000636:	1859      	adds	r1, r3, r1
 8000638:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((month/10)<<4) + (month%10);
 800063a:	210a      	movs	r1, #10
 800063c:	f7ff fd82 	bl	8000144 <__udivsi3>
 8000640:	210a      	movs	r1, #10
 8000642:	0107      	lsls	r7, r0, #4
 8000644:	0030      	movs	r0, r6
 8000646:	f7ff fe03 	bl	8000250 <__aeabi_uidivmod>
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064a:	0028      	movs	r0, r5
  buffer[2] = ((month/10)<<4) + (month%10);
 800064c:	187f      	adds	r7, r7, r1
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 800064e:	210a      	movs	r1, #10
  buffer[2] = ((month/10)<<4) + (month%10);
 8000650:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000652:	f7ff fd77 	bl	8000144 <__udivsi3>
 8000656:	0106      	lsls	r6, r0, #4
 8000658:	2030      	movs	r0, #48	; 0x30
 800065a:	210a      	movs	r1, #10
 800065c:	4006      	ands	r6, r0
 800065e:	0028      	movs	r0, r5
 8000660:	f7ff fdf6 	bl	8000250 <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000664:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000666:	1876      	adds	r6, r6, r1
 8000668:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800066a:	0022      	movs	r2, r4
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	3b60      	subs	r3, #96	; 0x60
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <DS3231_set_date+0x6c>)
 8000674:	f003 fdc2 	bl	80041fc <HAL_I2C_Master_Transmit>
}
 8000678:	b007      	add	sp, #28
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	200004e4 	.word	0x200004e4

08000680 <DS3231_get_date>:

void DS3231_get_date(uint8_t *get_day, uint8_t *get_month, uint8_t *get_year)
{
  uint8_t buffer;

  buffer = DATE_AD;
 8000680:	2304      	movs	r3, #4
{
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b087      	sub	sp, #28
 8000686:	9203      	str	r2, [sp, #12]
  buffer = DATE_AD;
 8000688:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068a:	2564      	movs	r5, #100	; 0x64
  buffer = DATE_AD;
 800068c:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800068e:	220f      	movs	r2, #15
{
 8000690:	0007      	movs	r7, r0
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000692:	4c28      	ldr	r4, [pc, #160]	; (8000734 <DS3231_get_date+0xb4>)
{
 8000694:	000e      	movs	r6, r1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000696:	a902      	add	r1, sp, #8
 8000698:	1852      	adds	r2, r2, r1
 800069a:	0020      	movs	r0, r4
 800069c:	21d1      	movs	r1, #209	; 0xd1
 800069e:	9500      	str	r5, [sp, #0]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	f003 fdab 	bl	80041fc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_day, 1, 100);
 80006a6:	003a      	movs	r2, r7
 80006a8:	2301      	movs	r3, #1
 80006aa:	21d1      	movs	r1, #209	; 0xd1
 80006ac:	0020      	movs	r0, r4
 80006ae:	9500      	str	r5, [sp, #0]
 80006b0:	f003 fe36 	bl	8004320 <HAL_I2C_Master_Receive>

  buffer = MONTH_AD;
 80006b4:	2305      	movs	r3, #5
 80006b6:	aa02      	add	r2, sp, #8
 80006b8:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006ba:	220f      	movs	r2, #15
 80006bc:	a902      	add	r1, sp, #8
 80006be:	1852      	adds	r2, r2, r1
 80006c0:	0020      	movs	r0, r4
 80006c2:	21d1      	movs	r1, #209	; 0xd1
 80006c4:	9500      	str	r5, [sp, #0]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	f003 fd98 	bl	80041fc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_month, 1, 100);
 80006cc:	0032      	movs	r2, r6
 80006ce:	2301      	movs	r3, #1
 80006d0:	21d1      	movs	r1, #209	; 0xd1
 80006d2:	0020      	movs	r0, r4
 80006d4:	9500      	str	r5, [sp, #0]
 80006d6:	f003 fe23 	bl	8004320 <HAL_I2C_Master_Receive>

  buffer = YEAR_AD;
 80006da:	2306      	movs	r3, #6
 80006dc:	aa02      	add	r2, sp, #8
 80006de:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80006e0:	220f      	movs	r2, #15
 80006e2:	a902      	add	r1, sp, #8
 80006e4:	1852      	adds	r2, r2, r1
 80006e6:	0020      	movs	r0, r4
 80006e8:	21d1      	movs	r1, #209	; 0xd1
 80006ea:	9500      	str	r5, [sp, #0]
 80006ec:	3b05      	subs	r3, #5
 80006ee:	f003 fd85 	bl	80041fc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_year, 1, 100);
 80006f2:	9a03      	ldr	r2, [sp, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	21d1      	movs	r1, #209	; 0xd1
 80006f8:	0020      	movs	r0, r4
 80006fa:	9500      	str	r5, [sp, #0]
 80006fc:	f003 fe10 	bl	8004320 <HAL_I2C_Master_Receive>

  *get_day = ((*get_day >> 4) * 10) + (*get_day & 0x0f);
 8000700:	230a      	movs	r3, #10
 8000702:	210f      	movs	r1, #15
 8000704:	7838      	ldrb	r0, [r7, #0]
 8000706:	0902      	lsrs	r2, r0, #4
 8000708:	435a      	muls	r2, r3
 800070a:	4008      	ands	r0, r1
 800070c:	1812      	adds	r2, r2, r0
 800070e:	703a      	strb	r2, [r7, #0]
  *get_month = (((*get_month & 0x10) >> 4) * 10) + (*get_month & 0x0f);
 8000710:	7830      	ldrb	r0, [r6, #0]
 8000712:	06c2      	lsls	r2, r0, #27
 8000714:	0fd2      	lsrs	r2, r2, #31
 8000716:	435a      	muls	r2, r3
 8000718:	4008      	ands	r0, r1
 800071a:	1812      	adds	r2, r2, r0
 800071c:	7032      	strb	r2, [r6, #0]
  *get_year = ((*get_year >> 4) * 10) + (*get_year & 0x0f);
 800071e:	9a03      	ldr	r2, [sp, #12]
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	0910      	lsrs	r0, r2, #4
 8000724:	4343      	muls	r3, r0
 8000726:	400a      	ands	r2, r1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	9a03      	ldr	r2, [sp, #12]
 800072c:	7013      	strb	r3, [r2, #0]
}
 800072e:	b007      	add	sp, #28
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	200004e4 	.word	0x200004e4

08000738 <led_color>:
		2290665676, 2357774540, 3364407500, 3431516364, 2290927820, 2358036684, 3364669644, 3431778508,
		2294859980, 2361968844, 3368601804, 3435710668, 2295122124, 2362230988, 3368863948, 3435972812,
		2290666700, 2357775564, 3364408524, 3431517388, 2290928844, 2358037708, 3364670668, 3431779532,
		2294861004, 2361969868, 3368602828, 3435711692, 2295123148, 2362232012, 3368864972, 3435973836
};
void led_color(uint8_t id, uint8_t r, uint8_t g, uint8_t b){
 8000738:	b530      	push	{r4, r5, lr}
	ledData[id][0]=g;
 800073a:	250c      	movs	r5, #12
 800073c:	4368      	muls	r0, r5
 800073e:	4c03      	ldr	r4, [pc, #12]	; (800074c <led_color+0x14>)
 8000740:	5022      	str	r2, [r4, r0]
	ledData[id][1]=r;
 8000742:	1824      	adds	r4, r4, r0
 8000744:	6061      	str	r1, [r4, #4]
	ledData[id][2]=b;
 8000746:	60a3      	str	r3, [r4, #8]
}
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000a8 	.word	0x200000a8

08000750 <led_update>:
void led_update(){
	for(int i=0; i<36; i++){
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <led_update+0x44>)
 8000752:	2000      	movs	r0, #0
 8000754:	0019      	movs	r1, r3
void led_update(){
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <led_update+0x48>)
		spiBf[(i*3)]=colLUT[ledData[i][0]];
 800075a:	4c10      	ldr	r4, [pc, #64]	; (800079c <led_update+0x4c>)
 800075c:	6815      	ldr	r5, [r2, #0]
	for(int i=0; i<36; i++){
 800075e:	3001      	adds	r0, #1
		spiBf[(i*3)]=colLUT[ledData[i][0]];
 8000760:	00ad      	lsls	r5, r5, #2
 8000762:	592d      	ldr	r5, [r5, r4]
 8000764:	601d      	str	r5, [r3, #0]
		spiBf[(i*3)+1]=colLUT[ledData[i][1]];
 8000766:	6855      	ldr	r5, [r2, #4]
 8000768:	00ad      	lsls	r5, r5, #2
 800076a:	592d      	ldr	r5, [r5, r4]
 800076c:	605d      	str	r5, [r3, #4]
		spiBf[(i*3)+2]=colLUT[ledData[i][2]];
 800076e:	6895      	ldr	r5, [r2, #8]
	for(int i=0; i<36; i++){
 8000770:	320c      	adds	r2, #12
		spiBf[(i*3)+2]=colLUT[ledData[i][2]];
 8000772:	00ad      	lsls	r5, r5, #2
 8000774:	592d      	ldr	r5, [r5, r4]
 8000776:	609d      	str	r5, [r3, #8]
	for(int i=0; i<36; i++){
 8000778:	330c      	adds	r3, #12
 800077a:	2824      	cmp	r0, #36	; 0x24
 800077c:	d1ee      	bne.n	800075c <led_update+0xc>
	}
	spiBf[108]=0;
 800077e:	23d8      	movs	r3, #216	; 0xd8
 8000780:	2200      	movs	r2, #0
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	50ca      	str	r2, [r1, r3]
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)spiBf, 436);
 8000786:	32b5      	adds	r2, #181	; 0xb5
 8000788:	32ff      	adds	r2, #255	; 0xff
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <led_update+0x50>)
 800078c:	f004 fca2 	bl	80050d4 <HAL_SPI_Transmit_DMA>
}
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000258 	.word	0x20000258
 8000798:	200000a8 	.word	0x200000a8
 800079c:	08005fe8 	.word	0x08005fe8
 80007a0:	20000530 	.word	0x20000530

080007a4 <led_clear>:
void led_clear(){
	memset(ledData, 0, (size_t)sizeof(ledData));
 80007a4:	22d8      	movs	r2, #216	; 0xd8
void led_clear(){
 80007a6:	b510      	push	{r4, lr}
	memset(ledData, 0, (size_t)sizeof(ledData));
 80007a8:	2100      	movs	r1, #0
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <led_clear+0x10>)
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	f004 ff8f 	bl	80056d0 <memset>
	//	led_update();
}
 80007b2:	bd10      	pop	{r4, pc}
 80007b4:	200000a8 	.word	0x200000a8

080007b8 <led_cmp>:
uint8_t led_cmp(uint8_t id, uint8_t r, uint8_t g, uint8_t b){
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t result = 0;

	if(ledData[id][0]==g){
 80007ba:	260c      	movs	r6, #12
 80007bc:	0037      	movs	r7, r6
 80007be:	4347      	muls	r7, r0
 80007c0:	4c08      	ldr	r4, [pc, #32]	; (80007e4 <led_cmp+0x2c>)
 80007c2:	5938      	ldr	r0, [r7, r4]
		result++;
	}
	if(ledData[id][1]==r){
 80007c4:	19e7      	adds	r7, r4, r7
	if(ledData[id][0]==g){
 80007c6:	1a80      	subs	r0, r0, r2
 80007c8:	4242      	negs	r2, r0
 80007ca:	4150      	adcs	r0, r2
	if(ledData[id][1]==r){
 80007cc:	687a      	ldr	r2, [r7, #4]
	uint8_t result = 0;
 80007ce:	b2c0      	uxtb	r0, r0
		result++;
 80007d0:	1a52      	subs	r2, r2, r1
 80007d2:	4251      	negs	r1, r2
 80007d4:	414a      	adcs	r2, r1
 80007d6:	1880      	adds	r0, r0, r2
	}
	if(ledData[id][2]==b){
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d101      	bne.n	80007e2 <led_cmp+0x2a>
		result++;
 80007de:	3001      	adds	r0, #1
 80007e0:	b2c0      	uxtb	r0, r0
	}

	return result;
}
 80007e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e4:	200000a8 	.word	0x200000a8

080007e8 <SSD1306_PutsXY>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SSD1306_PutsXY(uint8_t x, uint8_t y, String str, uint8_t color) {
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	001d      	movs	r5, r3
	SSD1306_GotoXY(x * 6, y * 8);
 80007ec:	2306      	movs	r3, #6
void SSD1306_PutsXY(uint8_t x, uint8_t y, String str, uint8_t color) {
 80007ee:	0014      	movs	r4, r2
	SSD1306_GotoXY(x * 6, y * 8);
 80007f0:	4358      	muls	r0, r3
 80007f2:	00c9      	lsls	r1, r1, #3
 80007f4:	f002 fb06 	bl	8002e04 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_6x8, color);
 80007f8:	002a      	movs	r2, r5
 80007fa:	0020      	movs	r0, r4
 80007fc:	4901      	ldr	r1, [pc, #4]	; (8000804 <SSD1306_PutsXY+0x1c>)
 80007fe:	f002 fb3d 	bl	8002e7c <SSD1306_Puts>
}
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	20000000 	.word	0x20000000

08000808 <basicScreen>:

void basicScreen(){
 8000808:	b507      	push	{r0, r1, r2, lr}
	SSD1306_Fill(0);
 800080a:	2000      	movs	r0, #0
 800080c:	f002 fac4 	bl	8002d98 <SSD1306_Fill>
	SSD1306_DrawFilledRectangle(0, 0, 127, 7, 1);
 8000810:	2301      	movs	r3, #1
 8000812:	2100      	movs	r1, #0
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	227f      	movs	r2, #127	; 0x7f
 8000818:	0008      	movs	r0, r1
 800081a:	3306      	adds	r3, #6
 800081c:	f002 fbdb 	bl	8002fd6 <SSD1306_DrawFilledRectangle>
}
 8000820:	bd07      	pop	{r0, r1, r2, pc}
	...

08000824 <swS>:

void swS(){
	oldsw = JOY_P ? true : false;
 8000824:	20a0      	movs	r0, #160	; 0xa0
void swS(){
 8000826:	b510      	push	{r4, lr}
	oldsw = JOY_P ? true : false;
 8000828:	2104      	movs	r1, #4
 800082a:	05c0      	lsls	r0, r0, #23
 800082c:	f003 fb64 	bl	8003ef8 <HAL_GPIO_ReadPin>
 8000830:	4243      	negs	r3, r0
 8000832:	4158      	adcs	r0, r3
 8000834:	4b01      	ldr	r3, [pc, #4]	; (800083c <swS+0x18>)
 8000836:	7018      	strb	r0, [r3, #0]
}
 8000838:	bd10      	pop	{r4, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20000015 	.word	0x20000015

08000840 <mainM>:
			free(bf);
		}
	}
}

MODE mainM(){
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 8000842:	4b78      	ldr	r3, [pc, #480]	; (8000a24 <mainM+0x1e4>)
MODE mainM(){
 8000844:	b085      	sub	sp, #20
	if(firstF){
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d023      	beq.n	8000894 <mainM+0x54>
		firstF = false;
 800084c:	2300      	movs	r3, #0
 800084e:	4a75      	ldr	r2, [pc, #468]	; (8000a24 <mainM+0x1e4>)
		basicScreen();
		for(uint8_t i = 0; i < 36; i++)
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8000850:	2504      	movs	r5, #4
		firstF = false;
 8000852:	7013      	strb	r3, [r2, #0]
		basicScreen();
 8000854:	f7ff ffd8 	bl	8000808 <basicScreen>
		for(uint8_t i = 0; i < 36; i++)
 8000858:	2390      	movs	r3, #144	; 0x90
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 800085a:	2601      	movs	r6, #1
 800085c:	4c72      	ldr	r4, [pc, #456]	; (8000a28 <mainM+0x1e8>)
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	18e7      	adds	r7, r4, r3
 8000862:	8963      	ldrh	r3, [r4, #10]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <mainM+0x44>
 8000868:	7921      	ldrb	r1, [r4, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	002b      	movs	r3, r5
 800086e:	79a0      	ldrb	r0, [r4, #6]
 8000870:	2901      	cmp	r1, #1
 8000872:	d005      	beq.n	8000880 <mainM+0x40>
 8000874:	2903      	cmp	r1, #3
 8000876:	d000      	beq.n	800087a <mainM+0x3a>
 8000878:	e0cc      	b.n	8000a14 <mainM+0x1d4>
 800087a:	002a      	movs	r2, r5
 800087c:	2100      	movs	r1, #0
 800087e:	2304      	movs	r3, #4
 8000880:	f7ff ff5a 	bl	8000738 <led_color>
		for(uint8_t i = 0; i < 36; i++)
 8000884:	3410      	adds	r4, #16
 8000886:	42a7      	cmp	r7, r4
 8000888:	d1eb      	bne.n	8000862 <mainM+0x22>
		led_update();
 800088a:	f7ff ff61 	bl	8000750 <led_update>
		sel = 0;
 800088e:	2200      	movs	r2, #0
 8000890:	4b66      	ldr	r3, [pc, #408]	; (8000a2c <mainM+0x1ec>)
 8000892:	701a      	strb	r2, [r3, #0]
	}
	if(RE1){
 8000894:	4b66      	ldr	r3, [pc, #408]	; (8000a30 <mainM+0x1f0>)
 8000896:	4f67      	ldr	r7, [pc, #412]	; (8000a34 <mainM+0x1f4>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b63      	cmp	r3, #99	; 0x63
 800089c:	d959      	bls.n	8000952 <mainM+0x112>
		if(JOY_U && sel)sel--;
 800089e:	21fa      	movs	r1, #250	; 0xfa
 80008a0:	4b65      	ldr	r3, [pc, #404]	; (8000a38 <mainM+0x1f8>)
 80008a2:	0109      	lsls	r1, r1, #4
 80008a4:	885a      	ldrh	r2, [r3, #2]
 80008a6:	428a      	cmp	r2, r1
 80008a8:	d908      	bls.n	80008bc <mainM+0x7c>
 80008aa:	4a60      	ldr	r2, [pc, #384]	; (8000a2c <mainM+0x1ec>)
 80008ac:	7813      	ldrb	r3, [r2, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <mainM+0x76>
 80008b2:	3b01      	subs	r3, #1
		if(JOY_D && sel < 4) sel++;
 80008b4:	7013      	strb	r3, [r2, #0]
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 80008b6:	2301      	movs	r3, #1
 80008b8:	703b      	strb	r3, [r7, #0]
 80008ba:	e010      	b.n	80008de <mainM+0x9e>
		if(JOY_D && sel < 4) sel++;
 80008bc:	2196      	movs	r1, #150	; 0x96
 80008be:	0049      	lsls	r1, r1, #1
 80008c0:	428a      	cmp	r2, r1
 80008c2:	d205      	bcs.n	80008d0 <mainM+0x90>
 80008c4:	4a59      	ldr	r2, [pc, #356]	; (8000a2c <mainM+0x1ec>)
 80008c6:	7813      	ldrb	r3, [r2, #0]
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d8f4      	bhi.n	80008b6 <mainM+0x76>
 80008cc:	3301      	adds	r3, #1
 80008ce:	e7f1      	b.n	80008b4 <mainM+0x74>
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	4a5a      	ldr	r2, [pc, #360]	; (8000a3c <mainM+0x1fc>)
 80008d4:	3b2d      	subs	r3, #45	; 0x2d
 80008d6:	3bff      	subs	r3, #255	; 0xff
 80008d8:	b29b      	uxth	r3, r3
 80008da:	4293      	cmp	r3, r2
 80008dc:	d8eb      	bhi.n	80008b6 <mainM+0x76>

		date.year = 0;
 80008de:	2500      	movs	r5, #0
 80008e0:	4c57      	ldr	r4, [pc, #348]	; (8000a40 <mainM+0x200>)
		DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 80008e2:	0020      	movs	r0, r4
 80008e4:	1ca2      	adds	r2, r4, #2
 80008e6:	1c61      	adds	r1, r4, #1
		date.year = 0;
 80008e8:	8065      	strh	r5, [r4, #2]
		DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 80008ea:	f7ff fec9 	bl	8000680 <DS3231_get_date>
		DS3231_get_time(&time.sec, &time.min, &time.hour);
 80008ee:	4e55      	ldr	r6, [pc, #340]	; (8000a44 <mainM+0x204>)
 80008f0:	0032      	movs	r2, r6
 80008f2:	1c71      	adds	r1, r6, #1
 80008f4:	1cb0      	adds	r0, r6, #2
 80008f6:	f7ff fe2d 	bl	8000554 <DS3231_get_time>
		date.year += 1992;
 80008fa:	22f9      	movs	r2, #249	; 0xf9
 80008fc:	8863      	ldrh	r3, [r4, #2]
 80008fe:	00d2      	lsls	r2, r2, #3
 8000900:	189b      	adds	r3, r3, r2
 8000902:	b29b      	uxth	r3, r3

		String bf = (String)calloc(0, sizeof(char) * 16);
 8000904:	2110      	movs	r1, #16
 8000906:	0028      	movs	r0, r5
		date.year += 1992;
 8000908:	9303      	str	r3, [sp, #12]
 800090a:	8063      	strh	r3, [r4, #2]
		String bf = (String)calloc(0, sizeof(char) * 16);
 800090c:	f004 fe7c 	bl	8005608 <calloc>
 8000910:	0005      	movs	r5, r0
		sprintf(bf, "%04d.%02d.%02d", date.year, date.month, date.day);
 8000912:	7822      	ldrb	r2, [r4, #0]
 8000914:	7863      	ldrb	r3, [r4, #1]
 8000916:	494c      	ldr	r1, [pc, #304]	; (8000a48 <mainM+0x208>)
 8000918:	9200      	str	r2, [sp, #0]
 800091a:	9a03      	ldr	r2, [sp, #12]
 800091c:	f005 f800 	bl	8005920 <siprintf>
		SSD1306_PutsXY(11, 3, bf, 1);
 8000920:	2301      	movs	r3, #1
 8000922:	002a      	movs	r2, r5
 8000924:	2103      	movs	r1, #3
 8000926:	200b      	movs	r0, #11
 8000928:	f7ff ff5e 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "%02d:%02d:%02d", time.hour, time.min, time.sec);
 800092c:	78b1      	ldrb	r1, [r6, #2]
 800092e:	7873      	ldrb	r3, [r6, #1]
 8000930:	7832      	ldrb	r2, [r6, #0]
 8000932:	0028      	movs	r0, r5
 8000934:	9100      	str	r1, [sp, #0]
 8000936:	4945      	ldr	r1, [pc, #276]	; (8000a4c <mainM+0x20c>)
 8000938:	f004 fff2 	bl	8005920 <siprintf>
		SSD1306_PutsXY(13, 4, bf, 1);
 800093c:	200d      	movs	r0, #13
 800093e:	2301      	movs	r3, #1
 8000940:	002a      	movs	r2, r5
 8000942:	2104      	movs	r1, #4
 8000944:	f7ff ff50 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 8000948:	f002 fb9e 	bl	8003088 <SSD1306_UpdateScreen>
		free(bf);
 800094c:	0028      	movs	r0, r5
 800094e:	f004 fe99 	bl	8005684 <free>
	}
	if(JOY_P){
 8000952:	20a0      	movs	r0, #160	; 0xa0
 8000954:	2104      	movs	r1, #4
 8000956:	05c0      	lsls	r0, r0, #23
 8000958:	f003 face 	bl	8003ef8 <HAL_GPIO_ReadPin>
		if(!oldsw){
 800095c:	4b3c      	ldr	r3, [pc, #240]	; (8000a50 <mainM+0x210>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4318      	orrs	r0, r3
 8000962:	b2c0      	uxtb	r0, r0
 8000964:	2800      	cmp	r0, #0
 8000966:	d11f      	bne.n	80009a8 <mainM+0x168>
			swS();
 8000968:	f7ff ff5c 	bl	8000824 <swS>
			if(ptC || !sel){
 800096c:	4b39      	ldr	r3, [pc, #228]	; (8000a54 <mainM+0x214>)
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <mainM+0x1ec>)
 8000972:	2a00      	cmp	r2, #0
 8000974:	d102      	bne.n	800097c <mainM+0x13c>
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	2a00      	cmp	r2, #0
 800097a:	d112      	bne.n	80009a2 <mainM+0x162>
				udf = true;
 800097c:	2001      	movs	r0, #1
				firstF = true;
 800097e:	4a29      	ldr	r2, [pc, #164]	; (8000a24 <mainM+0x1e4>)
				return sel == 0 ? PSAVE : sel == 1 ? PUSE : sel == 2 ? PFIND : sel == 3 ? PARTITION : PLOG;
 8000980:	781b      	ldrb	r3, [r3, #0]
				udf = true;
 8000982:	7038      	strb	r0, [r7, #0]
				firstF = true;
 8000984:	7010      	strb	r0, [r2, #0]
				return sel == 0 ? PSAVE : sel == 1 ? PUSE : sel == 2 ? PFIND : sel == 3 ? PARTITION : PLOG;
 8000986:	2b00      	cmp	r3, #0
 8000988:	d009      	beq.n	800099e <mainM+0x15e>
 800098a:	1800      	adds	r0, r0, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d006      	beq.n	800099e <mainM+0x15e>
 8000990:	3003      	adds	r0, #3
 8000992:	2b02      	cmp	r3, #2
 8000994:	d003      	beq.n	800099e <mainM+0x15e>
 8000996:	1ed8      	subs	r0, r3, #3
 8000998:	1e43      	subs	r3, r0, #1
 800099a:	4198      	sbcs	r0, r3
 800099c:	3007      	adds	r0, #7
		SSD1306_PutsXY(1, 6, "Part log", 1);

		SSD1306_PutsXY(0, sel + 2, ">", 1);
	}
	return MAIN;
}
 800099e:	b005      	add	sp, #20
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			}else buzFlag = 1;
 80009a2:	2201      	movs	r2, #1
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <mainM+0x218>)
 80009a6:	701a      	strb	r2, [r3, #0]
	if(udf){
 80009a8:	7838      	ldrb	r0, [r7, #0]
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d0f7      	beq.n	800099e <mainM+0x15e>
		udf = false;
 80009ae:	2400      	movs	r4, #0
 80009b0:	703c      	strb	r4, [r7, #0]
		basicScreen();
 80009b2:	f7ff ff29 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Menu", 0);
 80009b6:	0023      	movs	r3, r4
 80009b8:	0021      	movs	r1, r4
 80009ba:	0020      	movs	r0, r4
 80009bc:	4a27      	ldr	r2, [pc, #156]	; (8000a5c <mainM+0x21c>)
 80009be:	f7ff ff13 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 2, "Part save", 1);
 80009c2:	2301      	movs	r3, #1
 80009c4:	2102      	movs	r1, #2
 80009c6:	0018      	movs	r0, r3
 80009c8:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <mainM+0x220>)
 80009ca:	f7ff ff0d 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 3, "Part use", 1);
 80009ce:	2301      	movs	r3, #1
 80009d0:	2103      	movs	r1, #3
 80009d2:	0018      	movs	r0, r3
 80009d4:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <mainM+0x224>)
 80009d6:	f7ff ff07 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 4, "Part find", 1);
 80009da:	2301      	movs	r3, #1
 80009dc:	2104      	movs	r1, #4
 80009de:	0018      	movs	r0, r3
 80009e0:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <mainM+0x228>)
 80009e2:	f7ff ff01 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 5, "Partition", 1);
 80009e6:	2301      	movs	r3, #1
 80009e8:	2105      	movs	r1, #5
 80009ea:	0018      	movs	r0, r3
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <mainM+0x22c>)
 80009ee:	f7ff fefb 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 6, "Part log", 1);
 80009f2:	2301      	movs	r3, #1
 80009f4:	2106      	movs	r1, #6
 80009f6:	0018      	movs	r0, r3
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <mainM+0x230>)
 80009fa:	f7ff fef5 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, sel + 2, ">", 1);
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <mainM+0x1ec>)
 8000a00:	0020      	movs	r0, r4
 8000a02:	7819      	ldrb	r1, [r3, #0]
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <mainM+0x234>)
 8000a06:	3102      	adds	r1, #2
 8000a08:	2301      	movs	r3, #1
 8000a0a:	b2c9      	uxtb	r1, r1
 8000a0c:	f7ff feec 	bl	80007e8 <SSD1306_PutsXY>
	return MAIN;
 8000a10:	0020      	movs	r0, r4
 8000a12:	e7c4      	b.n	800099e <mainM+0x15e>
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8000a14:	0032      	movs	r2, r6
 8000a16:	2902      	cmp	r1, #2
 8000a18:	d100      	bne.n	8000a1c <mainM+0x1dc>
 8000a1a:	002a      	movs	r2, r5
 8000a1c:	0029      	movs	r1, r5
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e72e      	b.n	8000880 <mainM+0x40>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000008 	.word	0x20000008
 8000a28:	2000070c 	.word	0x2000070c
 8000a2c:	20000958 	.word	0x20000958
 8000a30:	20000957 	.word	0x20000957
 8000a34:	2000001a 	.word	0x2000001a
 8000a38:	2000040c 	.word	0x2000040c
 8000a3c:	00000e74 	.word	0x00000e74
 8000a40:	20000414 	.word	0x20000414
 8000a44:	2000095e 	.word	0x2000095e
 8000a48:	080069d8 	.word	0x080069d8
 8000a4c:	080069e7 	.word	0x080069e7
 8000a50:	20000015 	.word	0x20000015
 8000a54:	2000094c 	.word	0x2000094c
 8000a58:	20000412 	.word	0x20000412
 8000a5c:	080069f6 	.word	0x080069f6
 8000a60:	080069fc 	.word	0x080069fc
 8000a64:	08006a06 	.word	0x08006a06
 8000a68:	08006a0f 	.word	0x08006a0f
 8000a6c:	08006b84 	.word	0x08006b84
 8000a70:	08006a19 	.word	0x08006a19
 8000a74:	08006a22 	.word	0x08006a22

08000a78 <pUseM>:
		SSD1306_UpdateScreen();
	}
	return PSAVE;
}

MODE pUseM(){
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(firstF){
 8000a7a:	4d89      	ldr	r5, [pc, #548]	; (8000ca0 <pUseM+0x228>)
 8000a7c:	782b      	ldrb	r3, [r5, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <pUseM+0x18>
		firstF = false;
 8000a82:	2300      	movs	r3, #0
		tempX = 1;
 8000a84:	4a87      	ldr	r2, [pc, #540]	; (8000ca4 <pUseM+0x22c>)
		firstF = false;
 8000a86:	702b      	strb	r3, [r5, #0]
		tempX = 1;
 8000a88:	3301      	adds	r3, #1
 8000a8a:	7013      	strb	r3, [r2, #0]
		tempY = 1;
 8000a8c:	4a86      	ldr	r2, [pc, #536]	; (8000ca8 <pUseM+0x230>)
 8000a8e:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 8000a90:	4b86      	ldr	r3, [pc, #536]	; (8000cac <pUseM+0x234>)
 8000a92:	4c87      	ldr	r4, [pc, #540]	; (8000cb0 <pUseM+0x238>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	2a63      	cmp	r2, #99	; 0x63
 8000a98:	d925      	bls.n	8000ae6 <pUseM+0x6e>
		reC = 0;
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
		if(JOY_R && tempX < 6) tempX++;
 8000a9e:	23fa      	movs	r3, #250	; 0xfa
 8000aa0:	4984      	ldr	r1, [pc, #528]	; (8000cb4 <pUseM+0x23c>)
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	880a      	ldrh	r2, [r1, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d933      	bls.n	8000b12 <pUseM+0x9a>
 8000aaa:	487e      	ldr	r0, [pc, #504]	; (8000ca4 <pUseM+0x22c>)
 8000aac:	7803      	ldrb	r3, [r0, #0]
 8000aae:	2b05      	cmp	r3, #5
 8000ab0:	d801      	bhi.n	8000ab6 <pUseM+0x3e>
 8000ab2:	3301      	adds	r3, #1
		if(JOY_L && tempX > 1) tempX--;
 8000ab4:	7003      	strb	r3, [r0, #0]
		if(JOY_U && tempY < 6) tempY++;
 8000ab6:	884b      	ldrh	r3, [r1, #2]
 8000ab8:	21fa      	movs	r1, #250	; 0xfa
 8000aba:	0109      	lsls	r1, r1, #4
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d932      	bls.n	8000b26 <pUseM+0xae>
 8000ac0:	4879      	ldr	r0, [pc, #484]	; (8000ca8 <pUseM+0x230>)
 8000ac2:	7801      	ldrb	r1, [r0, #0]
 8000ac4:	2905      	cmp	r1, #5
 8000ac6:	d801      	bhi.n	8000acc <pUseM+0x54>
 8000ac8:	3101      	adds	r1, #1
		if(JOY_D && tempY > 1) tempY--;
 8000aca:	7001      	strb	r1, [r0, #0]
		if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 8000acc:	3a2d      	subs	r2, #45	; 0x2d
 8000ace:	3aff      	subs	r2, #255	; 0xff
 8000ad0:	4979      	ldr	r1, [pc, #484]	; (8000cb8 <pUseM+0x240>)
 8000ad2:	b292      	uxth	r2, r2
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	d804      	bhi.n	8000ae2 <pUseM+0x6a>
 8000ad8:	3b2d      	subs	r3, #45	; 0x2d
 8000ada:	3bff      	subs	r3, #255	; 0xff
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d901      	bls.n	8000ae6 <pUseM+0x6e>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	7023      	strb	r3, [r4, #0]
	}
	if(JOY_P){
 8000ae6:	20a0      	movs	r0, #160	; 0xa0
 8000ae8:	2104      	movs	r1, #4
 8000aea:	05c0      	lsls	r0, r0, #23
 8000aec:	f003 fa04 	bl	8003ef8 <HAL_GPIO_ReadPin>
		if(!oldsw){
 8000af0:	4b72      	ldr	r3, [pc, #456]	; (8000cbc <pUseM+0x244>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4318      	orrs	r0, r3
 8000af6:	b2c0      	uxtb	r0, r0
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d121      	bne.n	8000b40 <pUseM+0xc8>
			swS();
 8000afc:	f7ff fe92 	bl	8000824 <swS>
			if(usePos != 255){
 8000b00:	4b6f      	ldr	r3, [pc, #444]	; (8000cc0 <pUseM+0x248>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2bff      	cmp	r3, #255	; 0xff
 8000b06:	d018      	beq.n	8000b3a <pUseM+0xc2>
				firstF = true;
 8000b08:	2301      	movs	r3, #1
				udf = true;
				return USE;
 8000b0a:	2003      	movs	r0, #3
				firstF = true;
 8000b0c:	702b      	strb	r3, [r5, #0]
				udf = true;
 8000b0e:	7023      	strb	r3, [r4, #0]
		led_update();
		SSD1306_UpdateScreen();
	}

	return PUSE;
}
 8000b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(JOY_L && tempX > 1) tempX--;
 8000b12:	2396      	movs	r3, #150	; 0x96
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d2cd      	bcs.n	8000ab6 <pUseM+0x3e>
 8000b1a:	4862      	ldr	r0, [pc, #392]	; (8000ca4 <pUseM+0x22c>)
 8000b1c:	7803      	ldrb	r3, [r0, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d9c9      	bls.n	8000ab6 <pUseM+0x3e>
 8000b22:	3b01      	subs	r3, #1
 8000b24:	e7c6      	b.n	8000ab4 <pUseM+0x3c>
		if(JOY_D && tempY > 1) tempY--;
 8000b26:	2196      	movs	r1, #150	; 0x96
 8000b28:	0049      	lsls	r1, r1, #1
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d2ce      	bcs.n	8000acc <pUseM+0x54>
 8000b2e:	485e      	ldr	r0, [pc, #376]	; (8000ca8 <pUseM+0x230>)
 8000b30:	7801      	ldrb	r1, [r0, #0]
 8000b32:	2901      	cmp	r1, #1
 8000b34:	d9ca      	bls.n	8000acc <pUseM+0x54>
 8000b36:	3901      	subs	r1, #1
 8000b38:	e7c7      	b.n	8000aca <pUseM+0x52>
			}else buzFlag = 2;
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	4b61      	ldr	r3, [pc, #388]	; (8000cc4 <pUseM+0x24c>)
 8000b3e:	701a      	strb	r2, [r3, #0]
	if(udf){
 8000b40:	7823      	ldrb	r3, [r4, #0]
	return PUSE;
 8000b42:	2002      	movs	r0, #2
	if(udf){
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0e3      	beq.n	8000b10 <pUseM+0x98>
		udf = false;
 8000b48:	2700      	movs	r7, #0
 8000b4a:	7027      	strb	r7, [r4, #0]
		basicScreen();
 8000b4c:	f7ff fe5c 	bl	8000808 <basicScreen>
		ledPos = (6 - tempY) * 6 + tempX - 1;
 8000b50:	4b55      	ldr	r3, [pc, #340]	; (8000ca8 <pUseM+0x230>)
 8000b52:	4e5d      	ldr	r6, [pc, #372]	; (8000cc8 <pUseM+0x250>)
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	2306      	movs	r3, #6
 8000b58:	1a9a      	subs	r2, r3, r2
 8000b5a:	4353      	muls	r3, r2
 8000b5c:	4a51      	ldr	r2, [pc, #324]	; (8000ca4 <pUseM+0x22c>)
		SSD1306_PutsXY(0, 0, "#Use", 0);
 8000b5e:	0039      	movs	r1, r7
		ledPos = (6 - tempY) * 6 + tempX - 1;
 8000b60:	7812      	ldrb	r2, [r2, #0]
		SSD1306_PutsXY(0, 0, "#Use", 0);
 8000b62:	0038      	movs	r0, r7
		ledPos = (6 - tempY) * 6 + tempX - 1;
 8000b64:	3a01      	subs	r2, #1
 8000b66:	189b      	adds	r3, r3, r2
 8000b68:	7033      	strb	r3, [r6, #0]
		SSD1306_PutsXY(0, 0, "#Use", 0);
 8000b6a:	4a58      	ldr	r2, [pc, #352]	; (8000ccc <pUseM+0x254>)
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	f7ff fe3b 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "Select part", 1);
 8000b72:	2301      	movs	r3, #1
 8000b74:	0038      	movs	r0, r7
 8000b76:	0019      	movs	r1, r3
 8000b78:	4a55      	ldr	r2, [pc, #340]	; (8000cd0 <pUseM+0x258>)
 8000b7a:	f7ff fe35 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 8000b7e:	4c55      	ldr	r4, [pc, #340]	; (8000cd4 <pUseM+0x25c>)
		SSD1306_PutsXY(0, 1, "Select part", 1);
 8000b80:	0025      	movs	r5, r4
			if(pt[i].pos == ledPos && pt[i].store){
 8000b82:	79aa      	ldrb	r2, [r5, #6]
 8000b84:	7833      	ldrb	r3, [r6, #0]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d174      	bne.n	8000c74 <pUseM+0x1fc>
 8000b8a:	896b      	ldrh	r3, [r5, #10]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d071      	beq.n	8000c74 <pUseM+0x1fc>
				String bf = (String)calloc(0, sizeof(char) * 4);
 8000b90:	2104      	movs	r1, #4
 8000b92:	2000      	movs	r0, #0
 8000b94:	f004 fd38 	bl	8005608 <calloc>
				SSD1306_PutsXY(1, 3, "Cate:", 1);
 8000b98:	2301      	movs	r3, #1
				usePos = i;
 8000b9a:	4e49      	ldr	r6, [pc, #292]	; (8000cc0 <pUseM+0x248>)
				String bf = (String)calloc(0, sizeof(char) * 4);
 8000b9c:	0005      	movs	r5, r0
				SSD1306_PutsXY(1, 3, "Cate:", 1);
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	4a4d      	ldr	r2, [pc, #308]	; (8000cd8 <pUseM+0x260>)
				usePos = i;
 8000ba4:	7037      	strb	r7, [r6, #0]
				SSD1306_PutsXY(1, 3, "Cate:", 1);
 8000ba6:	f7ff fe1f 	bl	80007e8 <SSD1306_PutsXY>
				SSD1306_Puts(ptCate[pt[usePos].cate], &Font_6x8, 1);
 8000baa:	7833      	ldrb	r3, [r6, #0]
 8000bac:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <pUseM+0x25c>)
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	791b      	ldrb	r3, [r3, #4]
 8000bb4:	4f49      	ldr	r7, [pc, #292]	; (8000cdc <pUseM+0x264>)
 8000bb6:	484a      	ldr	r0, [pc, #296]	; (8000ce0 <pUseM+0x268>)
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	2201      	movs	r2, #1
 8000bbc:	0039      	movs	r1, r7
 8000bbe:	5818      	ldr	r0, [r3, r0]
 8000bc0:	f002 f95c 	bl	8002e7c <SSD1306_Puts>
				SSD1306_PutsXY(1, 4, "Name:", 1);
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	0018      	movs	r0, r3
 8000bca:	4a46      	ldr	r2, [pc, #280]	; (8000ce4 <pUseM+0x26c>)
 8000bcc:	f7ff fe0c 	bl	80007e8 <SSD1306_PutsXY>
				SSD1306_Puts(pt[usePos].name, &Font_6x8, 1);
 8000bd0:	7833      	ldrb	r3, [r6, #0]
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <pUseM+0x25c>)
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	5898      	ldr	r0, [r3, r2]
 8000bd8:	0039      	movs	r1, r7
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f002 f94e 	bl	8002e7c <SSD1306_Puts>
				SSD1306_PutsXY(1, 5, "Store:", 1);
 8000be0:	2301      	movs	r3, #1
 8000be2:	2105      	movs	r1, #5
 8000be4:	0018      	movs	r0, r3
 8000be6:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <pUseM+0x270>)
 8000be8:	f7ff fdfe 	bl	80007e8 <SSD1306_PutsXY>
				sprintf(bf, "%d ", pt[usePos].store);
 8000bec:	7833      	ldrb	r3, [r6, #0]
 8000bee:	4a39      	ldr	r2, [pc, #228]	; (8000cd4 <pUseM+0x25c>)
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	18d3      	adds	r3, r2, r3
 8000bf4:	895a      	ldrh	r2, [r3, #10]
 8000bf6:	493d      	ldr	r1, [pc, #244]	; (8000cec <pUseM+0x274>)
 8000bf8:	0028      	movs	r0, r5
 8000bfa:	f004 fe91 	bl	8005920 <siprintf>
				SSD1306_Puts(bf, &Font_6x8, 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	0039      	movs	r1, r7
 8000c02:	0028      	movs	r0, r5
 8000c04:	f002 f93a 	bl	8002e7c <SSD1306_Puts>
				free(bf);
 8000c08:	0028      	movs	r0, r5
 8000c0a:	f004 fd3b 	bl	8005684 <free>
		led_clear();
 8000c0e:	f7ff fdc9 	bl	80007a4 <led_clear>
		for(uint8_t i = 0; i < 36; i++){
 8000c12:	2500      	movs	r5, #0
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8000c14:	2604      	movs	r6, #4
 8000c16:	8963      	ldrh	r3, [r4, #10]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00c      	beq.n	8000c36 <pUseM+0x1be>
 8000c1c:	7921      	ldrb	r1, [r4, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	0033      	movs	r3, r6
 8000c22:	79a0      	ldrb	r0, [r4, #6]
 8000c24:	2901      	cmp	r1, #1
 8000c26:	d004      	beq.n	8000c32 <pUseM+0x1ba>
 8000c28:	0032      	movs	r2, r6
 8000c2a:	2903      	cmp	r1, #3
 8000c2c:	d132      	bne.n	8000c94 <pUseM+0x21c>
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2304      	movs	r3, #4
 8000c32:	f7ff fd81 	bl	8000738 <led_color>
			if(!led_cmp(i, 0, 0, 0)) led_color(i, 0, 4, 0);
 8000c36:	2300      	movs	r3, #0
 8000c38:	0028      	movs	r0, r5
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	f7ff fdbb 	bl	80007b8 <led_cmp>
 8000c42:	1e01      	subs	r1, r0, #0
 8000c44:	d104      	bne.n	8000c50 <pUseM+0x1d8>
 8000c46:	0003      	movs	r3, r0
 8000c48:	0032      	movs	r2, r6
 8000c4a:	0028      	movs	r0, r5
 8000c4c:	f7ff fd74 	bl	8000738 <led_color>
		for(uint8_t i = 0; i < 36; i++){
 8000c50:	3501      	adds	r5, #1
 8000c52:	b2ed      	uxtb	r5, r5
 8000c54:	3410      	adds	r4, #16
 8000c56:	2d24      	cmp	r5, #36	; 0x24
 8000c58:	d1dd      	bne.n	8000c16 <pUseM+0x19e>
		led_color(ledPos, 4, 4, 4);
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <pUseM+0x250>)
 8000c5c:	7818      	ldrb	r0, [r3, #0]
 8000c5e:	2304      	movs	r3, #4
 8000c60:	001a      	movs	r2, r3
 8000c62:	0019      	movs	r1, r3
 8000c64:	f7ff fd68 	bl	8000738 <led_color>
		led_update();
 8000c68:	f7ff fd72 	bl	8000750 <led_update>
		SSD1306_UpdateScreen();
 8000c6c:	f002 fa0c 	bl	8003088 <SSD1306_UpdateScreen>
	return PUSE;
 8000c70:	2002      	movs	r0, #2
 8000c72:	e74d      	b.n	8000b10 <pUseM+0x98>
				usePos = 255;
 8000c74:	22ff      	movs	r2, #255	; 0xff
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <pUseM+0x248>)
		for(uint8_t i = 0; i < 36; i++){
 8000c78:	3701      	adds	r7, #1
				usePos = 255;
 8000c7a:	701a      	strb	r2, [r3, #0]
				SSD1306_PutsXY(1, 3, "(Empty)", 1);
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	2103      	movs	r1, #3
 8000c80:	0018      	movs	r0, r3
 8000c82:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <pUseM+0x278>)
		for(uint8_t i = 0; i < 36; i++){
 8000c84:	b2ff      	uxtb	r7, r7
				SSD1306_PutsXY(1, 3, "(Empty)", 1);
 8000c86:	f7ff fdaf 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 8000c8a:	3510      	adds	r5, #16
 8000c8c:	2f24      	cmp	r7, #36	; 0x24
 8000c8e:	d000      	beq.n	8000c92 <pUseM+0x21a>
 8000c90:	e777      	b.n	8000b82 <pUseM+0x10a>
 8000c92:	e7bc      	b.n	8000c0e <pUseM+0x196>
			if(pt[i].store) led_color(pt[i].pos, PTR, PTG, PTB);
 8000c94:	2902      	cmp	r1, #2
 8000c96:	d000      	beq.n	8000c9a <pUseM+0x222>
 8000c98:	2201      	movs	r2, #1
 8000c9a:	0031      	movs	r1, r6
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e7c8      	b.n	8000c32 <pUseM+0x1ba>
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	2000095c 	.word	0x2000095c
 8000ca8:	2000095d 	.word	0x2000095d
 8000cac:	20000957 	.word	0x20000957
 8000cb0:	2000001a 	.word	0x2000001a
 8000cb4:	2000040c 	.word	0x2000040c
 8000cb8:	00000e74 	.word	0x00000e74
 8000cbc:	20000015 	.word	0x20000015
 8000cc0:	2000001b 	.word	0x2000001b
 8000cc4:	20000412 	.word	0x20000412
 8000cc8:	200005ca 	.word	0x200005ca
 8000ccc:	08006a24 	.word	0x08006a24
 8000cd0:	08006a29 	.word	0x08006a29
 8000cd4:	2000070c 	.word	0x2000070c
 8000cd8:	08006a35 	.word	0x08006a35
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	08006ce4 	.word	0x08006ce4
 8000ce4:	08006a3b 	.word	0x08006a3b
 8000ce8:	08006a41 	.word	0x08006a41
 8000cec:	08006a48 	.word	0x08006a48
 8000cf0:	08006a4c 	.word	0x08006a4c

08000cf4 <logM>:
		free(bf);
	}
	return PARTITION;
}

MODE logM(){
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 8000cf6:	4c4f      	ldr	r4, [pc, #316]	; (8000e34 <logM+0x140>)
MODE logM(){
 8000cf8:	b085      	sub	sp, #20
	if(firstF){
 8000cfa:	7823      	ldrb	r3, [r4, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <logM+0x14>
		firstF = false;
 8000d00:	2300      	movs	r3, #0
		sel = 0;
 8000d02:	4a4d      	ldr	r2, [pc, #308]	; (8000e38 <logM+0x144>)
		firstF = false;
 8000d04:	7023      	strb	r3, [r4, #0]
		sel = 0;
 8000d06:	7013      	strb	r3, [r2, #0]
	}
	if(RE1){
 8000d08:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <logM+0x148>)
 8000d0a:	4d4d      	ldr	r5, [pc, #308]	; (8000e40 <logM+0x14c>)
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	2a63      	cmp	r2, #99	; 0x63
 8000d10:	d91a      	bls.n	8000d48 <logM+0x54>
		reC = 0;
 8000d12:	2000      	movs	r0, #0
 8000d14:	7018      	strb	r0, [r3, #0]
		if(JOY_L){
 8000d16:	2396      	movs	r3, #150	; 0x96
 8000d18:	4a4a      	ldr	r2, [pc, #296]	; (8000e44 <logM+0x150>)
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	8811      	ldrh	r1, [r2, #0]
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d205      	bcs.n	8000d2e <logM+0x3a>
			firstF = true;
 8000d22:	3b2c      	subs	r3, #44	; 0x2c
 8000d24:	3bff      	subs	r3, #255	; 0xff
 8000d26:	7023      	strb	r3, [r4, #0]
			udf = true;
 8000d28:	702b      	strb	r3, [r5, #0]
		}
		SSD1306_PutsXY(0, sel + 2, ">", 1);
		SSD1306_UpdateScreen();
	}
	return PLOG;
}
 8000d2a:	b005      	add	sp, #20
 8000d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(JOY_U && sel) sel--;
 8000d2e:	21fa      	movs	r1, #250	; 0xfa
 8000d30:	8852      	ldrh	r2, [r2, #2]
 8000d32:	0109      	lsls	r1, r1, #4
 8000d34:	428a      	cmp	r2, r1
 8000d36:	d91d      	bls.n	8000d74 <logM+0x80>
 8000d38:	4a3f      	ldr	r2, [pc, #252]	; (8000e38 <logM+0x144>)
 8000d3a:	7813      	ldrb	r3, [r2, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <logM+0x50>
 8000d40:	3b01      	subs	r3, #1
		if(JOY_D && (sel < ((logC > 6) ? 5 : logC - 1))) sel++;
 8000d42:	7013      	strb	r3, [r2, #0]
		if(JOY_U || JOY_D) udf = true;
 8000d44:	2301      	movs	r3, #1
 8000d46:	702b      	strb	r3, [r5, #0]
	if(JOY_P){
 8000d48:	20a0      	movs	r0, #160	; 0xa0
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	05c0      	lsls	r0, r0, #23
 8000d4e:	f003 f8d3 	bl	8003ef8 <HAL_GPIO_ReadPin>
		if(!oldsw){
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <logM+0x154>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4318      	orrs	r0, r3
 8000d58:	b2c0      	uxtb	r0, r0
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d118      	bne.n	8000d90 <logM+0x9c>
			swS();
 8000d5e:	f7ff fd61 	bl	8000824 <swS>
			firstF = true;
 8000d62:	2301      	movs	r3, #1
 8000d64:	7023      	strb	r3, [r4, #0]
			udf = true;
 8000d66:	702b      	strb	r3, [r5, #0]
			selLog = sel;
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <logM+0x144>)
			return LOGD;
 8000d6a:	2009      	movs	r0, #9
			selLog = sel;
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <logM+0x158>)
 8000d70:	701a      	strb	r2, [r3, #0]
			return LOGD;
 8000d72:	e7da      	b.n	8000d2a <logM+0x36>
		if(JOY_D && (sel < ((logC > 6) ? 5 : logC - 1))) sel++;
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d2e7      	bcs.n	8000d48 <logM+0x54>
 8000d78:	4935      	ldr	r1, [pc, #212]	; (8000e50 <logM+0x15c>)
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <logM+0x144>)
 8000d7c:	7808      	ldrb	r0, [r1, #0]
 8000d7e:	7813      	ldrb	r3, [r2, #0]
 8000d80:	2105      	movs	r1, #5
 8000d82:	2806      	cmp	r0, #6
 8000d84:	d800      	bhi.n	8000d88 <logM+0x94>
 8000d86:	1e41      	subs	r1, r0, #1
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	dadb      	bge.n	8000d44 <logM+0x50>
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	e7d8      	b.n	8000d42 <logM+0x4e>
	if(udf){
 8000d90:	782b      	ldrb	r3, [r5, #0]
	return PLOG;
 8000d92:	2008      	movs	r0, #8
	if(udf){
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0c8      	beq.n	8000d2a <logM+0x36>
		udf = false;
 8000d98:	2400      	movs	r4, #0
 8000d9a:	702c      	strb	r4, [r5, #0]
		basicScreen();
 8000d9c:	f7ff fd34 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Log", 0);
 8000da0:	0023      	movs	r3, r4
 8000da2:	0021      	movs	r1, r4
 8000da4:	0020      	movs	r0, r4
 8000da6:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <logM+0x160>)
 8000da8:	f7ff fd1e 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < ((logC > 6) ? 6 : logC); i++){
 8000dac:	4d2a      	ldr	r5, [pc, #168]	; (8000e58 <logM+0x164>)
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <logM+0x15c>)
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	1c13      	adds	r3, r2, #0
 8000db4:	2a06      	cmp	r2, #6
 8000db6:	d900      	bls.n	8000dba <logM+0xc6>
 8000db8:	2306      	movs	r3, #6
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d80c      	bhi.n	8000dda <logM+0xe6>
		SSD1306_PutsXY(0, sel + 2, ">", 1);
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <logM+0x144>)
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	7819      	ldrb	r1, [r3, #0]
 8000dc6:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <logM+0x168>)
 8000dc8:	3102      	adds	r1, #2
 8000dca:	2301      	movs	r3, #1
 8000dcc:	b2c9      	uxtb	r1, r1
 8000dce:	f7ff fd0b 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 8000dd2:	f002 f959 	bl	8003088 <SSD1306_UpdateScreen>
	return PLOG;
 8000dd6:	2008      	movs	r0, #8
 8000dd8:	e7a7      	b.n	8000d2a <logM+0x36>
			if(pLog[i].date.year){
 8000dda:	1d6b      	adds	r3, r5, #5
 8000ddc:	881f      	ldrh	r7, [r3, #0]
 8000dde:	2f00      	cmp	r7, #0
 8000de0:	d0ee      	beq.n	8000dc0 <logM+0xcc>
				String bf = (String)calloc(0, sizeof(char) * 30);
 8000de2:	211e      	movs	r1, #30
 8000de4:	2000      	movs	r0, #0
 8000de6:	f004 fc0f 	bl	8005608 <calloc>
				sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[i].date.year - 1800, pLog[i].date.month, pLog[i].date.day, pLog[i].time.hour, pLog[i].time.min, ptWorkCate[pLog[i].workCate - 1]);
 8000dea:	0029      	movs	r1, r5
				String bf = (String)calloc(0, sizeof(char) * 30);
 8000dec:	0006      	movs	r6, r0
				sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[i].date.year - 1800, pLog[i].date.month, pLog[i].date.day, pLog[i].time.hour, pLog[i].time.min, ptWorkCate[pLog[i].workCate - 1]);
 8000dee:	392d      	subs	r1, #45	; 0x2d
 8000df0:	7809      	ldrb	r1, [r1, #0]
 8000df2:	481b      	ldr	r0, [pc, #108]	; (8000e60 <logM+0x16c>)
 8000df4:	3901      	subs	r1, #1
 8000df6:	0089      	lsls	r1, r1, #2
 8000df8:	5809      	ldr	r1, [r1, r0]
 8000dfa:	792b      	ldrb	r3, [r5, #4]
 8000dfc:	9103      	str	r1, [sp, #12]
 8000dfe:	7869      	ldrb	r1, [r5, #1]
 8000e00:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <logM+0x170>)
 8000e02:	9102      	str	r1, [sp, #8]
 8000e04:	7829      	ldrb	r1, [r5, #0]
 8000e06:	18ba      	adds	r2, r7, r2
 8000e08:	9101      	str	r1, [sp, #4]
 8000e0a:	78e9      	ldrb	r1, [r5, #3]
 8000e0c:	0030      	movs	r0, r6
 8000e0e:	9100      	str	r1, [sp, #0]
 8000e10:	4915      	ldr	r1, [pc, #84]	; (8000e68 <logM+0x174>)
 8000e12:	f004 fd85 	bl	8005920 <siprintf>
				SSD1306_PutsXY(1, i + 2, bf, 1);
 8000e16:	2301      	movs	r3, #1
 8000e18:	1ca1      	adds	r1, r4, #2
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	0032      	movs	r2, r6
 8000e1e:	b2c9      	uxtb	r1, r1
 8000e20:	f7ff fce2 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < ((logC > 6) ? 6 : logC); i++){
 8000e24:	3401      	adds	r4, #1
				free(bf);
 8000e26:	0030      	movs	r0, r6
 8000e28:	f004 fc2c 	bl	8005684 <free>
		for(uint8_t i = 0; i < ((logC > 6) ? 6 : logC); i++){
 8000e2c:	b2e4      	uxtb	r4, r4
 8000e2e:	3534      	adds	r5, #52	; 0x34
 8000e30:	e7bd      	b.n	8000dae <logM+0xba>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000958 	.word	0x20000958
 8000e3c:	20000957 	.word	0x20000957
 8000e40:	2000001a 	.word	0x2000001a
 8000e44:	2000040c 	.word	0x2000040c
 8000e48:	20000015 	.word	0x20000015
 8000e4c:	20000959 	.word	0x20000959
 8000e50:	200005cb 	.word	0x200005cb
 8000e54:	08006a54 	.word	0x08006a54
 8000e58:	200005ff 	.word	0x200005ff
 8000e5c:	08006a22 	.word	0x08006a22
 8000e60:	08006cf4 	.word	0x08006cf4
 8000e64:	fffff8f8 	.word	0xfffff8f8
 8000e68:	08006a59 	.word	0x08006a59

08000e6c <logD>:

MODE logD(){
 8000e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF) firstF = false;
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <logD+0xe8>)
MODE logD(){
 8000e70:	b087      	sub	sp, #28
	if(firstF) firstF = false;
 8000e72:	781a      	ldrb	r2, [r3, #0]
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d001      	beq.n	8000e7c <logD+0x10>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
	if(JOY_P){
 8000e7c:	20a0      	movs	r0, #160	; 0xa0
 8000e7e:	2104      	movs	r1, #4
 8000e80:	05c0      	lsls	r0, r0, #23
 8000e82:	f003 f839 	bl	8003ef8 <HAL_GPIO_ReadPin>
		if(!oldsw){
 8000e86:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <logD+0xec>)
 8000e88:	4e34      	ldr	r6, [pc, #208]	; (8000f5c <logD+0xf0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4318      	orrs	r0, r3
 8000e8e:	b2c0      	uxtb	r0, r0
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d108      	bne.n	8000ea6 <logD+0x3a>
			swS();
 8000e94:	f7ff fcc6 	bl	8000824 <swS>
			udf = true;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	7033      	strb	r3, [r6, #0]
			return PLOG;
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	9304      	str	r3, [sp, #16]
		SSD1306_PutsXY(0, 5, pLog[selLog].content[1], 1);
		free(bf);
		SSD1306_UpdateScreen();
	}
	return LOGD;
}
 8000ea0:	9804      	ldr	r0, [sp, #16]
 8000ea2:	b007      	add	sp, #28
 8000ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return LOGD;
 8000ea6:	2209      	movs	r2, #9
	if(udf){
 8000ea8:	7833      	ldrb	r3, [r6, #0]
	return LOGD;
 8000eaa:	9204      	str	r2, [sp, #16]
	if(udf){
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f7      	beq.n	8000ea0 <logD+0x34>
		String bf = (String)calloc(0, sizeof(char) * 30);
 8000eb0:	211e      	movs	r1, #30
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f004 fba8 	bl	8005608 <calloc>
		udf = false;
 8000eb8:	2400      	movs	r4, #0
		sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[selLog].date.year  - 1800, pLog[selLog].date.month, pLog[selLog].date.day, pLog[selLog].time.hour, pLog[selLog].time.min, ptWorkCate[pLog[selLog].workCate - 1]);
 8000eba:	2734      	movs	r7, #52	; 0x34
		String bf = (String)calloc(0, sizeof(char) * 30);
 8000ebc:	0005      	movs	r5, r0
		udf = false;
 8000ebe:	7034      	strb	r4, [r6, #0]
		basicScreen();
 8000ec0:	f7ff fca2 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Log detail", 0);
 8000ec4:	0023      	movs	r3, r4
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	0020      	movs	r0, r4
 8000eca:	4a25      	ldr	r2, [pc, #148]	; (8000f60 <logD+0xf4>)
 8000ecc:	f7ff fc8c 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "%02d.%02d.%02d/%02d:%02d/%s", pLog[selLog].date.year  - 1800, pLog[selLog].date.month, pLog[selLog].date.day, pLog[selLog].time.hour, pLog[selLog].time.min, ptWorkCate[pLog[selLog].workCate - 1]);
 8000ed0:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <logD+0xf8>)
 8000ed2:	4e25      	ldr	r6, [pc, #148]	; (8000f68 <logD+0xfc>)
 8000ed4:	7818      	ldrb	r0, [r3, #0]
 8000ed6:	4378      	muls	r0, r7
 8000ed8:	1831      	adds	r1, r6, r0
 8000eda:	000b      	movs	r3, r1
 8000edc:	3331      	adds	r3, #49	; 0x31
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 8000ee2:	5d80      	ldrb	r0, [r0, r6]
 8000ee4:	9305      	str	r3, [sp, #20]
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <logD+0x100>)
 8000ee8:	3801      	subs	r0, #1
 8000eea:	18d2      	adds	r2, r2, r3
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <logD+0x104>)
 8000eee:	0080      	lsls	r0, r0, #2
 8000ef0:	58c3      	ldr	r3, [r0, r3]
 8000ef2:	0008      	movs	r0, r1
 8000ef4:	9303      	str	r3, [sp, #12]
 8000ef6:	302e      	adds	r0, #46	; 0x2e
 8000ef8:	7800      	ldrb	r0, [r0, #0]
 8000efa:	9b05      	ldr	r3, [sp, #20]
 8000efc:	9002      	str	r0, [sp, #8]
 8000efe:	0008      	movs	r0, r1
 8000f00:	302d      	adds	r0, #45	; 0x2d
 8000f02:	7800      	ldrb	r0, [r0, #0]
 8000f04:	3130      	adds	r1, #48	; 0x30
 8000f06:	9001      	str	r0, [sp, #4]
 8000f08:	7809      	ldrb	r1, [r1, #0]
 8000f0a:	0028      	movs	r0, r5
 8000f0c:	9100      	str	r1, [sp, #0]
 8000f0e:	4919      	ldr	r1, [pc, #100]	; (8000f74 <logD+0x108>)
 8000f10:	f004 fd06 	bl	8005920 <siprintf>
		SSD1306_PutsXY(0, 2, bf, 1);
 8000f14:	002a      	movs	r2, r5
 8000f16:	0020      	movs	r0, r4
 8000f18:	2301      	movs	r3, #1
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	f7ff fc64 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 4, pLog[selLog].content[0], 1);
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <logD+0xf8>)
 8000f22:	0020      	movs	r0, r4
 8000f24:	781a      	ldrb	r2, [r3, #0]
 8000f26:	2104      	movs	r1, #4
 8000f28:	437a      	muls	r2, r7
 8000f2a:	3201      	adds	r2, #1
 8000f2c:	1992      	adds	r2, r2, r6
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f7ff fc5a 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 5, pLog[selLog].content[1], 1);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <logD+0xf8>)
 8000f36:	2105      	movs	r1, #5
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	0020      	movs	r0, r4
 8000f3c:	437a      	muls	r2, r7
 8000f3e:	3217      	adds	r2, #23
 8000f40:	2301      	movs	r3, #1
 8000f42:	1992      	adds	r2, r2, r6
 8000f44:	f7ff fc50 	bl	80007e8 <SSD1306_PutsXY>
		free(bf);
 8000f48:	0028      	movs	r0, r5
 8000f4a:	f004 fb9b 	bl	8005684 <free>
		SSD1306_UpdateScreen();
 8000f4e:	f002 f89b 	bl	8003088 <SSD1306_UpdateScreen>
 8000f52:	e7a5      	b.n	8000ea0 <logD+0x34>
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000015 	.word	0x20000015
 8000f5c:	2000001a 	.word	0x2000001a
 8000f60:	08006a75 	.word	0x08006a75
 8000f64:	20000959 	.word	0x20000959
 8000f68:	200005d2 	.word	0x200005d2
 8000f6c:	fffff8f8 	.word	0xfffff8f8
 8000f70:	08006cf4 	.word	0x08006cf4
 8000f74:	08006a59 	.word	0x08006a59

08000f78 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM2) {
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f7c:	b570      	push	{r4, r5, r6, lr}
	if (htim->Instance == TIM2) {
 8000f7e:	05db      	lsls	r3, r3, #23
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d152      	bne.n	800102a <HAL_TIM_PeriodElapsedCallback+0xb2>
		reC++;
 8000f84:	4a2d      	ldr	r2, [pc, #180]	; (800103c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f86:	492e      	ldr	r1, [pc, #184]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f88:	7813      	ldrb	r3, [r2, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	7013      	strb	r3, [r2, #0]
		if(modeFlag == FINDR || modeFlag == PARTITION) ledC++;
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f90:	781a      	ldrb	r2, [r3, #0]
		else ledC = 0;
 8000f92:	2300      	movs	r3, #0
		if(modeFlag == FINDR || modeFlag == PARTITION) ledC++;
 8000f94:	3a06      	subs	r2, #6
 8000f96:	2a01      	cmp	r2, #1
 8000f98:	d802      	bhi.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000f9a:	880b      	ldrh	r3, [r1, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b29b      	uxth	r3, r3
		HAL_ADC_Start(&hadc);
 8000fa0:	4c29      	ldr	r4, [pc, #164]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fa2:	800b      	strh	r3, [r1, #0]
 8000fa4:	0020      	movs	r0, r4
 8000fa6:	f002 fc03 	bl	80037b0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8000faa:	210a      	movs	r1, #10
 8000fac:	0020      	movs	r0, r4
 8000fae:	f002 fc2b 	bl	8003808 <HAL_ADC_PollForConversion>
		adc[0] = HAL_ADC_GetValue(&hadc);
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	f002 fc8c 	bl	80038d0 <HAL_ADC_GetValue>
 8000fb8:	4d24      	ldr	r5, [pc, #144]	; (800104c <HAL_TIM_PeriodElapsedCallback+0xd4>)
		HAL_ADC_PollForConversion(&hadc, 10);
 8000fba:	210a      	movs	r1, #10
		adc[0] = HAL_ADC_GetValue(&hadc);
 8000fbc:	8028      	strh	r0, [r5, #0]
		HAL_ADC_PollForConversion(&hadc, 10);
 8000fbe:	0020      	movs	r0, r4
 8000fc0:	f002 fc22 	bl	8003808 <HAL_ADC_PollForConversion>
		adc[1] = HAL_ADC_GetValue(&hadc);
 8000fc4:	0020      	movs	r0, r4
 8000fc6:	f002 fc83 	bl	80038d0 <HAL_ADC_GetValue>
 8000fca:	8068      	strh	r0, [r5, #2]
		swS();
 8000fcc:	f7ff fc2a 	bl	8000824 <swS>
		if(buzFlag)buzC++;
 8000fd0:	4c1f      	ldr	r4, [pc, #124]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000fd2:	4d20      	ldr	r5, [pc, #128]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000fd4:	7822      	ldrb	r2, [r4, #0]
 8000fd6:	2a00      	cmp	r2, #0
 8000fd8:	d028      	beq.n	800102c <HAL_TIM_PeriodElapsedCallback+0xb4>
 8000fda:	882b      	ldrh	r3, [r5, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	802b      	strh	r3, [r5, #0]
		if(buzFlag==1){
 8000fe0:	7823      	ldrb	r3, [r4, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10c      	bne.n	8001000 <HAL_TIM_PeriodElapsedCallback+0x88>
			if(buzC >= 500) buzFlag = 0;
 8000fe6:	33f4      	adds	r3, #244	; 0xf4
 8000fe8:	882a      	ldrh	r2, [r5, #0]
 8000fea:	33ff      	adds	r3, #255	; 0xff
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d301      	bcc.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	7023      	strb	r3, [r4, #0]
			BUZ(1);
 8000ff4:	20a0      	movs	r0, #160	; 0xa0
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	05c0      	lsls	r0, r0, #23
 8000ffc:	f002 ff82 	bl	8003f04 <HAL_GPIO_WritePin>
		if(buzFlag == 2){
 8001000:	7823      	ldrb	r3, [r4, #0]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d111      	bne.n	800102a <HAL_TIM_PeriodElapsedCallback+0xb2>
			if(buzC >= 100) buzFlag = 0;
 8001006:	8828      	ldrh	r0, [r5, #0]
 8001008:	2863      	cmp	r0, #99	; 0x63
 800100a:	d901      	bls.n	8001010 <HAL_TIM_PeriodElapsedCallback+0x98>
 800100c:	2300      	movs	r3, #0
 800100e:	7023      	strb	r3, [r4, #0]
			if(buzC % 50 > 25) BUZ(1);
 8001010:	2132      	movs	r1, #50	; 0x32
 8001012:	f7ff f91d 	bl	8000250 <__aeabi_uidivmod>
 8001016:	b289      	uxth	r1, r1
 8001018:	2201      	movs	r2, #1
 800101a:	2919      	cmp	r1, #25
 800101c:	d800      	bhi.n	8001020 <HAL_TIM_PeriodElapsedCallback+0xa8>
			else BUZ(0);
 800101e:	2200      	movs	r2, #0
 8001020:	20a0      	movs	r0, #160	; 0xa0
 8001022:	2108      	movs	r1, #8
 8001024:	05c0      	lsls	r0, r0, #23
 8001026:	f002 ff6d 	bl	8003f04 <HAL_GPIO_WritePin>
}
 800102a:	bd70      	pop	{r4, r5, r6, pc}
			BUZ(0);
 800102c:	20a0      	movs	r0, #160	; 0xa0
 800102e:	2108      	movs	r1, #8
 8001030:	05c0      	lsls	r0, r0, #23
			buzC = 0;
 8001032:	802a      	strh	r2, [r5, #0]
			BUZ(0);
 8001034:	f002 ff66 	bl	8003f04 <HAL_GPIO_WritePin>
 8001038:	e7d2      	b.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x68>
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	20000957 	.word	0x20000957
 8001040:	200005c8 	.word	0x200005c8
 8001044:	200005d0 	.word	0x200005d0
 8001048:	20000440 	.word	0x20000440
 800104c:	2000040c 	.word	0x2000040c
 8001050:	20000412 	.word	0x20000412
 8001054:	20000410 	.word	0x20000410

08001058 <logShift>:
void logShift(){
 8001058:	b510      	push	{r4, lr}
	logC++;
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <logShift+0x18>)
		pLog[5 - i] = pLog[4 - i];
 800105c:	4905      	ldr	r1, [pc, #20]	; (8001074 <logShift+0x1c>)
	logC++;
 800105e:	7813      	ldrb	r3, [r2, #0]
		pLog[5 - i] = pLog[4 - i];
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <logShift+0x20>)
	logC++;
 8001062:	3301      	adds	r3, #1
 8001064:	7013      	strb	r3, [r2, #0]
		pLog[5 - i] = pLog[4 - i];
 8001066:	2282      	movs	r2, #130	; 0x82
 8001068:	0052      	lsls	r2, r2, #1
 800106a:	f004 fb1e 	bl	80056aa <memmove>
}
 800106e:	bd10      	pop	{r4, pc}
 8001070:	200005cb 	.word	0x200005cb
 8001074:	200005d2 	.word	0x200005d2
 8001078:	20000606 	.word	0x20000606

0800107c <use>:
MODE use(){
 800107c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(firstF){
 800107e:	4d59      	ldr	r5, [pc, #356]	; (80011e4 <use+0x168>)
 8001080:	782b      	ldrb	r3, [r5, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <use+0x12>
		firstF = false;
 8001086:	2300      	movs	r3, #0
		ptInNum = 0;
 8001088:	4a57      	ldr	r2, [pc, #348]	; (80011e8 <use+0x16c>)
		firstF = false;
 800108a:	702b      	strb	r3, [r5, #0]
		ptInNum = 0;
 800108c:	7013      	strb	r3, [r2, #0]
	if(RE1){
 800108e:	4b57      	ldr	r3, [pc, #348]	; (80011ec <use+0x170>)
 8001090:	4f57      	ldr	r7, [pc, #348]	; (80011f0 <use+0x174>)
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	2a63      	cmp	r2, #99	; 0x63
 8001096:	d915      	bls.n	80010c4 <use+0x48>
		reC = 0;
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
		if(JOY_U && ptInNum < pt[usePos].store) ptInNum++;
 800109c:	22fa      	movs	r2, #250	; 0xfa
 800109e:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <use+0x178>)
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	885b      	ldrh	r3, [r3, #2]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d95f      	bls.n	8001168 <use+0xec>
 80010a8:	4a53      	ldr	r2, [pc, #332]	; (80011f8 <use+0x17c>)
 80010aa:	484f      	ldr	r0, [pc, #316]	; (80011e8 <use+0x16c>)
 80010ac:	7811      	ldrb	r1, [r2, #0]
 80010ae:	4a53      	ldr	r2, [pc, #332]	; (80011fc <use+0x180>)
 80010b0:	0109      	lsls	r1, r1, #4
 80010b2:	1852      	adds	r2, r2, r1
 80010b4:	7803      	ldrb	r3, [r0, #0]
 80010b6:	8952      	ldrh	r2, [r2, #10]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d901      	bls.n	80010c0 <use+0x44>
 80010bc:	3301      	adds	r3, #1
 80010be:	7003      	strb	r3, [r0, #0]
		if(JOY_U || JOY_D) udf = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	703b      	strb	r3, [r7, #0]
	if(JOY_P){
 80010c4:	20a0      	movs	r0, #160	; 0xa0
 80010c6:	2104      	movs	r1, #4
 80010c8:	05c0      	lsls	r0, r0, #23
 80010ca:	f002 ff15 	bl	8003ef8 <HAL_GPIO_ReadPin>
		if(!oldsw){
 80010ce:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <use+0x184>)
 80010d0:	781c      	ldrb	r4, [r3, #0]
 80010d2:	4304      	orrs	r4, r0
 80010d4:	b2e4      	uxtb	r4, r4
 80010d6:	2c00      	cmp	r4, #0
 80010d8:	d151      	bne.n	800117e <use+0x102>
			swS();
 80010da:	f7ff fba3 	bl	8000824 <swS>
			firstF = 1;
 80010de:	2301      	movs	r3, #1
			udf = 1;
 80010e0:	4a43      	ldr	r2, [pc, #268]	; (80011f0 <use+0x174>)
			firstF = 1;
 80010e2:	702b      	strb	r3, [r5, #0]
			udf = 1;
 80010e4:	7013      	strb	r3, [r2, #0]
			logShift();
 80010e6:	f7ff ffb7 	bl	8001058 <logShift>
			DS3231_get_date(&date.day, &date.month, (uint8_t*)&date.year);
 80010ea:	4f46      	ldr	r7, [pc, #280]	; (8001204 <use+0x188>)
 80010ec:	0038      	movs	r0, r7
 80010ee:	1cba      	adds	r2, r7, #2
 80010f0:	1c79      	adds	r1, r7, #1
 80010f2:	f7ff fac5 	bl	8000680 <DS3231_get_date>
			DS3231_get_time(&time.sec, &time.min, &time.hour);
 80010f6:	4e44      	ldr	r6, [pc, #272]	; (8001208 <use+0x18c>)
 80010f8:	0032      	movs	r2, r6
 80010fa:	1c71      	adds	r1, r6, #1
 80010fc:	1cb0      	adds	r0, r6, #2
 80010fe:	f7ff fa29 	bl	8000554 <DS3231_get_time>
			pLog[0].workCate = 2;
 8001102:	4d42      	ldr	r5, [pc, #264]	; (800120c <use+0x190>)
 8001104:	2302      	movs	r3, #2
			pLog[0].date = date;
 8001106:	0028      	movs	r0, r5
			pLog[0].workCate = 2;
 8001108:	702b      	strb	r3, [r5, #0]
			pLog[0].date = date;
 800110a:	0039      	movs	r1, r7
 800110c:	2204      	movs	r2, #4
 800110e:	3030      	adds	r0, #48	; 0x30
 8001110:	f004 fac2 	bl	8005698 <memcpy>
			pLog[0].time = time ;
 8001114:	0028      	movs	r0, r5
 8001116:	0031      	movs	r1, r6
 8001118:	2203      	movs	r2, #3
 800111a:	302d      	adds	r0, #45	; 0x2d
 800111c:	f004 fabc 	bl	8005698 <memcpy>
			sprintf(pLog[0].content[0], "%s/%s", pt[usePos].name, ptCate[pt[usePos].cate]);
 8001120:	4e35      	ldr	r6, [pc, #212]	; (80011f8 <use+0x17c>)
 8001122:	4d36      	ldr	r5, [pc, #216]	; (80011fc <use+0x180>)
 8001124:	7833      	ldrb	r3, [r6, #0]
 8001126:	493a      	ldr	r1, [pc, #232]	; (8001210 <use+0x194>)
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	595a      	ldr	r2, [r3, r5]
 800112c:	18eb      	adds	r3, r5, r3
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	4838      	ldr	r0, [pc, #224]	; (8001214 <use+0x198>)
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	585b      	ldr	r3, [r3, r1]
 8001136:	4938      	ldr	r1, [pc, #224]	; (8001218 <use+0x19c>)
 8001138:	f004 fbf2 	bl	8005920 <siprintf>
			sprintf(pLog[0].content[1], "%dpcs (%d,%d)", ptInNum, tempX, tempY);
 800113c:	4937      	ldr	r1, [pc, #220]	; (800121c <use+0x1a0>)
 800113e:	4f2a      	ldr	r7, [pc, #168]	; (80011e8 <use+0x16c>)
 8001140:	7809      	ldrb	r1, [r1, #0]
 8001142:	4b37      	ldr	r3, [pc, #220]	; (8001220 <use+0x1a4>)
 8001144:	783a      	ldrb	r2, [r7, #0]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4836      	ldr	r0, [pc, #216]	; (8001224 <use+0x1a8>)
 800114a:	9100      	str	r1, [sp, #0]
 800114c:	4936      	ldr	r1, [pc, #216]	; (8001228 <use+0x1ac>)
 800114e:	f004 fbe7 	bl	8005920 <siprintf>
			if(ptInNum == pt[usePos].store) return REFILL;
 8001152:	7832      	ldrb	r2, [r6, #0]
 8001154:	7839      	ldrb	r1, [r7, #0]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	18ad      	adds	r5, r5, r2
 800115a:	896b      	ldrh	r3, [r5, #10]
 800115c:	4299      	cmp	r1, r3
 800115e:	d03f      	beq.n	80011e0 <use+0x164>
				pt[usePos].store -= ptInNum;
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	816b      	strh	r3, [r5, #10]
}
 8001164:	0020      	movs	r0, r4
 8001166:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(JOY_D && ptInNum > 1) ptInNum--;
 8001168:	2296      	movs	r2, #150	; 0x96
 800116a:	0052      	lsls	r2, r2, #1
 800116c:	4293      	cmp	r3, r2
 800116e:	d2a9      	bcs.n	80010c4 <use+0x48>
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <use+0x16c>)
 8001172:	7813      	ldrb	r3, [r2, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d9a3      	bls.n	80010c0 <use+0x44>
 8001178:	3b01      	subs	r3, #1
 800117a:	7013      	strb	r3, [r2, #0]
 800117c:	e7a0      	b.n	80010c0 <use+0x44>
	if(udf){
 800117e:	783b      	ldrb	r3, [r7, #0]
	return USE;
 8001180:	2403      	movs	r4, #3
	if(udf){
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0ee      	beq.n	8001164 <use+0xe8>
		String bf = (String)calloc(0, sizeof(char) * 12);
 8001186:	210c      	movs	r1, #12
 8001188:	2000      	movs	r0, #0
 800118a:	f004 fa3d 	bl	8005608 <calloc>
		udf = false;
 800118e:	2500      	movs	r5, #0
		String bf = (String)calloc(0, sizeof(char) * 12);
 8001190:	0006      	movs	r6, r0
		udf = false;
 8001192:	703d      	strb	r5, [r7, #0]
		basicScreen();
 8001194:	f7ff fb38 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Use", 0);
 8001198:	002b      	movs	r3, r5
 800119a:	0029      	movs	r1, r5
 800119c:	0028      	movs	r0, r5
 800119e:	4a23      	ldr	r2, [pc, #140]	; (800122c <use+0x1b0>)
 80011a0:	f7ff fb22 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "How Many use?", 1);
 80011a4:	2301      	movs	r3, #1
 80011a6:	0028      	movs	r0, r5
 80011a8:	0019      	movs	r1, r3
 80011aa:	4a21      	ldr	r2, [pc, #132]	; (8001230 <use+0x1b4>)
 80011ac:	f7ff fb1c 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "(%d / %d)", ptInNum, pt[usePos].store);
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <use+0x17c>)
 80011b2:	0030      	movs	r0, r6
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <use+0x180>)
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	189b      	adds	r3, r3, r2
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <use+0x16c>)
 80011be:	895b      	ldrh	r3, [r3, #10]
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	491c      	ldr	r1, [pc, #112]	; (8001234 <use+0x1b8>)
 80011c4:	f004 fbac 	bl	8005920 <siprintf>
		SSD1306_PutsXY(0, 3, bf, 1);
 80011c8:	0028      	movs	r0, r5
 80011ca:	2301      	movs	r3, #1
 80011cc:	0032      	movs	r2, r6
 80011ce:	0021      	movs	r1, r4
 80011d0:	f7ff fb0a 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 80011d4:	f001 ff58 	bl	8003088 <SSD1306_UpdateScreen>
		free(bf);
 80011d8:	0030      	movs	r0, r6
 80011da:	f004 fa53 	bl	8005684 <free>
 80011de:	e7c1      	b.n	8001164 <use+0xe8>
			if(ptInNum == pt[usePos].store) return REFILL;
 80011e0:	2404      	movs	r4, #4
 80011e2:	e7bf      	b.n	8001164 <use+0xe8>
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000954 	.word	0x20000954
 80011ec:	20000957 	.word	0x20000957
 80011f0:	2000001a 	.word	0x2000001a
 80011f4:	2000040c 	.word	0x2000040c
 80011f8:	2000001b 	.word	0x2000001b
 80011fc:	2000070c 	.word	0x2000070c
 8001200:	20000015 	.word	0x20000015
 8001204:	20000414 	.word	0x20000414
 8001208:	2000095e 	.word	0x2000095e
 800120c:	200005d2 	.word	0x200005d2
 8001210:	08006ce4 	.word	0x08006ce4
 8001214:	200005d3 	.word	0x200005d3
 8001218:	08006a81 	.word	0x08006a81
 800121c:	2000095d 	.word	0x2000095d
 8001220:	2000095c 	.word	0x2000095c
 8001224:	200005e9 	.word	0x200005e9
 8001228:	08006a87 	.word	0x08006a87
 800122c:	08006a24 	.word	0x08006a24
 8001230:	08006a95 	.word	0x08006a95
 8001234:	08006aa3 	.word	0x08006aa3

08001238 <refill>:
MODE refill(){
 8001238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(firstF){
 800123a:	4c6a      	ldr	r4, [pc, #424]	; (80013e4 <refill+0x1ac>)
 800123c:	7823      	ldrb	r3, [r4, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <refill+0x12>
		firstF = false;
 8001242:	2300      	movs	r3, #0
		ptInNum = 0;
 8001244:	4a68      	ldr	r2, [pc, #416]	; (80013e8 <refill+0x1b0>)
		firstF = false;
 8001246:	7023      	strb	r3, [r4, #0]
		ptInNum = 0;
 8001248:	7013      	strb	r3, [r2, #0]
	if(RE1){
 800124a:	4b68      	ldr	r3, [pc, #416]	; (80013ec <refill+0x1b4>)
 800124c:	4e68      	ldr	r6, [pc, #416]	; (80013f0 <refill+0x1b8>)
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	2a63      	cmp	r2, #99	; 0x63
 8001252:	d916      	bls.n	8001282 <refill+0x4a>
		reC = 0;
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
		if(JOY_U && ptInNum < pt[usePos].max){
 8001258:	22fa      	movs	r2, #250	; 0xfa
 800125a:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <refill+0x1bc>)
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	885b      	ldrh	r3, [r3, #2]
 8001260:	4293      	cmp	r3, r2
 8001262:	d800      	bhi.n	8001266 <refill+0x2e>
 8001264:	e076      	b.n	8001354 <refill+0x11c>
 8001266:	4a64      	ldr	r2, [pc, #400]	; (80013f8 <refill+0x1c0>)
 8001268:	485f      	ldr	r0, [pc, #380]	; (80013e8 <refill+0x1b0>)
 800126a:	7811      	ldrb	r1, [r2, #0]
 800126c:	4a63      	ldr	r2, [pc, #396]	; (80013fc <refill+0x1c4>)
 800126e:	0109      	lsls	r1, r1, #4
 8001270:	1852      	adds	r2, r2, r1
 8001272:	7803      	ldrb	r3, [r0, #0]
 8001274:	8992      	ldrh	r2, [r2, #12]
 8001276:	429a      	cmp	r2, r3
 8001278:	d903      	bls.n	8001282 <refill+0x4a>
			ptInNum++;
 800127a:	3301      	adds	r3, #1
 800127c:	7003      	strb	r3, [r0, #0]
			udf = true;
 800127e:	2301      	movs	r3, #1
 8001280:	7033      	strb	r3, [r6, #0]
	if(JOY_P){
 8001282:	20a0      	movs	r0, #160	; 0xa0
 8001284:	2104      	movs	r1, #4
 8001286:	05c0      	lsls	r0, r0, #23
 8001288:	f002 fe36 	bl	8003ef8 <HAL_GPIO_ReadPin>
		if(!oldsw){
 800128c:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <refill+0x1c8>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4318      	orrs	r0, r3
 8001292:	b2c0      	uxtb	r0, r0
 8001294:	2800      	cmp	r0, #0
 8001296:	d16a      	bne.n	800136e <refill+0x136>
			firstF = true;
 8001298:	2701      	movs	r7, #1
			swS();
 800129a:	f7ff fac3 	bl	8000824 <swS>
			if(ptInNum){
 800129e:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <refill+0x1b0>)
			firstF = true;
 80012a0:	7027      	strb	r7, [r4, #0]
			if(ptInNum){
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4c55      	ldr	r4, [pc, #340]	; (80013fc <refill+0x1c4>)
			udf = true;
 80012a6:	7037      	strb	r7, [r6, #0]
			if(ptInNum){
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d033      	beq.n	8001314 <refill+0xdc>
				logShift();
 80012ac:	f7ff fed4 	bl	8001058 <logShift>
				DS3231_get_date(&date.day, &date.month, (uint8_t*)&date.year);
 80012b0:	4e54      	ldr	r6, [pc, #336]	; (8001404 <refill+0x1cc>)
 80012b2:	0030      	movs	r0, r6
 80012b4:	1cb2      	adds	r2, r6, #2
 80012b6:	19f1      	adds	r1, r6, r7
 80012b8:	f7ff f9e2 	bl	8000680 <DS3231_get_date>
				DS3231_get_time(&time.sec, &time.min, &time.hour);
 80012bc:	4d52      	ldr	r5, [pc, #328]	; (8001408 <refill+0x1d0>)
 80012be:	002a      	movs	r2, r5
 80012c0:	19e9      	adds	r1, r5, r7
 80012c2:	1ca8      	adds	r0, r5, #2
 80012c4:	f7ff f946 	bl	8000554 <DS3231_get_time>
				pLog[0].workCate = 1;
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <refill+0x1d4>)
				pLog[0].date = date;
 80012ca:	2204      	movs	r2, #4
 80012cc:	0018      	movs	r0, r3
				pLog[0].workCate = 1;
 80012ce:	701f      	strb	r7, [r3, #0]
				pLog[0].date = date;
 80012d0:	0031      	movs	r1, r6
 80012d2:	3030      	adds	r0, #48	; 0x30
 80012d4:	f004 f9e0 	bl	8005698 <memcpy>
				pLog[0].time = time;
 80012d8:	484c      	ldr	r0, [pc, #304]	; (800140c <refill+0x1d4>)
 80012da:	2203      	movs	r2, #3
 80012dc:	0029      	movs	r1, r5
 80012de:	302d      	adds	r0, #45	; 0x2d
 80012e0:	f004 f9da 	bl	8005698 <memcpy>
				sprintf(pLog[0].content[0], "%s/%s", pt[usePos].name, ptCate[pt[usePos].cate]);
 80012e4:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <refill+0x1c0>)
 80012e6:	494a      	ldr	r1, [pc, #296]	; (8001410 <refill+0x1d8>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	484a      	ldr	r0, [pc, #296]	; (8001414 <refill+0x1dc>)
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	58e2      	ldr	r2, [r4, r3]
 80012f0:	18e3      	adds	r3, r4, r3
 80012f2:	791b      	ldrb	r3, [r3, #4]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	585b      	ldr	r3, [r3, r1]
 80012f8:	4947      	ldr	r1, [pc, #284]	; (8001418 <refill+0x1e0>)
 80012fa:	f004 fb11 	bl	8005920 <siprintf>
				sprintf(pLog[0].content[1], "%dpcs (%d,%d)", ptInNum, tempX, tempY);
 80012fe:	4947      	ldr	r1, [pc, #284]	; (800141c <refill+0x1e4>)
 8001300:	4b47      	ldr	r3, [pc, #284]	; (8001420 <refill+0x1e8>)
 8001302:	7809      	ldrb	r1, [r1, #0]
 8001304:	4a38      	ldr	r2, [pc, #224]	; (80013e8 <refill+0x1b0>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	4846      	ldr	r0, [pc, #280]	; (8001424 <refill+0x1ec>)
 800130c:	9100      	str	r1, [sp, #0]
 800130e:	4946      	ldr	r1, [pc, #280]	; (8001428 <refill+0x1f0>)
 8001310:	f004 fb06 	bl	8005920 <siprintf>
			pt[usePos].store = ptInNum;
 8001314:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <refill+0x1c0>)
 8001316:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <refill+0x1b0>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	7812      	ldrb	r2, [r2, #0]
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	18e3      	adds	r3, r4, r3
 8001320:	815a      	strh	r2, [r3, #10]
				if(pt[usePos].ptionID == pt[i].ptionID && pt[usePos].ptionID) pt[i] = pt[usePos];
 8001322:	1dda      	adds	r2, r3, #7
			pt[usePos].store = ptInNum;
 8001324:	2524      	movs	r5, #36	; 0x24
				if(pt[usePos].ptionID == pt[i].ptionID && pt[usePos].ptionID) pt[i] = pt[usePos];
 8001326:	4694      	mov	ip, r2
 8001328:	4662      	mov	r2, ip
 800132a:	7810      	ldrb	r0, [r2, #0]
 800132c:	79e2      	ldrb	r2, [r4, #7]
 800132e:	4282      	cmp	r2, r0
 8001330:	d107      	bne.n	8001342 <refill+0x10a>
 8001332:	2a00      	cmp	r2, #0
 8001334:	d005      	beq.n	8001342 <refill+0x10a>
 8001336:	0022      	movs	r2, r4
 8001338:	0018      	movs	r0, r3
 800133a:	c8c2      	ldmia	r0!, {r1, r6, r7}
 800133c:	c2c2      	stmia	r2!, {r1, r6, r7}
 800133e:	6800      	ldr	r0, [r0, #0]
 8001340:	6010      	str	r0, [r2, #0]
			for(uint8_t i = 0; i < 36; i++){
 8001342:	3d01      	subs	r5, #1
 8001344:	b2ed      	uxtb	r5, r5
 8001346:	3410      	adds	r4, #16
 8001348:	2d00      	cmp	r5, #0
 800134a:	d1ed      	bne.n	8001328 <refill+0xf0>
			led_clear();
 800134c:	f7ff fa2a 	bl	80007a4 <led_clear>
}
 8001350:	0028      	movs	r0, r5
 8001352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(JOY_D && ptInNum){
 8001354:	2296      	movs	r2, #150	; 0x96
 8001356:	0052      	lsls	r2, r2, #1
 8001358:	4293      	cmp	r3, r2
 800135a:	d300      	bcc.n	800135e <refill+0x126>
 800135c:	e791      	b.n	8001282 <refill+0x4a>
 800135e:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <refill+0x1b0>)
 8001360:	7813      	ldrb	r3, [r2, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d100      	bne.n	8001368 <refill+0x130>
 8001366:	e78c      	b.n	8001282 <refill+0x4a>
			ptInNum--;
 8001368:	3b01      	subs	r3, #1
 800136a:	7013      	strb	r3, [r2, #0]
 800136c:	e787      	b.n	800127e <refill+0x46>
	if(udf){
 800136e:	7833      	ldrb	r3, [r6, #0]
	return REFILL;
 8001370:	2504      	movs	r5, #4
	if(udf){
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0ec      	beq.n	8001350 <refill+0x118>
		String bf = (String)calloc(0, sizeof(char) * 11);
 8001376:	210b      	movs	r1, #11
 8001378:	2000      	movs	r0, #0
 800137a:	f004 f945 	bl	8005608 <calloc>
		udf = false;
 800137e:	2500      	movs	r5, #0
		String bf = (String)calloc(0, sizeof(char) * 11);
 8001380:	0004      	movs	r4, r0
		udf = false;
 8001382:	7035      	strb	r5, [r6, #0]
		basicScreen();
 8001384:	f7ff fa40 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#refill", 0);
 8001388:	002b      	movs	r3, r5
 800138a:	0029      	movs	r1, r5
 800138c:	0028      	movs	r0, r5
 800138e:	4a27      	ldr	r2, [pc, #156]	; (800142c <refill+0x1f4>)
 8001390:	f7ff fa2a 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "Part has all used.", 1);
 8001394:	2301      	movs	r3, #1
 8001396:	0028      	movs	r0, r5
 8001398:	0019      	movs	r1, r3
 800139a:	4a25      	ldr	r2, [pc, #148]	; (8001430 <refill+0x1f8>)
 800139c:	f7ff fa24 	bl	80007e8 <SSD1306_PutsXY>
		if(pt[usePos].ptionC < 1)pt[usePos].ptionC = 1;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <refill+0x1c0>)
 80013a2:	4a16      	ldr	r2, [pc, #88]	; (80013fc <refill+0x1c4>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	18d1      	adds	r1, r2, r3
 80013aa:	7a08      	ldrb	r0, [r1, #8]
 80013ac:	42a8      	cmp	r0, r5
 80013ae:	d101      	bne.n	80013b4 <refill+0x17c>
 80013b0:	2001      	movs	r0, #1
 80013b2:	7208      	strb	r0, [r1, #8]
		sprintf(bf, "IN:%u/%u", ptInNum, pt[usePos].max * pt[usePos].ptionC);
 80013b4:	18d2      	adds	r2, r2, r3
 80013b6:	8991      	ldrh	r1, [r2, #12]
 80013b8:	7a13      	ldrb	r3, [r2, #8]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <refill+0x1b0>)
 80013bc:	434b      	muls	r3, r1
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	491c      	ldr	r1, [pc, #112]	; (8001434 <refill+0x1fc>)
 80013c2:	0020      	movs	r0, r4
 80013c4:	f004 faac 	bl	8005920 <siprintf>
		SSD1306_PutsXY(0, 3, bf, 1);
 80013c8:	2301      	movs	r3, #1
 80013ca:	0022      	movs	r2, r4
 80013cc:	2103      	movs	r1, #3
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fa0a 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 80013d4:	f001 fe58 	bl	8003088 <SSD1306_UpdateScreen>
		free(bf);
 80013d8:	0020      	movs	r0, r4
 80013da:	f004 f953 	bl	8005684 <free>
	return REFILL;
 80013de:	2504      	movs	r5, #4
 80013e0:	e7b6      	b.n	8001350 <refill+0x118>
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000954 	.word	0x20000954
 80013ec:	20000957 	.word	0x20000957
 80013f0:	2000001a 	.word	0x2000001a
 80013f4:	2000040c 	.word	0x2000040c
 80013f8:	2000001b 	.word	0x2000001b
 80013fc:	2000070c 	.word	0x2000070c
 8001400:	20000015 	.word	0x20000015
 8001404:	20000414 	.word	0x20000414
 8001408:	2000095e 	.word	0x2000095e
 800140c:	200005d2 	.word	0x200005d2
 8001410:	08006ce4 	.word	0x08006ce4
 8001414:	200005d3 	.word	0x200005d3
 8001418:	08006a81 	.word	0x08006a81
 800141c:	2000095d 	.word	0x2000095d
 8001420:	2000095c 	.word	0x2000095c
 8001424:	200005e9 	.word	0x200005e9
 8001428:	08006a87 	.word	0x08006a87
 800142c:	08006aad 	.word	0x08006aad
 8001430:	08006ab5 	.word	0x08006ab5
 8001434:	08006ac8 	.word	0x08006ac8

08001438 <findR>:
MODE findR(){
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 800143a:	4e90      	ldr	r6, [pc, #576]	; (800167c <findR+0x244>)
 800143c:	4f90      	ldr	r7, [pc, #576]	; (8001680 <findR+0x248>)
 800143e:	7833      	ldrb	r3, [r6, #0]
MODE findR(){
 8001440:	b085      	sub	sp, #20
	if(firstF){
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <findR+0x14>
		firstF = false;
 8001446:	2300      	movs	r3, #0
 8001448:	7033      	strb	r3, [r6, #0]
		sel = 0;
 800144a:	703b      	strb	r3, [r7, #0]
	if(ledC >= 1000) ledC = 0;
 800144c:	21fa      	movs	r1, #250	; 0xfa
 800144e:	4a8d      	ldr	r2, [pc, #564]	; (8001684 <findR+0x24c>)
 8001450:	0089      	lsls	r1, r1, #2
 8001452:	8813      	ldrh	r3, [r2, #0]
 8001454:	428b      	cmp	r3, r1
 8001456:	d200      	bcs.n	800145a <findR+0x22>
 8001458:	e07a      	b.n	8001550 <findR+0x118>
 800145a:	2300      	movs	r3, #0
 800145c:	8013      	strh	r3, [r2, #0]
MODE findR(){
 800145e:	2500      	movs	r5, #0
			led_color(pt[findArr[i]].pos, PTRF, PTGF, PTBF);
 8001460:	2404      	movs	r4, #4
 8001462:	4b89      	ldr	r3, [pc, #548]	; (8001688 <findR+0x250>)
 8001464:	4a89      	ldr	r2, [pc, #548]	; (800168c <findR+0x254>)
 8001466:	5d5b      	ldrb	r3, [r3, r5]
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	18d3      	adds	r3, r2, r3
 800146c:	7998      	ldrb	r0, [r3, #6]
 800146e:	4a86      	ldr	r2, [pc, #536]	; (8001688 <findR+0x250>)
 8001470:	783b      	ldrb	r3, [r7, #0]
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	4a85      	ldr	r2, [pc, #532]	; (800168c <findR+0x254>)
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	18d3      	adds	r3, r2, r3
 800147a:	7919      	ldrb	r1, [r3, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	0023      	movs	r3, r4
 8001480:	2901      	cmp	r1, #1
 8001482:	d005      	beq.n	8001490 <findR+0x58>
 8001484:	2903      	cmp	r1, #3
 8001486:	d000      	beq.n	800148a <findR+0x52>
 8001488:	e0f0      	b.n	800166c <findR+0x234>
 800148a:	0022      	movs	r2, r4
 800148c:	2100      	movs	r1, #0
 800148e:	2304      	movs	r3, #4
		for(uint8_t i = 0; i < 36; i++)
 8001490:	3501      	adds	r5, #1
			led_color(pt[findArr[i]].pos, PTRF, PTGF, PTBF);
 8001492:	f7ff f951 	bl	8000738 <led_color>
		for(uint8_t i = 0; i < 36; i++)
 8001496:	2d24      	cmp	r5, #36	; 0x24
 8001498:	d1e3      	bne.n	8001462 <findR+0x2a>
	if(reC >= 250){
 800149a:	4b7d      	ldr	r3, [pc, #500]	; (8001690 <findR+0x258>)
 800149c:	4d7d      	ldr	r5, [pc, #500]	; (8001694 <findR+0x25c>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	2af9      	cmp	r2, #249	; 0xf9
 80014a2:	d910      	bls.n	80014c6 <findR+0x8e>
		reC = 0;
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
		led_update();
 80014a8:	f7ff f952 	bl	8000750 <led_update>
		if(JOY_U && sel)sel--;
 80014ac:	22fa      	movs	r2, #250	; 0xfa
 80014ae:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <findR+0x260>)
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	885b      	ldrh	r3, [r3, #2]
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d95d      	bls.n	8001574 <findR+0x13c>
 80014b8:	783b      	ldrb	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <findR+0x8a>
 80014be:	3b01      	subs	r3, #1
		if(JOY_D && sel < (findC - 1)) sel++;
 80014c0:	703b      	strb	r3, [r7, #0]
		if(JOY_U || JOY_D) udf = true;
 80014c2:	2301      	movs	r3, #1
 80014c4:	702b      	strb	r3, [r5, #0]
	if(JOY_P){
 80014c6:	20a0      	movs	r0, #160	; 0xa0
 80014c8:	2104      	movs	r1, #4
 80014ca:	05c0      	lsls	r0, r0, #23
 80014cc:	f002 fd14 	bl	8003ef8 <HAL_GPIO_ReadPin>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d000      	beq.n	80014d6 <findR+0x9e>
 80014d4:	e08d      	b.n	80015f2 <findR+0x1ba>
		if(!oldsw){
 80014d6:	4b71      	ldr	r3, [pc, #452]	; (800169c <findR+0x264>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d159      	bne.n	8001592 <findR+0x15a>
			udf = true;
 80014de:	3301      	adds	r3, #1
 80014e0:	702b      	strb	r3, [r5, #0]
			swS();
 80014e2:	f7ff f99f 	bl	8000824 <swS>
			logShift();
 80014e6:	f7ff fdb7 	bl	8001058 <logShift>
			DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 80014ea:	4c6d      	ldr	r4, [pc, #436]	; (80016a0 <findR+0x268>)
 80014ec:	0020      	movs	r0, r4
 80014ee:	1ca2      	adds	r2, r4, #2
 80014f0:	1c61      	adds	r1, r4, #1
 80014f2:	f7ff f8c5 	bl	8000680 <DS3231_get_date>
			DS3231_get_time(&time.sec, &time.min, &time.hour);
 80014f6:	4e6b      	ldr	r6, [pc, #428]	; (80016a4 <findR+0x26c>)
 80014f8:	0032      	movs	r2, r6
 80014fa:	1c71      	adds	r1, r6, #1
 80014fc:	1cb0      	adds	r0, r6, #2
 80014fe:	f7ff f829 	bl	8000554 <DS3231_get_time>
			pLog[0].workCate = 3;
 8001502:	4b69      	ldr	r3, [pc, #420]	; (80016a8 <findR+0x270>)
 8001504:	2203      	movs	r2, #3
			pLog[0].date = date;
 8001506:	0018      	movs	r0, r3
			pLog[0].workCate = 3;
 8001508:	701a      	strb	r2, [r3, #0]
			pLog[0].date = date;
 800150a:	0021      	movs	r1, r4
 800150c:	3201      	adds	r2, #1
 800150e:	3030      	adds	r0, #48	; 0x30
 8001510:	f004 f8c2 	bl	8005698 <memcpy>
			pLog[0].time = time;
 8001514:	4864      	ldr	r0, [pc, #400]	; (80016a8 <findR+0x270>)
 8001516:	0031      	movs	r1, r6
 8001518:	2203      	movs	r2, #3
 800151a:	302d      	adds	r0, #45	; 0x2d
 800151c:	f004 f8bc 	bl	8005698 <memcpy>
			sprintf(pLog[0].content[0], "Sear:%s", ptFindName);
 8001520:	4b62      	ldr	r3, [pc, #392]	; (80016ac <findR+0x274>)
 8001522:	4e63      	ldr	r6, [pc, #396]	; (80016b0 <findR+0x278>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4963      	ldr	r1, [pc, #396]	; (80016b4 <findR+0x27c>)
 8001528:	0030      	movs	r0, r6
 800152a:	f004 f9f9 	bl	8005920 <siprintf>
			sprintf(pLog[0].content[0], "Num of Find:%u", findC);
 800152e:	4c62      	ldr	r4, [pc, #392]	; (80016b8 <findR+0x280>)
 8001530:	0030      	movs	r0, r6
 8001532:	7822      	ldrb	r2, [r4, #0]
 8001534:	4961      	ldr	r1, [pc, #388]	; (80016bc <findR+0x284>)
 8001536:	f004 f9f3 	bl	8005920 <siprintf>
			if(findC){
 800153a:	7820      	ldrb	r0, [r4, #0]
 800153c:	2800      	cmp	r0, #0
 800153e:	d025      	beq.n	800158c <findR+0x154>
				return USE;
 8001540:	2003      	movs	r0, #3
				usePos = findArr[sel];
 8001542:	783b      	ldrb	r3, [r7, #0]
 8001544:	4a50      	ldr	r2, [pc, #320]	; (8001688 <findR+0x250>)
 8001546:	5cd2      	ldrb	r2, [r2, r3]
 8001548:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <findR+0x288>)
 800154a:	701a      	strb	r2, [r3, #0]
}
 800154c:	b005      	add	sp, #20
 800154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(ledC < 500)
 8001550:	22fa      	movs	r2, #250	; 0xfa
 8001552:	0052      	lsls	r2, r2, #1
 8001554:	4293      	cmp	r3, r2
 8001556:	d200      	bcs.n	800155a <findR+0x122>
 8001558:	e781      	b.n	800145e <findR+0x26>
	else led_color(pt[findArr[sel]].pos, 0, 0, 0);
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	4a4a      	ldr	r2, [pc, #296]	; (8001688 <findR+0x250>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	4a4a      	ldr	r2, [pc, #296]	; (800168c <findR+0x254>)
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	18d3      	adds	r3, r2, r3
 8001566:	7998      	ldrb	r0, [r3, #6]
 8001568:	2300      	movs	r3, #0
 800156a:	001a      	movs	r2, r3
 800156c:	0019      	movs	r1, r3
 800156e:	f7ff f8e3 	bl	8000738 <led_color>
 8001572:	e792      	b.n	800149a <findR+0x62>
		if(JOY_D && sel < (findC - 1)) sel++;
 8001574:	2296      	movs	r2, #150	; 0x96
 8001576:	0052      	lsls	r2, r2, #1
 8001578:	4293      	cmp	r3, r2
 800157a:	d2a4      	bcs.n	80014c6 <findR+0x8e>
 800157c:	4a4e      	ldr	r2, [pc, #312]	; (80016b8 <findR+0x280>)
 800157e:	783b      	ldrb	r3, [r7, #0]
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	3a01      	subs	r2, #1
 8001584:	4293      	cmp	r3, r2
 8001586:	da9c      	bge.n	80014c2 <findR+0x8a>
 8001588:	3301      	adds	r3, #1
 800158a:	e799      	b.n	80014c0 <findR+0x88>
				udf = true;
 800158c:	2301      	movs	r3, #1
 800158e:	702b      	strb	r3, [r5, #0]
				return MAIN;
 8001590:	e7dc      	b.n	800154c <findR+0x114>
		findC = 0;
 8001592:	4b49      	ldr	r3, [pc, #292]	; (80016b8 <findR+0x280>)
 8001594:	7018      	strb	r0, [r3, #0]
		firstF = true;
 8001596:	2301      	movs	r3, #1
 8001598:	7033      	strb	r3, [r6, #0]
		udf = false;
 800159a:	2400      	movs	r4, #0
 800159c:	702c      	strb	r4, [r5, #0]
		basicScreen();
 800159e:	f7ff f933 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Find result", 0);
 80015a2:	0023      	movs	r3, r4
 80015a4:	0020      	movs	r0, r4
 80015a6:	0021      	movs	r1, r4
 80015a8:	4a46      	ldr	r2, [pc, #280]	; (80016c4 <findR+0x28c>)
 80015aa:	f7ff f91d 	bl	80007e8 <SSD1306_PutsXY>
		if(findC){
 80015ae:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <findR+0x280>)
 80015b0:	7818      	ldrb	r0, [r3, #0]
 80015b2:	42a0      	cmp	r0, r4
 80015b4:	d054      	beq.n	8001660 <findR+0x228>
			String bf = (String)calloc(0, sizeof(char) * 31);
 80015b6:	211f      	movs	r1, #31
 80015b8:	0020      	movs	r0, r4
 80015ba:	f004 f825 	bl	8005608 <calloc>
			SSD1306_PutsXY(0, sel + 2, ">", 1);
 80015be:	7839      	ldrb	r1, [r7, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	3102      	adds	r1, #2
 80015c4:	4a40      	ldr	r2, [pc, #256]	; (80016c8 <findR+0x290>)
 80015c6:	b2c9      	uxtb	r1, r1
			String bf = (String)calloc(0, sizeof(char) * 31);
 80015c8:	0005      	movs	r5, r0
			SSD1306_PutsXY(0, sel + 2, ">", 1);
 80015ca:	0020      	movs	r0, r4
 80015cc:	f7ff f90c 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_PutsXY(0, 1, "Find some Parts!", 1);
 80015d0:	2301      	movs	r3, #1
 80015d2:	0020      	movs	r0, r4
 80015d4:	0019      	movs	r1, r3
 80015d6:	4a3d      	ldr	r2, [pc, #244]	; (80016cc <findR+0x294>)
 80015d8:	f7ff f906 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < findC; i++){
 80015dc:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <findR+0x280>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	42a3      	cmp	r3, r4
 80015e2:	d80b      	bhi.n	80015fc <findR+0x1c4>
			free(bf);
 80015e4:	0028      	movs	r0, r5
 80015e6:	f004 f84d 	bl	8005684 <free>
		SSD1306_UpdateScreen();
 80015ea:	f001 fd4d 	bl	8003088 <SSD1306_UpdateScreen>
	return FINDR;
 80015ee:	2006      	movs	r0, #6
 80015f0:	e7ac      	b.n	800154c <findR+0x114>
	if(udf){
 80015f2:	782b      	ldrb	r3, [r5, #0]
	return FINDR;
 80015f4:	2006      	movs	r0, #6
	if(udf){
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0a8      	beq.n	800154c <findR+0x114>
 80015fa:	e7ce      	b.n	800159a <findR+0x162>
				tempX = (pt[findArr[i]].pos) % 6 + 1;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <findR+0x250>)
 80015fe:	2106      	movs	r1, #6
 8001600:	5d1e      	ldrb	r6, [r3, r4]
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <findR+0x254>)
 8001604:	0136      	lsls	r6, r6, #4
 8001606:	199b      	adds	r3, r3, r6
 8001608:	799f      	ldrb	r7, [r3, #6]
 800160a:	9303      	str	r3, [sp, #12]
 800160c:	0038      	movs	r0, r7
 800160e:	f7fe fe1f 	bl	8000250 <__aeabi_uidivmod>
 8001612:	3101      	adds	r1, #1
 8001614:	b2cb      	uxtb	r3, r1
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	9a02      	ldr	r2, [sp, #8]
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <findR+0x298>)
				tempY = 6 - (pt[findArr[i]].pos) / 6;
 800161c:	2106      	movs	r1, #6
				tempX = (pt[findArr[i]].pos) % 6 + 1;
 800161e:	701a      	strb	r2, [r3, #0]
				tempY = 6 - (pt[findArr[i]].pos) / 6;
 8001620:	0038      	movs	r0, r7
 8001622:	f7fe fd8f 	bl	8000144 <__udivsi3>
 8001626:	2306      	movs	r3, #6
 8001628:	1a18      	subs	r0, r3, r0
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <findR+0x29c>)
 800162c:	b2c0      	uxtb	r0, r0
 800162e:	7018      	strb	r0, [r3, #0]
				sprintf(bf, "%s(%s/%d,%d)", pt[findArr[i]].name, ptCate[pt[findArr[i]].cate], tempX, tempY);
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <findR+0x254>)
 8001632:	9902      	ldr	r1, [sp, #8]
 8001634:	599a      	ldr	r2, [r3, r6]
 8001636:	9b03      	ldr	r3, [sp, #12]
 8001638:	791b      	ldrb	r3, [r3, #4]
 800163a:	9100      	str	r1, [sp, #0]
 800163c:	4926      	ldr	r1, [pc, #152]	; (80016d8 <findR+0x2a0>)
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	585b      	ldr	r3, [r3, r1]
 8001642:	9001      	str	r0, [sp, #4]
 8001644:	4925      	ldr	r1, [pc, #148]	; (80016dc <findR+0x2a4>)
 8001646:	0028      	movs	r0, r5
 8001648:	f004 f96a 	bl	8005920 <siprintf>
				SSD1306_PutsXY(1, i + 2, bf, 1);
 800164c:	2301      	movs	r3, #1
 800164e:	1ca1      	adds	r1, r4, #2
 8001650:	002a      	movs	r2, r5
 8001652:	0018      	movs	r0, r3
 8001654:	b2c9      	uxtb	r1, r1
			for(uint8_t i = 0; i < findC; i++){
 8001656:	3401      	adds	r4, #1
				SSD1306_PutsXY(1, i + 2, bf, 1);
 8001658:	f7ff f8c6 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < findC; i++){
 800165c:	b2e4      	uxtb	r4, r4
 800165e:	e7bd      	b.n	80015dc <findR+0x1a4>
		}else SSD1306_PutsXY(0, 1, "Not Found..", 1);
 8001660:	2301      	movs	r3, #1
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <findR+0x2a8>)
 8001664:	0019      	movs	r1, r3
 8001666:	f7ff f8bf 	bl	80007e8 <SSD1306_PutsXY>
 800166a:	e7be      	b.n	80015ea <findR+0x1b2>
			led_color(pt[findArr[i]].pos, PTRF, PTGF, PTBF);
 800166c:	2201      	movs	r2, #1
 800166e:	2902      	cmp	r1, #2
 8001670:	d100      	bne.n	8001674 <findR+0x23c>
 8001672:	0022      	movs	r2, r4
 8001674:	0021      	movs	r1, r4
 8001676:	2300      	movs	r3, #0
 8001678:	e70a      	b.n	8001490 <findR+0x58>
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	20000008 	.word	0x20000008
 8001680:	20000958 	.word	0x20000958
 8001684:	200005c8 	.word	0x200005c8
 8001688:	20000418 	.word	0x20000418
 800168c:	2000070c 	.word	0x2000070c
 8001690:	20000957 	.word	0x20000957
 8001694:	2000001a 	.word	0x2000001a
 8001698:	2000040c 	.word	0x2000040c
 800169c:	20000015 	.word	0x20000015
 80016a0:	20000414 	.word	0x20000414
 80016a4:	2000095e 	.word	0x2000095e
 80016a8:	200005d2 	.word	0x200005d2
 80016ac:	20000950 	.word	0x20000950
 80016b0:	200005d3 	.word	0x200005d3
 80016b4:	08006ad1 	.word	0x08006ad1
 80016b8:	2000043c 	.word	0x2000043c
 80016bc:	08006ad9 	.word	0x08006ad9
 80016c0:	2000001b 	.word	0x2000001b
 80016c4:	08006ae8 	.word	0x08006ae8
 80016c8:	08006a22 	.word	0x08006a22
 80016cc:	08006af5 	.word	0x08006af5
 80016d0:	2000095c 	.word	0x2000095c
 80016d4:	2000095d 	.word	0x2000095d
 80016d8:	08006ce4 	.word	0x08006ce4
 80016dc:	08006b06 	.word	0x08006b06
 80016e0:	08006b13 	.word	0x08006b13

080016e4 <partition>:
MODE partition(){
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 80016e6:	4bc2      	ldr	r3, [pc, #776]	; (80019f0 <partition+0x30c>)
MODE partition(){
 80016e8:	b089      	sub	sp, #36	; 0x24
	if(firstF){
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d015      	beq.n	800171c <partition+0x38>
		firstF = false;
 80016f0:	2300      	movs	r3, #0
 80016f2:	4abf      	ldr	r2, [pc, #764]	; (80019f0 <partition+0x30c>)
		ptiSX = 1;
 80016f4:	49bf      	ldr	r1, [pc, #764]	; (80019f4 <partition+0x310>)
		firstF = false;
 80016f6:	7013      	strb	r3, [r2, #0]
		sel = 0;
 80016f8:	4abf      	ldr	r2, [pc, #764]	; (80019f8 <partition+0x314>)
 80016fa:	7013      	strb	r3, [r2, #0]
		ptiSX = 1;
 80016fc:	2201      	movs	r2, #1
 80016fe:	700a      	strb	r2, [r1, #0]
		ptiSY = 1;
 8001700:	49be      	ldr	r1, [pc, #760]	; (80019fc <partition+0x318>)
 8001702:	700a      	strb	r2, [r1, #0]
		ptiEX = 1;
 8001704:	49be      	ldr	r1, [pc, #760]	; (8001a00 <partition+0x31c>)
 8001706:	700a      	strb	r2, [r1, #0]
		ptiEY = 1;
 8001708:	49be      	ldr	r1, [pc, #760]	; (8001a04 <partition+0x320>)
 800170a:	700a      	strb	r2, [r1, #0]
		selPtpos = 0;
 800170c:	4abe      	ldr	r2, [pc, #760]	; (8001a08 <partition+0x324>)
 800170e:	7013      	strb	r3, [r2, #0]
		tempPtiC = 0;
 8001710:	4abe      	ldr	r2, [pc, #760]	; (8001a0c <partition+0x328>)
 8001712:	7013      	strb	r3, [r2, #0]
		led_clear();
 8001714:	f7ff f846 	bl	80007a4 <led_clear>
		led_update();
 8001718:	f7ff f81a 	bl	8000750 <led_update>
	if(RE1){
 800171c:	4bbc      	ldr	r3, [pc, #752]	; (8001a10 <partition+0x32c>)
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	2a63      	cmp	r2, #99	; 0x63
 8001722:	d800      	bhi.n	8001726 <partition+0x42>
 8001724:	e0c4      	b.n	80018b0 <partition+0x1cc>
		reC = 0;
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
		led_clear();
 800172a:	f7ff f83b 	bl	80007a4 <led_clear>
		if(JOY_R){
 800172e:	22fa      	movs	r2, #250	; 0xfa
 8001730:	49b8      	ldr	r1, [pc, #736]	; (8001a14 <partition+0x330>)
 8001732:	4cb1      	ldr	r4, [pc, #708]	; (80019f8 <partition+0x314>)
 8001734:	880b      	ldrh	r3, [r1, #0]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	4293      	cmp	r3, r2
 800173a:	d928      	bls.n	800178e <partition+0xaa>
			if(ptiSX < 6 && sel == 0) ptiSX++;
 800173c:	48ad      	ldr	r0, [pc, #692]	; (80019f4 <partition+0x310>)
 800173e:	7825      	ldrb	r5, [r4, #0]
 8001740:	7802      	ldrb	r2, [r0, #0]
 8001742:	2a05      	cmp	r2, #5
 8001744:	d803      	bhi.n	800174e <partition+0x6a>
 8001746:	2d00      	cmp	r5, #0
 8001748:	d101      	bne.n	800174e <partition+0x6a>
 800174a:	3201      	adds	r2, #1
 800174c:	7002      	strb	r2, [r0, #0]
			if(ptiEX < 6 && sel == 1) ptiEX++;
 800174e:	48ac      	ldr	r0, [pc, #688]	; (8001a00 <partition+0x31c>)
 8001750:	7802      	ldrb	r2, [r0, #0]
 8001752:	2a05      	cmp	r2, #5
 8001754:	d802      	bhi.n	800175c <partition+0x78>
 8001756:	3201      	adds	r2, #1
 8001758:	2d01      	cmp	r5, #1
 800175a:	d02c      	beq.n	80017b6 <partition+0xd2>
		if(JOY_U){
 800175c:	20fa      	movs	r0, #250	; 0xfa
 800175e:	8849      	ldrh	r1, [r1, #2]
			if(ptiSX < 6 && sel == 0) ptiSX++;
 8001760:	7822      	ldrb	r2, [r4, #0]
		if(JOY_U){
 8001762:	0100      	lsls	r0, r0, #4
 8001764:	4281      	cmp	r1, r0
 8001766:	d928      	bls.n	80017ba <partition+0xd6>
			if(ptiSY < 6 && sel == 0) ptiSY++;
 8001768:	49a4      	ldr	r1, [pc, #656]	; (80019fc <partition+0x318>)
 800176a:	780b      	ldrb	r3, [r1, #0]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d803      	bhi.n	8001778 <partition+0x94>
 8001770:	2a00      	cmp	r2, #0
 8001772:	d101      	bne.n	8001778 <partition+0x94>
 8001774:	3301      	adds	r3, #1
 8001776:	700b      	strb	r3, [r1, #0]
			if(ptiEY < 6 && sel == 1) ptiEY++;
 8001778:	49a2      	ldr	r1, [pc, #648]	; (8001a04 <partition+0x320>)
 800177a:	780b      	ldrb	r3, [r1, #0]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d802      	bhi.n	8001786 <partition+0xa2>
 8001780:	3301      	adds	r3, #1
 8001782:	2a01      	cmp	r2, #1
 8001784:	d02c      	beq.n	80017e0 <partition+0xfc>
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 8001786:	2101      	movs	r1, #1
 8001788:	4ba3      	ldr	r3, [pc, #652]	; (8001a18 <partition+0x334>)
 800178a:	7019      	strb	r1, [r3, #0]
 800178c:	e030      	b.n	80017f0 <partition+0x10c>
		if(JOY_L){
 800178e:	2296      	movs	r2, #150	; 0x96
			if(ptiSX < 6 && sel == 0) ptiSX++;
 8001790:	7825      	ldrb	r5, [r4, #0]
		if(JOY_L){
 8001792:	0052      	lsls	r2, r2, #1
 8001794:	4293      	cmp	r3, r2
 8001796:	d2e1      	bcs.n	800175c <partition+0x78>
			if(ptiSX > 1 && sel == 0) ptiSX--;
 8001798:	4896      	ldr	r0, [pc, #600]	; (80019f4 <partition+0x310>)
 800179a:	7802      	ldrb	r2, [r0, #0]
 800179c:	2a01      	cmp	r2, #1
 800179e:	d903      	bls.n	80017a8 <partition+0xc4>
 80017a0:	2d00      	cmp	r5, #0
 80017a2:	d101      	bne.n	80017a8 <partition+0xc4>
 80017a4:	3a01      	subs	r2, #1
 80017a6:	7002      	strb	r2, [r0, #0]
			if(ptiEX > 1 && sel == 1) ptiEX--;
 80017a8:	4895      	ldr	r0, [pc, #596]	; (8001a00 <partition+0x31c>)
 80017aa:	7802      	ldrb	r2, [r0, #0]
 80017ac:	2a01      	cmp	r2, #1
 80017ae:	d9d5      	bls.n	800175c <partition+0x78>
 80017b0:	2d01      	cmp	r5, #1
 80017b2:	d1d3      	bne.n	800175c <partition+0x78>
 80017b4:	3a01      	subs	r2, #1
 80017b6:	7002      	strb	r2, [r0, #0]
 80017b8:	e7d0      	b.n	800175c <partition+0x78>
		if(JOY_D){
 80017ba:	2096      	movs	r0, #150	; 0x96
 80017bc:	0040      	lsls	r0, r0, #1
 80017be:	4281      	cmp	r1, r0
 80017c0:	d210      	bcs.n	80017e4 <partition+0x100>
			if(ptiSY > 1 && sel == 0) ptiSY--;
 80017c2:	498e      	ldr	r1, [pc, #568]	; (80019fc <partition+0x318>)
 80017c4:	780b      	ldrb	r3, [r1, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d903      	bls.n	80017d2 <partition+0xee>
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d101      	bne.n	80017d2 <partition+0xee>
 80017ce:	3b01      	subs	r3, #1
 80017d0:	700b      	strb	r3, [r1, #0]
			if(ptiEY > 1 && sel == 1) ptiEY--;
 80017d2:	498c      	ldr	r1, [pc, #560]	; (8001a04 <partition+0x320>)
 80017d4:	780b      	ldrb	r3, [r1, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d9d5      	bls.n	8001786 <partition+0xa2>
 80017da:	2a01      	cmp	r2, #1
 80017dc:	d1d3      	bne.n	8001786 <partition+0xa2>
 80017de:	3b01      	subs	r3, #1
 80017e0:	700b      	strb	r3, [r1, #0]
 80017e2:	e7d0      	b.n	8001786 <partition+0xa2>
		if(JOY_U || JOY_D || JOY_R || JOY_L) udf = true;
 80017e4:	3b2d      	subs	r3, #45	; 0x2d
 80017e6:	3bff      	subs	r3, #255	; 0xff
 80017e8:	498c      	ldr	r1, [pc, #560]	; (8001a1c <partition+0x338>)
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	428b      	cmp	r3, r1
 80017ee:	d8ca      	bhi.n	8001786 <partition+0xa2>
		if(sel == 0) ledPos = (6 - ptiSY) * 6 + ptiSX - 1;
 80017f0:	2a00      	cmp	r2, #0
 80017f2:	d000      	beq.n	80017f6 <partition+0x112>
 80017f4:	e0e9      	b.n	80019ca <partition+0x2e6>
 80017f6:	4b81      	ldr	r3, [pc, #516]	; (80019fc <partition+0x318>)
 80017f8:	781a      	ldrb	r2, [r3, #0]
 80017fa:	2306      	movs	r3, #6
 80017fc:	1a9a      	subs	r2, r3, r2
 80017fe:	4353      	muls	r3, r2
 8001800:	4a7c      	ldr	r2, [pc, #496]	; (80019f4 <partition+0x310>)
		if(sel == 1) ledPos = (6 - ptiEY) * 6 + ptiEX - 1;
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	4d86      	ldr	r5, [pc, #536]	; (8001a20 <partition+0x33c>)
 8001806:	3a01      	subs	r2, #1
 8001808:	189b      	adds	r3, r3, r2
 800180a:	4a86      	ldr	r2, [pc, #536]	; (8001a24 <partition+0x340>)
 800180c:	7013      	strb	r3, [r2, #0]
			for(uint8_t i = 0; i < 36; i++) if(!pt[i].cate) led_color(pt[i].pos, PTR, PTG, PTB);
 800180e:	2390      	movs	r3, #144	; 0x90
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	18ee      	adds	r6, r5, r3
 8001814:	792b      	ldrb	r3, [r5, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d104      	bne.n	8001824 <partition+0x140>
 800181a:	2201      	movs	r2, #1
 800181c:	2104      	movs	r1, #4
 800181e:	79a8      	ldrb	r0, [r5, #6]
 8001820:	f7fe ff8a 	bl	8000738 <led_color>
 8001824:	3510      	adds	r5, #16
 8001826:	42b5      	cmp	r5, r6
 8001828:	d1f4      	bne.n	8001814 <partition+0x130>
			led_color(ledPos, 4, 4, 4);
 800182a:	4b7e      	ldr	r3, [pc, #504]	; (8001a24 <partition+0x340>)
 800182c:	7818      	ldrb	r0, [r3, #0]
 800182e:	2304      	movs	r3, #4
 8001830:	001a      	movs	r2, r3
 8001832:	0019      	movs	r1, r3
 8001834:	f7fe ff80 	bl	8000738 <led_color>
			led_update();
 8001838:	f7fe ff8a 	bl	8000750 <led_update>
		if(sel == 2){
 800183c:	7823      	ldrb	r3, [r4, #0]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d136      	bne.n	80018b0 <partition+0x1cc>
			if(ledC >= 1000) ledC = 0;
 8001842:	21fa      	movs	r1, #250	; 0xfa
 8001844:	4a78      	ldr	r2, [pc, #480]	; (8001a28 <partition+0x344>)
 8001846:	0089      	lsls	r1, r1, #2
 8001848:	8813      	ldrh	r3, [r2, #0]
 800184a:	428b      	cmp	r3, r1
 800184c:	d200      	bcs.n	8001850 <partition+0x16c>
 800184e:	e0c6      	b.n	80019de <partition+0x2fa>
 8001850:	2300      	movs	r3, #0
 8001852:	8013      	strh	r3, [r2, #0]
MODE partition(){
 8001854:	2400      	movs	r4, #0
					tempX = i % 6 + 1;
 8001856:	2606      	movs	r6, #6
 8001858:	0031      	movs	r1, r6
 800185a:	0020      	movs	r0, r4
 800185c:	f7fe fcf8 	bl	8000250 <__aeabi_uidivmod>
 8001860:	4b72      	ldr	r3, [pc, #456]	; (8001a2c <partition+0x348>)
 8001862:	3101      	adds	r1, #1
 8001864:	b2cd      	uxtb	r5, r1
 8001866:	701d      	strb	r5, [r3, #0]
					tempY = 6 - i / 6;
 8001868:	0031      	movs	r1, r6
 800186a:	0020      	movs	r0, r4
 800186c:	f7fe fc6a 	bl	8000144 <__udivsi3>
 8001870:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <partition+0x34c>)
 8001872:	1a30      	subs	r0, r6, r0
 8001874:	b2c0      	uxtb	r0, r0
 8001876:	7018      	strb	r0, [r3, #0]
					if((tempX >= minX && tempX <= maxX) && (tempY >= minY && tempY <= maxY))
 8001878:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <partition+0x350>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	42ab      	cmp	r3, r5
 800187e:	d811      	bhi.n	80018a4 <partition+0x1c0>
 8001880:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <partition+0x354>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	42ab      	cmp	r3, r5
 8001886:	d30d      	bcc.n	80018a4 <partition+0x1c0>
 8001888:	4b6c      	ldr	r3, [pc, #432]	; (8001a3c <partition+0x358>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4283      	cmp	r3, r0
 800188e:	d809      	bhi.n	80018a4 <partition+0x1c0>
 8001890:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <partition+0x35c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4283      	cmp	r3, r0
 8001896:	d305      	bcc.n	80018a4 <partition+0x1c0>
						led_color(i, 0, 4, 0);
 8001898:	2300      	movs	r3, #0
 800189a:	2204      	movs	r2, #4
 800189c:	0019      	movs	r1, r3
 800189e:	0020      	movs	r0, r4
 80018a0:	f7fe ff4a 	bl	8000738 <led_color>
				for(uint8_t i = 0; i < 36; i++){
 80018a4:	3401      	adds	r4, #1
 80018a6:	b2e4      	uxtb	r4, r4
 80018a8:	2c24      	cmp	r4, #36	; 0x24
 80018aa:	d1d5      	bne.n	8001858 <partition+0x174>
			led_update();
 80018ac:	f7fe ff50 	bl	8000750 <led_update>
	if(JOY_P){
 80018b0:	20a0      	movs	r0, #160	; 0xa0
 80018b2:	2104      	movs	r1, #4
 80018b4:	05c0      	lsls	r0, r0, #23
 80018b6:	f002 fb1f 	bl	8003ef8 <HAL_GPIO_ReadPin>
		if(!oldsw){
 80018ba:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <partition+0x360>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4318      	orrs	r0, r3
 80018c0:	b2c7      	uxtb	r7, r0
 80018c2:	2f00      	cmp	r7, #0
 80018c4:	d000      	beq.n	80018c8 <partition+0x1e4>
 80018c6:	e1af      	b.n	8001c28 <partition+0x544>
			swS();
 80018c8:	f7fe ffac 	bl	8000824 <swS>
			udf = true;
 80018cc:	2301      	movs	r3, #1
 80018ce:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <partition+0x334>)
 80018d0:	7013      	strb	r3, [r2, #0]
			if(sel < 3) sel++;
 80018d2:	4a49      	ldr	r2, [pc, #292]	; (80019f8 <partition+0x314>)
 80018d4:	7813      	ldrb	r3, [r2, #0]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d801      	bhi.n	80018de <partition+0x1fa>
 80018da:	3301      	adds	r3, #1
 80018dc:	7013      	strb	r3, [r2, #0]
			if(sel == 1){
 80018de:	7813      	ldrb	r3, [r2, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d000      	beq.n	80018e6 <partition+0x202>
 80018e4:	e0ba      	b.n	8001a5c <partition+0x378>
				ptiEX = ptiSX;
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <partition+0x310>)
 80018e8:	781a      	ldrb	r2, [r3, #0]
 80018ea:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <partition+0x31c>)
 80018ec:	701a      	strb	r2, [r3, #0]
				ptiEY = ptiSY;
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <partition+0x318>)
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <partition+0x320>)
 80018f4:	701a      	strb	r2, [r3, #0]
		String bf = (String)calloc(0, sizeof(char) * 30);
 80018f6:	211e      	movs	r1, #30
 80018f8:	2000      	movs	r0, #0
 80018fa:	f003 fe85 	bl	8005608 <calloc>
		udf = false;
 80018fe:	2500      	movs	r5, #0
		String bf = (String)calloc(0, sizeof(char) * 30);
 8001900:	0004      	movs	r4, r0
		udf = false;
 8001902:	4b45      	ldr	r3, [pc, #276]	; (8001a18 <partition+0x334>)
 8001904:	701d      	strb	r5, [r3, #0]
		led_update();
 8001906:	f7fe ff23 	bl	8000750 <led_update>
		basicScreen();
 800190a:	f7fe ff7d 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Partition", 0);
 800190e:	002b      	movs	r3, r5
 8001910:	0029      	movs	r1, r5
 8001912:	0028      	movs	r0, r5
 8001914:	4a4c      	ldr	r2, [pc, #304]	; (8001a48 <partition+0x364>)
 8001916:	f7fe ff67 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "Start (%d,%d)", ptiSX, ptiSY);
 800191a:	4b38      	ldr	r3, [pc, #224]	; (80019fc <partition+0x318>)
 800191c:	4a35      	ldr	r2, [pc, #212]	; (80019f4 <partition+0x310>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	494a      	ldr	r1, [pc, #296]	; (8001a4c <partition+0x368>)
 8001924:	0020      	movs	r0, r4
 8001926:	f003 fffb 	bl	8005920 <siprintf>
		SSD1306_PutsXY(0, 3, bf, 1);
 800192a:	2301      	movs	r3, #1
 800192c:	0022      	movs	r2, r4
 800192e:	2103      	movs	r1, #3
 8001930:	0028      	movs	r0, r5
 8001932:	f7fe ff59 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 8001936:	4f3a      	ldr	r7, [pc, #232]	; (8001a20 <partition+0x33c>)
		SSD1306_PutsXY(0, 3, bf, 1);
 8001938:	003e      	movs	r6, r7
			if(pt[i].store && pt[i].pos == ledPos){
 800193a:	8971      	ldrh	r1, [r6, #10]
 800193c:	2900      	cmp	r1, #0
 800193e:	d100      	bne.n	8001942 <partition+0x25e>
 8001940:	e179      	b.n	8001c36 <partition+0x552>
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <partition+0x340>)
 8001944:	79b2      	ldrb	r2, [r6, #6]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d000      	beq.n	800194e <partition+0x26a>
 800194c:	e173      	b.n	8001c36 <partition+0x552>
				if(pt[i].ptionC < 1) pt[i].ptionC = 1;
 800194e:	7a33      	ldrb	r3, [r6, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <partition+0x274>
 8001954:	3301      	adds	r3, #1
 8001956:	7233      	strb	r3, [r6, #8]
				sprintf(bf, "%s(%s/%d/%d)", pt[i].name, ptCate[pt[i].cate], pt[i].store, pt[i].max * pt[i].ptionC);
 8001958:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <partition+0x33c>)
 800195a:	012b      	lsls	r3, r5, #4
 800195c:	589b      	ldr	r3, [r3, r2]
 800195e:	7930      	ldrb	r0, [r6, #4]
 8001960:	9303      	str	r3, [sp, #12]
 8001962:	89b3      	ldrh	r3, [r6, #12]
 8001964:	0080      	lsls	r0, r0, #2
 8001966:	469c      	mov	ip, r3
 8001968:	4662      	mov	r2, ip
 800196a:	7a33      	ldrb	r3, [r6, #8]
 800196c:	9100      	str	r1, [sp, #0]
 800196e:	4353      	muls	r3, r2
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <partition+0x36c>)
 8001974:	9a03      	ldr	r2, [sp, #12]
 8001976:	58c3      	ldr	r3, [r0, r3]
 8001978:	4936      	ldr	r1, [pc, #216]	; (8001a54 <partition+0x370>)
 800197a:	0020      	movs	r0, r4
 800197c:	f003 ffd0 	bl	8005920 <siprintf>
				SSD1306_PutsXY(0, 4, bf, 1);
 8001980:	2301      	movs	r3, #1
 8001982:	0022      	movs	r2, r4
				SSD1306_PutsXY(0, 4, "(NONE)", 1);
 8001984:	2104      	movs	r1, #4
 8001986:	2000      	movs	r0, #0
		for(uint8_t i = 0; i < 36; i++){
 8001988:	3501      	adds	r5, #1
				SSD1306_PutsXY(0, 4, "(NONE)", 1);
 800198a:	f7fe ff2d 	bl	80007e8 <SSD1306_PutsXY>
		for(uint8_t i = 0; i < 36; i++){
 800198e:	3610      	adds	r6, #16
 8001990:	2d24      	cmp	r5, #36	; 0x24
 8001992:	d1d2      	bne.n	800193a <partition+0x256>
		if(sel == 1){
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <partition+0x314>)
 8001996:	781d      	ldrb	r5, [r3, #0]
 8001998:	2d01      	cmp	r5, #1
 800199a:	d100      	bne.n	800199e <partition+0x2ba>
 800199c:	e14e      	b.n	8001c3c <partition+0x558>
		if(sel == 2){
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <partition+0x314>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d10b      	bne.n	80019be <partition+0x2da>
			sprintf(bf, "Total number:%d", tempPtiC);
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <partition+0x328>)
 80019a8:	492b      	ldr	r1, [pc, #172]	; (8001a58 <partition+0x374>)
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	0020      	movs	r0, r4
 80019ae:	f003 ffb7 	bl	8005920 <siprintf>
			SSD1306_PutsXY(0, 3, bf, 1);
 80019b2:	2301      	movs	r3, #1
 80019b4:	0022      	movs	r2, r4
 80019b6:	2103      	movs	r1, #3
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7fe ff15 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_UpdateScreen();
 80019be:	f001 fb63 	bl	8003088 <SSD1306_UpdateScreen>
		free(bf);
 80019c2:	0020      	movs	r0, r4
 80019c4:	f003 fe5e 	bl	8005684 <free>
 80019c8:	e133      	b.n	8001c32 <partition+0x54e>
		if(sel == 1) ledPos = (6 - ptiEY) * 6 + ptiEX - 1;
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	d000      	beq.n	80019d0 <partition+0x2ec>
 80019ce:	e735      	b.n	800183c <partition+0x158>
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <partition+0x320>)
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	2306      	movs	r3, #6
 80019d6:	1a9a      	subs	r2, r3, r2
 80019d8:	4353      	muls	r3, r2
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <partition+0x31c>)
 80019dc:	e711      	b.n	8001802 <partition+0x11e>
			if(ledC < 500){
 80019de:	22fa      	movs	r2, #250	; 0xfa
 80019e0:	0052      	lsls	r2, r2, #1
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d200      	bcs.n	80019e8 <partition+0x304>
 80019e6:	e735      	b.n	8001854 <partition+0x170>
			}else led_clear();
 80019e8:	f7fe fedc 	bl	80007a4 <led_clear>
 80019ec:	e75e      	b.n	80018ac <partition+0x1c8>
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000018 	.word	0x20000018
 80019f8:	20000958 	.word	0x20000958
 80019fc:	20000019 	.word	0x20000019
 8001a00:	20000016 	.word	0x20000016
 8001a04:	20000017 	.word	0x20000017
 8001a08:	2000095a 	.word	0x2000095a
 8001a0c:	2000095b 	.word	0x2000095b
 8001a10:	20000957 	.word	0x20000957
 8001a14:	2000040c 	.word	0x2000040c
 8001a18:	2000001a 	.word	0x2000001a
 8001a1c:	00000e74 	.word	0x00000e74
 8001a20:	2000070c 	.word	0x2000070c
 8001a24:	200005ca 	.word	0x200005ca
 8001a28:	200005c8 	.word	0x200005c8
 8001a2c:	2000095c 	.word	0x2000095c
 8001a30:	2000095d 	.word	0x2000095d
 8001a34:	200005ce 	.word	0x200005ce
 8001a38:	200005cc 	.word	0x200005cc
 8001a3c:	200005cf 	.word	0x200005cf
 8001a40:	200005cd 	.word	0x200005cd
 8001a44:	20000015 	.word	0x20000015
 8001a48:	08006b83 	.word	0x08006b83
 8001a4c:	08006b8e 	.word	0x08006b8e
 8001a50:	08006ce4 	.word	0x08006ce4
 8001a54:	08006b42 	.word	0x08006b42
 8001a58:	08006b73 	.word	0x08006b73
			if(sel == 2){
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d100      	bne.n	8001a62 <partition+0x37e>
 8001a60:	e08a      	b.n	8001b78 <partition+0x494>
			if(sel == 3){
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d000      	beq.n	8001a68 <partition+0x384>
 8001a66:	e746      	b.n	80018f6 <partition+0x212>
				for(uint8_t i = 0; i < 36; i++){
 8001a68:	2400      	movs	r4, #0
				ptiC++;
 8001a6a:	4a92      	ldr	r2, [pc, #584]	; (8001cb4 <partition+0x5d0>)
 8001a6c:	7813      	ldrb	r3, [r2, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	7013      	strb	r3, [r2, #0]
				pt[selPtpos].ptionID = ptiC;
 8001a74:	4a90      	ldr	r2, [pc, #576]	; (8001cb8 <partition+0x5d4>)
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	0111      	lsls	r1, r2, #4
 8001a7a:	9203      	str	r2, [sp, #12]
 8001a7c:	4a8f      	ldr	r2, [pc, #572]	; (8001cbc <partition+0x5d8>)
 8001a7e:	1852      	adds	r2, r2, r1
 8001a80:	71d3      	strb	r3, [r2, #7]
				pt[selPtpos].ptionC = tempPtiC;
 8001a82:	4b8f      	ldr	r3, [pc, #572]	; (8001cc0 <partition+0x5dc>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	7213      	strb	r3, [r2, #8]
					tempX = i % 6 + 1;
 8001a88:	2106      	movs	r1, #6
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f7fe fbe0 	bl	8000250 <__aeabi_uidivmod>
 8001a90:	4b8c      	ldr	r3, [pc, #560]	; (8001cc4 <partition+0x5e0>)
 8001a92:	3101      	adds	r1, #1
 8001a94:	b2cd      	uxtb	r5, r1
 8001a96:	701d      	strb	r5, [r3, #0]
					tempY = 6 - i / 6;
 8001a98:	2106      	movs	r1, #6
 8001a9a:	0020      	movs	r0, r4
 8001a9c:	f7fe fb52 	bl	8000144 <__udivsi3>
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	1a18      	subs	r0, r3, r0
 8001aa4:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <partition+0x5e4>)
 8001aa6:	b2c0      	uxtb	r0, r0
 8001aa8:	7018      	strb	r0, [r3, #0]
					if(tempX >= minX && tempX <= maxX){
 8001aaa:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <partition+0x5e8>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	42ab      	cmp	r3, r5
 8001ab0:	d822      	bhi.n	8001af8 <partition+0x414>
 8001ab2:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <partition+0x5ec>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	42ab      	cmp	r3, r5
 8001ab8:	d31e      	bcc.n	8001af8 <partition+0x414>
						if(tempY >= minY && tempY <= maxY){
 8001aba:	4b86      	ldr	r3, [pc, #536]	; (8001cd4 <partition+0x5f0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4283      	cmp	r3, r0
 8001ac0:	d81a      	bhi.n	8001af8 <partition+0x414>
 8001ac2:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <partition+0x5f4>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4283      	cmp	r3, r0
 8001ac8:	d316      	bcc.n	8001af8 <partition+0x414>
							if(!pt[ptC].store){
 8001aca:	4b84      	ldr	r3, [pc, #528]	; (8001cdc <partition+0x5f8>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	469c      	mov	ip, r3
 8001ad0:	4662      	mov	r2, ip
 8001ad2:	4b7a      	ldr	r3, [pc, #488]	; (8001cbc <partition+0x5d8>)
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	189a      	adds	r2, r3, r2
 8001ad8:	8955      	ldrh	r5, [r2, #10]
 8001ada:	2d00      	cmp	r5, #0
 8001adc:	d10c      	bne.n	8001af8 <partition+0x414>
								pt[ptC] = pt[selPtpos];
 8001ade:	9d03      	ldr	r5, [sp, #12]
 8001ae0:	012d      	lsls	r5, r5, #4
 8001ae2:	195b      	adds	r3, r3, r5
 8001ae4:	0015      	movs	r5, r2
 8001ae6:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001ae8:	c543      	stmia	r5!, {r0, r1, r6}
								pt[ptC++].pos = i;
 8001aea:	4660      	mov	r0, ip
								pt[ptC] = pt[selPtpos];
 8001aec:	681b      	ldr	r3, [r3, #0]
								pt[ptC++].pos = i;
 8001aee:	3001      	adds	r0, #1
								pt[ptC] = pt[selPtpos];
 8001af0:	602b      	str	r3, [r5, #0]
								pt[ptC++].pos = i;
 8001af2:	4b7a      	ldr	r3, [pc, #488]	; (8001cdc <partition+0x5f8>)
 8001af4:	7194      	strb	r4, [r2, #6]
 8001af6:	7018      	strb	r0, [r3, #0]
				for(uint8_t i = 0; i < 36; i++){
 8001af8:	3401      	adds	r4, #1
 8001afa:	b2e4      	uxtb	r4, r4
 8001afc:	2c24      	cmp	r4, #36	; 0x24
 8001afe:	d1c3      	bne.n	8001a88 <partition+0x3a4>
				logShift();
 8001b00:	f7ff faaa 	bl	8001058 <logShift>
				DS3231_get_date(&date.day, &date.month, (uint8_t*)&date.year);
 8001b04:	4d76      	ldr	r5, [pc, #472]	; (8001ce0 <partition+0x5fc>)
 8001b06:	0028      	movs	r0, r5
 8001b08:	1caa      	adds	r2, r5, #2
 8001b0a:	1c69      	adds	r1, r5, #1
 8001b0c:	f7fe fdb8 	bl	8000680 <DS3231_get_date>
				DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001b10:	4e74      	ldr	r6, [pc, #464]	; (8001ce4 <partition+0x600>)
 8001b12:	0032      	movs	r2, r6
 8001b14:	1c71      	adds	r1, r6, #1
 8001b16:	1cb0      	adds	r0, r6, #2
 8001b18:	f7fe fd1c 	bl	8000554 <DS3231_get_time>
				sprintf(pLog[0].content[0], "S(%d,%d) E(%d,%d)", ptiSX, ptiSY, ptiEX, ptiEY);
 8001b1c:	4972      	ldr	r1, [pc, #456]	; (8001ce8 <partition+0x604>)
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <partition+0x608>)
 8001b20:	7809      	ldrb	r1, [r1, #0]
 8001b22:	4a73      	ldr	r2, [pc, #460]	; (8001cf0 <partition+0x60c>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	7812      	ldrb	r2, [r2, #0]
 8001b28:	9101      	str	r1, [sp, #4]
 8001b2a:	4972      	ldr	r1, [pc, #456]	; (8001cf4 <partition+0x610>)
 8001b2c:	4872      	ldr	r0, [pc, #456]	; (8001cf8 <partition+0x614>)
 8001b2e:	7809      	ldrb	r1, [r1, #0]
 8001b30:	9100      	str	r1, [sp, #0]
 8001b32:	4972      	ldr	r1, [pc, #456]	; (8001cfc <partition+0x618>)
 8001b34:	f003 fef4 	bl	8005920 <siprintf>
				sprintf(pLog[0].content[1], "Size of ption:%d", tempPtiC);
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <partition+0x5dc>)
 8001b3a:	4971      	ldr	r1, [pc, #452]	; (8001d00 <partition+0x61c>)
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	4871      	ldr	r0, [pc, #452]	; (8001d04 <partition+0x620>)
 8001b40:	f003 feee 	bl	8005920 <siprintf>
				pLog[0].workCate = 4;
 8001b44:	4c70      	ldr	r4, [pc, #448]	; (8001d08 <partition+0x624>)
 8001b46:	2304      	movs	r3, #4
				pLog[0].time = time;
 8001b48:	0020      	movs	r0, r4
				pLog[0].workCate = 4;
 8001b4a:	7023      	strb	r3, [r4, #0]
				pLog[0].time = time;
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	0031      	movs	r1, r6
 8001b50:	302d      	adds	r0, #45	; 0x2d
 8001b52:	f003 fda1 	bl	8005698 <memcpy>
				pLog[0].date = date;
 8001b56:	0020      	movs	r0, r4
 8001b58:	2204      	movs	r2, #4
 8001b5a:	0029      	movs	r1, r5
 8001b5c:	3030      	adds	r0, #48	; 0x30
 8001b5e:	f003 fd9b 	bl	8005698 <memcpy>
				sel = 0;
 8001b62:	2200      	movs	r2, #0
 8001b64:	4b69      	ldr	r3, [pc, #420]	; (8001d0c <partition+0x628>)
 8001b66:	701a      	strb	r2, [r3, #0]
				firstF = true;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	4a69      	ldr	r2, [pc, #420]	; (8001d10 <partition+0x62c>)
 8001b6c:	7013      	strb	r3, [r2, #0]
				udf = true;
 8001b6e:	4a69      	ldr	r2, [pc, #420]	; (8001d14 <partition+0x630>)
 8001b70:	7013      	strb	r3, [r2, #0]
}
 8001b72:	0038      	movs	r0, r7
 8001b74:	b009      	add	sp, #36	; 0x24
 8001b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
				maxX = ptiSX >= ptiEX ? ptiSX : ptiEX;
 8001b78:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <partition+0x60c>)
 8001b7a:	7818      	ldrb	r0, [r3, #0]
 8001b7c:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <partition+0x610>)
 8001b7e:	7819      	ldrb	r1, [r3, #0]
 8001b80:	1c03      	adds	r3, r0, #0
 8001b82:	4288      	cmp	r0, r1
 8001b84:	d200      	bcs.n	8001b88 <partition+0x4a4>
 8001b86:	1c0b      	adds	r3, r1, #0
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	9204      	str	r2, [sp, #16]
 8001b8c:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <partition+0x5ec>)
 8001b8e:	7013      	strb	r3, [r2, #0]
				maxY = ptiSY >= ptiEY ? ptiSY : ptiEY;
 8001b90:	4b56      	ldr	r3, [pc, #344]	; (8001cec <partition+0x608>)
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	4b54      	ldr	r3, [pc, #336]	; (8001ce8 <partition+0x604>)
 8001b96:	1c14      	adds	r4, r2, #0
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d200      	bcs.n	8001ba0 <partition+0x4bc>
 8001b9e:	1c1c      	adds	r4, r3, #0
 8001ba0:	b2e5      	uxtb	r5, r4
 8001ba2:	9505      	str	r5, [sp, #20]
 8001ba4:	4d4c      	ldr	r5, [pc, #304]	; (8001cd8 <partition+0x5f4>)
 8001ba6:	702c      	strb	r4, [r5, #0]
				minX = ptiSX >= ptiEX ? ptiEX : ptiSX;
 8001ba8:	1c04      	adds	r4, r0, #0
 8001baa:	4288      	cmp	r0, r1
 8001bac:	d900      	bls.n	8001bb0 <partition+0x4cc>
 8001bae:	1c0c      	adds	r4, r1, #0
 8001bb0:	b2e1      	uxtb	r1, r4
 8001bb2:	9106      	str	r1, [sp, #24]
 8001bb4:	4945      	ldr	r1, [pc, #276]	; (8001ccc <partition+0x5e8>)
 8001bb6:	700c      	strb	r4, [r1, #0]
				minY = ptiSY >= ptiEY ? ptiEY : ptiSY;
 8001bb8:	1c11      	adds	r1, r2, #0
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d900      	bls.n	8001bc0 <partition+0x4dc>
 8001bbe:	1c19      	adds	r1, r3, #0
 8001bc0:	b2cb      	uxtb	r3, r1
 8001bc2:	9307      	str	r3, [sp, #28]
 8001bc4:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <partition+0x5f0>)
					tempX = i % 6 + 1;
 8001bc6:	2606      	movs	r6, #6
				minY = ptiSY >= ptiEY ? ptiEY : ptiSY;
 8001bc8:	7019      	strb	r1, [r3, #0]
				for(uint8_t i = 0; i < 36; i++){
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <partition+0x5dc>)
 8001bcc:	781d      	ldrb	r5, [r3, #0]
				minY = ptiSY >= ptiEY ? ptiEY : ptiSY;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9303      	str	r3, [sp, #12]
					tempX = i % 6 + 1;
 8001bd2:	0031      	movs	r1, r6
 8001bd4:	0038      	movs	r0, r7
 8001bd6:	f7fe fb3b 	bl	8000250 <__aeabi_uidivmod>
 8001bda:	3101      	adds	r1, #1
					tempY = 6 - i / 6;
 8001bdc:	0038      	movs	r0, r7
					tempX = i % 6 + 1;
 8001bde:	b2cc      	uxtb	r4, r1
					tempY = 6 - i / 6;
 8001be0:	0031      	movs	r1, r6
 8001be2:	f7fe faaf 	bl	8000144 <__udivsi3>
					if(tempX >= minX && tempX <= maxX)
 8001be6:	9a06      	ldr	r2, [sp, #24]
					tempY = 6 - i / 6;
 8001be8:	1a33      	subs	r3, r6, r0
 8001bea:	b2db      	uxtb	r3, r3
					if(tempX >= minX && tempX <= maxX)
 8001bec:	42a2      	cmp	r2, r4
 8001bee:	d80c      	bhi.n	8001c0a <partition+0x526>
 8001bf0:	9a04      	ldr	r2, [sp, #16]
 8001bf2:	42a2      	cmp	r2, r4
 8001bf4:	d309      	bcc.n	8001c0a <partition+0x526>
						if(tempY >= minY && tempY <= maxY)
 8001bf6:	9a07      	ldr	r2, [sp, #28]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d806      	bhi.n	8001c0a <partition+0x526>
 8001bfc:	9a05      	ldr	r2, [sp, #20]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d303      	bcc.n	8001c0a <partition+0x526>
							tempPtiC++;
 8001c02:	2201      	movs	r2, #1
 8001c04:	3501      	adds	r5, #1
 8001c06:	b2ed      	uxtb	r5, r5
 8001c08:	9203      	str	r2, [sp, #12]
				for(uint8_t i = 0; i < 36; i++){
 8001c0a:	3701      	adds	r7, #1
 8001c0c:	b2ff      	uxtb	r7, r7
 8001c0e:	2f24      	cmp	r7, #36	; 0x24
 8001c10:	d1df      	bne.n	8001bd2 <partition+0x4ee>
 8001c12:	4a2c      	ldr	r2, [pc, #176]	; (8001cc4 <partition+0x5e0>)
 8001c14:	7014      	strb	r4, [r2, #0]
 8001c16:	4a2c      	ldr	r2, [pc, #176]	; (8001cc8 <partition+0x5e4>)
 8001c18:	7013      	strb	r3, [r2, #0]
 8001c1a:	9b03      	ldr	r3, [sp, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d100      	bne.n	8001c22 <partition+0x53e>
 8001c20:	e669      	b.n	80018f6 <partition+0x212>
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <partition+0x5dc>)
 8001c24:	701d      	strb	r5, [r3, #0]
 8001c26:	e666      	b.n	80018f6 <partition+0x212>
	if(udf){
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <partition+0x630>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d000      	beq.n	8001c32 <partition+0x54e>
 8001c30:	e661      	b.n	80018f6 <partition+0x212>
	return PARTITION;
 8001c32:	2707      	movs	r7, #7
 8001c34:	e79d      	b.n	8001b72 <partition+0x48e>
				SSD1306_PutsXY(0, 4, "(NONE)", 1);
 8001c36:	2301      	movs	r3, #1
 8001c38:	4a37      	ldr	r2, [pc, #220]	; (8001d18 <partition+0x634>)
 8001c3a:	e6a3      	b.n	8001984 <partition+0x2a0>
			SSD1306_PutsXY(0, 1, "Select end point", 1);
 8001c3c:	002b      	movs	r3, r5
 8001c3e:	0029      	movs	r1, r5
 8001c40:	2000      	movs	r0, #0
 8001c42:	4a36      	ldr	r2, [pc, #216]	; (8001d1c <partition+0x638>)
 8001c44:	f7fe fdd0 	bl	80007e8 <SSD1306_PutsXY>
			sprintf(bf, "End (%d,%d)", ptiEX, ptiEY);
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <partition+0x604>)
 8001c4a:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <partition+0x610>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	7812      	ldrb	r2, [r2, #0]
 8001c50:	4933      	ldr	r1, [pc, #204]	; (8001d20 <partition+0x63c>)
 8001c52:	0020      	movs	r0, r4
 8001c54:	f003 fe64 	bl	8005920 <siprintf>
			SSD1306_PutsXY(0, 3, bf, 1);
 8001c58:	002b      	movs	r3, r5
 8001c5a:	0022      	movs	r2, r4
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7fe fdc2 	bl	80007e8 <SSD1306_PutsXY>
 8001c64:	2500      	movs	r5, #0
				if(pt[i].store && pt[i].pos == ledPos){
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <partition+0x5ca>
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <partition+0x640>)
 8001c6e:	79ba      	ldrb	r2, [r7, #6]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d11b      	bne.n	8001cae <partition+0x5ca>
					sprintf(bf, "%s(%s/%d/%d)", pt[i].name, ptCate[pt[i].cate], ptiEX, ptiEY);
 8001c76:	491c      	ldr	r1, [pc, #112]	; (8001ce8 <partition+0x604>)
 8001c78:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <partition+0x5d8>)
 8001c7a:	7809      	ldrb	r1, [r1, #0]
 8001c7c:	012b      	lsls	r3, r5, #4
 8001c7e:	58d2      	ldr	r2, [r2, r3]
 8001c80:	793b      	ldrb	r3, [r7, #4]
 8001c82:	9101      	str	r1, [sp, #4]
 8001c84:	491b      	ldr	r1, [pc, #108]	; (8001cf4 <partition+0x610>)
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	7809      	ldrb	r1, [r1, #0]
 8001c8a:	0020      	movs	r0, r4
 8001c8c:	9100      	str	r1, [sp, #0]
 8001c8e:	4926      	ldr	r1, [pc, #152]	; (8001d28 <partition+0x644>)
 8001c90:	585b      	ldr	r3, [r3, r1]
 8001c92:	4926      	ldr	r1, [pc, #152]	; (8001d2c <partition+0x648>)
 8001c94:	f003 fe44 	bl	8005920 <siprintf>
					SSD1306_PutsXY(0, 4, bf, 1);
 8001c98:	2301      	movs	r3, #1
 8001c9a:	0022      	movs	r2, r4
					SSD1306_PutsXY(0, 4, "(NONE)", 1);
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	2000      	movs	r0, #0
			for(uint8_t i = 0; i < 36; i++){
 8001ca0:	3501      	adds	r5, #1
					SSD1306_PutsXY(0, 4, "(NONE)", 1);
 8001ca2:	f7fe fda1 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < 36; i++){
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	2d24      	cmp	r5, #36	; 0x24
 8001caa:	d1dc      	bne.n	8001c66 <partition+0x582>
 8001cac:	e677      	b.n	800199e <partition+0x2ba>
					SSD1306_PutsXY(0, 4, "(NONE)", 1);
 8001cae:	2301      	movs	r3, #1
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <partition+0x634>)
 8001cb2:	e7f3      	b.n	8001c9c <partition+0x5b8>
 8001cb4:	20000956 	.word	0x20000956
 8001cb8:	2000095a 	.word	0x2000095a
 8001cbc:	2000070c 	.word	0x2000070c
 8001cc0:	2000095b 	.word	0x2000095b
 8001cc4:	2000095c 	.word	0x2000095c
 8001cc8:	2000095d 	.word	0x2000095d
 8001ccc:	200005ce 	.word	0x200005ce
 8001cd0:	200005cc 	.word	0x200005cc
 8001cd4:	200005cf 	.word	0x200005cf
 8001cd8:	200005cd 	.word	0x200005cd
 8001cdc:	2000094c 	.word	0x2000094c
 8001ce0:	20000414 	.word	0x20000414
 8001ce4:	2000095e 	.word	0x2000095e
 8001ce8:	20000017 	.word	0x20000017
 8001cec:	20000019 	.word	0x20000019
 8001cf0:	20000018 	.word	0x20000018
 8001cf4:	20000016 	.word	0x20000016
 8001cf8:	200005d3 	.word	0x200005d3
 8001cfc:	08006b1f 	.word	0x08006b1f
 8001d00:	08006b31 	.word	0x08006b31
 8001d04:	200005e9 	.word	0x200005e9
 8001d08:	200005d2 	.word	0x200005d2
 8001d0c:	20000958 	.word	0x20000958
 8001d10:	20000008 	.word	0x20000008
 8001d14:	2000001a 	.word	0x2000001a
 8001d18:	08006b4f 	.word	0x08006b4f
 8001d1c:	08006b56 	.word	0x08006b56
 8001d20:	08006b67 	.word	0x08006b67
 8001d24:	200005ca 	.word	0x200005ca
 8001d28:	08006ce4 	.word	0x08006ce4
 8001d2c:	08006b42 	.word	0x08006b42

08001d30 <textIn>:
void textIn(boolean n, volatile String resultArr ,uint8_t lim){
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
	udf = true;
 8001d32:	2601      	movs	r6, #1
void textIn(boolean n, volatile String resultArr ,uint8_t lim){
 8001d34:	b08b      	sub	sp, #44	; 0x2c
 8001d36:	9006      	str	r0, [sp, #24]
 8001d38:	9109      	str	r1, [sp, #36]	; 0x24
	String bf = (String)calloc(0, sizeof(char) * 11);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	210b      	movs	r1, #11
void textIn(boolean n, volatile String resultArr ,uint8_t lim){
 8001d3e:	9207      	str	r2, [sp, #28]
	String bf = (String)calloc(0, sizeof(char) * 11);
 8001d40:	f003 fc62 	bl	8005608 <calloc>
	udf = true;
 8001d44:	4b93      	ldr	r3, [pc, #588]	; (8001f94 <textIn+0x264>)
	memset(resultArr, 0, (size_t)lim + 1);
 8001d46:	2100      	movs	r1, #0
	udf = true;
 8001d48:	701e      	strb	r6, [r3, #0]
	memset(resultArr, 0, (size_t)lim + 1);
 8001d4a:	9b07      	ldr	r3, [sp, #28]
	String bf = (String)calloc(0, sizeof(char) * 11);
 8001d4c:	9005      	str	r0, [sp, #20]
	memset(resultArr, 0, (size_t)lim + 1);
 8001d4e:	199a      	adds	r2, r3, r6
 8001d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d52:	f003 fcbd 	bl	80056d0 <memset>
	SSD1306_Fill(0);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f001 f81e 	bl	8002d98 <SSD1306_Fill>
	uint8_t cur = 0;
 8001d5c:	2300      	movs	r3, #0
	uint8_t keyX = 0, keyY = 0, limX = 0, tempColor;
 8001d5e:	001f      	movs	r7, r3
 8001d60:	001c      	movs	r4, r3
	uint8_t cur = 0;
 8001d62:	9301      	str	r3, [sp, #4]
	uint8_t keyX = 0, keyY = 0, limX = 0, tempColor;
 8001d64:	9302      	str	r3, [sp, #8]
		if(RE1){
 8001d66:	4b8c      	ldr	r3, [pc, #560]	; (8001f98 <textIn+0x268>)
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	2a63      	cmp	r2, #99	; 0x63
 8001d6c:	d922      	bls.n	8001db4 <textIn+0x84>
			reC = 0;
 8001d6e:	2100      	movs	r1, #0
			if(JOY_R)
 8001d70:	20fa      	movs	r0, #250	; 0xfa
			reC = 0;
 8001d72:	7019      	strb	r1, [r3, #0]
			if(JOY_R)
 8001d74:	4b89      	ldr	r3, [pc, #548]	; (8001f9c <textIn+0x26c>)
 8001d76:	0100      	lsls	r0, r0, #4
 8001d78:	881a      	ldrh	r2, [r3, #0]
 8001d7a:	4282      	cmp	r2, r0
 8001d7c:	d945      	bls.n	8001e0a <textIn+0xda>
				if(keyX < limX) keyX++;
 8001d7e:	9802      	ldr	r0, [sp, #8]
 8001d80:	4284      	cmp	r4, r0
 8001d82:	d24a      	bcs.n	8001e1a <textIn+0xea>
 8001d84:	3401      	adds	r4, #1
				if(keyX) keyX--;
 8001d86:	b2e4      	uxtb	r4, r4
			if(JOY_U)
 8001d88:	21fa      	movs	r1, #250	; 0xfa
 8001d8a:	885b      	ldrh	r3, [r3, #2]
 8001d8c:	0109      	lsls	r1, r1, #4
 8001d8e:	428b      	cmp	r3, r1
 8001d90:	d947      	bls.n	8001e22 <textIn+0xf2>
				if(keyY) keyY--;
 8001d92:	2f00      	cmp	r7, #0
 8001d94:	d04d      	beq.n	8001e32 <textIn+0x102>
 8001d96:	3f01      	subs	r7, #1
				if(keyY < 3) keyY++;
 8001d98:	b2ff      	uxtb	r7, r7
			if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 8001d9a:	3a2d      	subs	r2, #45	; 0x2d
 8001d9c:	3aff      	subs	r2, #255	; 0xff
 8001d9e:	4980      	ldr	r1, [pc, #512]	; (8001fa0 <textIn+0x270>)
 8001da0:	b292      	uxth	r2, r2
 8001da2:	428a      	cmp	r2, r1
 8001da4:	d804      	bhi.n	8001db0 <textIn+0x80>
 8001da6:	3b2d      	subs	r3, #45	; 0x2d
 8001da8:	3bff      	subs	r3, #255	; 0xff
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	428b      	cmp	r3, r1
 8001dae:	d901      	bls.n	8001db4 <textIn+0x84>
 8001db0:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <textIn+0x264>)
 8001db2:	701e      	strb	r6, [r3, #0]
		if(JOY_P){
 8001db4:	20a0      	movs	r0, #160	; 0xa0
 8001db6:	2104      	movs	r1, #4
 8001db8:	05c0      	lsls	r0, r0, #23
 8001dba:	f002 f89d 	bl	8003ef8 <HAL_GPIO_ReadPin>
			if(!oldsw){
 8001dbe:	4b79      	ldr	r3, [pc, #484]	; (8001fa4 <textIn+0x274>)
 8001dc0:	781d      	ldrb	r5, [r3, #0]
 8001dc2:	4305      	orrs	r5, r0
 8001dc4:	b2ed      	uxtb	r5, r5
 8001dc6:	2d00      	cmp	r5, #0
 8001dc8:	d110      	bne.n	8001dec <textIn+0xbc>
				swS();
 8001dca:	f7fe fd2b 	bl	8000824 <swS>
				udf = true;
 8001dce:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <textIn+0x264>)
 8001dd0:	701e      	strb	r6, [r3, #0]
				if(keyX < 10) resultArr[cur++] = keyboard[keyY][keyX];
 8001dd2:	2c09      	cmp	r4, #9
 8001dd4:	d831      	bhi.n	8001e3a <textIn+0x10a>
 8001dd6:	4974      	ldr	r1, [pc, #464]	; (8001fa8 <textIn+0x278>)
 8001dd8:	00b8      	lsls	r0, r7, #2
 8001dda:	5841      	ldr	r1, [r0, r1]
 8001ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001dde:	9b01      	ldr	r3, [sp, #4]
 8001de0:	5d09      	ldrb	r1, [r1, r4]
 8001de2:	9801      	ldr	r0, [sp, #4]
 8001de4:	3301      	adds	r3, #1
 8001de6:	5411      	strb	r1, [r2, r0]
					if(keyY == 0) cur--;
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	9301      	str	r3, [sp, #4]
		if(lim - 1 == cur){
 8001dec:	9b07      	ldr	r3, [sp, #28]
 8001dee:	9a01      	ldr	r2, [sp, #4]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d133      	bne.n	8001e5e <textIn+0x12e>
			firstF = true;
 8001df6:	2001      	movs	r0, #1
			resultArr[cur]='\0';
 8001df8:	2200      	movs	r2, #0
			firstF = true;
 8001dfa:	4b6c      	ldr	r3, [pc, #432]	; (8001fac <textIn+0x27c>)
			resultArr[cur]='\0';
 8001dfc:	9901      	ldr	r1, [sp, #4]
			firstF = true;
 8001dfe:	7018      	strb	r0, [r3, #0]
			udf = true;
 8001e00:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <textIn+0x264>)
 8001e02:	7018      	strb	r0, [r3, #0]
			resultArr[cur]='\0';
 8001e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e06:	545a      	strb	r2, [r3, r1]
 8001e08:	e022      	b.n	8001e50 <textIn+0x120>
			if(JOY_L)
 8001e0a:	2196      	movs	r1, #150	; 0x96
 8001e0c:	0049      	lsls	r1, r1, #1
 8001e0e:	428a      	cmp	r2, r1
 8001e10:	d2ba      	bcs.n	8001d88 <textIn+0x58>
				if(keyX) keyX--;
 8001e12:	2c00      	cmp	r4, #0
 8001e14:	d003      	beq.n	8001e1e <textIn+0xee>
 8001e16:	3c01      	subs	r4, #1
 8001e18:	e7b5      	b.n	8001d86 <textIn+0x56>
				else keyX = 0;
 8001e1a:	000c      	movs	r4, r1
 8001e1c:	e7b4      	b.n	8001d88 <textIn+0x58>
 8001e1e:	9c02      	ldr	r4, [sp, #8]
 8001e20:	e7b2      	b.n	8001d88 <textIn+0x58>
			if(JOY_D)
 8001e22:	2196      	movs	r1, #150	; 0x96
 8001e24:	0049      	lsls	r1, r1, #1
 8001e26:	428b      	cmp	r3, r1
 8001e28:	d2b7      	bcs.n	8001d9a <textIn+0x6a>
				if(keyY < 3) keyY++;
 8001e2a:	2f03      	cmp	r7, #3
 8001e2c:	d003      	beq.n	8001e36 <textIn+0x106>
 8001e2e:	3701      	adds	r7, #1
 8001e30:	e7b2      	b.n	8001d98 <textIn+0x68>
				else keyY = 3;
 8001e32:	2703      	movs	r7, #3
 8001e34:	e7b1      	b.n	8001d9a <textIn+0x6a>
				else keyY = 0;
 8001e36:	2700      	movs	r7, #0
 8001e38:	e7af      	b.n	8001d9a <textIn+0x6a>
					if(keyY == 0) cur--;
 8001e3a:	2f00      	cmp	r7, #0
 8001e3c:	d102      	bne.n	8001e44 <textIn+0x114>
 8001e3e:	9b01      	ldr	r3, [sp, #4]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	e7d1      	b.n	8001de8 <textIn+0xb8>
					else if(keyY == 2){
 8001e44:	2f02      	cmp	r7, #2
 8001e46:	d1d1      	bne.n	8001dec <textIn+0xbc>
						SSD1306_Fill(1);
 8001e48:	2001      	movs	r0, #1
						resultArr[cur] = '\0';
 8001e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e4c:	9a01      	ldr	r2, [sp, #4]
 8001e4e:	549d      	strb	r5, [r3, r2]
			SSD1306_Fill(1);
 8001e50:	f000 ffa2 	bl	8002d98 <SSD1306_Fill>
			free(bf);
 8001e54:	9805      	ldr	r0, [sp, #20]
 8001e56:	f003 fc15 	bl	8005684 <free>
}
 8001e5a:	b00b      	add	sp, #44	; 0x2c
 8001e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(keyY == 0 || keyY == 2) limX = 10;
 8001e5e:	230a      	movs	r3, #10
 8001e60:	9302      	str	r3, [sp, #8]
 8001e62:	2f00      	cmp	r7, #0
 8001e64:	d004      	beq.n	8001e70 <textIn+0x140>
 8001e66:	1ebb      	subs	r3, r7, #2
 8001e68:	425a      	negs	r2, r3
 8001e6a:	4153      	adcs	r3, r2
 8001e6c:	3309      	adds	r3, #9
 8001e6e:	9302      	str	r3, [sp, #8]
		if(keyX > limX) keyX = limX;
 8001e70:	9a02      	ldr	r2, [sp, #8]
 8001e72:	1c23      	adds	r3, r4, #0
 8001e74:	4294      	cmp	r4, r2
 8001e76:	d901      	bls.n	8001e7c <textIn+0x14c>
 8001e78:	466b      	mov	r3, sp
 8001e7a:	7a1b      	ldrb	r3, [r3, #8]
 8001e7c:	b2dc      	uxtb	r4, r3
		if(udf){
 8001e7e:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <textIn+0x264>)
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	2a00      	cmp	r2, #0
 8001e84:	d100      	bne.n	8001e88 <textIn+0x158>
 8001e86:	e76e      	b.n	8001d66 <textIn+0x36>
			udf = false;
 8001e88:	2500      	movs	r5, #0
 8001e8a:	701d      	strb	r5, [r3, #0]
			basicScreen();
 8001e8c:	f7fe fcbc 	bl	8000808 <basicScreen>
			if(!n) SSD1306_PutsXY(0, 0, "#input Name", 0);
 8001e90:	9b06      	ldr	r3, [sp, #24]
 8001e92:	42ab      	cmp	r3, r5
 8001e94:	d168      	bne.n	8001f68 <textIn+0x238>
 8001e96:	0019      	movs	r1, r3
 8001e98:	0018      	movs	r0, r3
 8001e9a:	4a45      	ldr	r2, [pc, #276]	; (8001fb0 <textIn+0x280>)
			else  SSD1306_PutsXY(0, 0, "#input part name", 0);
 8001e9c:	f7fe fca4 	bl	80007e8 <SSD1306_PutsXY>
					tempColor = !(keyX == i && keyY == j);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9304      	str	r3, [sp, #16]
				for(uint8_t j = 0; j < 4; j++){
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	9a04      	ldr	r2, [sp, #16]
 8001ea8:	4353      	muls	r3, r2
 8001eaa:	330e      	adds	r3, #14
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	9308      	str	r3, [sp, #32]
		if(keyY == 0 || keyY == 2) limX = 10;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9303      	str	r3, [sp, #12]
					tempColor = !(keyX == i && keyY == j);
 8001eb4:	466b      	mov	r3, sp
 8001eb6:	7c1b      	ldrb	r3, [r3, #16]
 8001eb8:	0035      	movs	r5, r6
 8001eba:	429c      	cmp	r4, r3
 8001ebc:	d104      	bne.n	8001ec8 <textIn+0x198>
 8001ebe:	466b      	mov	r3, sp
 8001ec0:	7b1d      	ldrb	r5, [r3, #12]
 8001ec2:	1bed      	subs	r5, r5, r7
 8001ec4:	1e6b      	subs	r3, r5, #1
 8001ec6:	419d      	sbcs	r5, r3
					SSD1306_GotoXY(14 + (i * 10), 31 + (j * 8));
 8001ec8:	9b03      	ldr	r3, [sp, #12]
 8001eca:	9808      	ldr	r0, [sp, #32]
 8001ecc:	00d9      	lsls	r1, r3, #3
 8001ece:	311f      	adds	r1, #31
 8001ed0:	b289      	uxth	r1, r1
 8001ed2:	f000 ff97 	bl	8002e04 <SSD1306_GotoXY>
					SSD1306_Putc(keyboard[j][i], &Font_6x8, tempColor);
 8001ed6:	9b03      	ldr	r3, [sp, #12]
 8001ed8:	b2ea      	uxtb	r2, r5
 8001eda:	0099      	lsls	r1, r3, #2
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <textIn+0x278>)
 8001ede:	58cb      	ldr	r3, [r1, r3]
 8001ee0:	9904      	ldr	r1, [sp, #16]
 8001ee2:	5c58      	ldrb	r0, [r3, r1]
 8001ee4:	4933      	ldr	r1, [pc, #204]	; (8001fb4 <textIn+0x284>)
 8001ee6:	f000 ff93 	bl	8002e10 <SSD1306_Putc>
				for(uint8_t j = 0; j < 4; j++){
 8001eea:	9b03      	ldr	r3, [sp, #12]
 8001eec:	3301      	adds	r3, #1
 8001eee:	9303      	str	r3, [sp, #12]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d1df      	bne.n	8001eb4 <textIn+0x184>
			for(uint8_t i = 0; i < 10; i++){
 8001ef4:	9b04      	ldr	r3, [sp, #16]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	9304      	str	r3, [sp, #16]
 8001efa:	2b0a      	cmp	r3, #10
 8001efc:	d1d2      	bne.n	8001ea4 <textIn+0x174>
			SSD1306_GotoXY(115, 31);
 8001efe:	211f      	movs	r1, #31
 8001f00:	2073      	movs	r0, #115	; 0x73
 8001f02:	f000 ff7f 	bl	8002e04 <SSD1306_GotoXY>
			SSD1306_Puts("&", &Font_6x8, !(keyX == 10 && keyY == 0));
 8001f06:	0032      	movs	r2, r6
 8001f08:	2c0a      	cmp	r4, #10
 8001f0a:	d102      	bne.n	8001f12 <textIn+0x1e2>
 8001f0c:	003a      	movs	r2, r7
 8001f0e:	1e53      	subs	r3, r2, #1
 8001f10:	419a      	sbcs	r2, r3
 8001f12:	4d28      	ldr	r5, [pc, #160]	; (8001fb4 <textIn+0x284>)
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	0029      	movs	r1, r5
 8001f18:	4827      	ldr	r0, [pc, #156]	; (8001fb8 <textIn+0x288>)
 8001f1a:	f000 ffaf 	bl	8002e7c <SSD1306_Puts>
			SSD1306_GotoXY(115, 49);
 8001f1e:	2131      	movs	r1, #49	; 0x31
 8001f20:	2073      	movs	r0, #115	; 0x73
 8001f22:	f000 ff6f 	bl	8002e04 <SSD1306_GotoXY>
			SSD1306_Puts("*", &Font_6x8, !(keyX == 10 && keyY == 2));
 8001f26:	0032      	movs	r2, r6
 8001f28:	2c0a      	cmp	r4, #10
 8001f2a:	d102      	bne.n	8001f32 <textIn+0x202>
 8001f2c:	1eba      	subs	r2, r7, #2
 8001f2e:	1e53      	subs	r3, r2, #1
 8001f30:	419a      	sbcs	r2, r3
 8001f32:	0029      	movs	r1, r5
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	4821      	ldr	r0, [pc, #132]	; (8001fbc <textIn+0x28c>)
 8001f38:	f000 ffa0 	bl	8002e7c <SSD1306_Puts>
			SSD1306_PutsXY(cur, 2, " ^ ", 1);
 8001f3c:	0033      	movs	r3, r6
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <textIn+0x290>)
 8001f42:	9801      	ldr	r0, [sp, #4]
 8001f44:	f7fe fc50 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_PutsXY(0, 1, " > ", 1);
 8001f48:	0033      	movs	r3, r6
 8001f4a:	0031      	movs	r1, r6
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <textIn+0x294>)
 8001f50:	f7fe fc4a 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < cur; i++){
 8001f54:	2300      	movs	r3, #0
 8001f56:	9303      	str	r3, [sp, #12]
 8001f58:	466b      	mov	r3, sp
 8001f5a:	7b1d      	ldrb	r5, [r3, #12]
 8001f5c:	9b01      	ldr	r3, [sp, #4]
 8001f5e:	42ab      	cmp	r3, r5
 8001f60:	d807      	bhi.n	8001f72 <textIn+0x242>
			SSD1306_UpdateScreen();
 8001f62:	f001 f891 	bl	8003088 <SSD1306_UpdateScreen>
 8001f66:	e6fe      	b.n	8001d66 <textIn+0x36>
			else  SSD1306_PutsXY(0, 0, "#input part name", 0);
 8001f68:	002b      	movs	r3, r5
 8001f6a:	0029      	movs	r1, r5
 8001f6c:	0028      	movs	r0, r5
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <textIn+0x298>)
 8001f70:	e794      	b.n	8001e9c <textIn+0x16c>
				sprintf(bf, "%c ", resultArr[i]);
 8001f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f74:	9a03      	ldr	r2, [sp, #12]
 8001f76:	4915      	ldr	r1, [pc, #84]	; (8001fcc <textIn+0x29c>)
 8001f78:	5c9a      	ldrb	r2, [r3, r2]
 8001f7a:	9805      	ldr	r0, [sp, #20]
				SSD1306_PutsXY(1 + i, 1, bf, 1);
 8001f7c:	3501      	adds	r5, #1
				sprintf(bf, "%c ", resultArr[i]);
 8001f7e:	f003 fccf 	bl	8005920 <siprintf>
				SSD1306_PutsXY(1 + i, 1, bf, 1);
 8001f82:	0033      	movs	r3, r6
 8001f84:	0031      	movs	r1, r6
 8001f86:	9a05      	ldr	r2, [sp, #20]
 8001f88:	b2e8      	uxtb	r0, r5
 8001f8a:	f7fe fc2d 	bl	80007e8 <SSD1306_PutsXY>
			for(uint8_t i = 0; i < cur; i++){
 8001f8e:	9b03      	ldr	r3, [sp, #12]
 8001f90:	3301      	adds	r3, #1
 8001f92:	e7e0      	b.n	8001f56 <textIn+0x226>
 8001f94:	2000001a 	.word	0x2000001a
 8001f98:	20000957 	.word	0x20000957
 8001f9c:	2000040c 	.word	0x2000040c
 8001fa0:	00000e74 	.word	0x00000e74
 8001fa4:	20000015 	.word	0x20000015
 8001fa8:	08006cd4 	.word	0x08006cd4
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	08006b9c 	.word	0x08006b9c
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	08006bb9 	.word	0x08006bb9
 8001fbc:	08006bbb 	.word	0x08006bbb
 8001fc0:	08006bbd 	.word	0x08006bbd
 8001fc4:	08006bc1 	.word	0x08006bc1
 8001fc8:	08006ba8 	.word	0x08006ba8
 8001fcc:	08006bc5 	.word	0x08006bc5

08001fd0 <partS>:
MODE partS(){
 8001fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(firstF){
 8001fd2:	4bb6      	ldr	r3, [pc, #728]	; (80022ac <partS+0x2dc>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01a      	beq.n	8002010 <partS+0x40>
		firstF = false;
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4bb3      	ldr	r3, [pc, #716]	; (80022ac <partS+0x2dc>)
		ledPos = 30;
 8001fde:	201e      	movs	r0, #30
		firstF = false;
 8001fe0:	701a      	strb	r2, [r3, #0]
		sel = 0;
 8001fe2:	4bb3      	ldr	r3, [pc, #716]	; (80022b0 <partS+0x2e0>)
		tempX = 1;
 8001fe4:	49b3      	ldr	r1, [pc, #716]	; (80022b4 <partS+0x2e4>)
		sel = 0;
 8001fe6:	701a      	strb	r2, [r3, #0]
		tempX = 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	700b      	strb	r3, [r1, #0]
		tempY = 1;
 8001fec:	49b2      	ldr	r1, [pc, #712]	; (80022b8 <partS+0x2e8>)
 8001fee:	700b      	strb	r3, [r1, #0]
		ledPos = 30;
 8001ff0:	49b2      	ldr	r1, [pc, #712]	; (80022bc <partS+0x2ec>)
 8001ff2:	7008      	strb	r0, [r1, #0]
		ptInNum = 1;
 8001ff4:	49b2      	ldr	r1, [pc, #712]	; (80022c0 <partS+0x2f0>)
 8001ff6:	700b      	strb	r3, [r1, #0]
		pt[ptC].cate = 0;
 8001ff8:	4bb2      	ldr	r3, [pc, #712]	; (80022c4 <partS+0x2f4>)
 8001ffa:	7819      	ldrb	r1, [r3, #0]
 8001ffc:	4bb2      	ldr	r3, [pc, #712]	; (80022c8 <partS+0x2f8>)
 8001ffe:	0109      	lsls	r1, r1, #4
 8002000:	185b      	adds	r3, r3, r1
 8002002:	711a      	strb	r2, [r3, #4]
		pt[ptC].max = 200;
 8002004:	32c8      	adds	r2, #200	; 0xc8
 8002006:	819a      	strh	r2, [r3, #12]
		led_clear();
 8002008:	f7fe fbcc 	bl	80007a4 <led_clear>
		led_update();
 800200c:	f7fe fba0 	bl	8000750 <led_update>
	if(RE1){
 8002010:	4bae      	ldr	r3, [pc, #696]	; (80022cc <partS+0x2fc>)
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	2a63      	cmp	r2, #99	; 0x63
 8002016:	d92b      	bls.n	8002070 <partS+0xa0>
		reC = 0;
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
		if(ptSetPosF){
 800201c:	4aac      	ldr	r2, [pc, #688]	; (80022d0 <partS+0x300>)
			if(JOY_R){
 800201e:	4cad      	ldr	r4, [pc, #692]	; (80022d4 <partS+0x304>)
		if(ptSetPosF){
 8002020:	7811      	ldrb	r1, [r2, #0]
 8002022:	22fa      	movs	r2, #250	; 0xfa
			if(JOY_R){
 8002024:	8823      	ldrh	r3, [r4, #0]
 8002026:	0112      	lsls	r2, r2, #4
		if(ptSetPosF){
 8002028:	2900      	cmp	r1, #0
 800202a:	d100      	bne.n	800202e <partS+0x5e>
 800202c:	e0bd      	b.n	80021aa <partS+0x1da>
			if(JOY_R){
 800202e:	4293      	cmp	r3, r2
 8002030:	d95a      	bls.n	80020e8 <partS+0x118>
				if(tempX < 6){
 8002032:	4ea0      	ldr	r6, [pc, #640]	; (80022b4 <partS+0x2e4>)
 8002034:	7833      	ldrb	r3, [r6, #0]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d96f      	bls.n	800211a <partS+0x14a>
			if(JOY_U){
 800203a:	23fa      	movs	r3, #250	; 0xfa
 800203c:	8862      	ldrh	r2, [r4, #2]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	429a      	cmp	r2, r3
 8002042:	d800      	bhi.n	8002046 <partS+0x76>
 8002044:	e089      	b.n	800215a <partS+0x18a>
				if(tempY < 6){
 8002046:	4e9c      	ldr	r6, [pc, #624]	; (80022b8 <partS+0x2e8>)
 8002048:	7833      	ldrb	r3, [r6, #0]
 800204a:	2b05      	cmp	r3, #5
 800204c:	d800      	bhi.n	8002050 <partS+0x80>
 800204e:	e0a2      	b.n	8002196 <partS+0x1c6>
		if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 8002050:	8823      	ldrh	r3, [r4, #0]
 8002052:	4aa1      	ldr	r2, [pc, #644]	; (80022d8 <partS+0x308>)
 8002054:	3b2d      	subs	r3, #45	; 0x2d
 8002056:	3bff      	subs	r3, #255	; 0xff
 8002058:	b29b      	uxth	r3, r3
 800205a:	4293      	cmp	r3, r2
 800205c:	d805      	bhi.n	800206a <partS+0x9a>
 800205e:	8863      	ldrh	r3, [r4, #2]
 8002060:	3b2d      	subs	r3, #45	; 0x2d
 8002062:	3bff      	subs	r3, #255	; 0xff
 8002064:	b29b      	uxth	r3, r3
 8002066:	4293      	cmp	r3, r2
 8002068:	d902      	bls.n	8002070 <partS+0xa0>
 800206a:	2201      	movs	r2, #1
 800206c:	4b9b      	ldr	r3, [pc, #620]	; (80022dc <partS+0x30c>)
 800206e:	701a      	strb	r2, [r3, #0]
	if(JOY_P){
 8002070:	20a0      	movs	r0, #160	; 0xa0
 8002072:	2104      	movs	r1, #4
 8002074:	05c0      	lsls	r0, r0, #23
 8002076:	f001 ff3f 	bl	8003ef8 <HAL_GPIO_ReadPin>
		if(!oldsw){
 800207a:	4b99      	ldr	r3, [pc, #612]	; (80022e0 <partS+0x310>)
 800207c:	4f97      	ldr	r7, [pc, #604]	; (80022dc <partS+0x30c>)
 800207e:	781c      	ldrb	r4, [r3, #0]
 8002080:	4304      	orrs	r4, r0
 8002082:	b2e4      	uxtb	r4, r4
 8002084:	2c00      	cmp	r4, #0
 8002086:	d115      	bne.n	80020b4 <partS+0xe4>
			swS();
 8002088:	f7fe fbcc 	bl	8000824 <swS>
			if(sel == 1){
 800208c:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <partS+0x2e0>)
 800208e:	781e      	ldrb	r6, [r3, #0]
 8002090:	2e01      	cmp	r6, #1
 8002092:	d000      	beq.n	8002096 <partS+0xc6>
 8002094:	e126      	b.n	80022e4 <partS+0x314>
				pt[ptC].name = (String)calloc(0, sizeof(char) * 11);
 8002096:	4b8b      	ldr	r3, [pc, #556]	; (80022c4 <partS+0x2f4>)
 8002098:	210b      	movs	r1, #11
 800209a:	0020      	movs	r0, r4
 800209c:	781d      	ldrb	r5, [r3, #0]
				udf = true;
 800209e:	703e      	strb	r6, [r7, #0]
				pt[ptC].name = (String)calloc(0, sizeof(char) * 11);
 80020a0:	f003 fab2 	bl	8005608 <calloc>
 80020a4:	4a88      	ldr	r2, [pc, #544]	; (80022c8 <partS+0x2f8>)
 80020a6:	012d      	lsls	r5, r5, #4
 80020a8:	50a8      	str	r0, [r5, r2]
				textIn(false, pt[ptC].name, 10);
 80020aa:	58a9      	ldr	r1, [r5, r2]
 80020ac:	0020      	movs	r0, r4
 80020ae:	220a      	movs	r2, #10
 80020b0:	f7ff fe3e 	bl	8001d30 <textIn>
	if(udf){
 80020b4:	783b      	ldrb	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d000      	beq.n	80020bc <partS+0xec>
 80020ba:	e11d      	b.n	80022f8 <partS+0x328>
	return PSAVE;
 80020bc:	2401      	movs	r4, #1
 80020be:	e1b3      	b.n	8002428 <partS+0x458>
					for(i = 1; i <= (6 - tempX); i++){
 80020c0:	3501      	adds	r5, #1
 80020c2:	b2ed      	uxtb	r5, r5
 80020c4:	7833      	ldrb	r3, [r6, #0]
 80020c6:	1afb      	subs	r3, r7, r3
 80020c8:	429d      	cmp	r5, r3
 80020ca:	dc0d      	bgt.n	80020e8 <partS+0x118>
						if(led_cmp((ledPos + i), 0, 4, 0) == 3){
 80020cc:	4b7b      	ldr	r3, [pc, #492]	; (80022bc <partS+0x2ec>)
 80020ce:	2204      	movs	r2, #4
 80020d0:	7818      	ldrb	r0, [r3, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	1828      	adds	r0, r5, r0
 80020d6:	0019      	movs	r1, r3
 80020d8:	b2c0      	uxtb	r0, r0
 80020da:	f7fe fb6d 	bl	80007b8 <led_cmp>
 80020de:	2803      	cmp	r0, #3
 80020e0:	d1ee      	bne.n	80020c0 <partS+0xf0>
							tempX += i;
 80020e2:	7833      	ldrb	r3, [r6, #0]
 80020e4:	18ed      	adds	r5, r5, r3
 80020e6:	7035      	strb	r5, [r6, #0]
			if(JOY_L){
 80020e8:	2396      	movs	r3, #150	; 0x96
 80020ea:	8822      	ldrh	r2, [r4, #0]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d2a3      	bcs.n	800203a <partS+0x6a>
				if(tempX > 1){
 80020f2:	4e70      	ldr	r6, [pc, #448]	; (80022b4 <partS+0x2e4>)
 80020f4:	7833      	ldrb	r3, [r6, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d99f      	bls.n	800203a <partS+0x6a>
					for(i = 1; i < tempX; i++){
 80020fa:	2501      	movs	r5, #1
						if(led_cmp((ledPos - i), 0, 4, 0) == 3){
 80020fc:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <partS+0x2ec>)
 80020fe:	2204      	movs	r2, #4
 8002100:	7818      	ldrb	r0, [r3, #0]
 8002102:	2300      	movs	r3, #0
 8002104:	1b40      	subs	r0, r0, r5
 8002106:	0019      	movs	r1, r3
 8002108:	b2c0      	uxtb	r0, r0
 800210a:	f7fe fb55 	bl	80007b8 <led_cmp>
 800210e:	2803      	cmp	r0, #3
 8002110:	d106      	bne.n	8002120 <partS+0x150>
							tempX -= i;
 8002112:	7833      	ldrb	r3, [r6, #0]
 8002114:	1b5d      	subs	r5, r3, r5
 8002116:	7035      	strb	r5, [r6, #0]
							break;
 8002118:	e78f      	b.n	800203a <partS+0x6a>
					for(i = 1; i <= (6 - tempX); i++){
 800211a:	2501      	movs	r5, #1
 800211c:	2706      	movs	r7, #6
 800211e:	e7d1      	b.n	80020c4 <partS+0xf4>
					for(i = 1; i < tempX; i++){
 8002120:	3501      	adds	r5, #1
 8002122:	7833      	ldrb	r3, [r6, #0]
 8002124:	b2ed      	uxtb	r5, r5
 8002126:	42ab      	cmp	r3, r5
 8002128:	d8e8      	bhi.n	80020fc <partS+0x12c>
 800212a:	e786      	b.n	800203a <partS+0x6a>
					for(i = 1; i <= (6 - tempY); i++){
 800212c:	3501      	adds	r5, #1
 800212e:	b2ed      	uxtb	r5, r5
 8002130:	2206      	movs	r2, #6
 8002132:	7833      	ldrb	r3, [r6, #0]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	429d      	cmp	r5, r3
 8002138:	dc0f      	bgt.n	800215a <partS+0x18a>
						if(led_cmp(ledPos - (6 * i), 0, 4, 0) == 3){
 800213a:	4b60      	ldr	r3, [pc, #384]	; (80022bc <partS+0x2ec>)
 800213c:	2204      	movs	r2, #4
 800213e:	7818      	ldrb	r0, [r3, #0]
 8002140:	003b      	movs	r3, r7
 8002142:	436b      	muls	r3, r5
 8002144:	18c0      	adds	r0, r0, r3
 8002146:	2300      	movs	r3, #0
 8002148:	b2c0      	uxtb	r0, r0
 800214a:	0019      	movs	r1, r3
 800214c:	f7fe fb34 	bl	80007b8 <led_cmp>
 8002150:	2803      	cmp	r0, #3
 8002152:	d1eb      	bne.n	800212c <partS+0x15c>
							tempY += i;
 8002154:	7833      	ldrb	r3, [r6, #0]
 8002156:	18ed      	adds	r5, r5, r3
 8002158:	7035      	strb	r5, [r6, #0]
			if(JOY_D){
 800215a:	2396      	movs	r3, #150	; 0x96
 800215c:	8862      	ldrh	r2, [r4, #2]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	429a      	cmp	r2, r3
 8002162:	d300      	bcc.n	8002166 <partS+0x196>
 8002164:	e774      	b.n	8002050 <partS+0x80>
				if(tempY > 1){
 8002166:	4e54      	ldr	r6, [pc, #336]	; (80022b8 <partS+0x2e8>)
 8002168:	7833      	ldrb	r3, [r6, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d800      	bhi.n	8002170 <partS+0x1a0>
 800216e:	e76f      	b.n	8002050 <partS+0x80>
					for(i = 1; i <=  tempY; i++){
 8002170:	2501      	movs	r5, #1
						if(led_cmp(ledPos +(6 * i), 0, 4, 0) == 3){
 8002172:	2706      	movs	r7, #6
 8002174:	4b51      	ldr	r3, [pc, #324]	; (80022bc <partS+0x2ec>)
 8002176:	2204      	movs	r2, #4
 8002178:	7818      	ldrb	r0, [r3, #0]
 800217a:	003b      	movs	r3, r7
 800217c:	436b      	muls	r3, r5
 800217e:	18c0      	adds	r0, r0, r3
 8002180:	2300      	movs	r3, #0
 8002182:	b2c0      	uxtb	r0, r0
 8002184:	0019      	movs	r1, r3
 8002186:	f7fe fb17 	bl	80007b8 <led_cmp>
 800218a:	2803      	cmp	r0, #3
 800218c:	d107      	bne.n	800219e <partS+0x1ce>
							tempY -= i;
 800218e:	7833      	ldrb	r3, [r6, #0]
 8002190:	1b5d      	subs	r5, r3, r5
 8002192:	7035      	strb	r5, [r6, #0]
							break;
 8002194:	e75c      	b.n	8002050 <partS+0x80>
						if(led_cmp(ledPos - (6 * i), 0, 4, 0) == 3){
 8002196:	2706      	movs	r7, #6
					for(i = 1; i <= (6 - tempY); i++){
 8002198:	2501      	movs	r5, #1
						if(led_cmp(ledPos - (6 * i), 0, 4, 0) == 3){
 800219a:	427f      	negs	r7, r7
 800219c:	e7c8      	b.n	8002130 <partS+0x160>
					for(i = 1; i <=  tempY; i++){
 800219e:	3501      	adds	r5, #1
 80021a0:	7833      	ldrb	r3, [r6, #0]
 80021a2:	b2ed      	uxtb	r5, r5
 80021a4:	42ab      	cmp	r3, r5
 80021a6:	d2e5      	bcs.n	8002174 <partS+0x1a4>
 80021a8:	e752      	b.n	8002050 <partS+0x80>
			if(JOY_R){
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d94c      	bls.n	8002248 <partS+0x278>
				if(sel == 0){
 80021ae:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <partS+0x2e0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d11d      	bne.n	80021f2 <partS+0x222>
					if(pt[ptC].cate < 3) pt[ptC].cate++;
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <partS+0x2f4>)
 80021b8:	4a43      	ldr	r2, [pc, #268]	; (80022c8 <partS+0x2f8>)
 80021ba:	7819      	ldrb	r1, [r3, #0]
 80021bc:	0109      	lsls	r1, r1, #4
 80021be:	1850      	adds	r0, r2, r1
 80021c0:	7903      	ldrb	r3, [r0, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d801      	bhi.n	80021ca <partS+0x1fa>
 80021c6:	3301      	adds	r3, #1
					if(pt[ptC].cate) pt[ptC].cate--;
 80021c8:	7103      	strb	r3, [r0, #4]
					pt[ptC].max = PTMAX;
 80021ca:	1853      	adds	r3, r2, r1
 80021cc:	7918      	ldrb	r0, [r3, #4]
 80021ce:	23c8      	movs	r3, #200	; 0xc8
 80021d0:	2800      	cmp	r0, #0
 80021d2:	d006      	beq.n	80021e2 <partS+0x212>
 80021d4:	3b64      	subs	r3, #100	; 0x64
 80021d6:	2801      	cmp	r0, #1
 80021d8:	d003      	beq.n	80021e2 <partS+0x212>
 80021da:	3b32      	subs	r3, #50	; 0x32
 80021dc:	2802      	cmp	r0, #2
 80021de:	d000      	beq.n	80021e2 <partS+0x212>
 80021e0:	3b28      	subs	r3, #40	; 0x28
 80021e2:	1852      	adds	r2, r2, r1
 80021e4:	8193      	strh	r3, [r2, #12]
					if(ptInNum > pt[ptC].max) ptInNum = pt[ptC].max;
 80021e6:	4a36      	ldr	r2, [pc, #216]	; (80022c0 <partS+0x2f0>)
 80021e8:	7811      	ldrb	r1, [r2, #0]
 80021ea:	4299      	cmp	r1, r3
 80021ec:	d905      	bls.n	80021fa <partS+0x22a>
				if(sel == 2 && ptInNum > 1) ptInNum--;
 80021ee:	7013      	strb	r3, [r2, #0]
 80021f0:	e003      	b.n	80021fa <partS+0x22a>
				if(sel == 2 && ptInNum < pt[ptC].max - pt[ptC].store) ptInNum++;
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d00e      	beq.n	8002214 <partS+0x244>
				if(sel == 3 && pt[ptC].pos < 35) pt[ptC].pos++;
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d01b      	beq.n	8002232 <partS+0x262>
			if(JOY_U && sel) sel--;
 80021fa:	22fa      	movs	r2, #250	; 0xfa
 80021fc:	8863      	ldrh	r3, [r4, #2]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	4293      	cmp	r3, r2
 8002202:	d947      	bls.n	8002294 <partS+0x2c4>
 8002204:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <partS+0x2e0>)
 8002206:	7813      	ldrb	r3, [r2, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d100      	bne.n	800220e <partS+0x23e>
 800220c:	e720      	b.n	8002050 <partS+0x80>
 800220e:	3b01      	subs	r3, #1
			if(JOY_D && sel < 4) sel++;
 8002210:	7013      	strb	r3, [r2, #0]
 8002212:	e71d      	b.n	8002050 <partS+0x80>
				if(sel == 2 && ptInNum < pt[ptC].max - pt[ptC].store) ptInNum++;
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <partS+0x2f4>)
 8002216:	482a      	ldr	r0, [pc, #168]	; (80022c0 <partS+0x2f0>)
 8002218:	7811      	ldrb	r1, [r2, #0]
 800221a:	4a2b      	ldr	r2, [pc, #172]	; (80022c8 <partS+0x2f8>)
 800221c:	0109      	lsls	r1, r1, #4
 800221e:	1852      	adds	r2, r2, r1
 8002220:	8991      	ldrh	r1, [r2, #12]
 8002222:	7803      	ldrb	r3, [r0, #0]
 8002224:	8952      	ldrh	r2, [r2, #10]
 8002226:	1a8a      	subs	r2, r1, r2
 8002228:	4293      	cmp	r3, r2
 800222a:	dae6      	bge.n	80021fa <partS+0x22a>
 800222c:	3301      	adds	r3, #1
 800222e:	7003      	strb	r3, [r0, #0]
 8002230:	e7e3      	b.n	80021fa <partS+0x22a>
				if(sel == 3 && pt[ptC].pos < 35) pt[ptC].pos++;
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <partS+0x2f4>)
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <partS+0x2f8>)
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	189b      	adds	r3, r3, r2
 800223c:	799a      	ldrb	r2, [r3, #6]
 800223e:	2a22      	cmp	r2, #34	; 0x22
 8002240:	d8db      	bhi.n	80021fa <partS+0x22a>
 8002242:	3201      	adds	r2, #1
				if(sel == 3 && pt[ptC].pos) pt[ptC].pos--;
 8002244:	719a      	strb	r2, [r3, #6]
 8002246:	e7d8      	b.n	80021fa <partS+0x22a>
			if(JOY_L){
 8002248:	2296      	movs	r2, #150	; 0x96
 800224a:	0052      	lsls	r2, r2, #1
 800224c:	4293      	cmp	r3, r2
 800224e:	d2d4      	bcs.n	80021fa <partS+0x22a>
				if(sel == 0){
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <partS+0x2e0>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <partS+0x29c>
					if(pt[ptC].cate) pt[ptC].cate--;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <partS+0x2f4>)
 800225a:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <partS+0x2f8>)
 800225c:	7819      	ldrb	r1, [r3, #0]
 800225e:	0109      	lsls	r1, r1, #4
 8002260:	1850      	adds	r0, r2, r1
 8002262:	7903      	ldrb	r3, [r0, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0b0      	beq.n	80021ca <partS+0x1fa>
 8002268:	3b01      	subs	r3, #1
 800226a:	e7ad      	b.n	80021c8 <partS+0x1f8>
				if(sel == 2 && ptInNum > 1) ptInNum--;
 800226c:	2b02      	cmp	r3, #2
 800226e:	d00b      	beq.n	8002288 <partS+0x2b8>
				if(sel == 3 && pt[ptC].pos) pt[ptC].pos--;
 8002270:	2b03      	cmp	r3, #3
 8002272:	d1c2      	bne.n	80021fa <partS+0x22a>
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <partS+0x2f4>)
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <partS+0x2f8>)
 800227a:	0112      	lsls	r2, r2, #4
 800227c:	189b      	adds	r3, r3, r2
 800227e:	799a      	ldrb	r2, [r3, #6]
 8002280:	2a00      	cmp	r2, #0
 8002282:	d0ba      	beq.n	80021fa <partS+0x22a>
 8002284:	3a01      	subs	r2, #1
 8002286:	e7dd      	b.n	8002244 <partS+0x274>
				if(sel == 2 && ptInNum > 1) ptInNum--;
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <partS+0x2f0>)
 800228a:	7813      	ldrb	r3, [r2, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d9b4      	bls.n	80021fa <partS+0x22a>
 8002290:	3b01      	subs	r3, #1
 8002292:	e7ac      	b.n	80021ee <partS+0x21e>
			if(JOY_D && sel < 4) sel++;
 8002294:	2296      	movs	r2, #150	; 0x96
 8002296:	0052      	lsls	r2, r2, #1
 8002298:	4293      	cmp	r3, r2
 800229a:	d300      	bcc.n	800229e <partS+0x2ce>
 800229c:	e6d8      	b.n	8002050 <partS+0x80>
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <partS+0x2e0>)
 80022a0:	7813      	ldrb	r3, [r2, #0]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d900      	bls.n	80022a8 <partS+0x2d8>
 80022a6:	e6d3      	b.n	8002050 <partS+0x80>
 80022a8:	3301      	adds	r3, #1
 80022aa:	e7b1      	b.n	8002210 <partS+0x240>
 80022ac:	20000008 	.word	0x20000008
 80022b0:	20000958 	.word	0x20000958
 80022b4:	2000095c 	.word	0x2000095c
 80022b8:	2000095d 	.word	0x2000095d
 80022bc:	200005ca 	.word	0x200005ca
 80022c0:	20000954 	.word	0x20000954
 80022c4:	2000094c 	.word	0x2000094c
 80022c8:	2000070c 	.word	0x2000070c
 80022cc:	20000957 	.word	0x20000957
 80022d0:	20000955 	.word	0x20000955
 80022d4:	2000040c 	.word	0x2000040c
 80022d8:	00000e74 	.word	0x00000e74
 80022dc:	2000001a 	.word	0x2000001a
 80022e0:	20000015 	.word	0x20000015
			}else if(sel == 3){
 80022e4:	2e03      	cmp	r6, #3
 80022e6:	d143      	bne.n	8002370 <partS+0x3a0>
				udf = true;
 80022e8:	2301      	movs	r3, #1
				ptSetPosF ^= 1;
 80022ea:	4995      	ldr	r1, [pc, #596]	; (8002540 <partS+0x570>)
				udf = true;
 80022ec:	703b      	strb	r3, [r7, #0]
				ptSetPosF ^= 1;
 80022ee:	780a      	ldrb	r2, [r1, #0]
 80022f0:	4053      	eors	r3, r2
 80022f2:	700b      	strb	r3, [r1, #0]
				if(!ptSetPosF) led_clear();
 80022f4:	2a01      	cmp	r2, #1
 80022f6:	d038      	beq.n	800236a <partS+0x39a>
		String bf = (String)calloc(0, sizeof(char) * 11);
 80022f8:	210b      	movs	r1, #11
 80022fa:	2000      	movs	r0, #0
 80022fc:	f003 f984 	bl	8005608 <calloc>
		udf = false;
 8002300:	2400      	movs	r4, #0
		String bf = (String)calloc(0, sizeof(char) * 11);
 8002302:	0005      	movs	r5, r0
		udf = false;
 8002304:	703c      	strb	r4, [r7, #0]
		basicScreen();
 8002306:	f7fe fa7f 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Save", 0);
 800230a:	0023      	movs	r3, r4
 800230c:	0021      	movs	r1, r4
 800230e:	0020      	movs	r0, r4
 8002310:	4a8c      	ldr	r2, [pc, #560]	; (8002544 <partS+0x574>)
 8002312:	f7fe fa69 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, 1, "Pls input inFormation", 1);
 8002316:	2301      	movs	r3, #1
 8002318:	0020      	movs	r0, r4
 800231a:	0019      	movs	r1, r3
 800231c:	4a8a      	ldr	r2, [pc, #552]	; (8002548 <partS+0x578>)
 800231e:	f7fe fa63 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(1, 3, "Cate:", 1);
 8002322:	2301      	movs	r3, #1
 8002324:	2103      	movs	r1, #3
 8002326:	0018      	movs	r0, r3
 8002328:	4a88      	ldr	r2, [pc, #544]	; (800254c <partS+0x57c>)
 800232a:	f7fe fa5d 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_Puts(ptCate[pt[ptC].cate], &Font_6x8, 1);
 800232e:	4e88      	ldr	r6, [pc, #544]	; (8002550 <partS+0x580>)
 8002330:	4c88      	ldr	r4, [pc, #544]	; (8002554 <partS+0x584>)
 8002332:	7833      	ldrb	r3, [r6, #0]
 8002334:	4f88      	ldr	r7, [pc, #544]	; (8002558 <partS+0x588>)
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	18e3      	adds	r3, r4, r3
 800233a:	791b      	ldrb	r3, [r3, #4]
 800233c:	4887      	ldr	r0, [pc, #540]	; (800255c <partS+0x58c>)
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	2201      	movs	r2, #1
 8002342:	0039      	movs	r1, r7
 8002344:	5818      	ldr	r0, [r3, r0]
 8002346:	f000 fd99 	bl	8002e7c <SSD1306_Puts>
		SSD1306_PutsXY(1, 4, "Name:", 1);
 800234a:	2301      	movs	r3, #1
 800234c:	4a84      	ldr	r2, [pc, #528]	; (8002560 <partS+0x590>)
 800234e:	0018      	movs	r0, r3
 8002350:	2104      	movs	r1, #4
 8002352:	f7fe fa49 	bl	80007e8 <SSD1306_PutsXY>
		if(!pt[ptC].name[0])SSD1306_Puts("(NONE)", &Font_6x8, 1);
 8002356:	7833      	ldrb	r3, [r6, #0]
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	591a      	ldr	r2, [r3, r4]
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	2a00      	cmp	r2, #0
 8002360:	d064      	beq.n	800242c <partS+0x45c>
		else SSD1306_Puts(pt[ptC].name, &Font_6x8, 1);
 8002362:	2201      	movs	r2, #1
 8002364:	0039      	movs	r1, r7
 8002366:	5918      	ldr	r0, [r3, r4]
 8002368:	e063      	b.n	8002432 <partS+0x462>
				if(!ptSetPosF) led_clear();
 800236a:	f7fe fa1b 	bl	80007a4 <led_clear>
 800236e:	e6a1      	b.n	80020b4 <partS+0xe4>
				if(!pt[ptC].name) buzFlag = 2;
 8002370:	4b77      	ldr	r3, [pc, #476]	; (8002550 <partS+0x580>)
 8002372:	4a78      	ldr	r2, [pc, #480]	; (8002554 <partS+0x584>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	589a      	ldr	r2, [r3, r2]
 800237a:	2a00      	cmp	r2, #0
 800237c:	d103      	bne.n	8002386 <partS+0x3b6>
 800237e:	4b79      	ldr	r3, [pc, #484]	; (8002564 <partS+0x594>)
 8002380:	3202      	adds	r2, #2
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e696      	b.n	80020b4 <partS+0xe4>
				else if(sel == 4){
 8002386:	2e04      	cmp	r6, #4
 8002388:	d000      	beq.n	800238c <partS+0x3bc>
 800238a:	e693      	b.n	80020b4 <partS+0xe4>
					udf = true;
 800238c:	2201      	movs	r2, #1
					firstF = 1;
 800238e:	4976      	ldr	r1, [pc, #472]	; (8002568 <partS+0x598>)
					udf = true;
 8002390:	703a      	strb	r2, [r7, #0]
					firstF = 1;
 8002392:	700a      	strb	r2, [r1, #0]
					pt[ptC].pos = ledPos;
 8002394:	4a75      	ldr	r2, [pc, #468]	; (800256c <partS+0x59c>)
 8002396:	496f      	ldr	r1, [pc, #444]	; (8002554 <partS+0x584>)
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	18cb      	adds	r3, r1, r3
 800239c:	719a      	strb	r2, [r3, #6]
					pt[ptC].store = ptInNum;
 800239e:	4a74      	ldr	r2, [pc, #464]	; (8002570 <partS+0x5a0>)
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	815a      	strh	r2, [r3, #10]
					logShift();
 80023a4:	f7fe fe58 	bl	8001058 <logShift>
					DS3231_get_date(&date.day, &date.month, (uint8_t *)&date.year);
 80023a8:	4d72      	ldr	r5, [pc, #456]	; (8002574 <partS+0x5a4>)
 80023aa:	0028      	movs	r0, r5
 80023ac:	1caa      	adds	r2, r5, #2
 80023ae:	1c69      	adds	r1, r5, #1
 80023b0:	f7fe f966 	bl	8000680 <DS3231_get_date>
					DS3231_get_time(&time.sec, &time.min, &time.hour);
 80023b4:	4f70      	ldr	r7, [pc, #448]	; (8002578 <partS+0x5a8>)
 80023b6:	003a      	movs	r2, r7
 80023b8:	1c79      	adds	r1, r7, #1
 80023ba:	1cb8      	adds	r0, r7, #2
 80023bc:	f7fe f8ca 	bl	8000554 <DS3231_get_time>
					pLog[0].workCate = 1;
 80023c0:	4b6e      	ldr	r3, [pc, #440]	; (800257c <partS+0x5ac>)
 80023c2:	2201      	movs	r2, #1
					pLog[0].date = date;
 80023c4:	0018      	movs	r0, r3
					pLog[0].workCate = 1;
 80023c6:	701a      	strb	r2, [r3, #0]
					pLog[0].date = date;
 80023c8:	0029      	movs	r1, r5
 80023ca:	0032      	movs	r2, r6
 80023cc:	3030      	adds	r0, #48	; 0x30
 80023ce:	f003 f963 	bl	8005698 <memcpy>
					pLog[0].time = time;
 80023d2:	486a      	ldr	r0, [pc, #424]	; (800257c <partS+0x5ac>)
 80023d4:	2203      	movs	r2, #3
 80023d6:	0039      	movs	r1, r7
 80023d8:	302d      	adds	r0, #45	; 0x2d
 80023da:	f003 f95d 	bl	8005698 <memcpy>
					sprintf(pLog[0].content[0], "%s/%s", pt[ptC].name, ptCate[pt[ptC].cate]);
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <partS+0x580>)
 80023e0:	495c      	ldr	r1, [pc, #368]	; (8002554 <partS+0x584>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4a5b      	ldr	r2, [pc, #364]	; (8002554 <partS+0x584>)
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	589a      	ldr	r2, [r3, r2]
 80023ea:	18cb      	adds	r3, r1, r3
 80023ec:	791b      	ldrb	r3, [r3, #4]
 80023ee:	495b      	ldr	r1, [pc, #364]	; (800255c <partS+0x58c>)
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	585b      	ldr	r3, [r3, r1]
 80023f4:	4862      	ldr	r0, [pc, #392]	; (8002580 <partS+0x5b0>)
 80023f6:	4963      	ldr	r1, [pc, #396]	; (8002584 <partS+0x5b4>)
 80023f8:	f003 fa92 	bl	8005920 <siprintf>
					sprintf(pLog[0].content[1], "%dpcs (%d,%d)", pt[ptC].store, tempX, tempY);
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <partS+0x580>)
 80023fe:	4955      	ldr	r1, [pc, #340]	; (8002554 <partS+0x584>)
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	4b61      	ldr	r3, [pc, #388]	; (8002588 <partS+0x5b8>)
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	188a      	adds	r2, r1, r2
 8002408:	4960      	ldr	r1, [pc, #384]	; (800258c <partS+0x5bc>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	7809      	ldrb	r1, [r1, #0]
 800240e:	8952      	ldrh	r2, [r2, #10]
 8002410:	485f      	ldr	r0, [pc, #380]	; (8002590 <partS+0x5c0>)
 8002412:	9100      	str	r1, [sp, #0]
 8002414:	495f      	ldr	r1, [pc, #380]	; (8002594 <partS+0x5c4>)
 8002416:	f003 fa83 	bl	8005920 <siprintf>
					ptC++;
 800241a:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <partS+0x580>)
 800241c:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <partS+0x580>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	7013      	strb	r3, [r2, #0]
					sel = 0;
 8002424:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <partS+0x5c8>)
 8002426:	701c      	strb	r4, [r3, #0]
}
 8002428:	0020      	movs	r0, r4
 800242a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if(!pt[ptC].name[0])SSD1306_Puts("(NONE)", &Font_6x8, 1);
 800242c:	2201      	movs	r2, #1
 800242e:	0039      	movs	r1, r7
 8002430:	485a      	ldr	r0, [pc, #360]	; (800259c <partS+0x5cc>)
		else SSD1306_Puts(pt[ptC].name, &Font_6x8, 1);
 8002432:	f000 fd23 	bl	8002e7c <SSD1306_Puts>
		if(pt[ptC].ptionC < 1) pt[ptC].ptionC = 1;
 8002436:	7833      	ldrb	r3, [r6, #0]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	18e3      	adds	r3, r4, r3
 800243c:	7a1a      	ldrb	r2, [r3, #8]
 800243e:	2a00      	cmp	r2, #0
 8002440:	d101      	bne.n	8002446 <partS+0x476>
 8002442:	3201      	adds	r2, #1
 8002444:	721a      	strb	r2, [r3, #8]
		SSD1306_PutsXY(1, 5, "Store:", 1);
 8002446:	2301      	movs	r3, #1
 8002448:	2105      	movs	r1, #5
 800244a:	0018      	movs	r0, r3
 800244c:	4a54      	ldr	r2, [pc, #336]	; (80025a0 <partS+0x5d0>)
 800244e:	f7fe f9cb 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "%d/%d", ptInNum, pt[ptC].max * pt[ptC].ptionC);
 8002452:	7832      	ldrb	r2, [r6, #0]
 8002454:	0028      	movs	r0, r5
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	18a2      	adds	r2, r4, r2
 800245a:	8991      	ldrh	r1, [r2, #12]
 800245c:	7a13      	ldrb	r3, [r2, #8]
 800245e:	4a44      	ldr	r2, [pc, #272]	; (8002570 <partS+0x5a0>)
 8002460:	434b      	muls	r3, r1
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	494f      	ldr	r1, [pc, #316]	; (80025a4 <partS+0x5d4>)
 8002466:	f003 fa5b 	bl	8005920 <siprintf>
		SSD1306_Puts(bf, &Font_6x8, 1);
 800246a:	2201      	movs	r2, #1
 800246c:	0039      	movs	r1, r7
 800246e:	0028      	movs	r0, r5
 8002470:	f000 fd04 	bl	8002e7c <SSD1306_Puts>
		if(ptSetPosF){
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <partS+0x570>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d031      	beq.n	80024e0 <partS+0x510>
			led_clear();
 800247c:	f7fe f992 	bl	80007a4 <led_clear>
			for(uint8_t i = 0; i < 36; i++){
 8002480:	2600      	movs	r6, #0
				if(pt[i].store) led_color(pt[i].pos, 4, 0, 0);
 8002482:	8963      	ldrh	r3, [r4, #10]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <partS+0x4c4>
 8002488:	2300      	movs	r3, #0
 800248a:	2104      	movs	r1, #4
 800248c:	001a      	movs	r2, r3
 800248e:	79a0      	ldrb	r0, [r4, #6]
 8002490:	f7fe f952 	bl	8000738 <led_color>
				if(led_cmp(i, 0, 0, 0) == 3) led_color(i, 0, 4, 0);
 8002494:	2300      	movs	r3, #0
 8002496:	0030      	movs	r0, r6
 8002498:	001a      	movs	r2, r3
 800249a:	0019      	movs	r1, r3
 800249c:	f7fe f98c 	bl	80007b8 <led_cmp>
 80024a0:	2803      	cmp	r0, #3
 80024a2:	d105      	bne.n	80024b0 <partS+0x4e0>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2204      	movs	r2, #4
 80024a8:	0019      	movs	r1, r3
 80024aa:	0030      	movs	r0, r6
 80024ac:	f7fe f944 	bl	8000738 <led_color>
			for(uint8_t i = 0; i < 36; i++){
 80024b0:	3601      	adds	r6, #1
 80024b2:	b2f6      	uxtb	r6, r6
 80024b4:	3410      	adds	r4, #16
 80024b6:	2e24      	cmp	r6, #36	; 0x24
 80024b8:	d1e3      	bne.n	8002482 <partS+0x4b2>
			ledPos = (6 - tempY) * 6 + tempX - 1;
 80024ba:	2006      	movs	r0, #6
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <partS+0x5bc>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	1ac3      	subs	r3, r0, r3
 80024c2:	4358      	muls	r0, r3
 80024c4:	4b30      	ldr	r3, [pc, #192]	; (8002588 <partS+0x5b8>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	18c0      	adds	r0, r0, r3
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <partS+0x59c>)
 80024ce:	b2c0      	uxtb	r0, r0
 80024d0:	7018      	strb	r0, [r3, #0]
			led_color(ledPos, 4, 4, 4);
 80024d2:	2304      	movs	r3, #4
 80024d4:	001a      	movs	r2, r3
 80024d6:	0019      	movs	r1, r3
 80024d8:	f7fe f92e 	bl	8000738 <led_color>
			led_update();
 80024dc:	f7fe f938 	bl	8000750 <led_update>
		SSD1306_PutsXY(1, 6, "Position ", !ptSetPosF);
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <partS+0x570>)
 80024e2:	2106      	movs	r1, #6
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2001      	movs	r0, #1
 80024e8:	425a      	negs	r2, r3
 80024ea:	4153      	adcs	r3, r2
 80024ec:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <partS+0x5d8>)
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f7fe f97a 	bl	80007e8 <SSD1306_PutsXY>
		sprintf(bf, "(%d, %d)", tempX, tempY);
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <partS+0x5bc>)
 80024f6:	4a24      	ldr	r2, [pc, #144]	; (8002588 <partS+0x5b8>)
 80024f8:	0028      	movs	r0, r5
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	492b      	ldr	r1, [pc, #172]	; (80025ac <partS+0x5dc>)
 8002500:	f003 fa0e 	bl	8005920 <siprintf>
		SSD1306_Puts(bf, &Font_6x8, !ptSetPosF);
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <partS+0x570>)
 8002506:	0039      	movs	r1, r7
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	0028      	movs	r0, r5
 800250c:	4253      	negs	r3, r2
 800250e:	415a      	adcs	r2, r3
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f000 fcb3 	bl	8002e7c <SSD1306_Puts>
		SSD1306_PutsXY(1, 7, "Enter", 1);
 8002516:	2301      	movs	r3, #1
 8002518:	2107      	movs	r1, #7
 800251a:	0018      	movs	r0, r3
 800251c:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <partS+0x5e0>)
 800251e:	f7fe f963 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_PutsXY(0, sel + 3, ">", 1);
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <partS+0x5c8>)
 8002524:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <partS+0x5e4>)
 8002526:	7819      	ldrb	r1, [r3, #0]
 8002528:	2000      	movs	r0, #0
 800252a:	3103      	adds	r1, #3
 800252c:	2301      	movs	r3, #1
 800252e:	b2c9      	uxtb	r1, r1
 8002530:	f7fe f95a 	bl	80007e8 <SSD1306_PutsXY>
		free(bf);
 8002534:	0028      	movs	r0, r5
 8002536:	f003 f8a5 	bl	8005684 <free>
		SSD1306_UpdateScreen();
 800253a:	f000 fda5 	bl	8003088 <SSD1306_UpdateScreen>
 800253e:	e5bd      	b.n	80020bc <partS+0xec>
 8002540:	20000955 	.word	0x20000955
 8002544:	08006bc9 	.word	0x08006bc9
 8002548:	08006bcf 	.word	0x08006bcf
 800254c:	08006a35 	.word	0x08006a35
 8002550:	2000094c 	.word	0x2000094c
 8002554:	2000070c 	.word	0x2000070c
 8002558:	20000000 	.word	0x20000000
 800255c:	08006ce4 	.word	0x08006ce4
 8002560:	08006a3b 	.word	0x08006a3b
 8002564:	20000412 	.word	0x20000412
 8002568:	20000008 	.word	0x20000008
 800256c:	200005ca 	.word	0x200005ca
 8002570:	20000954 	.word	0x20000954
 8002574:	20000414 	.word	0x20000414
 8002578:	2000095e 	.word	0x2000095e
 800257c:	200005d2 	.word	0x200005d2
 8002580:	200005d3 	.word	0x200005d3
 8002584:	08006a81 	.word	0x08006a81
 8002588:	2000095c 	.word	0x2000095c
 800258c:	2000095d 	.word	0x2000095d
 8002590:	200005e9 	.word	0x200005e9
 8002594:	08006a87 	.word	0x08006a87
 8002598:	20000958 	.word	0x20000958
 800259c:	08006b4f 	.word	0x08006b4f
 80025a0:	08006a41 	.word	0x08006a41
 80025a4:	08006be5 	.word	0x08006be5
 80025a8:	08006beb 	.word	0x08006beb
 80025ac:	08006bf5 	.word	0x08006bf5
 80025b0:	08006bfe 	.word	0x08006bfe
 80025b4:	08006a22 	.word	0x08006a22

080025b8 <pFind>:
MODE pFind(){
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(firstF){
 80025ba:	4d40      	ldr	r5, [pc, #256]	; (80026bc <pFind+0x104>)
MODE pFind(){
 80025bc:	b085      	sub	sp, #20
	if(firstF){
 80025be:	782b      	ldrb	r3, [r5, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <pFind+0x1e>
		firstF = false;
 80025c4:	2100      	movs	r1, #0
		findC = 0;
 80025c6:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <pFind+0x108>)
		memset(ptFindName, 0, sizeof(char) * 11);
 80025c8:	220b      	movs	r2, #11
		findC = 0;
 80025ca:	7019      	strb	r1, [r3, #0]
		memset(ptFindName, 0, sizeof(char) * 11);
 80025cc:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <pFind+0x10c>)
		firstF = false;
 80025ce:	7029      	strb	r1, [r5, #0]
		memset(ptFindName, 0, sizeof(char) * 11);
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	f003 f87d 	bl	80056d0 <memset>
	if(RE1 && (JOY_R || JOY_L || JOY_U || JOY_D)) udf = true;
 80025d6:	4b3c      	ldr	r3, [pc, #240]	; (80026c8 <pFind+0x110>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b63      	cmp	r3, #99	; 0x63
 80025dc:	d910      	bls.n	8002600 <pFind+0x48>
 80025de:	493b      	ldr	r1, [pc, #236]	; (80026cc <pFind+0x114>)
 80025e0:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <pFind+0x118>)
 80025e2:	880b      	ldrh	r3, [r1, #0]
 80025e4:	3b2d      	subs	r3, #45	; 0x2d
 80025e6:	3bff      	subs	r3, #255	; 0xff
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d805      	bhi.n	80025fa <pFind+0x42>
 80025ee:	884b      	ldrh	r3, [r1, #2]
 80025f0:	3b2d      	subs	r3, #45	; 0x2d
 80025f2:	3bff      	subs	r3, #255	; 0xff
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d902      	bls.n	8002600 <pFind+0x48>
 80025fa:	2201      	movs	r2, #1
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <pFind+0x11c>)
 80025fe:	701a      	strb	r2, [r3, #0]
	if(JOY_P){
 8002600:	20a0      	movs	r0, #160	; 0xa0
 8002602:	2104      	movs	r1, #4
 8002604:	05c0      	lsls	r0, r0, #23
 8002606:	f001 fc77 	bl	8003ef8 <HAL_GPIO_ReadPin>
		if(!oldsw){
 800260a:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <pFind+0x120>)
 800260c:	781c      	ldrb	r4, [r3, #0]
 800260e:	4304      	orrs	r4, r0
 8002610:	b2e4      	uxtb	r4, r4
 8002612:	2c00      	cmp	r4, #0
 8002614:	d10c      	bne.n	8002630 <pFind+0x78>
			swS();
 8002616:	f7fe f905 	bl	8000824 <swS>
 			if(!ptFindName[0])textIn(true, ptFindName, 10);
 800261a:	4e2a      	ldr	r6, [pc, #168]	; (80026c4 <pFind+0x10c>)
						findArr[findC] = i;
 800261c:	4f28      	ldr	r7, [pc, #160]	; (80026c0 <pFind+0x108>)
 			if(!ptFindName[0])textIn(true, ptFindName, 10);
 800261e:	6833      	ldr	r3, [r6, #0]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d12d      	bne.n	8002682 <pFind+0xca>
 8002626:	220a      	movs	r2, #10
 8002628:	2001      	movs	r0, #1
 800262a:	6831      	ldr	r1, [r6, #0]
 800262c:	f7ff fb80 	bl	8001d30 <textIn>
	if(udf){
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <pFind+0x11c>)
	return PFIND;
 8002632:	2005      	movs	r0, #5
	if(udf){
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	2a00      	cmp	r2, #0
 8002638:	d03b      	beq.n	80026b2 <pFind+0xfa>
		udf = false;
 800263a:	2400      	movs	r4, #0
 800263c:	701c      	strb	r4, [r3, #0]
		basicScreen();
 800263e:	f7fe f8e3 	bl	8000808 <basicScreen>
		SSD1306_PutsXY(0, 0, "#Find", 0);
 8002642:	0023      	movs	r3, r4
 8002644:	0021      	movs	r1, r4
 8002646:	0020      	movs	r0, r4
 8002648:	4a24      	ldr	r2, [pc, #144]	; (80026dc <pFind+0x124>)
		SSD1306_DrawFilledRectangle(18, 34, 92, 10, 1);
 800264a:	3401      	adds	r4, #1
		SSD1306_PutsXY(0, 0, "#Find", 0);
 800264c:	f7fe f8cc 	bl	80007e8 <SSD1306_PutsXY>
		SSD1306_DrawFilledRectangle(18, 34, 92, 10, 1);
 8002650:	230a      	movs	r3, #10
 8002652:	225c      	movs	r2, #92	; 0x5c
 8002654:	2122      	movs	r1, #34	; 0x22
 8002656:	2012      	movs	r0, #18
 8002658:	9400      	str	r4, [sp, #0]
 800265a:	f000 fcbc 	bl	8002fd6 <SSD1306_DrawFilledRectangle>
		SSD1306_GotoXY(19, 36);
 800265e:	2124      	movs	r1, #36	; 0x24
 8002660:	2013      	movs	r0, #19
 8002662:	f000 fbcf 	bl	8002e04 <SSD1306_GotoXY>
		if(!ptFindName[0]) SSD1306_Puts("input find name", &Font_6x8, 1);
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <pFind+0x10c>)
 8002668:	491d      	ldr	r1, [pc, #116]	; (80026e0 <pFind+0x128>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	7812      	ldrb	r2, [r2, #0]
 800266e:	2a00      	cmp	r2, #0
 8002670:	d121      	bne.n	80026b6 <pFind+0xfe>
 8002672:	0022      	movs	r2, r4
 8002674:	481b      	ldr	r0, [pc, #108]	; (80026e4 <pFind+0x12c>)
		else SSD1306_Puts(ptFindName, &Font_6x8, 1);
 8002676:	f000 fc01 	bl	8002e7c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800267a:	f000 fd05 	bl	8003088 <SSD1306_UpdateScreen>
	return PFIND;
 800267e:	2005      	movs	r0, #5
 8002680:	e017      	b.n	80026b2 <pFind+0xfa>
 8002682:	b2e3      	uxtb	r3, r4
					if(!strcmp(ptFindName, pt[i].name)){
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <pFind+0x130>)
 8002686:	9303      	str	r3, [sp, #12]
 8002688:	0123      	lsls	r3, r4, #4
 800268a:	6830      	ldr	r0, [r6, #0]
 800268c:	5899      	ldr	r1, [r3, r2]
 800268e:	f7fd fd3b 	bl	8000108 <strcmp>
 8002692:	2800      	cmp	r0, #0
 8002694:	d105      	bne.n	80026a2 <pFind+0xea>
						findArr[findC] = i;
 8002696:	783b      	ldrb	r3, [r7, #0]
 8002698:	4a14      	ldr	r2, [pc, #80]	; (80026ec <pFind+0x134>)
 800269a:	b2e1      	uxtb	r1, r4
 800269c:	54d1      	strb	r1, [r2, r3]
						findC++;
 800269e:	3301      	adds	r3, #1
 80026a0:	703b      	strb	r3, [r7, #0]
				for(uint8_t i = 0; i < 36; i++)
 80026a2:	3401      	adds	r4, #1
 80026a4:	2c24      	cmp	r4, #36	; 0x24
 80026a6:	d1ec      	bne.n	8002682 <pFind+0xca>
				firstF = true;
 80026a8:	2301      	movs	r3, #1
				return FINDR;
 80026aa:	2006      	movs	r0, #6
				udf = true;
 80026ac:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <pFind+0x11c>)
				firstF = true;
 80026ae:	702b      	strb	r3, [r5, #0]
				udf = true;
 80026b0:	7013      	strb	r3, [r2, #0]
}
 80026b2:	b005      	add	sp, #20
 80026b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else SSD1306_Puts(ptFindName, &Font_6x8, 1);
 80026b6:	0022      	movs	r2, r4
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	e7dc      	b.n	8002676 <pFind+0xbe>
 80026bc:	20000008 	.word	0x20000008
 80026c0:	2000043c 	.word	0x2000043c
 80026c4:	20000950 	.word	0x20000950
 80026c8:	20000957 	.word	0x20000957
 80026cc:	2000040c 	.word	0x2000040c
 80026d0:	00000e74 	.word	0x00000e74
 80026d4:	2000001a 	.word	0x2000001a
 80026d8:	20000015 	.word	0x20000015
 80026dc:	08006c04 	.word	0x08006c04
 80026e0:	20000000 	.word	0x20000000
 80026e4:	08006c0a 	.word	0x08006c0a
 80026e8:	2000070c 	.word	0x2000070c
 80026ec:	20000418 	.word	0x20000418

080026f0 <timeSet>:
void timeSet(boolean firstOn){
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b085      	sub	sp, #20
 80026f4:	9003      	str	r0, [sp, #12]
	basicScreen();
 80026f6:	f7fe f887 	bl	8000808 <basicScreen>
	TIME setTime = {.hour = 0, .min = 0, .sec = 1};
 80026fa:	2301      	movs	r3, #1
 80026fc:	2600      	movs	r6, #0
 80026fe:	9302      	str	r3, [sp, #8]
	DATE setDate = {.year = 2022, .month = 3, .day = 18};
 8002700:	4b82      	ldr	r3, [pc, #520]	; (800290c <timeSet+0x21c>)
 8002702:	2703      	movs	r7, #3
 8002704:	9300      	str	r3, [sp, #0]
	while(!firstOn){
 8002706:	9b03      	ldr	r3, [sp, #12]
	DATE setDate = {.year = 2022, .month = 3, .day = 18};
 8002708:	2412      	movs	r4, #18
	TIME setTime = {.hour = 0, .min = 0, .sec = 1};
 800270a:	9601      	str	r6, [sp, #4]
	while(!firstOn){
 800270c:	42b3      	cmp	r3, r6
 800270e:	d000      	beq.n	8002712 <timeSet+0x22>
 8002710:	e086      	b.n	8002820 <timeSet+0x130>
		if(RE1){
 8002712:	4b7f      	ldr	r3, [pc, #508]	; (8002910 <timeSet+0x220>)
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	2a63      	cmp	r2, #99	; 0x63
 8002718:	d962      	bls.n	80027e0 <timeSet+0xf0>
			reC = 0;
 800271a:	9a03      	ldr	r2, [sp, #12]
 800271c:	701a      	strb	r2, [r3, #0]
			if(JOY_R && sel < 5) sel++;
 800271e:	4b7d      	ldr	r3, [pc, #500]	; (8002914 <timeSet+0x224>)
 8002720:	8819      	ldrh	r1, [r3, #0]
 8002722:	23fa      	movs	r3, #250	; 0xfa
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4299      	cmp	r1, r3
 8002728:	d915      	bls.n	8002756 <timeSet+0x66>
 800272a:	4a7b      	ldr	r2, [pc, #492]	; (8002918 <timeSet+0x228>)
 800272c:	7813      	ldrb	r3, [r2, #0]
 800272e:	2b04      	cmp	r3, #4
 8002730:	d801      	bhi.n	8002736 <timeSet+0x46>
 8002732:	3301      	adds	r3, #1
			if(JOY_L && sel) sel--;
 8002734:	7013      	strb	r3, [r2, #0]
			if(JOY_U){
 8002736:	22fa      	movs	r2, #250	; 0xfa
 8002738:	4b76      	ldr	r3, [pc, #472]	; (8002914 <timeSet+0x224>)
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	885b      	ldrh	r3, [r3, #2]
 800273e:	4293      	cmp	r3, r2
 8002740:	d800      	bhi.n	8002744 <timeSet+0x54>
 8002742:	e06f      	b.n	8002824 <timeSet+0x134>
				switch(sel){
 8002744:	4a74      	ldr	r2, [pc, #464]	; (8002918 <timeSet+0x228>)
 8002746:	7810      	ldrb	r0, [r2, #0]
 8002748:	2805      	cmp	r0, #5
 800274a:	d832      	bhi.n	80027b2 <timeSet+0xc2>
 800274c:	f7fd fce6 	bl	800011c <__gnu_thumb1_case_uqi>
 8002750:	2119150d 	.word	0x2119150d
 8002754:	2b27      	.short	0x2b27
			if(JOY_L && sel) sel--;
 8002756:	2396      	movs	r3, #150	; 0x96
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4299      	cmp	r1, r3
 800275c:	d2eb      	bcs.n	8002736 <timeSet+0x46>
 800275e:	4a6e      	ldr	r2, [pc, #440]	; (8002918 <timeSet+0x228>)
 8002760:	7813      	ldrb	r3, [r2, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0e7      	beq.n	8002736 <timeSet+0x46>
 8002766:	3b01      	subs	r3, #1
 8002768:	e7e4      	b.n	8002734 <timeSet+0x44>
				case 0: if(setDate.year < 2099) setDate.year++;
 800276a:	4a6c      	ldr	r2, [pc, #432]	; (800291c <timeSet+0x22c>)
 800276c:	9800      	ldr	r0, [sp, #0]
 800276e:	4290      	cmp	r0, r2
 8002770:	d803      	bhi.n	800277a <timeSet+0x8a>
 8002772:	0002      	movs	r2, r0
 8002774:	3201      	adds	r2, #1
 8002776:	b292      	uxth	r2, r2
 8002778:	9200      	str	r2, [sp, #0]
				case 1: if(setDate.month < 12) setDate.month++;
 800277a:	2f0b      	cmp	r7, #11
 800277c:	d801      	bhi.n	8002782 <timeSet+0x92>
 800277e:	3701      	adds	r7, #1
 8002780:	b2ff      	uxtb	r7, r7
				case 2: if(setDate.day < lastDay[setDate.month - 1]) setDate.day++;
 8002782:	4a67      	ldr	r2, [pc, #412]	; (8002920 <timeSet+0x230>)
 8002784:	19d2      	adds	r2, r2, r7
 8002786:	3a01      	subs	r2, #1
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	42a2      	cmp	r2, r4
 800278c:	d901      	bls.n	8002792 <timeSet+0xa2>
 800278e:	3401      	adds	r4, #1
 8002790:	b2e4      	uxtb	r4, r4
				case 3: if(setTime.hour < 23) setTime.hour++;
 8002792:	9a01      	ldr	r2, [sp, #4]
 8002794:	2a16      	cmp	r2, #22
 8002796:	d802      	bhi.n	800279e <timeSet+0xae>
 8002798:	3201      	adds	r2, #1
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	9201      	str	r2, [sp, #4]
				case 4: if(setTime.min < 59) setTime.min++;
 800279e:	2e3a      	cmp	r6, #58	; 0x3a
 80027a0:	d801      	bhi.n	80027a6 <timeSet+0xb6>
 80027a2:	3601      	adds	r6, #1
 80027a4:	b2f6      	uxtb	r6, r6
				case 5: if(setTime.sec < 59) setTime.sec++;
 80027a6:	9a02      	ldr	r2, [sp, #8]
 80027a8:	2a3a      	cmp	r2, #58	; 0x3a
 80027aa:	d802      	bhi.n	80027b2 <timeSet+0xc2>
 80027ac:	3201      	adds	r2, #1
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	9202      	str	r2, [sp, #8]
				if(setDate.day > lastDay[setDate.month - 1]) setDate.day = lastDay[setDate.month - 1];
 80027b2:	4a5b      	ldr	r2, [pc, #364]	; (8002920 <timeSet+0x230>)
 80027b4:	19d2      	adds	r2, r2, r7
 80027b6:	3a01      	subs	r2, #1
 80027b8:	7810      	ldrb	r0, [r2, #0]
 80027ba:	1c02      	adds	r2, r0, #0
 80027bc:	42a0      	cmp	r0, r4
 80027be:	d900      	bls.n	80027c2 <timeSet+0xd2>
 80027c0:	1c22      	adds	r2, r4, #0
 80027c2:	b2d4      	uxtb	r4, r2
			if(JOY_R || JOY_L || JOY_U || JOY_D) udf = true;
 80027c4:	392d      	subs	r1, #45	; 0x2d
 80027c6:	39ff      	subs	r1, #255	; 0xff
 80027c8:	4a56      	ldr	r2, [pc, #344]	; (8002924 <timeSet+0x234>)
 80027ca:	b289      	uxth	r1, r1
 80027cc:	4291      	cmp	r1, r2
 80027ce:	d804      	bhi.n	80027da <timeSet+0xea>
 80027d0:	3b2d      	subs	r3, #45	; 0x2d
 80027d2:	3bff      	subs	r3, #255	; 0xff
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d902      	bls.n	80027e0 <timeSet+0xf0>
 80027da:	2201      	movs	r2, #1
 80027dc:	4b52      	ldr	r3, [pc, #328]	; (8002928 <timeSet+0x238>)
 80027de:	701a      	strb	r2, [r3, #0]
		if(JOY_P){
 80027e0:	20a0      	movs	r0, #160	; 0xa0
 80027e2:	2104      	movs	r1, #4
 80027e4:	05c0      	lsls	r0, r0, #23
 80027e6:	f001 fb87 	bl	8003ef8 <HAL_GPIO_ReadPin>
			if(!oldsw){
 80027ea:	4b50      	ldr	r3, [pc, #320]	; (800292c <timeSet+0x23c>)
 80027ec:	781d      	ldrb	r5, [r3, #0]
 80027ee:	4305      	orrs	r5, r0
 80027f0:	b2ed      	uxtb	r5, r5
 80027f2:	2d00      	cmp	r5, #0
 80027f4:	d145      	bne.n	8002882 <timeSet+0x192>
				swS();
 80027f6:	f7fe f815 	bl	8000824 <swS>
				DS3231_set_date(setDate.day, setDate.month, setDate.year);
 80027fa:	466b      	mov	r3, sp
 80027fc:	0039      	movs	r1, r7
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	0020      	movs	r0, r4
 8002802:	f7fd ff05 	bl	8000610 <DS3231_set_date>
				DS3231_set_time(setTime.sec, setTime.min, setTime.hour);
 8002806:	0031      	movs	r1, r6
 8002808:	9a01      	ldr	r2, [sp, #4]
 800280a:	9802      	ldr	r0, [sp, #8]
 800280c:	f7fd fe6a 	bl	80004e4 <DS3231_set_time>
				udf = true;
 8002810:	2101      	movs	r1, #1
 8002812:	4b45      	ldr	r3, [pc, #276]	; (8002928 <timeSet+0x238>)
				eepWriteData(0, true);
 8002814:	0028      	movs	r0, r5
				udf = true;
 8002816:	7019      	strb	r1, [r3, #0]
				eepWriteData(0, true);
 8002818:	f000 fd0e 	bl	8003238 <eepWriteData>
				SSD1306_Clear();
 800281c:	f000 fc56 	bl	80030cc <SSD1306_Clear>
}
 8002820:	b005      	add	sp, #20
 8002822:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(JOY_D){
 8002824:	2296      	movs	r2, #150	; 0x96
 8002826:	0052      	lsls	r2, r2, #1
 8002828:	4293      	cmp	r3, r2
 800282a:	d2cb      	bcs.n	80027c4 <timeSet+0xd4>
				switch(sel){
 800282c:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <timeSet+0x228>)
 800282e:	7810      	ldrb	r0, [r2, #0]
 8002830:	2805      	cmp	r0, #5
 8002832:	d8c7      	bhi.n	80027c4 <timeSet+0xd4>
 8002834:	f7fd fc72 	bl	800011c <__gnu_thumb1_case_uqi>
 8002838:	14100c03 	.word	0x14100c03
 800283c:	1e1a      	.short	0x1e1a
				case 0: if(setDate.year > 2000) setDate.year--;
 800283e:	22fa      	movs	r2, #250	; 0xfa
 8002840:	9800      	ldr	r0, [sp, #0]
 8002842:	00d2      	lsls	r2, r2, #3
 8002844:	4290      	cmp	r0, r2
 8002846:	d903      	bls.n	8002850 <timeSet+0x160>
 8002848:	0002      	movs	r2, r0
 800284a:	3a01      	subs	r2, #1
 800284c:	b292      	uxth	r2, r2
 800284e:	9200      	str	r2, [sp, #0]
				case 1: if(setDate.month > 1) setDate.month--;
 8002850:	2f01      	cmp	r7, #1
 8002852:	d001      	beq.n	8002858 <timeSet+0x168>
 8002854:	3f01      	subs	r7, #1
 8002856:	b2ff      	uxtb	r7, r7
				case 2: if(setDate.day > 1) setDate.day--;
 8002858:	2c01      	cmp	r4, #1
 800285a:	d901      	bls.n	8002860 <timeSet+0x170>
 800285c:	3c01      	subs	r4, #1
 800285e:	b2e4      	uxtb	r4, r4
				case 3: if(setTime.hour) setTime.hour--;
 8002860:	9a01      	ldr	r2, [sp, #4]
 8002862:	2a00      	cmp	r2, #0
 8002864:	d002      	beq.n	800286c <timeSet+0x17c>
 8002866:	3a01      	subs	r2, #1
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	9201      	str	r2, [sp, #4]
				case 4: if(setTime.min) setTime.min--;
 800286c:	2e00      	cmp	r6, #0
 800286e:	d001      	beq.n	8002874 <timeSet+0x184>
 8002870:	3e01      	subs	r6, #1
 8002872:	b2f6      	uxtb	r6, r6
				case 5: if(setTime.sec) setTime.sec--;
 8002874:	9a02      	ldr	r2, [sp, #8]
 8002876:	2a00      	cmp	r2, #0
 8002878:	d0a4      	beq.n	80027c4 <timeSet+0xd4>
 800287a:	3a01      	subs	r2, #1
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	9202      	str	r2, [sp, #8]
 8002880:	e7a0      	b.n	80027c4 <timeSet+0xd4>
		if(udf){
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <timeSet+0x238>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d100      	bne.n	800288c <timeSet+0x19c>
 800288a:	e742      	b.n	8002712 <timeSet+0x22>
			String bf = (String)calloc(0, sizeof(char) * 12);
 800288c:	210c      	movs	r1, #12
 800288e:	2000      	movs	r0, #0
 8002890:	f002 feba 	bl	8005608 <calloc>
			udf = false;
 8002894:	2200      	movs	r2, #0
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <timeSet+0x238>)
			String bf = (String)calloc(0, sizeof(char) * 12);
 8002898:	0005      	movs	r5, r0
			udf = false;
 800289a:	701a      	strb	r2, [r3, #0]
			basicScreen();
 800289c:	f7fd ffb4 	bl	8000808 <basicScreen>
			SSD1306_PutsXY(0, 0, "#Time Set", 0);
 80028a0:	2300      	movs	r3, #0
 80028a2:	4a23      	ldr	r2, [pc, #140]	; (8002930 <timeSet+0x240>)
 80028a4:	0019      	movs	r1, r3
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7fd ff9e 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_PutsXY(0, 2, "RTC Time setting.", 1);
 80028ac:	2301      	movs	r3, #1
 80028ae:	2000      	movs	r0, #0
 80028b0:	2102      	movs	r1, #2
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <timeSet+0x244>)
 80028b4:	f7fd ff98 	bl	80007e8 <SSD1306_PutsXY>
			switch(sel){
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <timeSet+0x228>)
 80028ba:	7818      	ldrb	r0, [r3, #0]
 80028bc:	2805      	cmp	r0, #5
 80028be:	d809      	bhi.n	80028d4 <timeSet+0x1e4>
 80028c0:	f7fd fc2c 	bl	800011c <__gnu_thumb1_case_uqi>
 80028c4:	1a171403 	.word	0x1a171403
 80028c8:	201d      	.short	0x201d
			case 0: sprintf(bf, "Year=%04ld", setDate.year); break;
 80028ca:	9a00      	ldr	r2, [sp, #0]
 80028cc:	491a      	ldr	r1, [pc, #104]	; (8002938 <timeSet+0x248>)
			case 5: sprintf(bf, "Sec=%02ld", setTime.sec); break;
 80028ce:	0028      	movs	r0, r5
 80028d0:	f003 f826 	bl	8005920 <siprintf>
			SSD1306_PutsXY(0, 4, bf, 1);
 80028d4:	2301      	movs	r3, #1
 80028d6:	002a      	movs	r2, r5
 80028d8:	2104      	movs	r1, #4
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fd ff84 	bl	80007e8 <SSD1306_PutsXY>
			SSD1306_UpdateScreen();
 80028e0:	f000 fbd2 	bl	8003088 <SSD1306_UpdateScreen>
			free(bf);
 80028e4:	0028      	movs	r0, r5
 80028e6:	f002 fecd 	bl	8005684 <free>
 80028ea:	e712      	b.n	8002712 <timeSet+0x22>
			case 1: sprintf(bf, "Month=%02ld", setDate.month); break;
 80028ec:	003a      	movs	r2, r7
 80028ee:	4913      	ldr	r1, [pc, #76]	; (800293c <timeSet+0x24c>)
 80028f0:	e7ed      	b.n	80028ce <timeSet+0x1de>
			case 2: sprintf(bf, "Day=%02ld", setDate.day); break;
 80028f2:	0022      	movs	r2, r4
 80028f4:	4912      	ldr	r1, [pc, #72]	; (8002940 <timeSet+0x250>)
 80028f6:	e7ea      	b.n	80028ce <timeSet+0x1de>
			case 3: sprintf(bf, "Hour=%02ld", setTime.hour); break;
 80028f8:	9a01      	ldr	r2, [sp, #4]
 80028fa:	4912      	ldr	r1, [pc, #72]	; (8002944 <timeSet+0x254>)
 80028fc:	e7e7      	b.n	80028ce <timeSet+0x1de>
			case 4: sprintf(bf, "Min=%02ld", setTime.min); break;
 80028fe:	0032      	movs	r2, r6
 8002900:	4911      	ldr	r1, [pc, #68]	; (8002948 <timeSet+0x258>)
 8002902:	e7e4      	b.n	80028ce <timeSet+0x1de>
			case 5: sprintf(bf, "Sec=%02ld", setTime.sec); break;
 8002904:	9a02      	ldr	r2, [sp, #8]
 8002906:	4911      	ldr	r1, [pc, #68]	; (800294c <timeSet+0x25c>)
 8002908:	e7e1      	b.n	80028ce <timeSet+0x1de>
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	000007e6 	.word	0x000007e6
 8002910:	20000957 	.word	0x20000957
 8002914:	2000040c 	.word	0x2000040c
 8002918:	20000958 	.word	0x20000958
 800291c:	00000832 	.word	0x00000832
 8002920:	20000009 	.word	0x20000009
 8002924:	00000e74 	.word	0x00000e74
 8002928:	2000001a 	.word	0x2000001a
 800292c:	20000015 	.word	0x20000015
 8002930:	08006c1a 	.word	0x08006c1a
 8002934:	08006c24 	.word	0x08006c24
 8002938:	08006c36 	.word	0x08006c36
 800293c:	08006c41 	.word	0x08006c41
 8002940:	08006c4d 	.word	0x08006c4d
 8002944:	08006c57 	.word	0x08006c57
 8002948:	08006c62 	.word	0x08006c62
 800294c:	08006c6c 	.word	0x08006c6c

08002950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002950:	b510      	push	{r4, lr}
 8002952:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002954:	2224      	movs	r2, #36	; 0x24
 8002956:	2100      	movs	r1, #0
 8002958:	a80f      	add	r0, sp, #60	; 0x3c
 800295a:	f002 feb9 	bl	80056d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800295e:	2214      	movs	r2, #20
 8002960:	2100      	movs	r1, #0
 8002962:	a801      	add	r0, sp, #4
 8002964:	f002 feb4 	bl	80056d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002968:	2220      	movs	r2, #32
 800296a:	2100      	movs	r1, #0
 800296c:	a806      	add	r0, sp, #24
 800296e:	f002 feaf 	bl	80056d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002972:	491b      	ldr	r1, [pc, #108]	; (80029e0 <SystemClock_Config+0x90>)
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <SystemClock_Config+0x94>)
 8002976:	680b      	ldr	r3, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002978:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800297a:	401a      	ands	r2, r3
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002984:	2302      	movs	r3, #2
 8002986:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002988:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800298a:	2300      	movs	r3, #0
 800298c:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800298e:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002990:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002992:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002994:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002996:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002998:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800299a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800299c:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299e:	f001 fe87 	bl	80046b0 <HAL_RCC_OscConfig>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d001      	beq.n	80029aa <SystemClock_Config+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029a8:	e7fe      	b.n	80029a8 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029aa:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ac:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ae:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029b0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b2:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b4:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029b6:	0021      	movs	r1, r4
 80029b8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ba:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029bc:	f002 f8fa 	bl	8004bb4 <HAL_RCC_ClockConfig>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d001      	beq.n	80029c8 <SystemClock_Config+0x78>
 80029c4:	b672      	cpsid	i
	while (1) {
 80029c6:	e7fe      	b.n	80029c6 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029c8:	2308      	movs	r3, #8
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029ca:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029cc:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029ce:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d0:	f002 f9be 	bl	8004d50 <HAL_RCCEx_PeriphCLKConfig>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d001      	beq.n	80029dc <SystemClock_Config+0x8c>
 80029d8:	b672      	cpsid	i
	while (1) {
 80029da:	e7fe      	b.n	80029da <SystemClock_Config+0x8a>
}
 80029dc:	b01c      	add	sp, #112	; 0x70
 80029de:	bd10      	pop	{r4, pc}
 80029e0:	40007000 	.word	0x40007000
 80029e4:	ffffe7ff 	.word	0xffffe7ff

080029e8 <main>:
int main(void){
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	PFUNC func = (PFUNC)malloc(sizeof(FUNC));
 80029ea:	2004      	movs	r0, #4
int main(void){
 80029ec:	b08b      	sub	sp, #44	; 0x2c
	PFUNC func = (PFUNC)malloc(sizeof(FUNC));
 80029ee:	f002 fe3f 	bl	8005670 <malloc>
 80029f2:	0004      	movs	r4, r0
	func->mode = (MODE**)malloc(sizeof(MODE*) * 10);
 80029f4:	2028      	movs	r0, #40	; 0x28
 80029f6:	f002 fe3b 	bl	8005670 <malloc>
	*(func->mode + 0) = mainM;
 80029fa:	4bc9      	ldr	r3, [pc, #804]	; (8002d20 <main+0x338>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	2701      	movs	r7, #1
	*(func->mode + 0) = mainM;
 80029fe:	6003      	str	r3, [r0, #0]
	*(func->mode + 1) = partS;
 8002a00:	4bc8      	ldr	r3, [pc, #800]	; (8002d24 <main+0x33c>)
	func->mode = (MODE**)malloc(sizeof(MODE*) * 10);
 8002a02:	6020      	str	r0, [r4, #0]
	*(func->mode + 1) = partS;
 8002a04:	6043      	str	r3, [r0, #4]
	*(func->mode + 2) = pUseM;
 8002a06:	4bc8      	ldr	r3, [pc, #800]	; (8002d28 <main+0x340>)
	func->mode = (MODE**)malloc(sizeof(MODE*) * 10);
 8002a08:	0006      	movs	r6, r0
	*(func->mode + 2) = pUseM;
 8002a0a:	6083      	str	r3, [r0, #8]
	*(func->mode + 3) = use;
 8002a0c:	4bc7      	ldr	r3, [pc, #796]	; (8002d2c <main+0x344>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	4cc8      	ldr	r4, [pc, #800]	; (8002d30 <main+0x348>)
	*(func->mode + 3) = use;
 8002a10:	60c3      	str	r3, [r0, #12]
	*(func->mode + 4) = refill;
 8002a12:	4bc8      	ldr	r3, [pc, #800]	; (8002d34 <main+0x34c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a14:	2500      	movs	r5, #0
	*(func->mode + 4) = refill;
 8002a16:	6103      	str	r3, [r0, #16]
	*(func->mode + 5) = pFind;
 8002a18:	4bc7      	ldr	r3, [pc, #796]	; (8002d38 <main+0x350>)
 8002a1a:	6143      	str	r3, [r0, #20]
	*(func->mode + 6) = findR;
 8002a1c:	4bc7      	ldr	r3, [pc, #796]	; (8002d3c <main+0x354>)
 8002a1e:	6183      	str	r3, [r0, #24]
	*(func->mode + 7) = partition;
 8002a20:	4bc7      	ldr	r3, [pc, #796]	; (8002d40 <main+0x358>)
 8002a22:	61c3      	str	r3, [r0, #28]
	*(func->mode + 8) = logM;
 8002a24:	4bc7      	ldr	r3, [pc, #796]	; (8002d44 <main+0x35c>)
 8002a26:	6203      	str	r3, [r0, #32]
	*(func->mode + 9) = logD;
 8002a28:	4bc7      	ldr	r3, [pc, #796]	; (8002d48 <main+0x360>)
 8002a2a:	6243      	str	r3, [r0, #36]	; 0x24
  HAL_Init();
 8002a2c:	f000 fd5c 	bl	80034e8 <HAL_Init>
  SystemClock_Config();
 8002a30:	f7ff ff8e 	bl	8002950 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	2214      	movs	r2, #20
 8002a36:	2100      	movs	r1, #0
 8002a38:	a805      	add	r0, sp, #20
 8002a3a:	f002 fe49 	bl	80056d0 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	2102      	movs	r1, #2
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a40:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a44:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	433b      	orrs	r3, r7
 8002a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a4c:	403b      	ands	r3, r7
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a54:	430a      	orrs	r2, r1
 8002a56:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002a58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a60:	3106      	adds	r1, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002a64:	f001 fa4e 	bl	8003f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RGB_DATA_GPIO_Port, RGB_DATA_Pin, GPIO_PIN_RESET);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	0039      	movs	r1, r7
 8002a6c:	48b7      	ldr	r0, [pc, #732]	; (8002d4c <main+0x364>)
 8002a6e:	f001 fa49 	bl	8003f04 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 8002a72:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = JOY_SW_Pin;
 8002a74:	2304      	movs	r3, #4
  HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 8002a76:	a905      	add	r1, sp, #20
 8002a78:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = JOY_SW_Pin;
 8002a7a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f001 f97a 	bl	8003d78 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8002a84:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUZ_Pin;
 8002a86:	2208      	movs	r2, #8
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8002a88:	a905      	add	r1, sp, #20
 8002a8a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUZ_Pin;
 8002a8c:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f001 f970 	bl	8003d78 <HAL_GPIO_Init>
  HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 8002a98:	48ac      	ldr	r0, [pc, #688]	; (8002d4c <main+0x364>)
 8002a9a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RGB_DATA_Pin;
 8002a9c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 8002aa4:	f001 f968 	bl	8003d78 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002aaa:	002a      	movs	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aac:	433b      	orrs	r3, r7
 8002aae:	6323      	str	r3, [r4, #48]	; 0x30
 8002ab0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002ab2:	0029      	movs	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ab4:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002ab6:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002abc:	f000 ff60 	bl	8003980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002ac0:	200a      	movs	r0, #10
 8002ac2:	f000 ff87 	bl	80039d4 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	0029      	movs	r1, r5
 8002aca:	a805      	add	r0, sp, #20
 8002acc:	f002 fe00 	bl	80056d0 <memset>
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8002ad0:	2306      	movs	r3, #6
  hadc.Init.OversamplingMode = DISABLE;
 8002ad2:	4c9f      	ldr	r4, [pc, #636]	; (8002d50 <main+0x368>)
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8002ad4:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ad6:	23c2      	movs	r3, #194	; 0xc2
 8002ad8:	33ff      	adds	r3, #255	; 0xff
 8002ada:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Instance = ADC1;
 8002adc:	4b9d      	ldr	r3, [pc, #628]	; (8002d54 <main+0x36c>)
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ade:	0022      	movs	r2, r4
  hadc.Instance = ADC1;
 8002ae0:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ae2:	2304      	movs	r3, #4
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ae4:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ae6:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode = DISABLE;
 8002ae8:	8425      	strh	r5, [r4, #32]
  hadc.Init.OversamplingMode = DISABLE;
 8002aea:	63e5      	str	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002aec:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002aee:	7015      	strb	r5, [r2, #0]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002af0:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002af2:	6365      	str	r5, [r4, #52]	; 0x34
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002af4:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002af6:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002af8:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002afa:	6127      	str	r7, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002afc:	6163      	str	r3, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002afe:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002b00:	61e5      	str	r5, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002b02:	f000 fd7b 	bl	80035fc <HAL_ADC_Init>
 8002b06:	42a8      	cmp	r0, r5
 8002b08:	d001      	beq.n	8002b0e <main+0x126>
 8002b0a:	b672      	cpsid	i
	while (1) {
 8002b0c:	e7fe      	b.n	8002b0c <main+0x124>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b0e:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b10:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b12:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b14:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_0;
 8002b16:	9705      	str	r7, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b18:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b1a:	f000 fedd 	bl	80038d8 <HAL_ADC_ConfigChannel>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d001      	beq.n	8002b26 <main+0x13e>
 8002b22:	b672      	cpsid	i
	while (1) {
 8002b24:	e7fe      	b.n	8002b24 <main+0x13c>
  sConfig.Channel = ADC_CHANNEL_1;
 8002b26:	4b8c      	ldr	r3, [pc, #560]	; (8002d58 <main+0x370>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b28:	0020      	movs	r0, r4
 8002b2a:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_1;
 8002b2c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b2e:	f000 fed3 	bl	80038d8 <HAL_ADC_ConfigChannel>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d001      	beq.n	8002b3a <main+0x152>
 8002b36:	b672      	cpsid	i
	while (1) {
 8002b38:	e7fe      	b.n	8002b38 <main+0x150>
  hi2c1.Instance = I2C1;
 8002b3a:	4c88      	ldr	r4, [pc, #544]	; (8002d5c <main+0x374>)
 8002b3c:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <main+0x378>)
  hi2c1.Init.OwnAddress1 = 0;
 8002b3e:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8002b40:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00200C28;
 8002b42:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <main+0x37c>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b44:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b46:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b48:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b4a:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b4c:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b4e:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00200C28;
 8002b50:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b52:	60e7      	str	r7, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b54:	f001 fafc 	bl	8004150 <HAL_I2C_Init>
 8002b58:	1e01      	subs	r1, r0, #0
 8002b5a:	d001      	beq.n	8002b60 <main+0x178>
 8002b5c:	b672      	cpsid	i
	while (1) {
 8002b5e:	e7fe      	b.n	8002b5e <main+0x176>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b60:	0020      	movs	r0, r4
 8002b62:	f001 fd13 	bl	800458c <HAL_I2CEx_ConfigAnalogFilter>
 8002b66:	1e01      	subs	r1, r0, #0
 8002b68:	d001      	beq.n	8002b6e <main+0x186>
 8002b6a:	b672      	cpsid	i
	while (1) {
 8002b6c:	e7fe      	b.n	8002b6c <main+0x184>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b6e:	0020      	movs	r0, r4
 8002b70:	f001 fd32 	bl	80045d8 <HAL_I2CEx_ConfigDigitalFilter>
 8002b74:	1e03      	subs	r3, r0, #0
 8002b76:	d001      	beq.n	8002b7c <main+0x194>
 8002b78:	b672      	cpsid	i
	while (1) {
 8002b7a:	e7fe      	b.n	8002b7a <main+0x192>
  hspi1.Instance = SPI1;
 8002b7c:	487a      	ldr	r0, [pc, #488]	; (8002d68 <main+0x380>)
 8002b7e:	4a7b      	ldr	r2, [pc, #492]	; (8002d6c <main+0x384>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b80:	6083      	str	r3, [r0, #8]
  hspi1.Instance = SPI1;
 8002b82:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b84:	2282      	movs	r2, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b86:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b88:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b8a:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b8c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b8e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b90:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b92:	2510      	movs	r5, #16
  hspi1.Init.CRCPolynomial = 7;
 8002b94:	2307      	movs	r3, #7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b96:	0052      	lsls	r2, r2, #1
 8002b98:	6042      	str	r2, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b9a:	32fc      	adds	r2, #252	; 0xfc
 8002b9c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b9e:	61c5      	str	r5, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8002ba0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ba2:	f002 fa35 	bl	8005010 <HAL_SPI_Init>
 8002ba6:	1e04      	subs	r4, r0, #0
 8002ba8:	d001      	beq.n	8002bae <main+0x1c6>
 8002baa:	b672      	cpsid	i
	while (1) {
 8002bac:	e7fe      	b.n	8002bac <main+0x1c4>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bae:	002a      	movs	r2, r5
 8002bb0:	0001      	movs	r1, r0
 8002bb2:	a805      	add	r0, sp, #20
 8002bb4:	f002 fd8c 	bl	80056d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb8:	2208      	movs	r2, #8
 8002bba:	0021      	movs	r1, r4
 8002bbc:	a803      	add	r0, sp, #12
 8002bbe:	f002 fd87 	bl	80056d0 <memset>
  htim2.Instance = TIM2;
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	4d6a      	ldr	r5, [pc, #424]	; (8002d70 <main+0x388>)
 8002bc6:	05db      	lsls	r3, r3, #23
 8002bc8:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 32-1;
 8002bca:	231f      	movs	r3, #31
 8002bcc:	606b      	str	r3, [r5, #4]
  htim2.Init.Period = 1000-1;
 8002bce:	4b69      	ldr	r3, [pc, #420]	; (8002d74 <main+0x38c>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bd0:	0028      	movs	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd2:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 1000-1;
 8002bd4:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd6:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd8:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bda:	f002 fb5f 	bl	800529c <HAL_TIM_Base_Init>
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d001      	beq.n	8002be6 <main+0x1fe>
 8002be2:	b672      	cpsid	i
	while (1) {
 8002be4:	e7fe      	b.n	8002be4 <main+0x1fc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be6:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002be8:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bea:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bec:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bee:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bf0:	f002 fba4 	bl	800533c <HAL_TIM_ConfigClockSource>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d001      	beq.n	8002bfc <main+0x214>
 8002bf8:	b672      	cpsid	i
	while (1) {
 8002bfa:	e7fe      	b.n	8002bfa <main+0x212>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bfc:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfe:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c00:	a903      	add	r1, sp, #12
 8002c02:	0028      	movs	r0, r5
 8002c04:	f002 fcd4 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d001      	beq.n	8002c10 <main+0x228>
 8002c0c:	b672      	cpsid	i
	while (1) {
 8002c0e:	e7fe      	b.n	8002c0e <main+0x226>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	200f      	movs	r0, #15
 8002c14:	0011      	movs	r1, r2
 8002c16:	f000 feb3 	bl	8003980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c1a:	200f      	movs	r0, #15
 8002c1c:	f000 feda 	bl	80039d4 <HAL_NVIC_EnableIRQ>
	SSD1306_Init();
 8002c20:	f000 fa5c 	bl	80030dc <SSD1306_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8002c24:	0028      	movs	r0, r5
 8002c26:	f002 fb5d 	bl	80052e4 <HAL_TIM_Base_Start_IT>
	ptFindName = (String)calloc(0, sizeof(char) * 11);
 8002c2a:	210b      	movs	r1, #11
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f002 fceb 	bl	8005608 <calloc>
	memset(pLog, 0, (size_t)sizeof(pLog));
 8002c32:	229c      	movs	r2, #156	; 0x9c
	ptFindName = (String)calloc(0, sizeof(char) * 11);
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <main+0x390>)
	memset(pLog, 0, (size_t)sizeof(pLog));
 8002c36:	2100      	movs	r1, #0
	ptFindName = (String)calloc(0, sizeof(char) * 11);
 8002c38:	6018      	str	r0, [r3, #0]
	memset(pLog, 0, (size_t)sizeof(pLog));
 8002c3a:	0052      	lsls	r2, r2, #1
 8002c3c:	484f      	ldr	r0, [pc, #316]	; (8002d7c <main+0x394>)
 8002c3e:	f002 fd47 	bl	80056d0 <memset>
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 8002c42:	2104      	movs	r1, #4
	for (uint8_t i = 0; i < 36; i++)
 8002c44:	2400      	movs	r4, #0
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 8002c46:	000d      	movs	r5, r1
 8002c48:	1fa3      	subs	r3, r4, #6
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	002a      	movs	r2, r5
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d906      	bls.n	8002c60 <main+0x278>
 8002c52:	0023      	movs	r3, r4
 8002c54:	3b18      	subs	r3, #24
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d800      	bhi.n	8002c60 <main+0x278>
 8002c5e:	002a      	movs	r2, r5
 8002c60:	0020      	movs	r0, r4
 8002c62:	380c      	subs	r0, #12
 8002c64:	b2c0      	uxtb	r0, r0
 8002c66:	002b      	movs	r3, r5
 8002c68:	2805      	cmp	r0, #5
 8002c6a:	d906      	bls.n	8002c7a <main+0x292>
 8002c6c:	0020      	movs	r0, r4
 8002c6e:	381e      	subs	r0, #30
 8002c70:	b2c0      	uxtb	r0, r0
 8002c72:	2300      	movs	r3, #0
 8002c74:	2805      	cmp	r0, #5
 8002c76:	d800      	bhi.n	8002c7a <main+0x292>
 8002c78:	002b      	movs	r3, r5
 8002c7a:	0020      	movs	r0, r4
 8002c7c:	f7fd fd5c 	bl	8000738 <led_color>
	for (uint8_t i = 0; i < 36; i++)
 8002c80:	1c63      	adds	r3, r4, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b24      	cmp	r3, #36	; 0x24
 8002c86:	d13f      	bne.n	8002d08 <main+0x320>
	led_update();
 8002c88:	f7fd fd62 	bl	8000750 <led_update>
 8002c8c:	241c      	movs	r4, #28
		SSD1306_Fill(0);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f000 f882 	bl	8002d98 <SSD1306_Fill>
		SSD1306_GotoXY(46, 28 + i);
 8002c94:	0021      	movs	r1, r4
 8002c96:	202e      	movs	r0, #46	; 0x2e
 8002c98:	f000 f8b4 	bl	8002e04 <SSD1306_GotoXY>
		SSD1306_Puts("Drawer", &Font_6x8, 0);
 8002c9c:	4d38      	ldr	r5, [pc, #224]	; (8002d80 <main+0x398>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	0029      	movs	r1, r5
 8002ca2:	4838      	ldr	r0, [pc, #224]	; (8002d84 <main+0x39c>)
 8002ca4:	f000 f8ea 	bl	8002e7c <SSD1306_Puts>
		SSD1306_GotoXY(43, 28);
 8002ca8:	211c      	movs	r1, #28
 8002caa:	202b      	movs	r0, #43	; 0x2b
 8002cac:	f000 f8aa 	bl	8002e04 <SSD1306_GotoXY>
	for (uint8_t i = 0; i < 8; i++) {
 8002cb0:	3401      	adds	r4, #1
		SSD1306_Puts(" Parts ", &Font_6x8, 1);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	0029      	movs	r1, r5
 8002cb6:	4834      	ldr	r0, [pc, #208]	; (8002d88 <main+0x3a0>)
 8002cb8:	f000 f8e0 	bl	8002e7c <SSD1306_Puts>
	for (uint8_t i = 0; i < 8; i++) {
 8002cbc:	b2a4      	uxth	r4, r4
		SSD1306_UpdateScreen();
 8002cbe:	f000 f9e3 	bl	8003088 <SSD1306_UpdateScreen>
		HAL_Delay(200);
 8002cc2:	20c8      	movs	r0, #200	; 0xc8
 8002cc4:	f000 fc36 	bl	8003534 <HAL_Delay>
	for (uint8_t i = 0; i < 8; i++) {
 8002cc8:	2c24      	cmp	r4, #36	; 0x24
 8002cca:	d1e0      	bne.n	8002c8e <main+0x2a6>
	HAL_Delay(1000);
 8002ccc:	20fa      	movs	r0, #250	; 0xfa
 8002cce:	0080      	lsls	r0, r0, #2
 8002cd0:	f000 fc30 	bl	8003534 <HAL_Delay>
	memset(pt, 0, (size_t)sizeof(pt));
 8002cd4:	2290      	movs	r2, #144	; 0x90
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	0092      	lsls	r2, r2, #2
 8002cda:	482c      	ldr	r0, [pc, #176]	; (8002d8c <main+0x3a4>)
 8002cdc:	f002 fcf8 	bl	80056d0 <memset>
	SSD1306_Clear();
 8002ce0:	f000 f9f4 	bl	80030cc <SSD1306_Clear>
	led_clear();
 8002ce4:	f7fd fd5e 	bl	80007a4 <led_clear>
	UPDATE;
 8002ce8:	f000 f9ce 	bl	8003088 <SSD1306_UpdateScreen>
 8002cec:	f7fd fd30 	bl	8000750 <led_update>
	firstOn = eepReadData(0);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f000 fab1 	bl	8003258 <eepReadData>
	timeSet(firstOn);
 8002cf6:	f7ff fcfb 	bl	80026f0 <timeSet>
		modeFlag = (*(func->mode + modeFlag))();
 8002cfa:	4c25      	ldr	r4, [pc, #148]	; (8002d90 <main+0x3a8>)
 8002cfc:	7823      	ldrb	r3, [r4, #0]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	599b      	ldr	r3, [r3, r6]
 8002d02:	4798      	blx	r3
 8002d04:	7020      	strb	r0, [r4, #0]
	while (1) {
 8002d06:	e7f8      	b.n	8002cfa <main+0x312>
		led_color(i, i / 6 == 0 || i / 6 == 3 ? 4 : 0, i / 6 == 1 || i / 6 == 4 ? 4 : 0, i / 6 == 2 || i / 6 == 5 ? 4 : 0);
 8002d08:	0029      	movs	r1, r5
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d905      	bls.n	8002d1a <main+0x332>
 8002d0e:	3c11      	subs	r4, #17
 8002d10:	b2e4      	uxtb	r4, r4
 8002d12:	2100      	movs	r1, #0
 8002d14:	2c05      	cmp	r4, #5
 8002d16:	d800      	bhi.n	8002d1a <main+0x332>
 8002d18:	0029      	movs	r1, r5
 8002d1a:	001c      	movs	r4, r3
 8002d1c:	e794      	b.n	8002c48 <main+0x260>
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	08000841 	.word	0x08000841
 8002d24:	08001fd1 	.word	0x08001fd1
 8002d28:	08000a79 	.word	0x08000a79
 8002d2c:	0800107d 	.word	0x0800107d
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08001239 	.word	0x08001239
 8002d38:	080025b9 	.word	0x080025b9
 8002d3c:	08001439 	.word	0x08001439
 8002d40:	080016e5 	.word	0x080016e5
 8002d44:	08000cf5 	.word	0x08000cf5
 8002d48:	08000e6d 	.word	0x08000e6d
 8002d4c:	50000400 	.word	0x50000400
 8002d50:	20000440 	.word	0x20000440
 8002d54:	40012400 	.word	0x40012400
 8002d58:	04000002 	.word	0x04000002
 8002d5c:	200004e4 	.word	0x200004e4
 8002d60:	40005400 	.word	0x40005400
 8002d64:	00200c28 	.word	0x00200c28
 8002d68:	20000530 	.word	0x20000530
 8002d6c:	40013000 	.word	0x40013000
 8002d70:	20000588 	.word	0x20000588
 8002d74:	000003e7 	.word	0x000003e7
 8002d78:	20000950 	.word	0x20000950
 8002d7c:	200005d2 	.word	0x200005d2
 8002d80:	20000000 	.word	0x20000000
 8002d84:	08006c76 	.word	0x08006c76
 8002d88:	08006c7d 	.word	0x08006c7d
 8002d8c:	2000070c 	.word	0x2000070c
 8002d90:	200005d0 	.word	0x200005d0

08002d94 <Error_Handler>:
 8002d94:	b672      	cpsid	i
	while (1) {
 8002d96:	e7fe      	b.n	8002d96 <Error_Handler+0x2>

08002d98 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002d98:	2100      	movs	r1, #0
void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002d9a:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002d9c:	4288      	cmp	r0, r1
 8002d9e:	d000      	beq.n	8002da2 <SSD1306_Fill+0xa>
 8002da0:	31ff      	adds	r1, #255	; 0xff
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <SSD1306_Fill+0x18>)
 8002da6:	00d2      	lsls	r2, r2, #3
 8002da8:	f002 fc92 	bl	80056d0 <memset>
}
 8002dac:	bd10      	pop	{r4, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	20000968 	.word	0x20000968

08002db4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002db4:	b530      	push	{r4, r5, lr}
 8002db6:	0004      	movs	r4, r0
	if (
 8002db8:	287f      	cmp	r0, #127	; 0x7f
 8002dba:	d812      	bhi.n	8002de2 <SSD1306_DrawPixel+0x2e>
			x >= SSD1306_WIDTH ||
 8002dbc:	293f      	cmp	r1, #63	; 0x3f
 8002dbe:	d810      	bhi.n	8002de2 <SSD1306_DrawPixel+0x2e>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <SSD1306_DrawPixel+0x48>)
 8002dc2:	4d0f      	ldr	r5, [pc, #60]	; (8002e00 <SSD1306_DrawPixel+0x4c>)
 8002dc4:	7918      	ldrb	r0, [r3, #4]
 8002dc6:	08cb      	lsrs	r3, r1, #3
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d00b      	beq.n	8002de4 <SSD1306_DrawPixel+0x30>
		color = (SSD1306_COLOR_t)!color;
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	d10b      	bne.n	8002de8 <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002dd0:	01d8      	lsls	r0, r3, #7
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	4019      	ands	r1, r3
 8002dd6:	3b06      	subs	r3, #6
 8002dd8:	408b      	lsls	r3, r1
 8002dda:	1900      	adds	r0, r0, r4
 8002ddc:	5c2a      	ldrb	r2, [r5, r0]
 8002dde:	4313      	orrs	r3, r2
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002de0:	542b      	strb	r3, [r5, r0]
	}
}
 8002de2:	bd30      	pop	{r4, r5, pc}
	if (color == SSD1306_COLOR_WHITE) {
 8002de4:	2a01      	cmp	r2, #1
 8002de6:	d0f3      	beq.n	8002dd0 <SSD1306_DrawPixel+0x1c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002de8:	01d8      	lsls	r0, r3, #7
 8002dea:	2307      	movs	r3, #7
 8002dec:	2201      	movs	r2, #1
 8002dee:	4019      	ands	r1, r3
 8002df0:	408a      	lsls	r2, r1
 8002df2:	1900      	adds	r0, r0, r4
 8002df4:	5c2b      	ldrb	r3, [r5, r0]
 8002df6:	4393      	bics	r3, r2
 8002df8:	e7f2      	b.n	8002de0 <SSD1306_DrawPixel+0x2c>
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	20000962 	.word	0x20000962
 8002e00:	20000968 	.word	0x20000968

08002e04 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002e04:	4b01      	ldr	r3, [pc, #4]	; (8002e0c <SSD1306_GotoXY+0x8>)
 8002e06:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002e08:	8059      	strh	r1, [r3, #2]
}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000962 	.word	0x20000962

08002e10 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e12:	0007      	movs	r7, r0
 8002e14:	000c      	movs	r4, r1
	//		/* Error */
	//		return 0;
	//	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002e16:	2500      	movs	r5, #0
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002e18:	9200      	str	r2, [sp, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 8002e1a:	7863      	ldrb	r3, [r4, #1]
 8002e1c:	42ab      	cmp	r3, r5
 8002e1e:	d806      	bhi.n	8002e2e <SSD1306_Putc+0x1e>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002e20:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <SSD1306_Putc+0x68>)
 8002e22:	7823      	ldrb	r3, [r4, #0]
 8002e24:	8811      	ldrh	r1, [r2, #0]

	/* Return character written */
	return ch;
}
 8002e26:	0038      	movs	r0, r7
	SSD1306.CurrentX += Font->FontWidth;
 8002e28:	185b      	adds	r3, r3, r1
 8002e2a:	8013      	strh	r3, [r2, #0]
}
 8002e2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002e2e:	003a      	movs	r2, r7
		for (j = 0; j < Font->FontWidth; j++) {
 8002e30:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002e32:	3a20      	subs	r2, #32
 8002e34:	4353      	muls	r3, r2
 8002e36:	6862      	ldr	r2, [r4, #4]
 8002e38:	195b      	adds	r3, r3, r5
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	5a9b      	ldrh	r3, [r3, r2]
 8002e3e:	9301      	str	r3, [sp, #4]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <SSD1306_Putc+0x68>)
		for (j = 0; j < Font->FontWidth; j++) {
 8002e42:	7822      	ldrb	r2, [r4, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e44:	8818      	ldrh	r0, [r3, #0]
		for (j = 0; j < Font->FontWidth; j++) {
 8002e46:	42b2      	cmp	r2, r6
 8002e48:	d801      	bhi.n	8002e4e <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002e4a:	3501      	adds	r5, #1
 8002e4c:	e7e5      	b.n	8002e1a <SSD1306_Putc+0xa>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e4e:	8859      	ldrh	r1, [r3, #2]
			if ((b << j) & 0x8000) {
 8002e50:	9b01      	ldr	r3, [sp, #4]
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	40b3      	lsls	r3, r6
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e56:	1980      	adds	r0, r0, r6
 8002e58:	1949      	adds	r1, r1, r5
			if ((b << j) & 0x8000) {
 8002e5a:	0212      	lsls	r2, r2, #8
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e5c:	b280      	uxth	r0, r0
 8002e5e:	b289      	uxth	r1, r1
			if ((b << j) & 0x8000) {
 8002e60:	4213      	tst	r3, r2
 8002e62:	d004      	beq.n	8002e6e <SSD1306_Putc+0x5e>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e64:	9a00      	ldr	r2, [sp, #0]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002e66:	f7ff ffa5 	bl	8002db4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7e8      	b.n	8002e40 <SSD1306_Putc+0x30>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002e6e:	9b00      	ldr	r3, [sp, #0]
 8002e70:	425a      	negs	r2, r3
 8002e72:	415a      	adcs	r2, r3
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	e7f6      	b.n	8002e66 <SSD1306_Putc+0x56>
 8002e78:	20000962 	.word	0x20000962

08002e7c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	0004      	movs	r4, r0
 8002e80:	000d      	movs	r5, r1
 8002e82:	0016      	movs	r6, r2
	/* Write characters */
	while (*str) {
 8002e84:	7820      	ldrb	r0, [r4, #0]
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d100      	bne.n	8002e8c <SSD1306_Puts+0x10>
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
}
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002e8c:	0032      	movs	r2, r6
 8002e8e:	0029      	movs	r1, r5
 8002e90:	f7ff ffbe 	bl	8002e10 <SSD1306_Putc>
 8002e94:	0003      	movs	r3, r0
 8002e96:	7820      	ldrb	r0, [r4, #0]
 8002e98:	4283      	cmp	r3, r0
 8002e9a:	d1f6      	bne.n	8002e8a <SSD1306_Puts+0xe>
		str++;
 8002e9c:	3401      	adds	r4, #1
 8002e9e:	e7f1      	b.n	8002e84 <SSD1306_Puts+0x8>

08002ea0 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	ac0c      	add	r4, sp, #48	; 0x30
 8002ea6:	7824      	ldrb	r4, [r4, #0]
 8002ea8:	9405      	str	r4, [sp, #20]
 8002eaa:	1c04      	adds	r4, r0, #0
 8002eac:	287f      	cmp	r0, #127	; 0x7f
 8002eae:	d900      	bls.n	8002eb2 <SSD1306_DrawLine+0x12>
 8002eb0:	247f      	movs	r4, #127	; 0x7f
 8002eb2:	b2a4      	uxth	r4, r4

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8002eb4:	1c16      	adds	r6, r2, #0
 8002eb6:	2a7f      	cmp	r2, #127	; 0x7f
 8002eb8:	d900      	bls.n	8002ebc <SSD1306_DrawLine+0x1c>
 8002eba:	267f      	movs	r6, #127	; 0x7f
 8002ebc:	b2b6      	uxth	r6, r6
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 8002ebe:	1c0d      	adds	r5, r1, #0
 8002ec0:	293f      	cmp	r1, #63	; 0x3f
 8002ec2:	d900      	bls.n	8002ec6 <SSD1306_DrawLine+0x26>
 8002ec4:	253f      	movs	r5, #63	; 0x3f
 8002ec6:	b2ad      	uxth	r5, r5
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002ec8:	1c1f      	adds	r7, r3, #0
 8002eca:	2b3f      	cmp	r3, #63	; 0x3f
 8002ecc:	d900      	bls.n	8002ed0 <SSD1306_DrawLine+0x30>
 8002ece:	273f      	movs	r7, #63	; 0x3f
 8002ed0:	b2bf      	uxth	r7, r7
		y1 = SSD1306_HEIGHT - 1;
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002ed2:	1b33      	subs	r3, r6, r4
 8002ed4:	42a6      	cmp	r6, r4
 8002ed6:	d800      	bhi.n	8002eda <SSD1306_DrawLine+0x3a>
 8002ed8:	1ba3      	subs	r3, r4, r6
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	9300      	str	r3, [sp, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002ede:	42bd      	cmp	r5, r7
 8002ee0:	d224      	bcs.n	8002f2c <SSD1306_DrawLine+0x8c>
 8002ee2:	1b7b      	subs	r3, r7, r5
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 8002ee8:	2301      	movs	r3, #1
 8002eea:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8002eec:	9304      	str	r3, [sp, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d801      	bhi.n	8002ef6 <SSD1306_DrawLine+0x56>
 8002ef2:	3b02      	subs	r3, #2
 8002ef4:	9303      	str	r3, [sp, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002ef6:	9b00      	ldr	r3, [sp, #0]
 8002ef8:	9a01      	ldr	r2, [sp, #4]
 8002efa:	4293      	cmp	r3, r2
 8002efc:	dd23      	ble.n	8002f46 <SSD1306_DrawLine+0xa6>
 8002efe:	9a00      	ldr	r2, [sp, #0]
 8002f00:	0fdb      	lsrs	r3, r3, #31
 8002f02:	189b      	adds	r3, r3, r2
 8002f04:	105b      	asrs	r3, r3, #1
 8002f06:	9302      	str	r3, [sp, #8]

	if (dx == 0) {
 8002f08:	9b00      	ldr	r3, [sp, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d12b      	bne.n	8002f66 <SSD1306_DrawLine+0xc6>
		if (y1 < y0) {
 8002f0e:	42bd      	cmp	r5, r7
 8002f10:	d902      	bls.n	8002f18 <SSD1306_DrawLine+0x78>
 8002f12:	002b      	movs	r3, r5
 8002f14:	003d      	movs	r5, r7
 8002f16:	001f      	movs	r7, r3
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}

		if (x1 < x0) {
 8002f18:	1c33      	adds	r3, r6, #0
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d900      	bls.n	8002f20 <SSD1306_DrawLine+0x80>
 8002f1e:	1c23      	adds	r3, r4, #0
 8002f20:	b29c      	uxth	r4, r3
			x1 = x0;
			x0 = tmp;
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002f22:	b22d      	sxth	r5, r5
 8002f24:	42bd      	cmp	r5, r7
 8002f26:	dd16      	ble.n	8002f56 <SSD1306_DrawLine+0xb6>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8002f28:	b007      	add	sp, #28
 8002f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002f2c:	1beb      	subs	r3, r5, r7
 8002f2e:	b21b      	sxth	r3, r3
 8002f30:	9301      	str	r3, [sp, #4]
	sx = (x0 < x1) ? 1 : -1; 
 8002f32:	2301      	movs	r3, #1
 8002f34:	42a6      	cmp	r6, r4
 8002f36:	d903      	bls.n	8002f40 <SSD1306_DrawLine+0xa0>
 8002f38:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8002f3a:	3b02      	subs	r3, #2
 8002f3c:	9304      	str	r3, [sp, #16]
 8002f3e:	e7da      	b.n	8002ef6 <SSD1306_DrawLine+0x56>
	sx = (x0 < x1) ? 1 : -1; 
 8002f40:	425b      	negs	r3, r3
 8002f42:	9303      	str	r3, [sp, #12]
 8002f44:	e7fa      	b.n	8002f3c <SSD1306_DrawLine+0x9c>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002f46:	9b01      	ldr	r3, [sp, #4]
 8002f48:	9a01      	ldr	r2, [sp, #4]
 8002f4a:	0fdb      	lsrs	r3, r3, #31
 8002f4c:	189b      	adds	r3, r3, r2
 8002f4e:	105b      	asrs	r3, r3, #1
 8002f50:	425b      	negs	r3, r3
 8002f52:	b21b      	sxth	r3, r3
 8002f54:	e7d7      	b.n	8002f06 <SSD1306_DrawLine+0x66>
			SSD1306_DrawPixel(x0, i, c);
 8002f56:	b2ad      	uxth	r5, r5
 8002f58:	0029      	movs	r1, r5
 8002f5a:	0020      	movs	r0, r4
 8002f5c:	9a05      	ldr	r2, [sp, #20]
 8002f5e:	f7ff ff29 	bl	8002db4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002f62:	3501      	adds	r5, #1
 8002f64:	e7dd      	b.n	8002f22 <SSD1306_DrawLine+0x82>
	if (dy == 0) {
 8002f66:	9b01      	ldr	r3, [sp, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d115      	bne.n	8002f98 <SSD1306_DrawLine+0xf8>
		if (y1 < y0) {
 8002f6c:	1c2b      	adds	r3, r5, #0
 8002f6e:	42bd      	cmp	r5, r7
 8002f70:	d900      	bls.n	8002f74 <SSD1306_DrawLine+0xd4>
 8002f72:	1c3b      	adds	r3, r7, #0
 8002f74:	b29d      	uxth	r5, r3
		if (x1 < x0) {
 8002f76:	42a6      	cmp	r6, r4
 8002f78:	d202      	bcs.n	8002f80 <SSD1306_DrawLine+0xe0>
 8002f7a:	0023      	movs	r3, r4
 8002f7c:	0034      	movs	r4, r6
 8002f7e:	001e      	movs	r6, r3
		for (i = x0; i <= x1; i++) {
 8002f80:	b224      	sxth	r4, r4
 8002f82:	42b4      	cmp	r4, r6
 8002f84:	dcd0      	bgt.n	8002f28 <SSD1306_DrawLine+0x88>
			SSD1306_DrawPixel(i, y0, c);
 8002f86:	b2a4      	uxth	r4, r4
 8002f88:	0020      	movs	r0, r4
 8002f8a:	0029      	movs	r1, r5
 8002f8c:	9a05      	ldr	r2, [sp, #20]
 8002f8e:	f7ff ff11 	bl	8002db4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002f92:	3401      	adds	r4, #1
 8002f94:	e7f4      	b.n	8002f80 <SSD1306_DrawLine+0xe0>
		if (x1 < x0) {
 8002f96:	9302      	str	r3, [sp, #8]
		SSD1306_DrawPixel(x0, y0, c);
 8002f98:	0029      	movs	r1, r5
 8002f9a:	0020      	movs	r0, r4
 8002f9c:	9a05      	ldr	r2, [sp, #20]
 8002f9e:	f7ff ff09 	bl	8002db4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d101      	bne.n	8002faa <SSD1306_DrawLine+0x10a>
 8002fa6:	42bd      	cmp	r5, r7
 8002fa8:	d0be      	beq.n	8002f28 <SSD1306_DrawLine+0x88>
		if (e2 > -dx) {
 8002faa:	9b00      	ldr	r3, [sp, #0]
 8002fac:	425a      	negs	r2, r3
 8002fae:	9b02      	ldr	r3, [sp, #8]
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	dd05      	ble.n	8002fc0 <SSD1306_DrawLine+0x120>
			err -= dy;
 8002fb4:	9a01      	ldr	r2, [sp, #4]
 8002fb6:	1a9b      	subs	r3, r3, r2
			x0 += sx;
 8002fb8:	9a03      	ldr	r2, [sp, #12]
			err -= dy;
 8002fba:	b21b      	sxth	r3, r3
			x0 += sx;
 8002fbc:	18a4      	adds	r4, r4, r2
 8002fbe:	b2a4      	uxth	r4, r4
		if (e2 < dy) {
 8002fc0:	9a02      	ldr	r2, [sp, #8]
 8002fc2:	9901      	ldr	r1, [sp, #4]
 8002fc4:	428a      	cmp	r2, r1
 8002fc6:	dae6      	bge.n	8002f96 <SSD1306_DrawLine+0xf6>
			err += dx;
 8002fc8:	9a00      	ldr	r2, [sp, #0]
 8002fca:	189b      	adds	r3, r3, r2
			y0 += sy;
 8002fcc:	9a04      	ldr	r2, [sp, #16]
			err += dx;
 8002fce:	b21b      	sxth	r3, r3
			y0 += sy;
 8002fd0:	18ad      	adds	r5, r5, r2
 8002fd2:	b2ad      	uxth	r5, r5
 8002fd4:	e7df      	b.n	8002f96 <SSD1306_DrawLine+0xf6>

08002fd6 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	ab0a      	add	r3, sp, #40	; 0x28
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	0005      	movs	r5, r0
 8002fe2:	000f      	movs	r7, r1
 8002fe4:	0014      	movs	r4, r2
 8002fe6:	9303      	str	r3, [sp, #12]
	uint8_t i;

	/* Check input parameters */
	if (
 8002fe8:	287f      	cmp	r0, #127	; 0x7f
 8002fea:	d814      	bhi.n	8003016 <SSD1306_DrawFilledRectangle+0x40>
			x >= SSD1306_WIDTH ||
 8002fec:	293f      	cmp	r1, #63	; 0x3f
 8002fee:	d812      	bhi.n	8003016 <SSD1306_DrawFilledRectangle+0x40>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002ff0:	1883      	adds	r3, r0, r2
 8002ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff4:	dd02      	ble.n	8002ffc <SSD1306_DrawFilledRectangle+0x26>
		w = SSD1306_WIDTH - x;
 8002ff6:	2480      	movs	r4, #128	; 0x80
 8002ff8:	1a24      	subs	r4, r4, r0
 8002ffa:	b2a4      	uxth	r4, r4
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8002ffc:	9b02      	ldr	r3, [sp, #8]
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	2b3f      	cmp	r3, #63	; 0x3f
 8003002:	dd03      	ble.n	800300c <SSD1306_DrawFilledRectangle+0x36>
		h = SSD1306_HEIGHT - y;
 8003004:	2340      	movs	r3, #64	; 0x40
 8003006:	1bdb      	subs	r3, r3, r7
 8003008:	b29b      	uxth	r3, r3
 800300a:	9302      	str	r3, [sp, #8]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800300c:	2600      	movs	r6, #0
 800300e:	9b02      	ldr	r3, [sp, #8]
 8003010:	b2b1      	uxth	r1, r6
 8003012:	429e      	cmp	r6, r3
 8003014:	d901      	bls.n	800301a <SSD1306_DrawFilledRectangle+0x44>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}
 8003016:	b005      	add	sp, #20
 8003018:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 800301a:	9b03      	ldr	r3, [sp, #12]
 800301c:	19c9      	adds	r1, r1, r7
 800301e:	b289      	uxth	r1, r1
 8003020:	1962      	adds	r2, r4, r5
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	0028      	movs	r0, r5
 8003026:	000b      	movs	r3, r1
 8003028:	b292      	uxth	r2, r2
	for (i = 0; i <= h; i++) {
 800302a:	3601      	adds	r6, #1
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 800302c:	f7ff ff38 	bl	8002ea0 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8003030:	b2f6      	uxtb	r6, r6
 8003032:	e7ec      	b.n	800300e <SSD1306_DrawFilledRectangle+0x38>

08003034 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003034:	b570      	push	{r4, r5, r6, lr}
	uint8_t dt[256];
	dt[0] = reg;
	uint8_t i;
	for(i = 0; i < count; i++)
 8003036:	2400      	movs	r4, #0
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003038:	b0c2      	sub	sp, #264	; 0x108
 800303a:	0015      	movs	r5, r2
	dt[0] = reg;
 800303c:	aa02      	add	r2, sp, #8
 800303e:	7011      	strb	r1, [r2, #0]
	for(i = 0; i < count; i++)
 8003040:	429c      	cmp	r4, r3
 8003042:	d309      	bcc.n	8003058 <ssd1306_I2C_WriteMulti+0x24>
		dt[i+1] = data[i];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003044:	b281      	uxth	r1, r0
 8003046:	200a      	movs	r0, #10
 8003048:	3301      	adds	r3, #1
 800304a:	9000      	str	r0, [sp, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <ssd1306_I2C_WriteMulti+0x30>)
 8003050:	f001 f8d4 	bl	80041fc <HAL_I2C_Master_Transmit>
}
 8003054:	b042      	add	sp, #264	; 0x108
 8003056:	bd70      	pop	{r4, r5, r6, pc}
		dt[i+1] = data[i];
 8003058:	5d2e      	ldrb	r6, [r5, r4]
 800305a:	1911      	adds	r1, r2, r4
	for(i = 0; i < count; i++)
 800305c:	3401      	adds	r4, #1
		dt[i+1] = data[i];
 800305e:	704e      	strb	r6, [r1, #1]
	for(i = 0; i < count; i++)
 8003060:	b2e4      	uxtb	r4, r4
 8003062:	e7ed      	b.n	8003040 <ssd1306_I2C_WriteMulti+0xc>
 8003064:	200004e4 	.word	0x200004e4

08003068 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
 800306a:	466b      	mov	r3, sp
 800306c:	7319      	strb	r1, [r3, #12]
	dt[1] = data;
 800306e:	735a      	strb	r2, [r3, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003070:	230a      	movs	r3, #10
 8003072:	0001      	movs	r1, r0
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	aa03      	add	r2, sp, #12
 8003078:	3b08      	subs	r3, #8
 800307a:	4802      	ldr	r0, [pc, #8]	; (8003084 <ssd1306_I2C_Write+0x1c>)
 800307c:	f001 f8be 	bl	80041fc <HAL_I2C_Master_Transmit>
}
 8003080:	b005      	add	sp, #20
 8003082:	bd00      	pop	{pc}
 8003084:	200004e4 	.word	0x200004e4

08003088 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 800308c:	2578      	movs	r5, #120	; 0x78
 800308e:	4e0e      	ldr	r6, [pc, #56]	; (80030c8 <SSD1306_UpdateScreen+0x40>)
 8003090:	0022      	movs	r2, r4
 8003092:	2100      	movs	r1, #0
 8003094:	0028      	movs	r0, r5
 8003096:	f7ff ffe7 	bl	8003068 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800309a:	2200      	movs	r2, #0
 800309c:	0028      	movs	r0, r5
 800309e:	0011      	movs	r1, r2
 80030a0:	f7ff ffe2 	bl	8003068 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 80030a4:	3401      	adds	r4, #1
		SSD1306_WRITECOMMAND(0x10);
 80030a6:	2210      	movs	r2, #16
 80030a8:	2100      	movs	r1, #0
 80030aa:	0028      	movs	r0, r5
 80030ac:	f7ff ffdc 	bl	8003068 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 80030b0:	b2e4      	uxtb	r4, r4
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80030b2:	0032      	movs	r2, r6
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	0028      	movs	r0, r5
 80030ba:	f7ff ffbb 	bl	8003034 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80030be:	3680      	adds	r6, #128	; 0x80
 80030c0:	2cb8      	cmp	r4, #184	; 0xb8
 80030c2:	d1e5      	bne.n	8003090 <SSD1306_UpdateScreen+0x8>
}
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	20000968 	.word	0x20000968

080030cc <SSD1306_Clear>:
{
 80030cc:	b510      	push	{r4, lr}
	SSD1306_Fill (0);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7ff fe62 	bl	8002d98 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80030d4:	f7ff ffd8 	bl	8003088 <SSD1306_UpdateScreen>
}
 80030d8:	bd10      	pop	{r4, pc}
	...

080030dc <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80030dc:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80030de:	2201      	movs	r2, #1
 80030e0:	2178      	movs	r1, #120	; 0x78
 80030e2:	4b52      	ldr	r3, [pc, #328]	; (800322c <SSD1306_Init+0x150>)
 80030e4:	4852      	ldr	r0, [pc, #328]	; (8003230 <SSD1306_Init+0x154>)
 80030e6:	f001 f9ad 	bl	8004444 <HAL_I2C_IsDeviceReady>
		return 0;
 80030ea:	2400      	movs	r4, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80030ec:	42a0      	cmp	r0, r4
 80030ee:	d000      	beq.n	80030f2 <SSD1306_Init+0x16>
 80030f0:	e09a      	b.n	8003228 <SSD1306_Init+0x14c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80030f2:	0021      	movs	r1, r4
 80030f4:	22ae      	movs	r2, #174	; 0xae
 80030f6:	2078      	movs	r0, #120	; 0x78
 80030f8:	f7ff ffb6 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80030fc:	0021      	movs	r1, r4
 80030fe:	2220      	movs	r2, #32
 8003100:	2078      	movs	r0, #120	; 0x78
 8003102:	f7ff ffb1 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003106:	0021      	movs	r1, r4
 8003108:	2210      	movs	r2, #16
 800310a:	2078      	movs	r0, #120	; 0x78
 800310c:	f7ff ffac 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003110:	0021      	movs	r1, r4
 8003112:	22b0      	movs	r2, #176	; 0xb0
 8003114:	2078      	movs	r0, #120	; 0x78
 8003116:	f7ff ffa7 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800311a:	0021      	movs	r1, r4
 800311c:	22c8      	movs	r2, #200	; 0xc8
 800311e:	2078      	movs	r0, #120	; 0x78
 8003120:	f7ff ffa2 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003124:	0022      	movs	r2, r4
 8003126:	0021      	movs	r1, r4
 8003128:	2078      	movs	r0, #120	; 0x78
 800312a:	f7ff ff9d 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800312e:	0021      	movs	r1, r4
 8003130:	2210      	movs	r2, #16
 8003132:	2078      	movs	r0, #120	; 0x78
 8003134:	f7ff ff98 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003138:	0021      	movs	r1, r4
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	2078      	movs	r0, #120	; 0x78
 800313e:	f7ff ff93 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003142:	0021      	movs	r1, r4
 8003144:	2281      	movs	r2, #129	; 0x81
 8003146:	2078      	movs	r0, #120	; 0x78
 8003148:	f7ff ff8e 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800314c:	0021      	movs	r1, r4
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	2078      	movs	r0, #120	; 0x78
 8003152:	f7ff ff89 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003156:	0021      	movs	r1, r4
 8003158:	22a1      	movs	r2, #161	; 0xa1
 800315a:	2078      	movs	r0, #120	; 0x78
 800315c:	f7ff ff84 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003160:	0021      	movs	r1, r4
 8003162:	22a6      	movs	r2, #166	; 0xa6
 8003164:	2078      	movs	r0, #120	; 0x78
 8003166:	f7ff ff7f 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800316a:	0021      	movs	r1, r4
 800316c:	22a8      	movs	r2, #168	; 0xa8
 800316e:	2078      	movs	r0, #120	; 0x78
 8003170:	f7ff ff7a 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003174:	0021      	movs	r1, r4
 8003176:	223f      	movs	r2, #63	; 0x3f
 8003178:	2078      	movs	r0, #120	; 0x78
 800317a:	f7ff ff75 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800317e:	0021      	movs	r1, r4
 8003180:	22a4      	movs	r2, #164	; 0xa4
 8003182:	2078      	movs	r0, #120	; 0x78
 8003184:	f7ff ff70 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003188:	0021      	movs	r1, r4
 800318a:	22d3      	movs	r2, #211	; 0xd3
 800318c:	2078      	movs	r0, #120	; 0x78
 800318e:	f7ff ff6b 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003192:	0022      	movs	r2, r4
 8003194:	0021      	movs	r1, r4
 8003196:	2078      	movs	r0, #120	; 0x78
 8003198:	f7ff ff66 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800319c:	0021      	movs	r1, r4
 800319e:	22d5      	movs	r2, #213	; 0xd5
 80031a0:	2078      	movs	r0, #120	; 0x78
 80031a2:	f7ff ff61 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80031a6:	0021      	movs	r1, r4
 80031a8:	22f0      	movs	r2, #240	; 0xf0
 80031aa:	2078      	movs	r0, #120	; 0x78
 80031ac:	f7ff ff5c 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80031b0:	0021      	movs	r1, r4
 80031b2:	22d9      	movs	r2, #217	; 0xd9
 80031b4:	2078      	movs	r0, #120	; 0x78
 80031b6:	f7ff ff57 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80031ba:	0021      	movs	r1, r4
 80031bc:	2222      	movs	r2, #34	; 0x22
 80031be:	2078      	movs	r0, #120	; 0x78
 80031c0:	f7ff ff52 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80031c4:	0021      	movs	r1, r4
 80031c6:	22da      	movs	r2, #218	; 0xda
 80031c8:	2078      	movs	r0, #120	; 0x78
 80031ca:	f7ff ff4d 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80031ce:	0021      	movs	r1, r4
 80031d0:	2212      	movs	r2, #18
 80031d2:	2078      	movs	r0, #120	; 0x78
 80031d4:	f7ff ff48 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80031d8:	0021      	movs	r1, r4
 80031da:	22db      	movs	r2, #219	; 0xdb
 80031dc:	2078      	movs	r0, #120	; 0x78
 80031de:	f7ff ff43 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80031e2:	0021      	movs	r1, r4
 80031e4:	2220      	movs	r2, #32
 80031e6:	2078      	movs	r0, #120	; 0x78
 80031e8:	f7ff ff3e 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80031ec:	0021      	movs	r1, r4
 80031ee:	228d      	movs	r2, #141	; 0x8d
 80031f0:	2078      	movs	r0, #120	; 0x78
 80031f2:	f7ff ff39 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80031f6:	0021      	movs	r1, r4
 80031f8:	2214      	movs	r2, #20
 80031fa:	2078      	movs	r0, #120	; 0x78
 80031fc:	f7ff ff34 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003200:	0021      	movs	r1, r4
 8003202:	22af      	movs	r2, #175	; 0xaf
 8003204:	2078      	movs	r0, #120	; 0x78
 8003206:	f7ff ff2f 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800320a:	0021      	movs	r1, r4
 800320c:	222e      	movs	r2, #46	; 0x2e
 800320e:	2078      	movs	r0, #120	; 0x78
 8003210:	f7ff ff2a 	bl	8003068 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003214:	0020      	movs	r0, r4
 8003216:	f7ff fdbf 	bl	8002d98 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800321a:	f7ff ff35 	bl	8003088 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <SSD1306_Init+0x158>)
 8003220:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8003222:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 8003224:	3401      	adds	r4, #1
 8003226:	715c      	strb	r4, [r3, #5]
}
 8003228:	0020      	movs	r0, r4
 800322a:	bd10      	pop	{r4, pc}
 800322c:	00004e20 	.word	0x00004e20
 8003230:	200004e4 	.word	0x200004e4
 8003234:	20000962 	.word	0x20000962

08003238 <eepWriteData>:
 */
#include "stm32l0xx_EEPROM.h"
#include "stm32l052xx.h"

void eepWriteData(uint16_t addr, uint8_t inData)
{
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	000d      	movs	r5, r1
 800323c:	0004      	movs	r4, r0
	HAL_FLASHEx_DATAEEPROM_Unlock();
 800323e:	f000 fd4f 	bl	8003ce0 <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE,(DATA_EEPROM_BASE+addr),inData);
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <eepWriteData+0x1c>)
 8003244:	002a      	movs	r2, r5
 8003246:	18e1      	adds	r1, r4, r3
 8003248:	2000      	movs	r0, #0
 800324a:	f000 fd6b 	bl	8003d24 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_FLASHEx_DATAEEPROM_Lock();
 800324e:	f000 fd5f 	bl	8003d10 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	08080000 	.word	0x08080000

08003258 <eepReadData>:
uint8_t eepReadData(uint16_t addr)
{
	//return (*(__IO uint32_t *)(EEP_START_ADRESS+addr));
	return (*(__IO uint8_t*)(DATA_EEPROM_BASE+addr));
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <eepReadData+0xc>)
 800325a:	18c0      	adds	r0, r0, r3
 800325c:	7800      	ldrb	r0, [r0, #0]
 800325e:	b2c0      	uxtb	r0, r0
}
 8003260:	4770      	bx	lr
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	08080000 	.word	0x08080000

08003268 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003268:	2201      	movs	r2, #1
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_MspInit+0x18>)
 800326c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800326e:	430a      	orrs	r2, r1
 8003270:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003276:	0552      	lsls	r2, r2, #21
 8003278:	430a      	orrs	r2, r1
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800327c:	4770      	bx	lr
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	40021000 	.word	0x40021000

08003284 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003284:	b510      	push	{r4, lr}
 8003286:	0004      	movs	r4, r0
 8003288:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328a:	2214      	movs	r2, #20
 800328c:	2100      	movs	r1, #0
 800328e:	a801      	add	r0, sp, #4
 8003290:	f002 fa1e 	bl	80056d0 <memset>
  if(hadc->Instance==ADC1)
 8003294:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_ADC_MspInit+0x48>)
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d115      	bne.n	80032c8 <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <HAL_ADC_MspInit+0x4c>)
 80032a0:	0092      	lsls	r2, r2, #2
 80032a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032a6:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a8:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032aa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ae:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b0:	430a      	orrs	r2, r1
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	400b      	ands	r3, r1
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 80032bc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 80032c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032c2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c4:	f000 fd58 	bl	8003d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032c8:	b006      	add	sp, #24
 80032ca:	bd10      	pop	{r4, pc}
 80032cc:	40012400 	.word	0x40012400
 80032d0:	40021000 	.word	0x40021000

080032d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032d4:	b510      	push	{r4, lr}
 80032d6:	0004      	movs	r4, r0
 80032d8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032da:	2214      	movs	r2, #20
 80032dc:	2100      	movs	r1, #0
 80032de:	a801      	add	r0, sp, #4
 80032e0:	f002 f9f6 	bl	80056d0 <memset>
  if(hi2c->Instance==I2C1)
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_I2C_MspInit+0x50>)
 80032e6:	6822      	ldr	r2, [r4, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d119      	bne.n	8003320 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ec:	2102      	movs	r1, #2
 80032ee:	4c0e      	ldr	r4, [pc, #56]	; (8003328 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f0:	480e      	ldr	r0, [pc, #56]	; (800332c <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032f4:	430a      	orrs	r2, r1
 80032f6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80032f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80032fa:	400b      	ands	r3, r1
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003300:	23c0      	movs	r3, #192	; 0xc0
 8003302:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003304:	3bae      	subs	r3, #174	; 0xae
 8003306:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003308:	3b0f      	subs	r3, #15
 800330a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800330e:	3b02      	subs	r3, #2
 8003310:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003312:	f000 fd31 	bl	8003d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800331a:	039b      	lsls	r3, r3, #14
 800331c:	4313      	orrs	r3, r2
 800331e:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003320:	b006      	add	sp, #24
 8003322:	bd10      	pop	{r4, pc}
 8003324:	40005400 	.word	0x40005400
 8003328:	40021000 	.word	0x40021000
 800332c:	50000400 	.word	0x50000400

08003330 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	0005      	movs	r5, r0
 8003334:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003336:	2214      	movs	r2, #20
 8003338:	2100      	movs	r1, #0
 800333a:	a801      	add	r0, sp, #4
 800333c:	f002 f9c8 	bl	80056d0 <memset>
  if(hspi->Instance==SPI1)
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_SPI_MspInit+0x7c>)
 8003342:	682a      	ldr	r2, [r5, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d12f      	bne.n	80033a8 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003348:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2601      	movs	r6, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_SPI_MspInit+0x80>)
 800334e:	0152      	lsls	r2, r2, #5
 8003350:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003352:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003354:	430a      	orrs	r2, r1
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335c:	4332      	orrs	r2, r6
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003364:	4033      	ands	r3, r6
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800336a:	23a0      	movs	r3, #160	; 0xa0
 800336c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	3b9e      	subs	r3, #158	; 0x9e
 8003370:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003372:	199b      	adds	r3, r3, r6
 8003374:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003376:	f000 fcff 	bl	8003d78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800337a:	4c0e      	ldr	r4, [pc, #56]	; (80033b4 <HAL_SPI_MspInit+0x84>)
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <HAL_SPI_MspInit+0x88>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800337e:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003380:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003382:	2310      	movs	r3, #16
 8003384:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003386:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003388:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800338a:	6066      	str	r6, [r4, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800338c:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800338e:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003390:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003392:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003394:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003396:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003398:	f000 fb42 	bl	8003a20 <HAL_DMA_Init>
 800339c:	2800      	cmp	r0, #0
 800339e:	d001      	beq.n	80033a4 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 80033a0:	f7ff fcf8 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80033a4:	64ac      	str	r4, [r5, #72]	; 0x48
 80033a6:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033a8:	b006      	add	sp, #24
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	40013000 	.word	0x40013000
 80033b0:	40021000 	.word	0x40021000
 80033b4:	2000049c 	.word	0x2000049c
 80033b8:	40020030 	.word	0x40020030

080033bc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	6802      	ldr	r2, [r0, #0]
 80033c0:	05db      	lsls	r3, r3, #23
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d104      	bne.n	80033d0 <HAL_TIM_Base_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033c6:	2301      	movs	r3, #1
 80033c8:	4a02      	ldr	r2, [pc, #8]	; (80033d4 <HAL_TIM_Base_MspInit+0x18>)
 80033ca:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033d0:	4770      	bx	lr
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	40021000 	.word	0x40021000

080033d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <NMI_Handler>

080033da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033da:	e7fe      	b.n	80033da <HardFault_Handler>

080033dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033dc:	4770      	bx	lr

080033de <PendSV_Handler>:
 80033de:	4770      	bx	lr

080033e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e2:	f000 f895 	bl	8003510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e6:	bd10      	pop	{r4, pc}

080033e8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80033e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033ea:	4802      	ldr	r0, [pc, #8]	; (80033f4 <DMA1_Channel2_3_IRQHandler+0xc>)
 80033ec:	f000 fb9c 	bl	8003b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	2000049c 	.word	0x2000049c

080033f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033fa:	4802      	ldr	r0, [pc, #8]	; (8003404 <TIM2_IRQHandler+0xc>)
 80033fc:	f002 f850 	bl	80054a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003400:	bd10      	pop	{r4, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	20000588 	.word	0x20000588

08003408 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003408:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <_sbrk+0x30>)
 800340a:	490c      	ldr	r1, [pc, #48]	; (800343c <_sbrk+0x34>)
{
 800340c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800340e:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003410:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <_sbrk+0x38>)
{
 8003412:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003414:	6810      	ldr	r0, [r2, #0]
 8003416:	2800      	cmp	r0, #0
 8003418:	d101      	bne.n	800341e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800341a:	480a      	ldr	r0, [pc, #40]	; (8003444 <_sbrk+0x3c>)
 800341c:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800341e:	6810      	ldr	r0, [r2, #0]
 8003420:	18c3      	adds	r3, r0, r3
 8003422:	428b      	cmp	r3, r1
 8003424:	d906      	bls.n	8003434 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8003426:	f002 f8f9 	bl	800561c <__errno>
 800342a:	230c      	movs	r3, #12
 800342c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800342e:	2001      	movs	r0, #1
 8003430:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003432:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003434:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8003436:	e7fc      	b.n	8003432 <_sbrk+0x2a>
 8003438:	00000400 	.word	0x00000400
 800343c:	20002000 	.word	0x20002000
 8003440:	20000d68 	.word	0x20000d68
 8003444:	20000d98 	.word	0x20000d98

08003448 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003448:	4770      	bx	lr
	...

0800344c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800344c:	480d      	ldr	r0, [pc, #52]	; (8003484 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800344e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003450:	480d      	ldr	r0, [pc, #52]	; (8003488 <LoopForever+0x6>)
  ldr r1, =_edata
 8003452:	490e      	ldr	r1, [pc, #56]	; (800348c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003454:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <LoopForever+0xe>)
  movs r3, #0
 8003456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003458:	e002      	b.n	8003460 <LoopCopyDataInit>

0800345a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800345a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800345c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800345e:	3304      	adds	r3, #4

08003460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003464:	d3f9      	bcc.n	800345a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003466:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003468:	4c0b      	ldr	r4, [pc, #44]	; (8003498 <LoopForever+0x16>)
  movs r3, #0
 800346a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800346c:	e001      	b.n	8003472 <LoopFillZerobss>

0800346e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800346e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003470:	3204      	adds	r2, #4

08003472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003474:	d3fb      	bcc.n	800346e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003476:	f7ff ffe7 	bl	8003448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800347a:	f002 f8d5 	bl	8005628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800347e:	f7ff fab3 	bl	80029e8 <main>

08003482 <LoopForever>:

LoopForever:
    b LoopForever
 8003482:	e7fe      	b.n	8003482 <LoopForever>
   ldr   r0, =_estack
 8003484:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800348c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003490:	08006d60 	.word	0x08006d60
  ldr r2, =_sbss
 8003494:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003498:	20000d98 	.word	0x20000d98

0800349c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800349c:	e7fe      	b.n	800349c <ADC1_COMP_IRQHandler>
	...

080034a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034a4:	20fa      	movs	r0, #250	; 0xfa
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_InitTick+0x3c>)
 80034a8:	0080      	lsls	r0, r0, #2
 80034aa:	7819      	ldrb	r1, [r3, #0]
 80034ac:	f7fc fe4a 	bl	8000144 <__udivsi3>
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_InitTick+0x40>)
 80034b2:	0001      	movs	r1, r0
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	f7fc fe45 	bl	8000144 <__udivsi3>
 80034ba:	f000 fa97 	bl	80039ec <HAL_SYSTICK_Config>
 80034be:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80034c0:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034c2:	2c00      	cmp	r4, #0
 80034c4:	d109      	bne.n	80034da <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c6:	2d03      	cmp	r5, #3
 80034c8:	d807      	bhi.n	80034da <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ca:	3802      	subs	r0, #2
 80034cc:	0022      	movs	r2, r4
 80034ce:	0029      	movs	r1, r5
 80034d0:	f000 fa56 	bl	8003980 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034d4:	0020      	movs	r0, r4
 80034d6:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_InitTick+0x44>)
 80034d8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	20000020 	.word	0x20000020
 80034e0:	2000001c 	.word	0x2000001c
 80034e4:	20000024 	.word	0x20000024

080034e8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80034e8:	2340      	movs	r3, #64	; 0x40
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <HAL_Init+0x24>)
{
 80034ec:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80034ee:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034f0:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034f6:	f7ff ffd3 	bl	80034a0 <HAL_InitTick>
 80034fa:	1e04      	subs	r4, r0, #0
 80034fc:	d103      	bne.n	8003506 <HAL_Init+0x1e>
    HAL_MspInit();
 80034fe:	f7ff feb3 	bl	8003268 <HAL_MspInit>
}
 8003502:	0020      	movs	r0, r4
 8003504:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003506:	2401      	movs	r4, #1
 8003508:	e7fb      	b.n	8003502 <HAL_Init+0x1a>
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	40022000 	.word	0x40022000

08003510 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003510:	4a03      	ldr	r2, [pc, #12]	; (8003520 <HAL_IncTick+0x10>)
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <HAL_IncTick+0x14>)
 8003514:	6811      	ldr	r1, [r2, #0]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	185b      	adds	r3, r3, r1
 800351a:	6013      	str	r3, [r2, #0]
}
 800351c:	4770      	bx	lr
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	20000d6c 	.word	0x20000d6c
 8003524:	20000020 	.word	0x20000020

08003528 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003528:	4b01      	ldr	r3, [pc, #4]	; (8003530 <HAL_GetTick+0x8>)
 800352a:	6818      	ldr	r0, [r3, #0]
}
 800352c:	4770      	bx	lr
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	20000d6c 	.word	0x20000d6c

08003534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff fff6 	bl	8003528 <HAL_GetTick>
 800353c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800353e:	1c63      	adds	r3, r4, #1
 8003540:	d002      	beq.n	8003548 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <HAL_Delay+0x20>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003548:	f7ff ffee 	bl	8003528 <HAL_GetTick>
 800354c:	1b40      	subs	r0, r0, r5
 800354e:	42a0      	cmp	r0, r4
 8003550:	d3fa      	bcc.n	8003548 <HAL_Delay+0x14>
  {
  }
}
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	20000020 	.word	0x20000020

08003558 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <ADC_DelayMicroSecond+0x24>)
{
 800355a:	b513      	push	{r0, r1, r4, lr}
 800355c:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <ADC_DelayMicroSecond+0x28>)
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	f7fc fdef 	bl	8000144 <__udivsi3>
 8003566:	4344      	muls	r4, r0
 8003568:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d100      	bne.n	8003572 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8003570:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8003572:	9b01      	ldr	r3, [sp, #4]
 8003574:	3b01      	subs	r3, #1
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	e7f7      	b.n	800356a <ADC_DelayMicroSecond+0x12>
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	2000001c 	.word	0x2000001c
 8003580:	000f4240 	.word	0x000f4240

08003584 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003584:	2103      	movs	r1, #3
 8003586:	6803      	ldr	r3, [r0, #0]
{
 8003588:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800358a:	689a      	ldr	r2, [r3, #8]
{
 800358c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800358e:	400a      	ands	r2, r1
 8003590:	2a01      	cmp	r2, #1
 8003592:	d104      	bne.n	800359e <ADC_Enable+0x1a>
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	4211      	tst	r1, r2
 8003598:	d001      	beq.n	800359e <ADC_Enable+0x1a>
  return HAL_OK;
 800359a:	2000      	movs	r0, #0
}
 800359c:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <ADC_Enable+0x74>)
 80035a2:	4211      	tst	r1, r2
 80035a4:	d008      	beq.n	80035b8 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a6:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80035ac:	4313      	orrs	r3, r2
 80035ae:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035b2:	4303      	orrs	r3, r0
 80035b4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80035b6:	e7f1      	b.n	800359c <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 80035b8:	2501      	movs	r5, #1
 80035ba:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80035bc:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80035be:	432a      	orrs	r2, r5
 80035c0:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80035c2:	f7ff ffc9 	bl	8003558 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80035c6:	f7ff ffaf 	bl	8003528 <HAL_GetTick>
 80035ca:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	422b      	tst	r3, r5
 80035d2:	d1e2      	bne.n	800359a <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035d4:	f7ff ffa8 	bl	8003528 <HAL_GetTick>
 80035d8:	1b80      	subs	r0, r0, r6
 80035da:	280a      	cmp	r0, #10
 80035dc:	d9f6      	bls.n	80035cc <ADC_Enable+0x48>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	422b      	tst	r3, r5
 80035e4:	d1f2      	bne.n	80035cc <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e6:	2310      	movs	r3, #16
 80035e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 80035ea:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ec:	4313      	orrs	r3, r2
 80035ee:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035f2:	431d      	orrs	r5, r3
 80035f4:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 80035f6:	e7d1      	b.n	800359c <ADC_Enable+0x18>
 80035f8:	80000017 	.word	0x80000017

080035fc <HAL_ADC_Init>:
{
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003600:	2001      	movs	r0, #1
  if(hadc == NULL)
 8003602:	2c00      	cmp	r4, #0
 8003604:	d01b      	beq.n	800363e <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003606:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003608:	2b00      	cmp	r3, #0
 800360a:	d106      	bne.n	800361a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800360c:	0022      	movs	r2, r4
 800360e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8003610:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8003612:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003614:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8003616:	f7ff fe35 	bl	8003284 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800361a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800361c:	06db      	lsls	r3, r3, #27
 800361e:	d406      	bmi.n	800362e <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	2204      	movs	r2, #4
 8003624:	6899      	ldr	r1, [r3, #8]
 8003626:	0008      	movs	r0, r1
 8003628:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800362a:	4211      	tst	r1, r2
 800362c:	d008      	beq.n	8003640 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362e:	2310      	movs	r3, #16
 8003630:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8003632:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003634:	4313      	orrs	r3, r2
 8003636:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003638:	2300      	movs	r3, #0
 800363a:	3450      	adds	r4, #80	; 0x50
 800363c:	7023      	strb	r3, [r4, #0]
}
 800363e:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8003640:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003642:	4955      	ldr	r1, [pc, #340]	; (8003798 <HAL_ADC_Init+0x19c>)
 8003644:	4011      	ands	r1, r2
 8003646:	2202      	movs	r2, #2
 8003648:	430a      	orrs	r2, r1
 800364a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 800364c:	2203      	movs	r2, #3
 800364e:	6899      	ldr	r1, [r3, #8]
 8003650:	4011      	ands	r1, r2
 8003652:	4a52      	ldr	r2, [pc, #328]	; (800379c <HAL_ADC_Init+0x1a0>)
 8003654:	2901      	cmp	r1, #1
 8003656:	d102      	bne.n	800365e <HAL_ADC_Init+0x62>
 8003658:	681d      	ldr	r5, [r3, #0]
 800365a:	420d      	tst	r5, r1
 800365c:	d119      	bne.n	8003692 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800365e:	2680      	movs	r6, #128	; 0x80
 8003660:	6861      	ldr	r1, [r4, #4]
 8003662:	05f6      	lsls	r6, r6, #23
 8003664:	004d      	lsls	r5, r1, #1
 8003666:	086d      	lsrs	r5, r5, #1
 8003668:	42b5      	cmp	r5, r6
 800366a:	d003      	beq.n	8003674 <HAL_ADC_Init+0x78>
 800366c:	2580      	movs	r5, #128	; 0x80
 800366e:	062d      	lsls	r5, r5, #24
 8003670:	42a9      	cmp	r1, r5
 8003672:	d176      	bne.n	8003762 <HAL_ADC_Init+0x166>
 8003674:	691d      	ldr	r5, [r3, #16]
 8003676:	00ad      	lsls	r5, r5, #2
 8003678:	08ad      	lsrs	r5, r5, #2
 800367a:	611d      	str	r5, [r3, #16]
 800367c:	691d      	ldr	r5, [r3, #16]
 800367e:	4329      	orrs	r1, r5
 8003680:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003682:	2518      	movs	r5, #24
 8003684:	68d9      	ldr	r1, [r3, #12]
 8003686:	43a9      	bics	r1, r5
 8003688:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800368a:	68d9      	ldr	r1, [r3, #12]
 800368c:	68a5      	ldr	r5, [r4, #8]
 800368e:	4329      	orrs	r1, r5
 8003690:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003692:	6811      	ldr	r1, [r2, #0]
 8003694:	4d42      	ldr	r5, [pc, #264]	; (80037a0 <HAL_ADC_Init+0x1a4>)
 8003696:	4029      	ands	r1, r5
 8003698:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800369a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800369c:	6815      	ldr	r5, [r2, #0]
 800369e:	0649      	lsls	r1, r1, #25
 80036a0:	4329      	orrs	r1, r5
 80036a2:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	0552      	lsls	r2, r2, #21
 80036aa:	4211      	tst	r1, r2
 80036ac:	d102      	bne.n	80036b4 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80036ae:	6899      	ldr	r1, [r3, #8]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	493b      	ldr	r1, [pc, #236]	; (80037a4 <HAL_ADC_Init+0x1a8>)
 80036b8:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80036ba:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80036bc:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036be:	68dd      	ldr	r5, [r3, #12]
 80036c0:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80036c2:	2902      	cmp	r1, #2
 80036c4:	d100      	bne.n	80036c8 <HAL_ADC_Init+0xcc>
 80036c6:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036c8:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036ca:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036cc:	4332      	orrs	r2, r6
 80036ce:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80036d0:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036d2:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80036d4:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036d6:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80036d8:	69e5      	ldr	r5, [r4, #28]
 80036da:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036dc:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036de:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036e0:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80036e2:	0025      	movs	r5, r4
 80036e4:	352c      	adds	r5, #44	; 0x2c
 80036e6:	782d      	ldrb	r5, [r5, #0]
 80036e8:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036ea:	432a      	orrs	r2, r5
 80036ec:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ee:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036f0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036f4:	30ff      	adds	r0, #255	; 0xff
 80036f6:	4282      	cmp	r2, r0
 80036f8:	d004      	beq.n	8003704 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80036fa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80036fc:	68d8      	ldr	r0, [r3, #12]
 80036fe:	432a      	orrs	r2, r5
 8003700:	4302      	orrs	r2, r0
 8003702:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003704:	1ca2      	adds	r2, r4, #2
 8003706:	7fd2      	ldrb	r2, [r2, #31]
 8003708:	2a01      	cmp	r2, #1
 800370a:	d106      	bne.n	800371a <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800370c:	2900      	cmp	r1, #0
 800370e:	d134      	bne.n	800377a <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	68d9      	ldr	r1, [r3, #12]
 8003714:	0252      	lsls	r2, r2, #9
 8003716:	430a      	orrs	r2, r1
 8003718:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800371a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800371c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800371e:	2901      	cmp	r1, #1
 8003720:	d133      	bne.n	800378a <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003722:	4821      	ldr	r0, [pc, #132]	; (80037a8 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003724:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003726:	4002      	ands	r2, r0
 8003728:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800372a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800372c:	6918      	ldr	r0, [r3, #16]
 800372e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8003730:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003732:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003734:	4302      	orrs	r2, r0
 8003736:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	4311      	orrs	r1, r2
 800373c:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800373e:	2107      	movs	r1, #7
 8003740:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8003742:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003744:	438a      	bics	r2, r1
 8003746:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800374c:	430a      	orrs	r2, r1
 800374e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8003750:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8003752:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8003754:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003756:	4393      	bics	r3, r2
 8003758:	001a      	movs	r2, r3
 800375a:	2301      	movs	r3, #1
 800375c:	4313      	orrs	r3, r2
 800375e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8003760:	e76d      	b.n	800363e <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003762:	691d      	ldr	r5, [r3, #16]
 8003764:	4e11      	ldr	r6, [pc, #68]	; (80037ac <HAL_ADC_Init+0x1b0>)
 8003766:	00ad      	lsls	r5, r5, #2
 8003768:	08ad      	lsrs	r5, r5, #2
 800376a:	611d      	str	r5, [r3, #16]
 800376c:	6815      	ldr	r5, [r2, #0]
 800376e:	4035      	ands	r5, r6
 8003770:	6015      	str	r5, [r2, #0]
 8003772:	6815      	ldr	r5, [r2, #0]
 8003774:	4329      	orrs	r1, r5
 8003776:	6011      	str	r1, [r2, #0]
 8003778:	e783      	b.n	8003682 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377a:	2120      	movs	r1, #32
 800377c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800377e:	4301      	orrs	r1, r0
 8003780:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003782:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003784:	430a      	orrs	r2, r1
 8003786:	65a2      	str	r2, [r4, #88]	; 0x58
 8003788:	e7c7      	b.n	800371a <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800378a:	2101      	movs	r1, #1
 800378c:	420a      	tst	r2, r1
 800378e:	d0d6      	beq.n	800373e <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	438a      	bics	r2, r1
 8003794:	611a      	str	r2, [r3, #16]
 8003796:	e7d2      	b.n	800373e <HAL_ADC_Init+0x142>
 8003798:	fffffefd 	.word	0xfffffefd
 800379c:	40012708 	.word	0x40012708
 80037a0:	fdffffff 	.word	0xfdffffff
 80037a4:	fffe0219 	.word	0xfffe0219
 80037a8:	fffffc03 	.word	0xfffffc03
 80037ac:	ffc3ffff 	.word	0xffc3ffff

080037b0 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037b0:	6803      	ldr	r3, [r0, #0]
{
 80037b2:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037b4:	689b      	ldr	r3, [r3, #8]
{
 80037b6:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80037b8:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037ba:	075b      	lsls	r3, r3, #29
 80037bc:	d41a      	bmi.n	80037f4 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80037be:	0025      	movs	r5, r4
 80037c0:	3550      	adds	r5, #80	; 0x50
 80037c2:	782b      	ldrb	r3, [r5, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d015      	beq.n	80037f4 <HAL_ADC_Start+0x44>
 80037c8:	2301      	movs	r3, #1
 80037ca:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037cc:	69e3      	ldr	r3, [r4, #28]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d111      	bne.n	80037f6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80037d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037d4:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80037d6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80037d8:	401a      	ands	r2, r3
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037e0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80037e2:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80037e4:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80037e6:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	3a18      	subs	r2, #24
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80037f6:	0020      	movs	r0, r4
 80037f8:	f7ff fec4 	bl	8003584 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d0e8      	beq.n	80037d2 <HAL_ADC_Start+0x22>
 8003800:	e7f8      	b.n	80037f4 <HAL_ADC_Start+0x44>
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	fffff0fe 	.word	0xfffff0fe

08003808 <HAL_ADC_PollForConversion>:
{
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800380a:	6945      	ldr	r5, [r0, #20]
{
 800380c:	0004      	movs	r4, r0
 800380e:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003810:	2d08      	cmp	r5, #8
 8003812:	d00d      	beq.n	8003830 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003814:	6803      	ldr	r3, [r0, #0]
 8003816:	2001      	movs	r0, #1
 8003818:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800381a:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800381c:	4203      	tst	r3, r0
 800381e:	d007      	beq.n	8003830 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003820:	2320      	movs	r3, #32
 8003822:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003824:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003826:	4313      	orrs	r3, r2
 8003828:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800382a:	2300      	movs	r3, #0
 800382c:	7023      	strb	r3, [r4, #0]
}
 800382e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003830:	f7ff fe7a 	bl	8003528 <HAL_GetTick>
 8003834:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4215      	tst	r5, r2
 800383c:	d024      	beq.n	8003888 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003842:	0092      	lsls	r2, r2, #2
 8003844:	430a      	orrs	r2, r1
 8003846:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003848:	22c0      	movs	r2, #192	; 0xc0
 800384a:	68d9      	ldr	r1, [r3, #12]
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	4211      	tst	r1, r2
 8003850:	d113      	bne.n	800387a <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003852:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003854:	7fd2      	ldrb	r2, [r2, #31]
 8003856:	2a00      	cmp	r2, #0
 8003858:	d10f      	bne.n	800387a <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	0712      	lsls	r2, r2, #28
 800385e:	d50c      	bpl.n	800387a <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	0752      	lsls	r2, r2, #29
 8003864:	d428      	bmi.n	80038b8 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003866:	210c      	movs	r1, #12
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	438a      	bics	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800386e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003870:	4916      	ldr	r1, [pc, #88]	; (80038cc <HAL_ADC_PollForConversion+0xc4>)
 8003872:	4011      	ands	r1, r2
 8003874:	2201      	movs	r2, #1
 8003876:	430a      	orrs	r2, r1
 8003878:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 800387a:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800387c:	69a2      	ldr	r2, [r4, #24]
 800387e:	4282      	cmp	r2, r0
 8003880:	d1d5      	bne.n	800382e <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003882:	220c      	movs	r2, #12
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e7d2      	b.n	800382e <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8003888:	1c72      	adds	r2, r6, #1
 800388a:	d0d5      	beq.n	8003838 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800388c:	2e00      	cmp	r6, #0
 800388e:	d10d      	bne.n	80038ac <HAL_ADC_PollForConversion+0xa4>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003890:	002a      	movs	r2, r5
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	401a      	ands	r2, r3
 8003898:	421d      	tst	r5, r3
 800389a:	d1cc      	bne.n	8003836 <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800389c:	2304      	movs	r3, #4
 800389e:	6d61      	ldr	r1, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 80038a0:	3450      	adds	r4, #80	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038a2:	430b      	orrs	r3, r1
 80038a4:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 80038a6:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80038a8:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 80038aa:	e7c0      	b.n	800382e <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80038ac:	f7ff fe3c 	bl	8003528 <HAL_GetTick>
 80038b0:	1bc0      	subs	r0, r0, r7
 80038b2:	42b0      	cmp	r0, r6
 80038b4:	d8ec      	bhi.n	8003890 <HAL_ADC_PollForConversion+0x88>
 80038b6:	e7be      	b.n	8003836 <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b8:	2220      	movs	r2, #32
 80038ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80038bc:	430a      	orrs	r2, r1
 80038be:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c0:	2201      	movs	r2, #1
 80038c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038c4:	430a      	orrs	r2, r1
 80038c6:	65a2      	str	r2, [r4, #88]	; 0x58
 80038c8:	e7d7      	b.n	800387a <HAL_ADC_PollForConversion+0x72>
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	fffffefe 	.word	0xfffffefe

080038d0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80038d0:	6803      	ldr	r3, [r0, #0]
 80038d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80038d4:	4770      	bx	lr
	...

080038d8 <HAL_ADC_ConfigChannel>:
{
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80038da:	0004      	movs	r4, r0
 80038dc:	3450      	adds	r4, #80	; 0x50
 80038de:	7822      	ldrb	r2, [r4, #0]
{
 80038e0:	0003      	movs	r3, r0
 80038e2:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80038e4:	2002      	movs	r0, #2
 80038e6:	2a01      	cmp	r2, #1
 80038e8:	d00b      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x2a>
 80038ea:	3801      	subs	r0, #1
 80038ec:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	6891      	ldr	r1, [r2, #8]
 80038f2:	0749      	lsls	r1, r1, #29
 80038f4:	d506      	bpl.n	8003904 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f6:	2220      	movs	r2, #32
 80038f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038fa:	430a      	orrs	r2, r1
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80038fe:	2300      	movs	r3, #0
 8003900:	7023      	strb	r3, [r4, #0]
}
 8003902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003904:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003906:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8003908:	4e19      	ldr	r6, [pc, #100]	; (8003970 <HAL_ADC_ConfigChannel+0x98>)
 800390a:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800390c:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800390e:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003910:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003912:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 8003914:	42b7      	cmp	r7, r6
 8003916:	d019      	beq.n	800394c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003918:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800391a:	4301      	orrs	r1, r0
 800391c:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	4a13      	ldr	r2, [pc, #76]	; (8003974 <HAL_ADC_ConfigChannel+0x9c>)
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800392a:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800392c:	430b      	orrs	r3, r1
 800392e:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003930:	f7ff fe12 	bl	8003558 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	039b      	lsls	r3, r3, #14
 8003938:	d505      	bpl.n	8003946 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <HAL_ADC_ConfigChannel+0x9c>)
 800393e:	03db      	lsls	r3, r3, #15
 8003940:	6811      	ldr	r1, [r2, #0]
 8003942:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003944:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003946:	2000      	movs	r0, #0
 8003948:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800394a:	e7da      	b.n	8003902 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800394c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800394e:	438d      	bics	r5, r1
 8003950:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <HAL_ADC_ConfigChannel+0x9c>)
 8003958:	4907      	ldr	r1, [pc, #28]	; (8003978 <HAL_ADC_ConfigChannel+0xa0>)
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	400b      	ands	r3, r1
 800395e:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003960:	0383      	lsls	r3, r0, #14
 8003962:	d5f0      	bpl.n	8003946 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003964:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_ADC_ConfigChannel+0x9c>)
 8003966:	4905      	ldr	r1, [pc, #20]	; (800397c <HAL_ADC_ConfigChannel+0xa4>)
 8003968:	6813      	ldr	r3, [r2, #0]
 800396a:	400b      	ands	r3, r1
 800396c:	e7ea      	b.n	8003944 <HAL_ADC_ConfigChannel+0x6c>
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	00001001 	.word	0x00001001
 8003974:	40012708 	.word	0x40012708
 8003978:	ff7fffff 	.word	0xff7fffff
 800397c:	ffbfffff 	.word	0xffbfffff

08003980 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003980:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003982:	25ff      	movs	r5, #255	; 0xff
 8003984:	2403      	movs	r4, #3
 8003986:	002a      	movs	r2, r5
 8003988:	4004      	ands	r4, r0
 800398a:	00e4      	lsls	r4, r4, #3
 800398c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800398e:	0189      	lsls	r1, r1, #6
 8003990:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003992:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003994:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003996:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003998:	2800      	cmp	r0, #0
 800399a:	db0a      	blt.n	80039b2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800399c:	24c0      	movs	r4, #192	; 0xc0
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_NVIC_SetPriority+0x4c>)
 80039a0:	0880      	lsrs	r0, r0, #2
 80039a2:	0080      	lsls	r0, r0, #2
 80039a4:	18c0      	adds	r0, r0, r3
 80039a6:	00a4      	lsls	r4, r4, #2
 80039a8:	5903      	ldr	r3, [r0, r4]
 80039aa:	401a      	ands	r2, r3
 80039ac:	4311      	orrs	r1, r2
 80039ae:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80039b0:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039b2:	200f      	movs	r0, #15
 80039b4:	4003      	ands	r3, r0
 80039b6:	3b08      	subs	r3, #8
 80039b8:	4805      	ldr	r0, [pc, #20]	; (80039d0 <HAL_NVIC_SetPriority+0x50>)
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	181b      	adds	r3, r3, r0
 80039c0:	69d8      	ldr	r0, [r3, #28]
 80039c2:	4002      	ands	r2, r0
 80039c4:	4311      	orrs	r1, r2
 80039c6:	61d9      	str	r1, [r3, #28]
 80039c8:	e7f2      	b.n	80039b0 <HAL_NVIC_SetPriority+0x30>
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80039d4:	2800      	cmp	r0, #0
 80039d6:	db05      	blt.n	80039e4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d8:	231f      	movs	r3, #31
 80039da:	4018      	ands	r0, r3
 80039dc:	3b1e      	subs	r3, #30
 80039de:	4083      	lsls	r3, r0
 80039e0:	4a01      	ldr	r2, [pc, #4]	; (80039e8 <HAL_NVIC_EnableIRQ+0x14>)
 80039e2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80039e4:	4770      	bx	lr
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	e000e100 	.word	0xe000e100

080039ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	1e43      	subs	r3, r0, #1
 80039f0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80039f2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d20d      	bcs.n	8003a14 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039f8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039fa:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039fc:	4807      	ldr	r0, [pc, #28]	; (8003a1c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039fe:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a00:	6a03      	ldr	r3, [r0, #32]
 8003a02:	0609      	lsls	r1, r1, #24
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a0c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a10:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a12:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003a14:	4770      	bx	lr
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	e000e010 	.word	0xe000e010
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003a24:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003a26:	2c00      	cmp	r4, #0
 8003a28:	d035      	beq.n	8003a96 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a2a:	6825      	ldr	r5, [r4, #0]
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_DMA_Init+0x78>)
 8003a2e:	2114      	movs	r1, #20
 8003a30:	18e8      	adds	r0, r5, r3
 8003a32:	f7fc fb87 	bl	8000144 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a38:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003a3a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a40:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a42:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a44:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a48:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a4a:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003a4c:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8003a50:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a52:	433b      	orrs	r3, r7
 8003a54:	6967      	ldr	r7, [r4, #20]
 8003a56:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a58:	69a7      	ldr	r7, [r4, #24]
 8003a5a:	433b      	orrs	r3, r7
 8003a5c:	69e7      	ldr	r7, [r4, #28]
 8003a5e:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	6a27      	ldr	r7, [r4, #32]
 8003a62:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003a64:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a66:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	4299      	cmp	r1, r3
 8003a6e:	d00c      	beq.n	8003a8a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a70:	251c      	movs	r5, #28
 8003a72:	4028      	ands	r0, r5
 8003a74:	3d0d      	subs	r5, #13
 8003a76:	4085      	lsls	r5, r0
 8003a78:	490a      	ldr	r1, [pc, #40]	; (8003aa4 <HAL_DMA_Init+0x84>)
 8003a7a:	680b      	ldr	r3, [r1, #0]
 8003a7c:	43ab      	bics	r3, r5
 8003a7e:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	680d      	ldr	r5, [r1, #0]
 8003a84:	4083      	lsls	r3, r0
 8003a86:	432b      	orrs	r3, r5
 8003a88:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a8c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a90:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003a92:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003a94:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a98:	bffdfff8 	.word	0xbffdfff8
 8003a9c:	40020000 	.word	0x40020000
 8003aa0:	ffff800f 	.word	0xffff800f
 8003aa4:	400200a8 	.word	0x400200a8

08003aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aaa:	1d45      	adds	r5, r0, #5
{
 8003aac:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8003aae:	7feb      	ldrb	r3, [r5, #31]
{
 8003ab0:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003ab2:	2002      	movs	r0, #2
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d029      	beq.n	8003b0c <HAL_DMA_Start_IT+0x64>
 8003ab8:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8003aba:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8003abc:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	469c      	mov	ip, r3
 8003ac4:	4660      	mov	r0, ip
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2801      	cmp	r0, #1
 8003aca:	d12a      	bne.n	8003b22 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003acc:	3001      	adds	r0, #1
 8003ace:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ad0:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad2:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ad4:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003ad6:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ad8:	361c      	adds	r6, #28
 8003ada:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8003adc:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ade:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8003ae0:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ae2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003ae4:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ae6:	9b01      	ldr	r3, [sp, #4]
 8003ae8:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aea:	68a3      	ldr	r3, [r4, #8]
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d10e      	bne.n	8003b0e <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003af0:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003af2:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003af4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003afa:	230e      	movs	r3, #14
 8003afc:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003afe:	4313      	orrs	r3, r2
 8003b00:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8003b02:	2301      	movs	r3, #1
 8003b04:	6802      	ldr	r2, [r0, #0]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2000      	movs	r0, #0
}
 8003b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003b0e:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003b10:	60c2      	str	r2, [r0, #12]
 8003b12:	e7ef      	b.n	8003af4 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b14:	2204      	movs	r2, #4
 8003b16:	6803      	ldr	r3, [r0, #0]
 8003b18:	4393      	bics	r3, r2
 8003b1a:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b1c:	6802      	ldr	r2, [r0, #0]
 8003b1e:	230a      	movs	r3, #10
 8003b20:	e7ed      	b.n	8003afe <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8003b22:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8003b24:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8003b26:	e7f1      	b.n	8003b0c <HAL_DMA_Start_IT+0x64>

08003b28 <HAL_DMA_IRQHandler>:
{
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b2a:	221c      	movs	r2, #28
 8003b2c:	2704      	movs	r7, #4
 8003b2e:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b30:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b32:	4032      	ands	r2, r6
 8003b34:	003e      	movs	r6, r7
 8003b36:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b38:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003b3a:	6803      	ldr	r3, [r0, #0]
 8003b3c:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b3e:	4235      	tst	r5, r6
 8003b40:	d00d      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x36>
 8003b42:	423c      	tst	r4, r7
 8003b44:	d00b      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	0692      	lsls	r2, r2, #26
 8003b4a:	d402      	bmi.n	8003b52 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	43ba      	bics	r2, r7
 8003b50:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003b52:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003b54:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d019      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003b5a:	4798      	blx	r3
  return;
 8003b5c:	e017      	b.n	8003b8e <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b5e:	2702      	movs	r7, #2
 8003b60:	003e      	movs	r6, r7
 8003b62:	4096      	lsls	r6, r2
 8003b64:	4235      	tst	r5, r6
 8003b66:	d013      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x68>
 8003b68:	423c      	tst	r4, r7
 8003b6a:	d011      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	0692      	lsls	r2, r2, #26
 8003b70:	d406      	bmi.n	8003b80 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b72:	240a      	movs	r4, #10
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	43a2      	bics	r2, r4
 8003b78:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	1d83      	adds	r3, r0, #6
 8003b7e:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003b80:	2200      	movs	r2, #0
 8003b82:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b84:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003b86:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003b88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d1e5      	bne.n	8003b5a <HAL_DMA_IRQHandler+0x32>
}
 8003b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003b90:	2608      	movs	r6, #8
 8003b92:	0037      	movs	r7, r6
 8003b94:	4097      	lsls	r7, r2
 8003b96:	423d      	tst	r5, r7
 8003b98:	d0f9      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x66>
 8003b9a:	4234      	tst	r4, r6
 8003b9c:	d0f7      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9e:	250e      	movs	r5, #14
 8003ba0:	681c      	ldr	r4, [r3, #0]
 8003ba2:	43ac      	bics	r4, r5
 8003ba4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	001c      	movs	r4, r3
 8003baa:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003bac:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bae:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bb0:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	1d43      	adds	r3, r0, #5
 8003bb8:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003bba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bbc:	e7e5      	b.n	8003b8a <HAL_DMA_IRQHandler+0x62>
	...

08003bc0 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003bc0:	4a28      	ldr	r2, [pc, #160]	; (8003c64 <FLASH_SetErrorCode+0xa4>)
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	6990      	ldr	r0, [r2, #24]
 8003bc6:	0049      	lsls	r1, r1, #1
 8003bc8:	0003      	movs	r3, r0
{
 8003bca:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003bcc:	400b      	ands	r3, r1
 8003bce:	4208      	tst	r0, r1
 8003bd0:	d005      	beq.n	8003bde <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	4824      	ldr	r0, [pc, #144]	; (8003c68 <FLASH_SetErrorCode+0xa8>)
 8003bd6:	6944      	ldr	r4, [r0, #20]
 8003bd8:	4323      	orrs	r3, r4
 8003bda:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003bdc:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003bde:	2080      	movs	r0, #128	; 0x80
 8003be0:	6991      	ldr	r1, [r2, #24]
 8003be2:	0080      	lsls	r0, r0, #2
 8003be4:	4201      	tst	r1, r0
 8003be6:	d005      	beq.n	8003bf4 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003be8:	2101      	movs	r1, #1
 8003bea:	4c1f      	ldr	r4, [pc, #124]	; (8003c68 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8003bec:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003bee:	6965      	ldr	r5, [r4, #20]
 8003bf0:	4329      	orrs	r1, r5
 8003bf2:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003bf4:	2080      	movs	r0, #128	; 0x80
 8003bf6:	6991      	ldr	r1, [r2, #24]
 8003bf8:	00c0      	lsls	r0, r0, #3
 8003bfa:	4201      	tst	r1, r0
 8003bfc:	d005      	beq.n	8003c0a <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003bfe:	2108      	movs	r1, #8
 8003c00:	4c19      	ldr	r4, [pc, #100]	; (8003c68 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8003c02:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003c04:	6965      	ldr	r5, [r4, #20]
 8003c06:	4329      	orrs	r1, r5
 8003c08:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003c0a:	2080      	movs	r0, #128	; 0x80
 8003c0c:	6991      	ldr	r1, [r2, #24]
 8003c0e:	0100      	lsls	r0, r0, #4
 8003c10:	4201      	tst	r1, r0
 8003c12:	d005      	beq.n	8003c20 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003c14:	2104      	movs	r1, #4
 8003c16:	4c14      	ldr	r4, [pc, #80]	; (8003c68 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8003c18:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003c1a:	6965      	ldr	r5, [r4, #20]
 8003c1c:	4329      	orrs	r1, r5
 8003c1e:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8003c20:	2080      	movs	r0, #128	; 0x80
 8003c22:	6991      	ldr	r1, [r2, #24]
 8003c24:	0180      	lsls	r0, r0, #6
 8003c26:	4201      	tst	r1, r0
 8003c28:	d005      	beq.n	8003c36 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003c2a:	2110      	movs	r1, #16
 8003c2c:	4c0e      	ldr	r4, [pc, #56]	; (8003c68 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 8003c2e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003c30:	6965      	ldr	r5, [r4, #20]
 8003c32:	4329      	orrs	r1, r5
 8003c34:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003c36:	6991      	ldr	r1, [r2, #24]
 8003c38:	0389      	lsls	r1, r1, #14
 8003c3a:	d505      	bpl.n	8003c48 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003c3c:	2020      	movs	r0, #32
 8003c3e:	4c0a      	ldr	r4, [pc, #40]	; (8003c68 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003c40:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003c42:	6961      	ldr	r1, [r4, #20]
 8003c44:	4301      	orrs	r1, r0
 8003c46:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003c48:	2080      	movs	r0, #128	; 0x80
 8003c4a:	6991      	ldr	r1, [r2, #24]
 8003c4c:	0240      	lsls	r0, r0, #9
 8003c4e:	4201      	tst	r1, r0
 8003c50:	d005      	beq.n	8003c5e <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8003c52:	2140      	movs	r1, #64	; 0x40
 8003c54:	4c04      	ldr	r4, [pc, #16]	; (8003c68 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8003c56:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8003c58:	6965      	ldr	r5, [r4, #20]
 8003c5a:	4329      	orrs	r1, r5
 8003c5c:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003c5e:	6193      	str	r3, [r2, #24]
}  
 8003c60:	bd30      	pop	{r4, r5, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	40022000 	.word	0x40022000
 8003c68:	20000d70 	.word	0x20000d70

08003c6c <FLASH_WaitForLastOperation>:
{
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003c70:	f7ff fc5a 	bl	8003528 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003c74:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8003c76:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003c78:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <FLASH_WaitForLastOperation+0x70>)
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	4232      	tst	r2, r6
 8003c7e:	d121      	bne.n	8003cc4 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003c80:	2202      	movs	r2, #2
 8003c82:	6999      	ldr	r1, [r3, #24]
 8003c84:	4211      	tst	r1, r2
 8003c86:	d000      	beq.n	8003c8a <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c88:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	05d2      	lsls	r2, r2, #23
 8003c8e:	d415      	bmi.n	8003cbc <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003c90:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003c92:	0592      	lsls	r2, r2, #22
 8003c94:	d412      	bmi.n	8003cbc <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003c96:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003c98:	0552      	lsls	r2, r2, #21
 8003c9a:	d40f      	bmi.n	8003cbc <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003c9c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003c9e:	0512      	lsls	r2, r2, #20
 8003ca0:	d40c      	bmi.n	8003cbc <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003ca2:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003ca4:	0492      	lsls	r2, r2, #18
 8003ca6:	d409      	bmi.n	8003cbc <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	0008      	movs	r0, r1
 8003cae:	0292      	lsls	r2, r2, #10
 8003cb0:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003cb2:	4211      	tst	r1, r2
 8003cb4:	d102      	bne.n	8003cbc <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003cb6:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003cb8:	03db      	lsls	r3, r3, #15
 8003cba:	d508      	bpl.n	8003cce <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8003cbc:	f7ff ff80 	bl	8003bc0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	e004      	b.n	8003cce <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8003cc4:	1c62      	adds	r2, r4, #1
 8003cc6:	d0d8      	beq.n	8003c7a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cc8:	2c00      	cmp	r4, #0
 8003cca:	d101      	bne.n	8003cd0 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 8003ccc:	2003      	movs	r0, #3
}
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cd0:	f7ff fc2a 	bl	8003528 <HAL_GetTick>
 8003cd4:	1b40      	subs	r0, r0, r5
 8003cd6:	42a0      	cmp	r0, r4
 8003cd8:	d9ce      	bls.n	8003c78 <FLASH_WaitForLastOperation+0xc>
 8003cda:	e7f7      	b.n	8003ccc <FLASH_WaitForLastOperation+0x60>
 8003cdc:	40022000 	.word	0x40022000

08003ce0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8003ce4:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	4211      	tst	r1, r2
 8003cea:	d00a      	beq.n	8003d02 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf0:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 8003cf2:	4805      	ldr	r0, [pc, #20]	; (8003d08 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003cf4:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003cf6:	4805      	ldr	r0, [pc, #20]	; (8003d0c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003cf8:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003cfe:	6858      	ldr	r0, [r3, #4]
 8003d00:	4010      	ands	r0, r2
}
 8003d02:	4770      	bx	lr
 8003d04:	40022000 	.word	0x40022000
 8003d08:	89abcdef 	.word	0x89abcdef
 8003d0c:	02030405 	.word	0x02030405

08003d10 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003d10:	2301      	movs	r3, #1
 8003d12:	4a03      	ldr	r2, [pc, #12]	; (8003d20 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8003d14:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003d16:	6851      	ldr	r1, [r2, #4]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6053      	str	r3, [r2, #4]
}
 8003d1c:	4770      	bx	lr
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	40022000 	.word	0x40022000

08003d24 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d26:	4f12      	ldr	r7, [pc, #72]	; (8003d70 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 8003d28:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8003d2a:	7c3b      	ldrb	r3, [r7, #16]
{
 8003d2c:	000d      	movs	r5, r1
 8003d2e:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 8003d30:	2002      	movs	r0, #2
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d00c      	beq.n	8003d50 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8003d36:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d38:	480e      	ldr	r0, [pc, #56]	; (8003d74 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 8003d3a:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d3c:	f7ff ff96 	bl	8003c6c <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d103      	bne.n	8003d4c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d44:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003d46:	2e02      	cmp	r6, #2
 8003d48:	d103      	bne.n	8003d52 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8003d4a:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	743b      	strb	r3, [r7, #16]

  return status;
}
 8003d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8003d52:	2e01      	cmp	r6, #1
 8003d54:	d102      	bne.n	8003d5c <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8003d56:	b2a4      	uxth	r4, r4
 8003d58:	802c      	strh	r4, [r5, #0]
 8003d5a:	e7f7      	b.n	8003d4c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003d5c:	2e00      	cmp	r6, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d60:	4804      	ldr	r0, [pc, #16]	; (8003d74 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8003d62:	f7ff ff83 	bl	8003c6c <FLASH_WaitForLastOperation>
 8003d66:	e7f1      	b.n	8003d4c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8003d68:	b2e4      	uxtb	r4, r4
 8003d6a:	702c      	strb	r4, [r5, #0]
 8003d6c:	e7ee      	b.n	8003d4c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	20000d70 	.word	0x20000d70
 8003d74:	0000c350 	.word	0x0000c350

08003d78 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d78:	4a58      	ldr	r2, [pc, #352]	; (8003edc <HAL_GPIO_Init+0x164>)
{
 8003d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d7c:	1882      	adds	r2, r0, r2
 8003d7e:	1e54      	subs	r4, r2, #1
 8003d80:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003d82:	2300      	movs	r3, #0
{
 8003d84:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d86:	3205      	adds	r2, #5
{
 8003d88:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d8a:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d8c:	9a03      	ldr	r2, [sp, #12]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	0014      	movs	r4, r2
 8003d92:	40dc      	lsrs	r4, r3
 8003d94:	d101      	bne.n	8003d9a <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003d96:	b007      	add	sp, #28
 8003d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	000d      	movs	r5, r1
 8003d9e:	0014      	movs	r4, r2
 8003da0:	409d      	lsls	r5, r3
 8003da2:	402c      	ands	r4, r5
 8003da4:	468c      	mov	ip, r1
 8003da6:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8003da8:	422a      	tst	r2, r5
 8003daa:	d100      	bne.n	8003dae <HAL_GPIO_Init+0x36>
 8003dac:	e094      	b.n	8003ed8 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dae:	2403      	movs	r4, #3
 8003db0:	9a03      	ldr	r2, [sp, #12]
 8003db2:	005e      	lsls	r6, r3, #1
 8003db4:	6852      	ldr	r2, [r2, #4]
 8003db6:	9201      	str	r2, [sp, #4]
 8003db8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003dba:	40b4      	lsls	r4, r6
 8003dbc:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dbe:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003dc0:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dc2:	4564      	cmp	r4, ip
 8003dc4:	d82a      	bhi.n	8003e1c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8003dc6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003dc8:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dca:	9903      	ldr	r1, [sp, #12]
 8003dcc:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dce:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dd0:	40b4      	lsls	r4, r6
 8003dd2:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8003dd4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003dd6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd8:	43ac      	bics	r4, r5
 8003dda:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ddc:	090c      	lsrs	r4, r1, #4
 8003dde:	4661      	mov	r1, ip
 8003de0:	400c      	ands	r4, r1
 8003de2:	409c      	lsls	r4, r3
 8003de4:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003de6:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003de8:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dea:	9904      	ldr	r1, [sp, #16]
 8003dec:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dee:	9903      	ldr	r1, [sp, #12]
 8003df0:	688c      	ldr	r4, [r1, #8]
 8003df2:	40b4      	lsls	r4, r6
 8003df4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003df6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df8:	2a02      	cmp	r2, #2
 8003dfa:	d111      	bne.n	8003e20 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003dfc:	2507      	movs	r5, #7
 8003dfe:	210f      	movs	r1, #15
 8003e00:	401d      	ands	r5, r3
 8003e02:	00ad      	lsls	r5, r5, #2
 8003e04:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8003e06:	08dc      	lsrs	r4, r3, #3
 8003e08:	00a4      	lsls	r4, r4, #2
 8003e0a:	1904      	adds	r4, r0, r4
 8003e0c:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003e0e:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003e10:	9903      	ldr	r1, [sp, #12]
 8003e12:	6909      	ldr	r1, [r1, #16]
 8003e14:	40a9      	lsls	r1, r5
 8003e16:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003e18:	6227      	str	r7, [r4, #32]
 8003e1a:	e001      	b.n	8003e20 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e1c:	2a03      	cmp	r2, #3
 8003e1e:	d1e3      	bne.n	8003de8 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e20:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8003e22:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e24:	9904      	ldr	r1, [sp, #16]
 8003e26:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e28:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8003e2a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e2c:	22c0      	movs	r2, #192	; 0xc0
 8003e2e:	9901      	ldr	r1, [sp, #4]
 8003e30:	0292      	lsls	r2, r2, #10
 8003e32:	4211      	tst	r1, r2
 8003e34:	d050      	beq.n	8003ed8 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	2701      	movs	r7, #1
 8003e38:	4c29      	ldr	r4, [pc, #164]	; (8003ee0 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e3a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e3e:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e40:	433a      	orrs	r2, r7
 8003e42:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e44:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <HAL_GPIO_Init+0x16c>)
 8003e46:	089c      	lsrs	r4, r3, #2
 8003e48:	00a4      	lsls	r4, r4, #2
 8003e4a:	18a4      	adds	r4, r4, r2
 8003e4c:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e4e:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e50:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e52:	220f      	movs	r2, #15
 8003e54:	00ad      	lsls	r5, r5, #2
 8003e56:	40aa      	lsls	r2, r5
 8003e58:	4661      	mov	r1, ip
 8003e5a:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e5c:	22a0      	movs	r2, #160	; 0xa0
 8003e5e:	05d2      	lsls	r2, r2, #23
 8003e60:	4694      	mov	ip, r2
 8003e62:	2200      	movs	r2, #0
 8003e64:	4560      	cmp	r0, ip
 8003e66:	d00d      	beq.n	8003e84 <HAL_GPIO_Init+0x10c>
 8003e68:	4a1f      	ldr	r2, [pc, #124]	; (8003ee8 <HAL_GPIO_Init+0x170>)
 8003e6a:	4694      	mov	ip, r2
 8003e6c:	003a      	movs	r2, r7
 8003e6e:	4560      	cmp	r0, ip
 8003e70:	d008      	beq.n	8003e84 <HAL_GPIO_Init+0x10c>
 8003e72:	4f1e      	ldr	r7, [pc, #120]	; (8003eec <HAL_GPIO_Init+0x174>)
 8003e74:	1892      	adds	r2, r2, r2
 8003e76:	42b8      	cmp	r0, r7
 8003e78:	d004      	beq.n	8003e84 <HAL_GPIO_Init+0x10c>
 8003e7a:	4f1d      	ldr	r7, [pc, #116]	; (8003ef0 <HAL_GPIO_Init+0x178>)
 8003e7c:	0032      	movs	r2, r6
 8003e7e:	42b8      	cmp	r0, r7
 8003e80:	d000      	beq.n	8003e84 <HAL_GPIO_Init+0x10c>
 8003e82:	9a05      	ldr	r2, [sp, #20]
 8003e84:	40aa      	lsls	r2, r5
 8003e86:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003e88:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e8a:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8003e8c:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 8003e8e:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8003e90:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 8003e92:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e94:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003e96:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e98:	03c9      	lsls	r1, r1, #15
 8003e9a:	d401      	bmi.n	8003ea0 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8003e9c:	0035      	movs	r5, r6
 8003e9e:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8003ea0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003ea2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003ea4:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ea6:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003ea8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eaa:	0389      	lsls	r1, r1, #14
 8003eac:	d401      	bmi.n	8003eb2 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8003eae:	0035      	movs	r5, r6
 8003eb0:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003eb2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003eb4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003eb6:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eb8:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003eba:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ebc:	02c9      	lsls	r1, r1, #11
 8003ebe:	d401      	bmi.n	8003ec4 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8003ec0:	0035      	movs	r5, r6
 8003ec2:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003ec4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003ec6:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003ec8:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eca:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003ecc:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ece:	0289      	lsls	r1, r1, #10
 8003ed0:	d401      	bmi.n	8003ed6 <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 8003ed2:	4025      	ands	r5, r4
 8003ed4:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003ed6:	60d6      	str	r6, [r2, #12]
    position++;
 8003ed8:	3301      	adds	r3, #1
 8003eda:	e757      	b.n	8003d8c <HAL_GPIO_Init+0x14>
 8003edc:	afffe400 	.word	0xafffe400
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	50000400 	.word	0x50000400
 8003eec:	50000800 	.word	0x50000800
 8003ef0:	50000c00 	.word	0x50000c00
 8003ef4:	40010400 	.word	0x40010400

08003ef8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ef8:	6900      	ldr	r0, [r0, #16]
 8003efa:	4008      	ands	r0, r1
 8003efc:	1e43      	subs	r3, r0, #1
 8003efe:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003f00:	b2c0      	uxtb	r0, r0
}
 8003f02:	4770      	bx	lr

08003f04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f04:	2a00      	cmp	r2, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f08:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003f0a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003f0c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003f0e:	e7fc      	b.n	8003f0a <HAL_GPIO_WritePin+0x6>

08003f10 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f10:	6803      	ldr	r3, [r0, #0]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	0792      	lsls	r2, r2, #30
 8003f16:	d501      	bpl.n	8003f1c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f18:	2200      	movs	r2, #0
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	6999      	ldr	r1, [r3, #24]
 8003f20:	4211      	tst	r1, r2
 8003f22:	d102      	bne.n	8003f2a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f24:	6999      	ldr	r1, [r3, #24]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	619a      	str	r2, [r3, #24]
  }
}
 8003f2a:	4770      	bx	lr

08003f2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f2c:	b530      	push	{r4, r5, lr}
 8003f2e:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003f30:	0412      	lsls	r2, r2, #16
 8003f32:	6800      	ldr	r0, [r0, #0]
 8003f34:	4322      	orrs	r2, r4
 8003f36:	431a      	orrs	r2, r3
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <I2C_TransferConfig+0x24>)
 8003f3a:	6845      	ldr	r5, [r0, #4]
 8003f3c:	0589      	lsls	r1, r1, #22
 8003f3e:	0d64      	lsrs	r4, r4, #21
 8003f40:	0d89      	lsrs	r1, r1, #22
 8003f42:	431c      	orrs	r4, r3
 8003f44:	43a5      	bics	r5, r4
 8003f46:	430a      	orrs	r2, r1
 8003f48:	432a      	orrs	r2, r5
 8003f4a:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003f4c:	bd30      	pop	{r4, r5, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	03ff63ff 	.word	0x03ff63ff

08003f54 <I2C_IsAcknowledgeFailed>:
{
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f56:	6803      	ldr	r3, [r0, #0]
{
 8003f58:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f5a:	699a      	ldr	r2, [r3, #24]
{
 8003f5c:	0004      	movs	r4, r0
 8003f5e:	000d      	movs	r5, r1
  return HAL_OK;
 8003f60:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f62:	06d2      	lsls	r2, r2, #27
 8003f64:	d536      	bpl.n	8003fd4 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	0192      	lsls	r2, r2, #6
 8003f6a:	d404      	bmi.n	8003f76 <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	01d2      	lsls	r2, r2, #7
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f76:	2720      	movs	r7, #32
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	423a      	tst	r2, r7
 8003f7e:	d012      	beq.n	8003fa6 <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f80:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8003f82:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f86:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003f88:	f7ff ffc2 	bl	8003f10 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	4912      	ldr	r1, [pc, #72]	; (8003fd8 <I2C_IsAcknowledgeFailed+0x84>)
 8003f90:	6853      	ldr	r3, [r2, #4]
 8003f92:	400b      	ands	r3, r1
 8003f94:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f96:	2304      	movs	r3, #4
 8003f98:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	0023      	movs	r3, r4
 8003fa0:	3341      	adds	r3, #65	; 0x41
 8003fa2:	701f      	strb	r7, [r3, #0]
 8003fa4:	e00f      	b.n	8003fc6 <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 8003fa6:	1c6a      	adds	r2, r5, #1
 8003fa8:	d0e7      	beq.n	8003f7a <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7ff fabd 	bl	8003528 <HAL_GetTick>
 8003fae:	1b80      	subs	r0, r0, r6
 8003fb0:	4285      	cmp	r5, r0
 8003fb2:	d301      	bcc.n	8003fb8 <I2C_IsAcknowledgeFailed+0x64>
 8003fb4:	2d00      	cmp	r5, #0
 8003fb6:	d1df      	bne.n	8003f78 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	2220      	movs	r2, #32
 8003fba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	0023      	movs	r3, r4
 8003fc2:	3341      	adds	r3, #65	; 0x41
 8003fc4:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	0022      	movs	r2, r4
 8003fc8:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003fca:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fcc:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8003fce:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd0:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003fd2:	7023      	strb	r3, [r4, #0]
}
 8003fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	fe00e800 	.word	0xfe00e800

08003fdc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	0004      	movs	r4, r0
 8003fe0:	000d      	movs	r5, r1
 8003fe2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fe4:	2702      	movs	r7, #2
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	423b      	tst	r3, r7
 8003fec:	d001      	beq.n	8003ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003fee:	2000      	movs	r0, #0
}
 8003ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	0032      	movs	r2, r6
 8003ff4:	0029      	movs	r1, r5
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	f7ff ffac 	bl	8003f54 <I2C_IsAcknowledgeFailed>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d115      	bne.n	800402c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004000:	1c6b      	adds	r3, r5, #1
 8004002:	d0f0      	beq.n	8003fe6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7ff fa90 	bl	8003528 <HAL_GetTick>
 8004008:	1b80      	subs	r0, r0, r6
 800400a:	42a8      	cmp	r0, r5
 800400c:	d801      	bhi.n	8004012 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800400e:	2d00      	cmp	r5, #0
 8004010:	d1e9      	bne.n	8003fe6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004012:	2220      	movs	r2, #32
 8004014:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004016:	4313      	orrs	r3, r2
 8004018:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800401a:	0023      	movs	r3, r4
 800401c:	3341      	adds	r3, #65	; 0x41
 800401e:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	0022      	movs	r2, r4
 8004022:	2300      	movs	r3, #0
 8004024:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8004026:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800402a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800402c:	2001      	movs	r0, #1
 800402e:	e7df      	b.n	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08004030 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	0004      	movs	r4, r0
 8004034:	000d      	movs	r5, r1
 8004036:	0016      	movs	r6, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004038:	2720      	movs	r7, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800403a:	2204      	movs	r2, #4
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4213      	tst	r3, r2
 8004042:	d111      	bne.n	8004068 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004044:	0032      	movs	r2, r6
 8004046:	0029      	movs	r1, r5
 8004048:	0020      	movs	r0, r4
 800404a:	f7ff ff83 	bl	8003f54 <I2C_IsAcknowledgeFailed>
 800404e:	2800      	cmp	r0, #0
 8004050:	d119      	bne.n	8004086 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	423a      	tst	r2, r7
 8004058:	d017      	beq.n	800408a <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800405a:	2104      	movs	r1, #4
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	420a      	tst	r2, r1
 8004060:	d004      	beq.n	800406c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 8004062:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004064:	2a00      	cmp	r2, #0
 8004066:	d001      	beq.n	800406c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
        return HAL_OK;
 8004068:	2000      	movs	r0, #0
}
 800406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800406c:	61df      	str	r7, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	490e      	ldr	r1, [pc, #56]	; (80040ac <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8004072:	400a      	ands	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8004076:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004078:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800407a:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800407c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800407e:	7017      	strb	r7, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8004080:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8004084:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8004086:	2001      	movs	r0, #1
 8004088:	e7ef      	b.n	800406a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7ff fa4d 	bl	8003528 <HAL_GetTick>
 800408e:	1b80      	subs	r0, r0, r6
 8004090:	42a8      	cmp	r0, r5
 8004092:	d801      	bhi.n	8004098 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8004094:	2d00      	cmp	r5, #0
 8004096:	d1d0      	bne.n	800403a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	2220      	movs	r2, #32
 800409a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800409c:	4313      	orrs	r3, r2
 800409e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040a0:	0023      	movs	r3, r4
 80040a2:	3341      	adds	r3, #65	; 0x41
 80040a4:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80040a6:	3440      	adds	r4, #64	; 0x40
 80040a8:	2300      	movs	r3, #0
 80040aa:	e7eb      	b.n	8004084 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80040ac:	fe00e800 	.word	0xfe00e800

080040b0 <I2C_WaitOnFlagUntilTimeout>:
{
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	0004      	movs	r4, r0
 80040b4:	000e      	movs	r6, r1
 80040b6:	0017      	movs	r7, r2
 80040b8:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ba:	6822      	ldr	r2, [r4, #0]
 80040bc:	6993      	ldr	r3, [r2, #24]
 80040be:	4033      	ands	r3, r6
 80040c0:	1b9b      	subs	r3, r3, r6
 80040c2:	4259      	negs	r1, r3
 80040c4:	414b      	adcs	r3, r1
 80040c6:	42bb      	cmp	r3, r7
 80040c8:	d001      	beq.n	80040ce <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80040ca:	2000      	movs	r0, #0
 80040cc:	e017      	b.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	1c6b      	adds	r3, r5, #1
 80040d0:	d0f4      	beq.n	80040bc <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d2:	f7ff fa29 	bl	8003528 <HAL_GetTick>
 80040d6:	9b06      	ldr	r3, [sp, #24]
 80040d8:	1ac0      	subs	r0, r0, r3
 80040da:	42a8      	cmp	r0, r5
 80040dc:	d801      	bhi.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x32>
 80040de:	2d00      	cmp	r5, #0
 80040e0:	d1eb      	bne.n	80040ba <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e2:	2220      	movs	r2, #32
 80040e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80040e6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e8:	4313      	orrs	r3, r2
 80040ea:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	0023      	movs	r3, r4
 80040ee:	3341      	adds	r3, #65	; 0x41
 80040f0:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f2:	0022      	movs	r2, r4
 80040f4:	2300      	movs	r3, #0
 80040f6:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80040f8:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fa:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80040fc:	7023      	strb	r3, [r4, #0]
}
 80040fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004100 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	0004      	movs	r4, r0
 8004104:	000d      	movs	r5, r1
 8004106:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004108:	2720      	movs	r7, #32
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	423b      	tst	r3, r7
 8004110:	d001      	beq.n	8004116 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8004112:	2000      	movs	r0, #0
}
 8004114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004116:	0032      	movs	r2, r6
 8004118:	0029      	movs	r1, r5
 800411a:	0020      	movs	r0, r4
 800411c:	f7ff ff1a 	bl	8003f54 <I2C_IsAcknowledgeFailed>
 8004120:	2800      	cmp	r0, #0
 8004122:	d113      	bne.n	800414c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004124:	f7ff fa00 	bl	8003528 <HAL_GetTick>
 8004128:	1b80      	subs	r0, r0, r6
 800412a:	42a8      	cmp	r0, r5
 800412c:	d801      	bhi.n	8004132 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800412e:	2d00      	cmp	r5, #0
 8004130:	d1eb      	bne.n	800410a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004132:	2220      	movs	r2, #32
 8004134:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004136:	4313      	orrs	r3, r2
 8004138:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800413a:	0023      	movs	r3, r4
 800413c:	3341      	adds	r3, #65	; 0x41
 800413e:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	0022      	movs	r2, r4
 8004142:	2300      	movs	r3, #0
 8004144:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8004146:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800414a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800414c:	2001      	movs	r0, #1
 800414e:	e7e1      	b.n	8004114 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08004150 <HAL_I2C_Init>:
{
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004154:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8004156:	2c00      	cmp	r4, #0
 8004158:	d03f      	beq.n	80041da <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415a:	0025      	movs	r5, r4
 800415c:	3541      	adds	r5, #65	; 0x41
 800415e:	782b      	ldrb	r3, [r5, #0]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d105      	bne.n	8004172 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8004166:	0023      	movs	r3, r4
 8004168:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800416a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800416c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800416e:	f7ff f8b1 	bl	80032d4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004172:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004174:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004176:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8004178:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800417a:	481d      	ldr	r0, [pc, #116]	; (80041f0 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 800417c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800417e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8004180:	438a      	bics	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004184:	6861      	ldr	r1, [r4, #4]
 8004186:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <HAL_I2C_Init+0xa4>)
 8004188:	400a      	ands	r2, r1
 800418a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	4002      	ands	r2, r0
 8004190:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004192:	68e2      	ldr	r2, [r4, #12]
 8004194:	2a01      	cmp	r2, #1
 8004196:	d121      	bne.n	80041dc <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	0209      	lsls	r1, r1, #8
 800419c:	4331      	orrs	r1, r6
 800419e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	4915      	ldr	r1, [pc, #84]	; (80041f8 <HAL_I2C_Init+0xa8>)
 80041a4:	4311      	orrs	r1, r2
 80041a6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041a8:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041aa:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041ac:	4002      	ands	r2, r0
 80041ae:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041b0:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b2:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041b4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041b6:	69a1      	ldr	r1, [r4, #24]
 80041b8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041ba:	430a      	orrs	r2, r1
 80041bc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041be:	6a21      	ldr	r1, [r4, #32]
 80041c0:	69e2      	ldr	r2, [r4, #28]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80041c6:	2201      	movs	r2, #1
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	3442      	adds	r4, #66	; 0x42
 80041d8:	7020      	strb	r0, [r4, #0]
}
 80041da:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041dc:	2184      	movs	r1, #132	; 0x84
 80041de:	0209      	lsls	r1, r1, #8
 80041e0:	4331      	orrs	r1, r6
 80041e2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041e4:	2a02      	cmp	r2, #2
 80041e6:	d1db      	bne.n	80041a0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041e8:	2280      	movs	r2, #128	; 0x80
 80041ea:	0112      	lsls	r2, r2, #4
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	e7d7      	b.n	80041a0 <HAL_I2C_Init+0x50>
 80041f0:	ffff7fff 	.word	0xffff7fff
 80041f4:	f0ffffff 	.word	0xf0ffffff
 80041f8:	02008000 	.word	0x02008000

080041fc <HAL_I2C_Master_Transmit>:
{
 80041fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fe:	b087      	sub	sp, #28
 8004200:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004202:	0003      	movs	r3, r0
 8004204:	3341      	adds	r3, #65	; 0x41
{
 8004206:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004208:	9303      	str	r3, [sp, #12]
 800420a:	781b      	ldrb	r3, [r3, #0]
{
 800420c:	0004      	movs	r4, r0
 800420e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8004210:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004212:	2b20      	cmp	r3, #32
 8004214:	d114      	bne.n	8004240 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8004216:	0023      	movs	r3, r4
 8004218:	3340      	adds	r3, #64	; 0x40
 800421a:	781a      	ldrb	r2, [r3, #0]
 800421c:	2a01      	cmp	r2, #1
 800421e:	d00f      	beq.n	8004240 <HAL_I2C_Master_Transmit+0x44>
 8004220:	2601      	movs	r6, #1
 8004222:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8004224:	f7ff f980 	bl	8003528 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004228:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800422a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800422c:	9000      	str	r0, [sp, #0]
 800422e:	2319      	movs	r3, #25
 8004230:	0032      	movs	r2, r6
 8004232:	0020      	movs	r0, r4
 8004234:	0209      	lsls	r1, r1, #8
 8004236:	f7ff ff3b 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 800423a:	2800      	cmp	r0, #0
 800423c:	d002      	beq.n	8004244 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 800423e:	2001      	movs	r0, #1
}
 8004240:	b007      	add	sp, #28
 8004242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004244:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004246:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004248:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800424a:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800424c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800424e:	3b11      	subs	r3, #17
 8004250:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8004252:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004254:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004256:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004258:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800425a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800425c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800425e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <HAL_I2C_Master_Transmit+0x11c>)
 8004262:	2aff      	cmp	r2, #255	; 0xff
 8004264:	d920      	bls.n	80042a8 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004266:	22ff      	movs	r2, #255	; 0xff
 8004268:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004270:	0039      	movs	r1, r7
 8004272:	0020      	movs	r0, r4
 8004274:	f7ff fe5a 	bl	8003f2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004278:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427a:	002a      	movs	r2, r5
 800427c:	0020      	movs	r0, r4
 800427e:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8004280:	2b00      	cmp	r3, #0
 8004282:	d119      	bne.n	80042b8 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004284:	f7ff ff3c 	bl	8004100 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004288:	2800      	cmp	r0, #0
 800428a:	d1d8      	bne.n	800423e <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800428c:	2120      	movs	r1, #32
 800428e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004290:	4d22      	ldr	r5, [pc, #136]	; (800431c <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004292:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	402a      	ands	r2, r5
 8004298:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800429a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800429c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800429e:	3341      	adds	r3, #65	; 0x41
 80042a0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042a2:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80042a4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80042a6:	e7cb      	b.n	8004240 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80042a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042aa:	b292      	uxth	r2, r2
 80042ac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	049b      	lsls	r3, r3, #18
 80042b6:	e7db      	b.n	8004270 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b8:	f7ff fe90 	bl	8003fdc <I2C_WaitOnTXISFlagUntilTimeout>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1be      	bne.n	800423e <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042c2:	6822      	ldr	r2, [r4, #0]
 80042c4:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80042c6:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042c8:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80042ca:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80042cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80042ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80042d6:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80042da:	b292      	uxth	r2, r2
 80042dc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0ca      	beq.n	8004278 <HAL_I2C_Master_Transmit+0x7c>
 80042e2:	2a00      	cmp	r2, #0
 80042e4:	d1c8      	bne.n	8004278 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042e6:	2180      	movs	r1, #128	; 0x80
 80042e8:	0020      	movs	r0, r4
 80042ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042ec:	9500      	str	r5, [sp, #0]
 80042ee:	f7ff fedf 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d1a3      	bne.n	800423e <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042f8:	2bff      	cmp	r3, #255	; 0xff
 80042fa:	d906      	bls.n	800430a <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042fc:	23ff      	movs	r3, #255	; 0xff
 80042fe:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	22ff      	movs	r2, #255	; 0xff
 8004304:	9000      	str	r0, [sp, #0]
 8004306:	045b      	lsls	r3, r3, #17
 8004308:	e7b2      	b.n	8004270 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800430a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800430c:	b292      	uxth	r2, r2
 800430e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	9000      	str	r0, [sp, #0]
 8004314:	e7cd      	b.n	80042b2 <HAL_I2C_Master_Transmit+0xb6>
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	80002000 	.word	0x80002000
 800431c:	fe00e800 	.word	0xfe00e800

08004320 <HAL_I2C_Master_Receive>:
{
 8004320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004322:	b087      	sub	sp, #28
 8004324:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004326:	0003      	movs	r3, r0
 8004328:	3341      	adds	r3, #65	; 0x41
{
 800432a:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800432c:	9303      	str	r3, [sp, #12]
 800432e:	781b      	ldrb	r3, [r3, #0]
{
 8004330:	0004      	movs	r4, r0
 8004332:	000f      	movs	r7, r1
    return HAL_BUSY;
 8004334:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004336:	2b20      	cmp	r3, #32
 8004338:	d114      	bne.n	8004364 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 800433a:	0023      	movs	r3, r4
 800433c:	3340      	adds	r3, #64	; 0x40
 800433e:	781a      	ldrb	r2, [r3, #0]
 8004340:	2a01      	cmp	r2, #1
 8004342:	d00f      	beq.n	8004364 <HAL_I2C_Master_Receive+0x44>
 8004344:	2601      	movs	r6, #1
 8004346:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8004348:	f7ff f8ee 	bl	8003528 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800434c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800434e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004350:	9000      	str	r0, [sp, #0]
 8004352:	2319      	movs	r3, #25
 8004354:	0032      	movs	r2, r6
 8004356:	0020      	movs	r0, r4
 8004358:	0209      	lsls	r1, r1, #8
 800435a:	f7ff fea9 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 800435e:	2800      	cmp	r0, #0
 8004360:	d002      	beq.n	8004368 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8004362:	2001      	movs	r0, #1
}
 8004364:	b007      	add	sp, #28
 8004366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004368:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800436a:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800436c:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800436e:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004370:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004372:	3b12      	subs	r3, #18
 8004374:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8004376:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004378:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800437a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800437c:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800437e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8004380:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004382:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_I2C_Master_Receive+0x11c>)
 8004386:	2aff      	cmp	r2, #255	; 0xff
 8004388:	d920      	bls.n	80043cc <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800438a:	22ff      	movs	r2, #255	; 0xff
 800438c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004394:	0039      	movs	r1, r7
 8004396:	0020      	movs	r0, r4
 8004398:	f7ff fdc8 	bl	8003f2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800439c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439e:	002a      	movs	r2, r5
 80043a0:	0020      	movs	r0, r4
 80043a2:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d119      	bne.n	80043dc <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a8:	f7ff feaa 	bl	8004100 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d1d8      	bne.n	8004362 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b0:	2120      	movs	r1, #32
 80043b2:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80043b4:	4d22      	ldr	r5, [pc, #136]	; (8004440 <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	402a      	ands	r2, r5
 80043bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043be:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80043c0:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	3341      	adds	r3, #65	; 0x41
 80043c4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043c6:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80043c8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80043ca:	e7cb      	b.n	8004364 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80043cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043ce:	b292      	uxth	r2, r2
 80043d0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	049b      	lsls	r3, r3, #18
 80043da:	e7db      	b.n	8004394 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043dc:	f7ff fe28 	bl	8004030 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d1be      	bne.n	8004362 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80043ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80043ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80043f0:	3301      	adds	r3, #1
 80043f2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80043f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80043f6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004400:	b292      	uxth	r2, r2
 8004402:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0c9      	beq.n	800439c <HAL_I2C_Master_Receive+0x7c>
 8004408:	2a00      	cmp	r2, #0
 800440a:	d1c7      	bne.n	800439c <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800440c:	2180      	movs	r1, #128	; 0x80
 800440e:	0020      	movs	r0, r4
 8004410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004412:	9500      	str	r5, [sp, #0]
 8004414:	f7ff fe4c 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8004418:	2800      	cmp	r0, #0
 800441a:	d1a2      	bne.n	8004362 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800441c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800441e:	2bff      	cmp	r3, #255	; 0xff
 8004420:	d906      	bls.n	8004430 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004422:	23ff      	movs	r3, #255	; 0xff
 8004424:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	22ff      	movs	r2, #255	; 0xff
 800442a:	9000      	str	r0, [sp, #0]
 800442c:	045b      	lsls	r3, r3, #17
 800442e:	e7b1      	b.n	8004394 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8004430:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004432:	b292      	uxth	r2, r2
 8004434:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	9000      	str	r0, [sp, #0]
 800443a:	e7cc      	b.n	80043d6 <HAL_I2C_Master_Receive+0xb6>
 800443c:	80002400 	.word	0x80002400
 8004440:	fe00e800 	.word	0xfe00e800

08004444 <HAL_I2C_IsDeviceReady>:
{
 8004444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004446:	001e      	movs	r6, r3
  __IO uint32_t I2C_Trials = 0UL;
 8004448:	2300      	movs	r3, #0
{
 800444a:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 800444c:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800444e:	0003      	movs	r3, r0
{
 8004450:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004452:	3341      	adds	r3, #65	; 0x41
 8004454:	781a      	ldrb	r2, [r3, #0]
{
 8004456:	0004      	movs	r4, r0
    return HAL_BUSY;
 8004458:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800445a:	2a20      	cmp	r2, #32
 800445c:	d15b      	bne.n	8004516 <HAL_I2C_IsDeviceReady+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800445e:	6802      	ldr	r2, [r0, #0]
 8004460:	6997      	ldr	r7, [r2, #24]
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	0038      	movs	r0, r7
 8004466:	0212      	lsls	r2, r2, #8
 8004468:	4010      	ands	r0, r2
 800446a:	4217      	tst	r7, r2
 800446c:	d153      	bne.n	8004516 <HAL_I2C_IsDeviceReady+0xd2>
    __HAL_LOCK(hi2c);
 800446e:	0022      	movs	r2, r4
 8004470:	3240      	adds	r2, #64	; 0x40
 8004472:	7817      	ldrb	r7, [r2, #0]
 8004474:	2f01      	cmp	r7, #1
 8004476:	d04e      	beq.n	8004516 <HAL_I2C_IsDeviceReady+0xd2>
 8004478:	3d01      	subs	r5, #1
 800447a:	7015      	strb	r5, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800447c:	2224      	movs	r2, #36	; 0x24
 800447e:	0589      	lsls	r1, r1, #22
 8004480:	701a      	strb	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004482:	0d8b      	lsrs	r3, r1, #22
 8004484:	6460      	str	r0, [r4, #68]	; 0x44
 8004486:	9304      	str	r3, [sp, #16]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004488:	68e3      	ldr	r3, [r4, #12]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d12b      	bne.n	80044e6 <HAL_I2C_IsDeviceReady+0xa2>
 800448e:	4b3e      	ldr	r3, [pc, #248]	; (8004588 <HAL_I2C_IsDeviceReady+0x144>)
 8004490:	9a04      	ldr	r2, [sp, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	6822      	ldr	r2, [r4, #0]
 8004496:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8004498:	f7ff f846 	bl	8003528 <HAL_GetTick>
 800449c:	9003      	str	r0, [sp, #12]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800449e:	2201      	movs	r2, #1
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044a4:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a6:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044a8:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80044aa:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044ac:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80044ae:	431d      	orrs	r5, r3
 80044b0:	d01c      	beq.n	80044ec <HAL_I2C_IsDeviceReady+0xa8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	2710      	movs	r7, #16
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	001a      	movs	r2, r3
 80044ba:	403a      	ands	r2, r7
 80044bc:	423b      	tst	r3, r7
 80044be:	d12d      	bne.n	800451c <HAL_I2C_IsDeviceReady+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80044c0:	9b03      	ldr	r3, [sp, #12]
 80044c2:	2120      	movs	r1, #32
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	0020      	movs	r0, r4
 80044c8:	0033      	movs	r3, r6
 80044ca:	f7ff fdf1 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d121      	bne.n	8004516 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d2:	2320      	movs	r3, #32
 80044d4:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 80044d6:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d8:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80044da:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 80044dc:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80044de:	3241      	adds	r2, #65	; 0x41
 80044e0:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80044e2:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 80044e4:	e017      	b.n	8004516 <HAL_I2C_IsDeviceReady+0xd2>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80044e6:	23a0      	movs	r3, #160	; 0xa0
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	e7d1      	b.n	8004490 <HAL_I2C_IsDeviceReady+0x4c>
        if (Timeout != HAL_MAX_DELAY)
 80044ec:	1c73      	adds	r3, r6, #1
 80044ee:	d0d6      	beq.n	800449e <HAL_I2C_IsDeviceReady+0x5a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044f0:	f7ff f81a 	bl	8003528 <HAL_GetTick>
 80044f4:	9b03      	ldr	r3, [sp, #12]
 80044f6:	1ac0      	subs	r0, r0, r3
 80044f8:	42b0      	cmp	r0, r6
 80044fa:	d801      	bhi.n	8004500 <HAL_I2C_IsDeviceReady+0xbc>
 80044fc:	2e00      	cmp	r6, #0
 80044fe:	d1ce      	bne.n	800449e <HAL_I2C_IsDeviceReady+0x5a>
            hi2c->State = HAL_I2C_STATE_READY;
 8004500:	0022      	movs	r2, r4
 8004502:	2320      	movs	r3, #32
 8004504:	3241      	adds	r2, #65	; 0x41
 8004506:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004508:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 800450a:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800450c:	4313      	orrs	r3, r2
 800450e:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8004510:	2300      	movs	r3, #0
 8004512:	3440      	adds	r4, #64	; 0x40
 8004514:	7023      	strb	r3, [r4, #0]
}
 8004516:	0028      	movs	r0, r5
 8004518:	b009      	add	sp, #36	; 0x24
 800451a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800451c:	9b03      	ldr	r3, [sp, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2120      	movs	r1, #32
 8004524:	0033      	movs	r3, r6
 8004526:	0020      	movs	r0, r4
 8004528:	f7ff fdc2 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 800452c:	1e02      	subs	r2, r0, #0
 800452e:	d1f2      	bne.n	8004516 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004530:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8004532:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004534:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004536:	2720      	movs	r7, #32
 8004538:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 800453a:	9907      	ldr	r1, [sp, #28]
 800453c:	4281      	cmp	r1, r0
 800453e:	d10f      	bne.n	8004560 <HAL_I2C_IsDeviceReady+0x11c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	6858      	ldr	r0, [r3, #4]
 8004544:	01c9      	lsls	r1, r1, #7
 8004546:	4301      	orrs	r1, r0
 8004548:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800454a:	9b03      	ldr	r3, [sp, #12]
 800454c:	0039      	movs	r1, r7
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	0020      	movs	r0, r4
 8004552:	0033      	movs	r3, r6
 8004554:	f7ff fdac 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8004558:	2800      	cmp	r0, #0
 800455a:	d1dc      	bne.n	8004516 <HAL_I2C_IsDeviceReady+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8004560:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8004562:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8004564:	3301      	adds	r3, #1
 8004566:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8004568:	9b07      	ldr	r3, [sp, #28]
 800456a:	4293      	cmp	r3, r2
 800456c:	d200      	bcs.n	8004570 <HAL_I2C_IsDeviceReady+0x12c>
 800456e:	e78b      	b.n	8004488 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8004570:	0022      	movs	r2, r4
 8004572:	2320      	movs	r3, #32
 8004574:	3241      	adds	r2, #65	; 0x41
 8004576:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004578:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800457a:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	4313      	orrs	r3, r2
 800457e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8004580:	2300      	movs	r3, #0
 8004582:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8004584:	e7c7      	b.n	8004516 <HAL_I2C_IsDeviceReady+0xd2>
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	02002000 	.word	0x02002000

0800458c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800458c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800458e:	0004      	movs	r4, r0
 8004590:	3441      	adds	r4, #65	; 0x41
 8004592:	7822      	ldrb	r2, [r4, #0]
{
 8004594:	0003      	movs	r3, r0
 8004596:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004598:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800459a:	b2d6      	uxtb	r6, r2
 800459c:	2a20      	cmp	r2, #32
 800459e:	d118      	bne.n	80045d2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80045a0:	001d      	movs	r5, r3
 80045a2:	3540      	adds	r5, #64	; 0x40
 80045a4:	782a      	ldrb	r2, [r5, #0]
 80045a6:	2a01      	cmp	r2, #1
 80045a8:	d013      	beq.n	80045d2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045aa:	2224      	movs	r2, #36	; 0x24
 80045ac:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3a23      	subs	r2, #35	; 0x23
 80045b2:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045b4:	4807      	ldr	r0, [pc, #28]	; (80045d4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80045b6:	4391      	bics	r1, r2
 80045b8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045ba:	6819      	ldr	r1, [r3, #0]
 80045bc:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 80045be:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045c0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	4339      	orrs	r1, r7
 80045c6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80045d0:	7028      	strb	r0, [r5, #0]
  }
}
 80045d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d4:	ffffefff 	.word	0xffffefff

080045d8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d8:	0002      	movs	r2, r0
{
 80045da:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045dc:	3241      	adds	r2, #65	; 0x41
 80045de:	7814      	ldrb	r4, [r2, #0]
{
 80045e0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e2:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	2c20      	cmp	r4, #32
 80045e8:	d117      	bne.n	800461a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80045ea:	001c      	movs	r4, r3
 80045ec:	3440      	adds	r4, #64	; 0x40
 80045ee:	7826      	ldrb	r6, [r4, #0]
 80045f0:	2e01      	cmp	r6, #1
 80045f2:	d012      	beq.n	800461a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f4:	3022      	adds	r0, #34	; 0x22
 80045f6:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3823      	subs	r0, #35	; 0x23
 80045fc:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80045fe:	4f07      	ldr	r7, [pc, #28]	; (800461c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8004600:	4386      	bics	r6, r0
 8004602:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8004604:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8004606:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8004608:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800460a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800460c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	4308      	orrs	r0, r1
 8004612:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004614:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8004618:	7020      	strb	r0, [r4, #0]
  }
}
 800461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461c:	fffff0ff 	.word	0xfffff0ff

08004620 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004620:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004622:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8004624:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8004626:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004628:	4022      	ands	r2, r4
 800462a:	2a08      	cmp	r2, #8
 800462c:	d031      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x72>
 800462e:	2a0c      	cmp	r2, #12
 8004630:	d009      	beq.n	8004646 <HAL_RCC_GetSysClockFreq+0x26>
 8004632:	2a04      	cmp	r2, #4
 8004634:	d125      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004636:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8004638:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800463a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800463c:	17c0      	asrs	r0, r0, #31
 800463e:	4018      	ands	r0, r3
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x80>)
 8004642:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8004644:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004646:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004648:	4816      	ldr	r0, [pc, #88]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800464a:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800464c:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464e:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004650:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004652:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004654:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004656:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004658:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465a:	4211      	tst	r1, r2
 800465c:	d009      	beq.n	8004672 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x88>)
 8004660:	2300      	movs	r3, #0
 8004662:	2100      	movs	r1, #0
 8004664:	f7fb fe1a 	bl	800029c <__aeabi_lmul>
 8004668:	0022      	movs	r2, r4
 800466a:	2300      	movs	r3, #0
 800466c:	f7fb fdf6 	bl	800025c <__aeabi_uldivmod>
 8004670:	e7e8      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	2310      	movs	r3, #16
 8004676:	421a      	tst	r2, r3
 8004678:	d001      	beq.n	800467e <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800467a:	4a0c      	ldr	r2, [pc, #48]	; (80046ac <HAL_RCC_GetSysClockFreq+0x8c>)
 800467c:	e7f0      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800467e:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x80>)
 8004680:	e7ee      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004682:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004684:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004686:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800468c:	3301      	adds	r3, #1
 800468e:	4098      	lsls	r0, r3
      break;
 8004690:	e7d8      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8004692:	4805      	ldr	r0, [pc, #20]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x88>)
 8004694:	e7d6      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x24>
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	40021000 	.word	0x40021000
 800469c:	ff48e500 	.word	0xff48e500
 80046a0:	00f42400 	.word	0x00f42400
 80046a4:	08006d14 	.word	0x08006d14
 80046a8:	007a1200 	.word	0x007a1200
 80046ac:	003d0900 	.word	0x003d0900

080046b0 <HAL_RCC_OscConfig>:
{
 80046b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b2:	0005      	movs	r5, r0
 80046b4:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d05a      	beq.n	8004770 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ba:	230c      	movs	r3, #12
 80046bc:	4cbe      	ldr	r4, [pc, #760]	; (80049b8 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046be:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c0:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046c2:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c4:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	025b      	lsls	r3, r3, #9
 80046ca:	0019      	movs	r1, r3
 80046cc:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ce:	07d2      	lsls	r2, r2, #31
 80046d0:	d442      	bmi.n	8004758 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	079b      	lsls	r3, r3, #30
 80046d6:	d500      	bpl.n	80046da <HAL_RCC_OscConfig+0x2a>
 80046d8:	e08b      	b.n	80047f2 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046da:	682b      	ldr	r3, [r5, #0]
 80046dc:	06db      	lsls	r3, r3, #27
 80046de:	d529      	bpl.n	8004734 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046e0:	2e00      	cmp	r6, #0
 80046e2:	d000      	beq.n	80046e6 <HAL_RCC_OscConfig+0x36>
 80046e4:	e0dc      	b.n	80048a0 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	059b      	lsls	r3, r3, #22
 80046ea:	d502      	bpl.n	80046f2 <HAL_RCC_OscConfig+0x42>
 80046ec:	69eb      	ldr	r3, [r5, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d03e      	beq.n	8004770 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046f2:	6862      	ldr	r2, [r4, #4]
 80046f4:	49b1      	ldr	r1, [pc, #708]	; (80049bc <HAL_RCC_OscConfig+0x30c>)
 80046f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046f8:	400a      	ands	r2, r1
 80046fa:	431a      	orrs	r2, r3
 80046fc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046fe:	6861      	ldr	r1, [r4, #4]
 8004700:	6a2a      	ldr	r2, [r5, #32]
 8004702:	0209      	lsls	r1, r1, #8
 8004704:	0a09      	lsrs	r1, r1, #8
 8004706:	0612      	lsls	r2, r2, #24
 8004708:	430a      	orrs	r2, r1
 800470a:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	0b5b      	lsrs	r3, r3, #13
 8004710:	3301      	adds	r3, #1
 8004712:	0212      	lsls	r2, r2, #8
 8004714:	409a      	lsls	r2, r3
 8004716:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004718:	68e1      	ldr	r1, [r4, #12]
 800471a:	060a      	lsls	r2, r1, #24
 800471c:	49a8      	ldr	r1, [pc, #672]	; (80049c0 <HAL_RCC_OscConfig+0x310>)
 800471e:	0f12      	lsrs	r2, r2, #28
 8004720:	5c8a      	ldrb	r2, [r1, r2]
 8004722:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004724:	4aa7      	ldr	r2, [pc, #668]	; (80049c4 <HAL_RCC_OscConfig+0x314>)
 8004726:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8004728:	4ba7      	ldr	r3, [pc, #668]	; (80049c8 <HAL_RCC_OscConfig+0x318>)
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	f7fe feb8 	bl	80034a0 <HAL_InitTick>
        if(status != HAL_OK)
 8004730:	2800      	cmp	r0, #0
 8004732:	d134      	bne.n	800479e <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	071b      	lsls	r3, r3, #28
 8004738:	d500      	bpl.n	800473c <HAL_RCC_OscConfig+0x8c>
 800473a:	e0e8      	b.n	800490e <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	075b      	lsls	r3, r3, #29
 8004740:	d500      	bpl.n	8004744 <HAL_RCC_OscConfig+0x94>
 8004742:	e10a      	b.n	800495a <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	069b      	lsls	r3, r3, #26
 8004748:	d500      	bpl.n	800474c <HAL_RCC_OscConfig+0x9c>
 800474a:	e18e      	b.n	8004a6a <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800474c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d000      	beq.n	8004754 <HAL_RCC_OscConfig+0xa4>
 8004752:	e1bd      	b.n	8004ad0 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8004754:	2000      	movs	r0, #0
 8004756:	e022      	b.n	800479e <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004758:	2e08      	cmp	r6, #8
 800475a:	d003      	beq.n	8004764 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800475c:	2e0c      	cmp	r6, #12
 800475e:	d109      	bne.n	8004774 <HAL_RCC_OscConfig+0xc4>
 8004760:	2f00      	cmp	r7, #0
 8004762:	d007      	beq.n	8004774 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	039b      	lsls	r3, r3, #14
 8004768:	d5b3      	bpl.n	80046d2 <HAL_RCC_OscConfig+0x22>
 800476a:	686b      	ldr	r3, [r5, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1b0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8004770:	2001      	movs	r0, #1
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004774:	686a      	ldr	r2, [r5, #4]
 8004776:	428a      	cmp	r2, r1
 8004778:	d113      	bne.n	80047a2 <HAL_RCC_OscConfig+0xf2>
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	4313      	orrs	r3, r2
 800477e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004780:	f7fe fed2 	bl	8003528 <HAL_GetTick>
 8004784:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	0292      	lsls	r2, r2, #10
 800478c:	4213      	tst	r3, r2
 800478e:	d1a0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004790:	f7fe feca 	bl	8003528 <HAL_GetTick>
 8004794:	9b00      	ldr	r3, [sp, #0]
 8004796:	1ac0      	subs	r0, r0, r3
 8004798:	2864      	cmp	r0, #100	; 0x64
 800479a:	d9f4      	bls.n	8004786 <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 800479c:	2003      	movs	r0, #3
}
 800479e:	b005      	add	sp, #20
 80047a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a2:	21a0      	movs	r1, #160	; 0xa0
 80047a4:	02c9      	lsls	r1, r1, #11
 80047a6:	428a      	cmp	r2, r1
 80047a8:	d105      	bne.n	80047b6 <HAL_RCC_OscConfig+0x106>
 80047aa:	2280      	movs	r2, #128	; 0x80
 80047ac:	6821      	ldr	r1, [r4, #0]
 80047ae:	02d2      	lsls	r2, r2, #11
 80047b0:	430a      	orrs	r2, r1
 80047b2:	6022      	str	r2, [r4, #0]
 80047b4:	e7e1      	b.n	800477a <HAL_RCC_OscConfig+0xca>
 80047b6:	6821      	ldr	r1, [r4, #0]
 80047b8:	4884      	ldr	r0, [pc, #528]	; (80049cc <HAL_RCC_OscConfig+0x31c>)
 80047ba:	4001      	ands	r1, r0
 80047bc:	6021      	str	r1, [r4, #0]
 80047be:	6821      	ldr	r1, [r4, #0]
 80047c0:	400b      	ands	r3, r1
 80047c2:	9303      	str	r3, [sp, #12]
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	4982      	ldr	r1, [pc, #520]	; (80049d0 <HAL_RCC_OscConfig+0x320>)
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	400b      	ands	r3, r1
 80047cc:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d1d6      	bne.n	8004780 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 80047d2:	f7fe fea9 	bl	8003528 <HAL_GetTick>
 80047d6:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	0292      	lsls	r2, r2, #10
 80047de:	4213      	tst	r3, r2
 80047e0:	d100      	bne.n	80047e4 <HAL_RCC_OscConfig+0x134>
 80047e2:	e776      	b.n	80046d2 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047e4:	f7fe fea0 	bl	8003528 <HAL_GetTick>
 80047e8:	9b00      	ldr	r3, [sp, #0]
 80047ea:	1ac0      	subs	r0, r0, r3
 80047ec:	2864      	cmp	r0, #100	; 0x64
 80047ee:	d9f3      	bls.n	80047d8 <HAL_RCC_OscConfig+0x128>
 80047f0:	e7d4      	b.n	800479c <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 80047f2:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047f4:	2e04      	cmp	r6, #4
 80047f6:	d003      	beq.n	8004800 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047f8:	2e0c      	cmp	r6, #12
 80047fa:	d124      	bne.n	8004846 <HAL_RCC_OscConfig+0x196>
 80047fc:	2f00      	cmp	r7, #0
 80047fe:	d122      	bne.n	8004846 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	075b      	lsls	r3, r3, #29
 8004804:	d501      	bpl.n	800480a <HAL_RCC_OscConfig+0x15a>
 8004806:	2a00      	cmp	r2, #0
 8004808:	d0b2      	beq.n	8004770 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	6861      	ldr	r1, [r4, #4]
 800480c:	692b      	ldr	r3, [r5, #16]
 800480e:	4871      	ldr	r0, [pc, #452]	; (80049d4 <HAL_RCC_OscConfig+0x324>)
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	4001      	ands	r1, r0
 8004814:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004816:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004818:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	438b      	bics	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004822:	f7ff fefd 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8004826:	68e3      	ldr	r3, [r4, #12]
 8004828:	4a65      	ldr	r2, [pc, #404]	; (80049c0 <HAL_RCC_OscConfig+0x310>)
 800482a:	061b      	lsls	r3, r3, #24
 800482c:	0f1b      	lsrs	r3, r3, #28
 800482e:	5cd3      	ldrb	r3, [r2, r3]
 8004830:	40d8      	lsrs	r0, r3
 8004832:	4b64      	ldr	r3, [pc, #400]	; (80049c4 <HAL_RCC_OscConfig+0x314>)
 8004834:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8004836:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <HAL_RCC_OscConfig+0x318>)
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	f7fe fe31 	bl	80034a0 <HAL_InitTick>
      if(status != HAL_OK)
 800483e:	2800      	cmp	r0, #0
 8004840:	d100      	bne.n	8004844 <HAL_RCC_OscConfig+0x194>
 8004842:	e74a      	b.n	80046da <HAL_RCC_OscConfig+0x2a>
 8004844:	e7ab      	b.n	800479e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004846:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8004848:	2a00      	cmp	r2, #0
 800484a:	d018      	beq.n	800487e <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800484c:	2109      	movs	r1, #9
 800484e:	438b      	bics	r3, r1
 8004850:	4313      	orrs	r3, r2
 8004852:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004854:	f7fe fe68 	bl	8003528 <HAL_GetTick>
 8004858:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800485a:	2204      	movs	r2, #4
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	4213      	tst	r3, r2
 8004860:	d007      	beq.n	8004872 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004862:	6862      	ldr	r2, [r4, #4]
 8004864:	692b      	ldr	r3, [r5, #16]
 8004866:	495b      	ldr	r1, [pc, #364]	; (80049d4 <HAL_RCC_OscConfig+0x324>)
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	400a      	ands	r2, r1
 800486c:	4313      	orrs	r3, r2
 800486e:	6063      	str	r3, [r4, #4]
 8004870:	e733      	b.n	80046da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004872:	f7fe fe59 	bl	8003528 <HAL_GetTick>
 8004876:	1bc0      	subs	r0, r0, r7
 8004878:	2802      	cmp	r0, #2
 800487a:	d9ee      	bls.n	800485a <HAL_RCC_OscConfig+0x1aa>
 800487c:	e78e      	b.n	800479c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 800487e:	2201      	movs	r2, #1
 8004880:	4393      	bics	r3, r2
 8004882:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004884:	f7fe fe50 	bl	8003528 <HAL_GetTick>
 8004888:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800488a:	2204      	movs	r2, #4
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	4213      	tst	r3, r2
 8004890:	d100      	bne.n	8004894 <HAL_RCC_OscConfig+0x1e4>
 8004892:	e722      	b.n	80046da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004894:	f7fe fe48 	bl	8003528 <HAL_GetTick>
 8004898:	1bc0      	subs	r0, r0, r7
 800489a:	2802      	cmp	r0, #2
 800489c:	d9f5      	bls.n	800488a <HAL_RCC_OscConfig+0x1da>
 800489e:	e77d      	b.n	800479c <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048a0:	69eb      	ldr	r3, [r5, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d020      	beq.n	80048e8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4313      	orrs	r3, r2
 80048ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80048b0:	f7fe fe3a 	bl	8003528 <HAL_GetTick>
 80048b4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048b6:	2280      	movs	r2, #128	; 0x80
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	0092      	lsls	r2, r2, #2
 80048bc:	4213      	tst	r3, r2
 80048be:	d00d      	beq.n	80048dc <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	4a3e      	ldr	r2, [pc, #248]	; (80049bc <HAL_RCC_OscConfig+0x30c>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80048c8:	4313      	orrs	r3, r2
 80048ca:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048cc:	6862      	ldr	r2, [r4, #4]
 80048ce:	6a2b      	ldr	r3, [r5, #32]
 80048d0:	0212      	lsls	r2, r2, #8
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	0a12      	lsrs	r2, r2, #8
 80048d6:	4313      	orrs	r3, r2
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	e72b      	b.n	8004734 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048dc:	f7fe fe24 	bl	8003528 <HAL_GetTick>
 80048e0:	1bc0      	subs	r0, r0, r7
 80048e2:	2802      	cmp	r0, #2
 80048e4:	d9e7      	bls.n	80048b6 <HAL_RCC_OscConfig+0x206>
 80048e6:	e759      	b.n	800479c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	4a3b      	ldr	r2, [pc, #236]	; (80049d8 <HAL_RCC_OscConfig+0x328>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80048f0:	f7fe fe1a 	bl	8003528 <HAL_GetTick>
 80048f4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80048f6:	2280      	movs	r2, #128	; 0x80
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	0092      	lsls	r2, r2, #2
 80048fc:	4213      	tst	r3, r2
 80048fe:	d100      	bne.n	8004902 <HAL_RCC_OscConfig+0x252>
 8004900:	e718      	b.n	8004734 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004902:	f7fe fe11 	bl	8003528 <HAL_GetTick>
 8004906:	1bc0      	subs	r0, r0, r7
 8004908:	2802      	cmp	r0, #2
 800490a:	d9f4      	bls.n	80048f6 <HAL_RCC_OscConfig+0x246>
 800490c:	e746      	b.n	800479c <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800490e:	696a      	ldr	r2, [r5, #20]
 8004910:	2301      	movs	r3, #1
 8004912:	2a00      	cmp	r2, #0
 8004914:	d010      	beq.n	8004938 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8004916:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004918:	4313      	orrs	r3, r2
 800491a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800491c:	f7fe fe04 	bl	8003528 <HAL_GetTick>
 8004920:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004922:	2202      	movs	r2, #2
 8004924:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004926:	4213      	tst	r3, r2
 8004928:	d000      	beq.n	800492c <HAL_RCC_OscConfig+0x27c>
 800492a:	e707      	b.n	800473c <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800492c:	f7fe fdfc 	bl	8003528 <HAL_GetTick>
 8004930:	1bc0      	subs	r0, r0, r7
 8004932:	2802      	cmp	r0, #2
 8004934:	d9f5      	bls.n	8004922 <HAL_RCC_OscConfig+0x272>
 8004936:	e731      	b.n	800479c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8004938:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800493a:	439a      	bics	r2, r3
 800493c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800493e:	f7fe fdf3 	bl	8003528 <HAL_GetTick>
 8004942:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004944:	2202      	movs	r2, #2
 8004946:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004948:	4213      	tst	r3, r2
 800494a:	d100      	bne.n	800494e <HAL_RCC_OscConfig+0x29e>
 800494c:	e6f6      	b.n	800473c <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494e:	f7fe fdeb 	bl	8003528 <HAL_GetTick>
 8004952:	1bc0      	subs	r0, r0, r7
 8004954:	2802      	cmp	r0, #2
 8004956:	d9f5      	bls.n	8004944 <HAL_RCC_OscConfig+0x294>
 8004958:	e720      	b.n	800479c <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800495c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004960:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004962:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004964:	421a      	tst	r2, r3
 8004966:	d104      	bne.n	8004972 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800496a:	4313      	orrs	r3, r2
 800496c:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004972:	2280      	movs	r2, #128	; 0x80
 8004974:	4f19      	ldr	r7, [pc, #100]	; (80049dc <HAL_RCC_OscConfig+0x32c>)
 8004976:	0052      	lsls	r2, r2, #1
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4213      	tst	r3, r2
 800497c:	d008      	beq.n	8004990 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497e:	2280      	movs	r2, #128	; 0x80
 8004980:	68ab      	ldr	r3, [r5, #8]
 8004982:	0052      	lsls	r2, r2, #1
 8004984:	4293      	cmp	r3, r2
 8004986:	d12b      	bne.n	80049e0 <HAL_RCC_OscConfig+0x330>
 8004988:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800498a:	4313      	orrs	r3, r2
 800498c:	6523      	str	r3, [r4, #80]	; 0x50
 800498e:	e04c      	b.n	8004a2a <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004990:	2280      	movs	r2, #128	; 0x80
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	0052      	lsls	r2, r2, #1
 8004996:	4313      	orrs	r3, r2
 8004998:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800499a:	f7fe fdc5 	bl	8003528 <HAL_GetTick>
 800499e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a0:	2280      	movs	r2, #128	; 0x80
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	0052      	lsls	r2, r2, #1
 80049a6:	4213      	tst	r3, r2
 80049a8:	d1e9      	bne.n	800497e <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fe fdbd 	bl	8003528 <HAL_GetTick>
 80049ae:	9b01      	ldr	r3, [sp, #4]
 80049b0:	1ac0      	subs	r0, r0, r3
 80049b2:	2864      	cmp	r0, #100	; 0x64
 80049b4:	d9f4      	bls.n	80049a0 <HAL_RCC_OscConfig+0x2f0>
 80049b6:	e6f1      	b.n	800479c <HAL_RCC_OscConfig+0xec>
 80049b8:	40021000 	.word	0x40021000
 80049bc:	ffff1fff 	.word	0xffff1fff
 80049c0:	08006d04 	.word	0x08006d04
 80049c4:	2000001c 	.word	0x2000001c
 80049c8:	20000024 	.word	0x20000024
 80049cc:	fffeffff 	.word	0xfffeffff
 80049d0:	fffbffff 	.word	0xfffbffff
 80049d4:	ffffe0ff 	.word	0xffffe0ff
 80049d8:	fffffeff 	.word	0xfffffeff
 80049dc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <HAL_RCC_OscConfig+0x362>
 80049e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049e6:	4a6b      	ldr	r2, [pc, #428]	; (8004b94 <HAL_RCC_OscConfig+0x4e4>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	6523      	str	r3, [r4, #80]	; 0x50
 80049ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049ee:	4a6a      	ldr	r2, [pc, #424]	; (8004b98 <HAL_RCC_OscConfig+0x4e8>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80049f4:	f7fe fd98 	bl	8003528 <HAL_GetTick>
 80049f8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049fe:	0092      	lsls	r2, r2, #2
 8004a00:	4213      	tst	r3, r2
 8004a02:	d01a      	beq.n	8004a3a <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fe fd90 	bl	8003528 <HAL_GetTick>
 8004a08:	4b64      	ldr	r3, [pc, #400]	; (8004b9c <HAL_RCC_OscConfig+0x4ec>)
 8004a0a:	1bc0      	subs	r0, r0, r7
 8004a0c:	4298      	cmp	r0, r3
 8004a0e:	d9f4      	bls.n	80049fa <HAL_RCC_OscConfig+0x34a>
 8004a10:	e6c4      	b.n	800479c <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a12:	21a0      	movs	r1, #160	; 0xa0
 8004a14:	00c9      	lsls	r1, r1, #3
 8004a16:	428b      	cmp	r3, r1
 8004a18:	d118      	bne.n	8004a4c <HAL_RCC_OscConfig+0x39c>
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6523      	str	r3, [r4, #80]	; 0x50
 8004a24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a26:	431a      	orrs	r2, r3
 8004a28:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004a2a:	f7fe fd7d 	bl	8003528 <HAL_GetTick>
 8004a2e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a34:	0092      	lsls	r2, r2, #2
 8004a36:	4213      	tst	r3, r2
 8004a38:	d010      	beq.n	8004a5c <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 8004a3a:	9b00      	ldr	r3, [sp, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d000      	beq.n	8004a42 <HAL_RCC_OscConfig+0x392>
 8004a40:	e680      	b.n	8004744 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a44:	4a56      	ldr	r2, [pc, #344]	; (8004ba0 <HAL_RCC_OscConfig+0x4f0>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a4a:	e67b      	b.n	8004744 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a4e:	4a51      	ldr	r2, [pc, #324]	; (8004b94 <HAL_RCC_OscConfig+0x4e4>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	6523      	str	r3, [r4, #80]	; 0x50
 8004a54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a56:	4a50      	ldr	r2, [pc, #320]	; (8004b98 <HAL_RCC_OscConfig+0x4e8>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	e797      	b.n	800498c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fe fd64 	bl	8003528 <HAL_GetTick>
 8004a60:	4b4e      	ldr	r3, [pc, #312]	; (8004b9c <HAL_RCC_OscConfig+0x4ec>)
 8004a62:	1bc0      	subs	r0, r0, r7
 8004a64:	4298      	cmp	r0, r3
 8004a66:	d9e3      	bls.n	8004a30 <HAL_RCC_OscConfig+0x380>
 8004a68:	e698      	b.n	800479c <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a6a:	69a9      	ldr	r1, [r5, #24]
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4a4d      	ldr	r2, [pc, #308]	; (8004ba4 <HAL_RCC_OscConfig+0x4f4>)
 8004a70:	2900      	cmp	r1, #0
 8004a72:	d018      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8004a74:	68a1      	ldr	r1, [r4, #8]
 8004a76:	4319      	orrs	r1, r3
 8004a78:	60a1      	str	r1, [r4, #8]
 8004a7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6363      	str	r3, [r4, #52]	; 0x34
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	6a11      	ldr	r1, [r2, #32]
 8004a84:	019b      	lsls	r3, r3, #6
 8004a86:	430b      	orrs	r3, r1
 8004a88:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004a8a:	f7fe fd4d 	bl	8003528 <HAL_GetTick>
 8004a8e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a90:	2202      	movs	r2, #2
 8004a92:	68a3      	ldr	r3, [r4, #8]
 8004a94:	4213      	tst	r3, r2
 8004a96:	d000      	beq.n	8004a9a <HAL_RCC_OscConfig+0x3ea>
 8004a98:	e658      	b.n	800474c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a9a:	f7fe fd45 	bl	8003528 <HAL_GetTick>
 8004a9e:	1bc0      	subs	r0, r0, r7
 8004aa0:	2802      	cmp	r0, #2
 8004aa2:	d9f5      	bls.n	8004a90 <HAL_RCC_OscConfig+0x3e0>
 8004aa4:	e67a      	b.n	800479c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 8004aa6:	68a1      	ldr	r1, [r4, #8]
 8004aa8:	4399      	bics	r1, r3
 8004aaa:	60a1      	str	r1, [r4, #8]
 8004aac:	6a13      	ldr	r3, [r2, #32]
 8004aae:	493e      	ldr	r1, [pc, #248]	; (8004ba8 <HAL_RCC_OscConfig+0x4f8>)
 8004ab0:	400b      	ands	r3, r1
 8004ab2:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fd38 	bl	8003528 <HAL_GetTick>
 8004ab8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aba:	2202      	movs	r2, #2
 8004abc:	68a3      	ldr	r3, [r4, #8]
 8004abe:	4213      	tst	r3, r2
 8004ac0:	d100      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x414>
 8004ac2:	e643      	b.n	800474c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac4:	f7fe fd30 	bl	8003528 <HAL_GetTick>
 8004ac8:	1bc0      	subs	r0, r0, r7
 8004aca:	2802      	cmp	r0, #2
 8004acc:	d9f5      	bls.n	8004aba <HAL_RCC_OscConfig+0x40a>
 8004ace:	e665      	b.n	800479c <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ad0:	2e0c      	cmp	r6, #12
 8004ad2:	d043      	beq.n	8004b5c <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad4:	4a35      	ldr	r2, [pc, #212]	; (8004bac <HAL_RCC_OscConfig+0x4fc>)
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d12e      	bne.n	8004b38 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8004ada:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004adc:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004ade:	4013      	ands	r3, r2
 8004ae0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004ae2:	f7fe fd21 	bl	8003528 <HAL_GetTick>
 8004ae6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ae8:	04bf      	lsls	r7, r7, #18
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	423b      	tst	r3, r7
 8004aee:	d11d      	bne.n	8004b2c <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004af2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004af4:	68e2      	ldr	r2, [r4, #12]
 8004af6:	430b      	orrs	r3, r1
 8004af8:	492d      	ldr	r1, [pc, #180]	; (8004bb0 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004afa:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004afc:	400a      	ands	r2, r1
 8004afe:	4313      	orrs	r3, r2
 8004b00:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004b02:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	045b      	lsls	r3, r3, #17
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004b12:	f7fe fd09 	bl	8003528 <HAL_GetTick>
 8004b16:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	4233      	tst	r3, r6
 8004b1c:	d000      	beq.n	8004b20 <HAL_RCC_OscConfig+0x470>
 8004b1e:	e619      	b.n	8004754 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fe fd02 	bl	8003528 <HAL_GetTick>
 8004b24:	1b40      	subs	r0, r0, r5
 8004b26:	2802      	cmp	r0, #2
 8004b28:	d9f6      	bls.n	8004b18 <HAL_RCC_OscConfig+0x468>
 8004b2a:	e637      	b.n	800479c <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fe fcfc 	bl	8003528 <HAL_GetTick>
 8004b30:	1b80      	subs	r0, r0, r6
 8004b32:	2802      	cmp	r0, #2
 8004b34:	d9d9      	bls.n	8004aea <HAL_RCC_OscConfig+0x43a>
 8004b36:	e631      	b.n	800479c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8004b38:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b3a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004b40:	f7fe fcf2 	bl	8003528 <HAL_GetTick>
 8004b44:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b46:	04b6      	lsls	r6, r6, #18
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	4233      	tst	r3, r6
 8004b4c:	d100      	bne.n	8004b50 <HAL_RCC_OscConfig+0x4a0>
 8004b4e:	e601      	b.n	8004754 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fe fcea 	bl	8003528 <HAL_GetTick>
 8004b54:	1b40      	subs	r0, r0, r5
 8004b56:	2802      	cmp	r0, #2
 8004b58:	d9f6      	bls.n	8004b48 <HAL_RCC_OscConfig+0x498>
 8004b5a:	e61f      	b.n	800479c <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8004b5c:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d100      	bne.n	8004b64 <HAL_RCC_OscConfig+0x4b4>
 8004b62:	e61c      	b.n	800479e <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b64:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8004b66:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b68:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004b6a:	0252      	lsls	r2, r2, #9
 8004b6c:	401a      	ands	r2, r3
 8004b6e:	428a      	cmp	r2, r1
 8004b70:	d000      	beq.n	8004b74 <HAL_RCC_OscConfig+0x4c4>
 8004b72:	e5fd      	b.n	8004770 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b74:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b76:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b78:	0392      	lsls	r2, r2, #14
 8004b7a:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7c:	428a      	cmp	r2, r1
 8004b7e:	d000      	beq.n	8004b82 <HAL_RCC_OscConfig+0x4d2>
 8004b80:	e5f6      	b.n	8004770 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004b82:	22c0      	movs	r2, #192	; 0xc0
 8004b84:	0412      	lsls	r2, r2, #16
 8004b86:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b88:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d100      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4e0>
 8004b8e:	e5e1      	b.n	8004754 <HAL_RCC_OscConfig+0xa4>
 8004b90:	e5ee      	b.n	8004770 <HAL_RCC_OscConfig+0xc0>
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	fffffeff 	.word	0xfffffeff
 8004b98:	fffffbff 	.word	0xfffffbff
 8004b9c:	00001388 	.word	0x00001388
 8004ba0:	efffffff 	.word	0xefffffff
 8004ba4:	40010000 	.word	0x40010000
 8004ba8:	ffffdfff 	.word	0xffffdfff
 8004bac:	feffffff 	.word	0xfeffffff
 8004bb0:	ff02ffff 	.word	0xff02ffff

08004bb4 <HAL_RCC_ClockConfig>:
{
 8004bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bb6:	1e04      	subs	r4, r0, #0
 8004bb8:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004bbc:	2001      	movs	r0, #1
}
 8004bbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc0:	2501      	movs	r5, #1
 8004bc2:	4e5b      	ldr	r6, [pc, #364]	; (8004d30 <HAL_RCC_ClockConfig+0x17c>)
 8004bc4:	9a01      	ldr	r2, [sp, #4]
 8004bc6:	6833      	ldr	r3, [r6, #0]
 8004bc8:	402b      	ands	r3, r5
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d331      	bcc.n	8004c32 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	0793      	lsls	r3, r2, #30
 8004bd2:	d443      	bmi.n	8004c5c <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd4:	07d3      	lsls	r3, r2, #31
 8004bd6:	d449      	bmi.n	8004c6c <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd8:	2501      	movs	r5, #1
 8004bda:	6833      	ldr	r3, [r6, #0]
 8004bdc:	9a01      	ldr	r2, [sp, #4]
 8004bde:	402b      	ands	r3, r5
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d909      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	43ab      	bics	r3, r5
 8004be8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004bea:	f7fe fc9d 	bl	8003528 <HAL_GetTick>
 8004bee:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf0:	6833      	ldr	r3, [r6, #0]
 8004bf2:	422b      	tst	r3, r5
 8004bf4:	d000      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
 8004bf6:	e08c      	b.n	8004d12 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	6822      	ldr	r2, [r4, #0]
 8004bfa:	4d4e      	ldr	r5, [pc, #312]	; (8004d34 <HAL_RCC_ClockConfig+0x180>)
 8004bfc:	0753      	lsls	r3, r2, #29
 8004bfe:	d500      	bpl.n	8004c02 <HAL_RCC_ClockConfig+0x4e>
 8004c00:	e08f      	b.n	8004d22 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c02:	0713      	lsls	r3, r2, #28
 8004c04:	d506      	bpl.n	8004c14 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c06:	68e9      	ldr	r1, [r5, #12]
 8004c08:	6923      	ldr	r3, [r4, #16]
 8004c0a:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <HAL_RCC_ClockConfig+0x184>)
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	400a      	ands	r2, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c14:	f7ff fd04 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8004c18:	68eb      	ldr	r3, [r5, #12]
 8004c1a:	4a48      	ldr	r2, [pc, #288]	; (8004d3c <HAL_RCC_ClockConfig+0x188>)
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	0f1b      	lsrs	r3, r3, #28
 8004c20:	5cd3      	ldrb	r3, [r2, r3]
 8004c22:	40d8      	lsrs	r0, r3
 8004c24:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <HAL_RCC_ClockConfig+0x18c>)
 8004c26:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004c28:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <HAL_RCC_ClockConfig+0x190>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	f7fe fc38 	bl	80034a0 <HAL_InitTick>
  if(status != HAL_OK)
 8004c30:	e7c5      	b.n	8004bbe <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	6833      	ldr	r3, [r6, #0]
 8004c34:	9a01      	ldr	r2, [sp, #4]
 8004c36:	43ab      	bics	r3, r5
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004c3c:	f7fe fc74 	bl	8003528 <HAL_GetTick>
 8004c40:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	6833      	ldr	r3, [r6, #0]
 8004c44:	9a01      	ldr	r2, [sp, #4]
 8004c46:	402b      	ands	r3, r5
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d0c0      	beq.n	8004bce <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4c:	f7fe fc6c 	bl	8003528 <HAL_GetTick>
 8004c50:	4b3d      	ldr	r3, [pc, #244]	; (8004d48 <HAL_RCC_ClockConfig+0x194>)
 8004c52:	1bc0      	subs	r0, r0, r7
 8004c54:	4298      	cmp	r0, r3
 8004c56:	d9f4      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8004c58:	2003      	movs	r0, #3
 8004c5a:	e7b0      	b.n	8004bbe <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c5c:	20f0      	movs	r0, #240	; 0xf0
 8004c5e:	4935      	ldr	r1, [pc, #212]	; (8004d34 <HAL_RCC_ClockConfig+0x180>)
 8004c60:	68cb      	ldr	r3, [r1, #12]
 8004c62:	4383      	bics	r3, r0
 8004c64:	68a0      	ldr	r0, [r4, #8]
 8004c66:	4303      	orrs	r3, r0
 8004c68:	60cb      	str	r3, [r1, #12]
 8004c6a:	e7b3      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6c:	4d31      	ldr	r5, [pc, #196]	; (8004d34 <HAL_RCC_ClockConfig+0x180>)
 8004c6e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c70:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	2a02      	cmp	r2, #2
 8004c74:	d118      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c76:	039b      	lsls	r3, r3, #14
 8004c78:	d5a0      	bpl.n	8004bbc <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7a:	2103      	movs	r1, #3
 8004c7c:	68eb      	ldr	r3, [r5, #12]
 8004c7e:	438b      	bics	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004c84:	f7fe fc50 	bl	8003528 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c88:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004c8a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d118      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c90:	220c      	movs	r2, #12
 8004c92:	68eb      	ldr	r3, [r5, #12]
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d09e      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9a:	f7fe fc45 	bl	8003528 <HAL_GetTick>
 8004c9e:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <HAL_RCC_ClockConfig+0x194>)
 8004ca0:	1bc0      	subs	r0, r0, r7
 8004ca2:	4298      	cmp	r0, r3
 8004ca4:	d9f4      	bls.n	8004c90 <HAL_RCC_ClockConfig+0xdc>
 8004ca6:	e7d7      	b.n	8004c58 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ca8:	2a03      	cmp	r2, #3
 8004caa:	d102      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cac:	019b      	lsls	r3, r3, #6
 8004cae:	d4e4      	bmi.n	8004c7a <HAL_RCC_ClockConfig+0xc6>
 8004cb0:	e784      	b.n	8004bbc <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cb2:	2a01      	cmp	r2, #1
 8004cb4:	d102      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb6:	075b      	lsls	r3, r3, #29
 8004cb8:	d4df      	bmi.n	8004c7a <HAL_RCC_ClockConfig+0xc6>
 8004cba:	e77f      	b.n	8004bbc <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cbc:	059b      	lsls	r3, r3, #22
 8004cbe:	d4dc      	bmi.n	8004c7a <HAL_RCC_ClockConfig+0xc6>
 8004cc0:	e77c      	b.n	8004bbc <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d10b      	bne.n	8004cde <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cc6:	220c      	movs	r2, #12
 8004cc8:	68eb      	ldr	r3, [r5, #12]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d083      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd0:	f7fe fc2a 	bl	8003528 <HAL_GetTick>
 8004cd4:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <HAL_RCC_ClockConfig+0x194>)
 8004cd6:	1bc0      	subs	r0, r0, r7
 8004cd8:	4298      	cmp	r0, r3
 8004cda:	d9f4      	bls.n	8004cc6 <HAL_RCC_ClockConfig+0x112>
 8004cdc:	e7bc      	b.n	8004c58 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d011      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ce2:	220c      	movs	r2, #12
 8004ce4:	68eb      	ldr	r3, [r5, #12]
 8004ce6:	4213      	tst	r3, r2
 8004ce8:	d100      	bne.n	8004cec <HAL_RCC_ClockConfig+0x138>
 8004cea:	e775      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7fe fc1c 	bl	8003528 <HAL_GetTick>
 8004cf0:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <HAL_RCC_ClockConfig+0x194>)
 8004cf2:	1bc0      	subs	r0, r0, r7
 8004cf4:	4298      	cmp	r0, r3
 8004cf6:	d9f4      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x12e>
 8004cf8:	e7ae      	b.n	8004c58 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfa:	f7fe fc15 	bl	8003528 <HAL_GetTick>
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <HAL_RCC_ClockConfig+0x194>)
 8004d00:	1bc0      	subs	r0, r0, r7
 8004d02:	4298      	cmp	r0, r3
 8004d04:	d8a8      	bhi.n	8004c58 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d06:	220c      	movs	r2, #12
 8004d08:	68eb      	ldr	r3, [r5, #12]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d1f4      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x146>
 8004d10:	e762      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d12:	f7fe fc09 	bl	8003528 <HAL_GetTick>
 8004d16:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <HAL_RCC_ClockConfig+0x194>)
 8004d18:	1bc0      	subs	r0, r0, r7
 8004d1a:	4298      	cmp	r0, r3
 8004d1c:	d800      	bhi.n	8004d20 <HAL_RCC_ClockConfig+0x16c>
 8004d1e:	e767      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x3c>
 8004d20:	e79a      	b.n	8004c58 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d22:	68eb      	ldr	r3, [r5, #12]
 8004d24:	4909      	ldr	r1, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x198>)
 8004d26:	400b      	ands	r3, r1
 8004d28:	68e1      	ldr	r1, [r4, #12]
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	60eb      	str	r3, [r5, #12]
 8004d2e:	e768      	b.n	8004c02 <HAL_RCC_ClockConfig+0x4e>
 8004d30:	40022000 	.word	0x40022000
 8004d34:	40021000 	.word	0x40021000
 8004d38:	ffffc7ff 	.word	0xffffc7ff
 8004d3c:	08006d04 	.word	0x08006d04
 8004d40:	2000001c 	.word	0x2000001c
 8004d44:	20000024 	.word	0x20000024
 8004d48:	00001388 	.word	0x00001388
 8004d4c:	fffff8ff 	.word	0xfffff8ff

08004d50 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d50:	6803      	ldr	r3, [r0, #0]
{
 8004d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d54:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d56:	069b      	lsls	r3, r3, #26
 8004d58:	d53c      	bpl.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5a:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004d5c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5e:	4c5a      	ldr	r4, [pc, #360]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004d60:	055b      	lsls	r3, r3, #21
 8004d62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004d64:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d66:	421a      	tst	r2, r3
 8004d68:	d104      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004d70:	2301      	movs	r3, #1
 8004d72:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d74:	2780      	movs	r7, #128	; 0x80
 8004d76:	4e55      	ldr	r6, [pc, #340]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004d78:	007f      	lsls	r7, r7, #1
 8004d7a:	6833      	ldr	r3, [r6, #0]
 8004d7c:	423b      	tst	r3, r7
 8004d7e:	d062      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d80:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d82:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d84:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d86:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004d88:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d8a:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d90:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004d92:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d94:	428a      	cmp	r2, r1
 8004d96:	d167      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004d98:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004d9e:	421a      	tst	r2, r3
 8004da0:	d16a      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da2:	6869      	ldr	r1, [r5, #4]
 8004da4:	23c0      	movs	r3, #192	; 0xc0
 8004da6:	000a      	movs	r2, r1
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	401a      	ands	r2, r3
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	4847      	ldr	r0, [pc, #284]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004db4:	4003      	ands	r3, r0
 8004db6:	20c0      	movs	r0, #192	; 0xc0
 8004db8:	0380      	lsls	r0, r0, #14
 8004dba:	4001      	ands	r1, r0
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004dc2:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dc4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc6:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d103      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dce:	4a41      	ldr	r2, [pc, #260]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	07da      	lsls	r2, r3, #31
 8004dd8:	d506      	bpl.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dda:	2003      	movs	r0, #3
 8004ddc:	493a      	ldr	r1, [pc, #232]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004dde:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004de0:	4382      	bics	r2, r0
 8004de2:	68a8      	ldr	r0, [r5, #8]
 8004de4:	4302      	orrs	r2, r0
 8004de6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004de8:	079a      	lsls	r2, r3, #30
 8004dea:	d506      	bpl.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dec:	200c      	movs	r0, #12
 8004dee:	4936      	ldr	r1, [pc, #216]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004df0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004df2:	4382      	bics	r2, r0
 8004df4:	68e8      	ldr	r0, [r5, #12]
 8004df6:	4302      	orrs	r2, r0
 8004df8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dfa:	075a      	lsls	r2, r3, #29
 8004dfc:	d506      	bpl.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dfe:	4932      	ldr	r1, [pc, #200]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e00:	4835      	ldr	r0, [pc, #212]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004e02:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e04:	4002      	ands	r2, r0
 8004e06:	6928      	ldr	r0, [r5, #16]
 8004e08:	4302      	orrs	r2, r0
 8004e0a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e0c:	071a      	lsls	r2, r3, #28
 8004e0e:	d506      	bpl.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e10:	492d      	ldr	r1, [pc, #180]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e12:	4832      	ldr	r0, [pc, #200]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004e14:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e16:	4002      	ands	r2, r0
 8004e18:	6968      	ldr	r0, [r5, #20]
 8004e1a:	4302      	orrs	r2, r0
 8004e1c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e1e:	065a      	lsls	r2, r3, #25
 8004e20:	d506      	bpl.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e22:	4929      	ldr	r1, [pc, #164]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e24:	482e      	ldr	r0, [pc, #184]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e26:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e28:	4002      	ands	r2, r0
 8004e2a:	69e8      	ldr	r0, [r5, #28]
 8004e2c:	4302      	orrs	r2, r0
 8004e2e:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004e30:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e32:	061b      	lsls	r3, r3, #24
 8004e34:	d517      	bpl.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004e36:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004e38:	492a      	ldr	r1, [pc, #168]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004e3a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004e3c:	400b      	ands	r3, r1
 8004e3e:	69a9      	ldr	r1, [r5, #24]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e44:	e00f      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x116>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e46:	6833      	ldr	r3, [r6, #0]
 8004e48:	433b      	orrs	r3, r7
 8004e4a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004e4c:	f7fe fb6c 	bl	8003528 <HAL_GetTick>
 8004e50:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e52:	6833      	ldr	r3, [r6, #0]
 8004e54:	423b      	tst	r3, r7
 8004e56:	d193      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e58:	f7fe fb66 	bl	8003528 <HAL_GetTick>
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	1ac0      	subs	r0, r0, r3
 8004e60:	2864      	cmp	r0, #100	; 0x64
 8004e62:	d9f6      	bls.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x102>
          return HAL_TIMEOUT;
 8004e64:	2003      	movs	r0, #3
}
 8004e66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004e68:	429e      	cmp	r6, r3
 8004e6a:	d195      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e6c:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8004e6e:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e70:	0392      	lsls	r2, r2, #14
 8004e72:	d400      	bmi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8004e74:	e790      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004e76:	e7f6      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x116>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004e78:	42b1      	cmp	r1, r6
 8004e7a:	d100      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8004e7c:	e791      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e7e:	682b      	ldr	r3, [r5, #0]
 8004e80:	069b      	lsls	r3, r3, #26
 8004e82:	d400      	bmi.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e84:	e78d      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e86:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e88:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e8a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004e8c:	0312      	lsls	r2, r2, #12
 8004e8e:	4302      	orrs	r2, r0
 8004e90:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e92:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e96:	4815      	ldr	r0, [pc, #84]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e98:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e9a:	4002      	ands	r2, r0
 8004e9c:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004e9e:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004ea0:	05cb      	lsls	r3, r1, #23
 8004ea2:	d400      	bmi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004ea4:	e77d      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8004ea6:	f7fe fb3f 	bl	8003528 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eaa:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004eac:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eae:	00bf      	lsls	r7, r7, #2
 8004eb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004eb2:	423b      	tst	r3, r7
 8004eb4:	d000      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004eb6:	e774      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fe fb36 	bl	8003528 <HAL_GetTick>
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004ebe:	1b80      	subs	r0, r0, r6
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	d9f5      	bls.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ec4:	e7ce      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	ffcfffff 	.word	0xffcfffff
 8004ed4:	efffffff 	.word	0xefffffff
 8004ed8:	fffff3ff 	.word	0xfffff3ff
 8004edc:	ffffcfff 	.word	0xffffcfff
 8004ee0:	fbffffff 	.word	0xfbffffff
 8004ee4:	fff3ffff 	.word	0xfff3ffff
 8004ee8:	fffcffff 	.word	0xfffcffff
 8004eec:	fff7ffff 	.word	0xfff7ffff
 8004ef0:	00001388 	.word	0x00001388

08004ef4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef6:	001d      	movs	r5, r3
 8004ef8:	0017      	movs	r7, r2
 8004efa:	b085      	sub	sp, #20
 8004efc:	000e      	movs	r6, r1
 8004efe:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f00:	f7fe fb12 	bl	8003528 <HAL_GetTick>
 8004f04:	19ed      	adds	r5, r5, r7
 8004f06:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004f08:	f7fe fb0e 	bl	8003528 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8004f0e:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	015b      	lsls	r3, r3, #5
 8004f14:	0d1b      	lsrs	r3, r3, #20
 8004f16:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f18:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004f1a:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1c:	6893      	ldr	r3, [r2, #8]
 8004f1e:	4033      	ands	r3, r6
 8004f20:	429e      	cmp	r6, r3
 8004f22:	d001      	beq.n	8004f28 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8004f24:	2000      	movs	r0, #0
 8004f26:	e032      	b.n	8004f8e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8004f28:	1c7b      	adds	r3, r7, #1
 8004f2a:	d0f7      	beq.n	8004f1c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f2c:	f7fe fafc 	bl	8003528 <HAL_GetTick>
 8004f30:	9b01      	ldr	r3, [sp, #4]
 8004f32:	1ac0      	subs	r0, r0, r3
 8004f34:	42a8      	cmp	r0, r5
 8004f36:	d32c      	bcc.n	8004f92 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f38:	21e0      	movs	r1, #224	; 0xe0
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	438a      	bics	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f42:	2282      	movs	r2, #130	; 0x82
 8004f44:	6861      	ldr	r1, [r4, #4]
 8004f46:	0052      	lsls	r2, r2, #1
 8004f48:	4291      	cmp	r1, r2
 8004f4a:	d10c      	bne.n	8004f66 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004f4c:	2180      	movs	r1, #128	; 0x80
 8004f4e:	68a2      	ldr	r2, [r4, #8]
 8004f50:	0209      	lsls	r1, r1, #8
 8004f52:	428a      	cmp	r2, r1
 8004f54:	d003      	beq.n	8004f5e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f56:	2180      	movs	r1, #128	; 0x80
 8004f58:	00c9      	lsls	r1, r1, #3
 8004f5a:	428a      	cmp	r2, r1
 8004f5c:	d103      	bne.n	8004f66 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8004f5e:	2140      	movs	r1, #64	; 0x40
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	438a      	bics	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f66:	2180      	movs	r1, #128	; 0x80
 8004f68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f6a:	0189      	lsls	r1, r1, #6
 8004f6c:	428a      	cmp	r2, r1
 8004f6e:	d106      	bne.n	8004f7e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	480d      	ldr	r0, [pc, #52]	; (8004fa8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8004f74:	4001      	ands	r1, r0
 8004f76:	6019      	str	r1, [r3, #0]
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004f7e:	0023      	movs	r3, r4
 8004f80:	2201      	movs	r2, #1
 8004f82:	3351      	adds	r3, #81	; 0x51
 8004f84:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004f86:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004f88:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004f8a:	3450      	adds	r4, #80	; 0x50
 8004f8c:	7023      	strb	r3, [r4, #0]
}
 8004f8e:	b005      	add	sp, #20
 8004f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004f92:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004f94:	1e5a      	subs	r2, r3, #1
 8004f96:	4193      	sbcs	r3, r2
 8004f98:	425b      	negs	r3, r3
 8004f9a:	401d      	ands	r5, r3
      count--;
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	e7ba      	b.n	8004f18 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	2000001c 	.word	0x2000001c
 8004fa8:	ffffdfff 	.word	0xffffdfff

08004fac <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fac:	4b16      	ldr	r3, [pc, #88]	; (8005008 <SPI_EndRxTxTransaction+0x5c>)
{
 8004fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fb0:	0004      	movs	r4, r0
 8004fb2:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	4915      	ldr	r1, [pc, #84]	; (800500c <SPI_EndRxTxTransaction+0x60>)
{
 8004fb8:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fba:	f7fb f8c3 	bl	8000144 <__udivsi3>
 8004fbe:	23fa      	movs	r3, #250	; 0xfa
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4343      	muls	r3, r0
 8004fc4:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc6:	2382      	movs	r3, #130	; 0x82
 8004fc8:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fca:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4299      	cmp	r1, r3
 8004fd0:	d10d      	bne.n	8004fee <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd2:	0033      	movs	r3, r6
 8004fd4:	002a      	movs	r2, r5
 8004fd6:	2180      	movs	r1, #128	; 0x80
 8004fd8:	0020      	movs	r0, r4
 8004fda:	f7ff ff8b 	bl	8004ef4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d00f      	beq.n	8005002 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fe2:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004fe4:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fe6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8004fec:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8004fee:	9b01      	ldr	r3, [sp, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d006      	beq.n	8005002 <SPI_EndRxTxTransaction+0x56>
      count--;
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4213      	tst	r3, r2
 8005000:	d1f5      	bne.n	8004fee <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8005002:	2000      	movs	r0, #0
 8005004:	e7f2      	b.n	8004fec <SPI_EndRxTxTransaction+0x40>
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	2000001c 	.word	0x2000001c
 800500c:	016e3600 	.word	0x016e3600

08005010 <HAL_SPI_Init>:
{
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005014:	2001      	movs	r0, #1
  if (hspi == NULL)
 8005016:	2c00      	cmp	r4, #0
 8005018:	d054      	beq.n	80050c4 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800501a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d152      	bne.n	80050c6 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005020:	2282      	movs	r2, #130	; 0x82
 8005022:	6861      	ldr	r1, [r4, #4]
 8005024:	0052      	lsls	r2, r2, #1
 8005026:	4291      	cmp	r1, r2
 8005028:	d000      	beq.n	800502c <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800502a:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800502c:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800502e:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005030:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005032:	3551      	adds	r5, #81	; 0x51
 8005034:	782b      	ldrb	r3, [r5, #0]
 8005036:	b2da      	uxtb	r2, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 800503c:	0023      	movs	r3, r4
 800503e:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8005040:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005042:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8005044:	f7fe f974 	bl	8003330 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005048:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 800504a:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800504c:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800504e:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005050:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8005052:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005054:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8005056:	4393      	bics	r3, r2
 8005058:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800505a:	2382      	movs	r3, #130	; 0x82
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4033      	ands	r3, r6
 8005060:	2684      	movs	r6, #132	; 0x84
 8005062:	0236      	lsls	r6, r6, #8
 8005064:	403e      	ands	r6, r7
 8005066:	4333      	orrs	r3, r6
 8005068:	2680      	movs	r6, #128	; 0x80
 800506a:	68e7      	ldr	r7, [r4, #12]
 800506c:	0136      	lsls	r6, r6, #4
 800506e:	403e      	ands	r6, r7
 8005070:	4333      	orrs	r3, r6
 8005072:	6926      	ldr	r6, [r4, #16]
 8005074:	69a2      	ldr	r2, [r4, #24]
 8005076:	4030      	ands	r0, r6
 8005078:	2601      	movs	r6, #1
 800507a:	4303      	orrs	r3, r0
 800507c:	6960      	ldr	r0, [r4, #20]
 800507e:	69e7      	ldr	r7, [r4, #28]
 8005080:	4030      	ands	r0, r6
 8005082:	4303      	orrs	r3, r0
 8005084:	2080      	movs	r0, #128	; 0x80
 8005086:	0080      	lsls	r0, r0, #2
 8005088:	4010      	ands	r0, r2
 800508a:	4303      	orrs	r3, r0
 800508c:	2038      	movs	r0, #56	; 0x38
 800508e:	4038      	ands	r0, r7
 8005090:	4303      	orrs	r3, r0
 8005092:	2080      	movs	r0, #128	; 0x80
 8005094:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005096:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005098:	4038      	ands	r0, r7
 800509a:	4303      	orrs	r3, r0
 800509c:	2080      	movs	r0, #128	; 0x80
 800509e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80050a0:	0180      	lsls	r0, r0, #6
 80050a2:	4038      	ands	r0, r7
 80050a4:	4303      	orrs	r3, r0
 80050a6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050a8:	2304      	movs	r3, #4
 80050aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80050ac:	401a      	ands	r2, r3
 80050ae:	330c      	adds	r3, #12
 80050b0:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050b4:	431a      	orrs	r2, r3
 80050b6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050b8:	69cb      	ldr	r3, [r1, #28]
 80050ba:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <HAL_SPI_Init+0xc0>)
 80050bc:	4013      	ands	r3, r2
 80050be:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050c0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050c2:	702e      	strb	r6, [r5, #0]
}
 80050c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050c6:	2300      	movs	r3, #0
 80050c8:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ca:	6163      	str	r3, [r4, #20]
 80050cc:	e7ae      	b.n	800502c <HAL_SPI_Init+0x1c>
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	fffff7ff 	.word	0xfffff7ff

080050d4 <HAL_SPI_Transmit_DMA>:
{
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80050d6:	0006      	movs	r6, r0
 80050d8:	3650      	adds	r6, #80	; 0x50
 80050da:	7833      	ldrb	r3, [r6, #0]
{
 80050dc:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80050de:	2502      	movs	r5, #2
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d03e      	beq.n	8005162 <HAL_SPI_Transmit_DMA+0x8e>
 80050e4:	2301      	movs	r3, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80050e6:	0007      	movs	r7, r0
  __HAL_LOCK(hspi);
 80050e8:	7033      	strb	r3, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80050ea:	3751      	adds	r7, #81	; 0x51
 80050ec:	783b      	ldrb	r3, [r7, #0]
 80050ee:	b2dd      	uxtb	r5, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d14a      	bne.n	800518a <HAL_SPI_Transmit_DMA+0xb6>
  if ((pData == NULL) || (Size == 0U))
 80050f4:	2900      	cmp	r1, #0
 80050f6:	d032      	beq.n	800515e <HAL_SPI_Transmit_DMA+0x8a>
 80050f8:	2a00      	cmp	r2, #0
 80050fa:	d030      	beq.n	800515e <HAL_SPI_Transmit_DMA+0x8a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050fc:	3302      	adds	r3, #2
 80050fe:	703b      	strb	r3, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005100:	2300      	movs	r3, #0
 8005102:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005104:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005106:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->TxISR       = NULL;
 8005108:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 800510a:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800510c:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800510e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005110:	2380      	movs	r3, #128	; 0x80
  hspi->TxXferSize  = Size;
 8005112:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005114:	6301      	str	r1, [r0, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8005116:	6802      	ldr	r2, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005118:	6880      	ldr	r0, [r0, #8]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	4298      	cmp	r0, r3
 800511e:	d108      	bne.n	8005132 <HAL_SPI_Transmit_DMA+0x5e>
    __HAL_SPI_DISABLE(hspi);
 8005120:	2040      	movs	r0, #64	; 0x40
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	4383      	bics	r3, r0
 8005126:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	6810      	ldr	r0, [r2, #0]
 800512c:	01db      	lsls	r3, r3, #7
 800512e:	4303      	orrs	r3, r0
 8005130:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005132:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005134:	4b16      	ldr	r3, [pc, #88]	; (8005190 <HAL_SPI_Transmit_DMA+0xbc>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005136:	320c      	adds	r2, #12
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005138:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800513a:	4b16      	ldr	r3, [pc, #88]	; (8005194 <HAL_SPI_Transmit_DMA+0xc0>)
 800513c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800513e:	4b16      	ldr	r3, [pc, #88]	; (8005198 <HAL_SPI_Transmit_DMA+0xc4>)
 8005140:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8005146:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005148:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800514a:	f7fe fcad 	bl	8003aa8 <HAL_DMA_Start_IT>
 800514e:	2800      	cmp	r0, #0
 8005150:	d009      	beq.n	8005166 <HAL_SPI_Transmit_DMA+0x92>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005152:	2310      	movs	r3, #16
 8005154:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005156:	4313      	orrs	r3, r2
 8005158:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800515a:	2301      	movs	r3, #1
 800515c:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 800515e:	2300      	movs	r3, #0
 8005160:	7033      	strb	r3, [r6, #0]
}
 8005162:	0028      	movs	r0, r5
 8005164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005166:	2240      	movs	r2, #64	; 0x40
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	6819      	ldr	r1, [r3, #0]
 800516c:	4211      	tst	r1, r2
 800516e:	d102      	bne.n	8005176 <HAL_SPI_Transmit_DMA+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8005170:	6819      	ldr	r1, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005176:	2220      	movs	r2, #32
 8005178:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800517a:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005180:	2202      	movs	r2, #2
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
 8005188:	e7e9      	b.n	800515e <HAL_SPI_Transmit_DMA+0x8a>
    errorcode = HAL_BUSY;
 800518a:	2502      	movs	r5, #2
 800518c:	e7e7      	b.n	800515e <HAL_SPI_Transmit_DMA+0x8a>
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	080051a1 	.word	0x080051a1
 8005194:	080051d1 	.word	0x080051d1
 8005198:	080051ad 	.word	0x080051ad

0800519c <HAL_SPI_TxCpltCallback>:
 800519c:	4770      	bx	lr

0800519e <HAL_SPI_TxHalfCpltCallback>:
 800519e:	4770      	bx	lr

080051a0 <SPI_DMAHalfTransmitCplt>:
{
 80051a0:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80051a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80051a4:	f7ff fffb 	bl	800519e <HAL_SPI_TxHalfCpltCallback>
}
 80051a8:	bd10      	pop	{r4, pc}

080051aa <HAL_SPI_ErrorCallback>:
 80051aa:	4770      	bx	lr

080051ac <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051ac:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80051b0:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051b2:	6802      	ldr	r2, [r0, #0]
 80051b4:	6853      	ldr	r3, [r2, #4]
 80051b6:	438b      	bics	r3, r1
 80051b8:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051ba:	2310      	movs	r3, #16
 80051bc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80051be:	4313      	orrs	r3, r2
 80051c0:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80051c2:	0003      	movs	r3, r0
 80051c4:	2201      	movs	r2, #1
 80051c6:	3351      	adds	r3, #81	; 0x51
 80051c8:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 80051ca:	f7ff ffee 	bl	80051aa <HAL_SPI_ErrorCallback>
}
 80051ce:	bd10      	pop	{r4, pc}

080051d0 <SPI_DMATransmitCplt>:
{
 80051d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051d2:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80051d6:	f7fe f9a7 	bl	8003528 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80051da:	682b      	ldr	r3, [r5, #0]
 80051dc:	2520      	movs	r5, #32
 80051de:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80051e0:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80051e2:	422b      	tst	r3, r5
 80051e4:	d127      	bne.n	8005236 <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80051e6:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	43a9      	bics	r1, r5
 80051ee:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	4381      	bics	r1, r0
 80051f4:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051f6:	0020      	movs	r0, r4
 80051f8:	2164      	movs	r1, #100	; 0x64
 80051fa:	f7ff fed7 	bl	8004fac <SPI_EndRxTxTransaction>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d002      	beq.n	8005208 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005202:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005204:	431d      	orrs	r5, r3
 8005206:	6565      	str	r5, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005208:	68a3      	ldr	r3, [r4, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	9201      	str	r2, [sp, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005220:	0023      	movs	r3, r4
 8005222:	2201      	movs	r2, #1
 8005224:	3351      	adds	r3, #81	; 0x51
 8005226:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005228:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 800522e:	0020      	movs	r0, r4
 8005230:	f7ff ffbb 	bl	80051aa <HAL_SPI_ErrorCallback>
}
 8005234:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8005236:	0020      	movs	r0, r4
 8005238:	f7ff ffb0 	bl	800519c <HAL_SPI_TxCpltCallback>
 800523c:	e7fa      	b.n	8005234 <SPI_DMATransmitCplt+0x64>
	...

08005240 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005240:	2280      	movs	r2, #128	; 0x80
{
 8005242:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8005244:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005246:	05d2      	lsls	r2, r2, #23
 8005248:	4290      	cmp	r0, r2
 800524a:	d005      	beq.n	8005258 <TIM_Base_SetConfig+0x18>
 800524c:	4c10      	ldr	r4, [pc, #64]	; (8005290 <TIM_Base_SetConfig+0x50>)
 800524e:	42a0      	cmp	r0, r4
 8005250:	d002      	beq.n	8005258 <TIM_Base_SetConfig+0x18>
 8005252:	4c10      	ldr	r4, [pc, #64]	; (8005294 <TIM_Base_SetConfig+0x54>)
 8005254:	42a0      	cmp	r0, r4
 8005256:	d10f      	bne.n	8005278 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005258:	2470      	movs	r4, #112	; 0x70
 800525a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800525c:	684c      	ldr	r4, [r1, #4]
 800525e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005260:	4290      	cmp	r0, r2
 8005262:	d005      	beq.n	8005270 <TIM_Base_SetConfig+0x30>
 8005264:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <TIM_Base_SetConfig+0x50>)
 8005266:	4290      	cmp	r0, r2
 8005268:	d002      	beq.n	8005270 <TIM_Base_SetConfig+0x30>
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <TIM_Base_SetConfig+0x54>)
 800526c:	4290      	cmp	r0, r2
 800526e:	d103      	bne.n	8005278 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005270:	4a09      	ldr	r2, [pc, #36]	; (8005298 <TIM_Base_SetConfig+0x58>)
 8005272:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005274:	68ca      	ldr	r2, [r1, #12]
 8005276:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	2280      	movs	r2, #128	; 0x80
 800527a:	4393      	bics	r3, r2
 800527c:	690a      	ldr	r2, [r1, #16]
 800527e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005280:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005282:	688b      	ldr	r3, [r1, #8]
 8005284:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005286:	680b      	ldr	r3, [r1, #0]
 8005288:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800528a:	2301      	movs	r3, #1
 800528c:	6143      	str	r3, [r0, #20]
}
 800528e:	bd10      	pop	{r4, pc}
 8005290:	40010800 	.word	0x40010800
 8005294:	40011400 	.word	0x40011400
 8005298:	fffffcff 	.word	0xfffffcff

0800529c <HAL_TIM_Base_Init>:
{
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	0004      	movs	r4, r0
    return HAL_ERROR;
 80052a0:	2001      	movs	r0, #1
  if (htim == NULL)
 80052a2:	2c00      	cmp	r4, #0
 80052a4:	d01d      	beq.n	80052e2 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 80052a6:	0025      	movs	r5, r4
 80052a8:	3539      	adds	r5, #57	; 0x39
 80052aa:	782b      	ldrb	r3, [r5, #0]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d105      	bne.n	80052be <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80052b2:	0023      	movs	r3, r4
 80052b4:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80052b6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80052b8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80052ba:	f7fe f87f 	bl	80033bc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80052be:	2302      	movs	r3, #2
 80052c0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	1d21      	adds	r1, r4, #4
 80052c6:	f7ff ffbb 	bl	8005240 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ca:	0022      	movs	r2, r4
 80052cc:	2301      	movs	r3, #1
  return HAL_OK;
 80052ce:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d0:	323e      	adds	r2, #62	; 0x3e
 80052d2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	343d      	adds	r4, #61	; 0x3d
 80052d6:	3a04      	subs	r2, #4
 80052d8:	7013      	strb	r3, [r2, #0]
 80052da:	7053      	strb	r3, [r2, #1]
 80052dc:	7093      	strb	r3, [r2, #2]
 80052de:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	702b      	strb	r3, [r5, #0]
}
 80052e2:	bd70      	pop	{r4, r5, r6, pc}

080052e4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80052e4:	0002      	movs	r2, r0
{
 80052e6:	0003      	movs	r3, r0
    return HAL_ERROR;
 80052e8:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80052ea:	3239      	adds	r2, #57	; 0x39
 80052ec:	7811      	ldrb	r1, [r2, #0]
 80052ee:	4281      	cmp	r1, r0
 80052f0:	d119      	bne.n	8005326 <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80052f2:	2102      	movs	r1, #2
 80052f4:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	4302      	orrs	r2, r0
 80052fc:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fe:	2280      	movs	r2, #128	; 0x80
 8005300:	05d2      	lsls	r2, r2, #23
 8005302:	4293      	cmp	r3, r2
 8005304:	d005      	beq.n	8005312 <HAL_TIM_Base_Start_IT+0x2e>
 8005306:	4a0b      	ldr	r2, [pc, #44]	; (8005334 <HAL_TIM_Base_Start_IT+0x50>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d002      	beq.n	8005312 <HAL_TIM_Base_Start_IT+0x2e>
 800530c:	4a0a      	ldr	r2, [pc, #40]	; (8005338 <HAL_TIM_Base_Start_IT+0x54>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10a      	bne.n	8005328 <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005312:	2107      	movs	r1, #7
 8005314:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8005316:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005318:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	2a06      	cmp	r2, #6
 800531c:	d003      	beq.n	8005326 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 800531e:	2201      	movs	r2, #1
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	601a      	str	r2, [r3, #0]
}
 8005326:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4310      	orrs	r0, r2
 800532c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800532e:	2000      	movs	r0, #0
 8005330:	e7f9      	b.n	8005326 <HAL_TIM_Base_Start_IT+0x42>
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	40010800 	.word	0x40010800
 8005338:	40011400 	.word	0x40011400

0800533c <HAL_TIM_ConfigClockSource>:
{
 800533c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800533e:	0005      	movs	r5, r0
 8005340:	2202      	movs	r2, #2
 8005342:	3538      	adds	r5, #56	; 0x38
 8005344:	782c      	ldrb	r4, [r5, #0]
{
 8005346:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8005348:	0010      	movs	r0, r2
 800534a:	2c01      	cmp	r4, #1
 800534c:	d01d      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 800534e:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8005350:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005352:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8005354:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005356:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005358:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800535a:	484c      	ldr	r0, [pc, #304]	; (800548c <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 800535c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800535e:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8005360:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8005362:	680a      	ldr	r2, [r1, #0]
 8005364:	2a60      	cmp	r2, #96	; 0x60
 8005366:	d05f      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0xec>
 8005368:	d832      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x94>
 800536a:	2a40      	cmp	r2, #64	; 0x40
 800536c:	d100      	bne.n	8005370 <HAL_TIM_ConfigClockSource+0x34>
 800536e:	e074      	b.n	800545a <HAL_TIM_ConfigClockSource+0x11e>
 8005370:	d814      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x60>
 8005372:	2a20      	cmp	r2, #32
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_ConfigClockSource+0x54>
 8005376:	d809      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x50>
 8005378:	2110      	movs	r1, #16
 800537a:	0010      	movs	r0, r2
 800537c:	4388      	bics	r0, r1
 800537e:	d007      	beq.n	8005390 <HAL_TIM_ConfigClockSource+0x54>
 8005380:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8005382:	2301      	movs	r3, #1
 8005384:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8005386:	2300      	movs	r3, #0
 8005388:	702b      	strb	r3, [r5, #0]
}
 800538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800538c:	2a30      	cmp	r2, #48	; 0x30
 800538e:	d1f7      	bne.n	8005380 <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005390:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8005392:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005394:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005396:	430a      	orrs	r2, r1
 8005398:	2107      	movs	r1, #7
 800539a:	e032      	b.n	8005402 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800539c:	2a50      	cmp	r2, #80	; 0x50
 800539e:	d1ef      	bne.n	8005380 <HAL_TIM_ConfigClockSource+0x44>
  tmpccer = TIMx->CCER;
 80053a0:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a2:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a4:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a6:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a8:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ae:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b0:	43a2      	bics	r2, r4
 80053b2:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b4:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	210a      	movs	r1, #10
 80053b8:	438f      	bics	r7, r1
 80053ba:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053bc:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 80053be:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80053c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c2:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053c4:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80053c6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053c8:	438a      	bics	r2, r1
 80053ca:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053cc:	2257      	movs	r2, #87	; 0x57
 80053ce:	e018      	b.n	8005402 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80053d0:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 80053d4:	017f      	lsls	r7, r7, #5
 80053d6:	42ba      	cmp	r2, r7
 80053d8:	d0d3      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x46>
 80053da:	2080      	movs	r0, #128	; 0x80
 80053dc:	0180      	lsls	r0, r0, #6
 80053de:	4282      	cmp	r2, r0
 80053e0:	d013      	beq.n	800540a <HAL_TIM_ConfigClockSource+0xce>
 80053e2:	0020      	movs	r0, r4
 80053e4:	2a70      	cmp	r2, #112	; 0x70
 80053e6:	d1cc      	bne.n	8005382 <HAL_TIM_ConfigClockSource+0x46>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e8:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ea:	4829      	ldr	r0, [pc, #164]	; (8005490 <HAL_TIM_ConfigClockSource+0x154>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ec:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ee:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f0:	688a      	ldr	r2, [r1, #8]
 80053f2:	68c9      	ldr	r1, [r1, #12]
 80053f4:	4322      	orrs	r2, r4
 80053f6:	0209      	lsls	r1, r1, #8
 80053f8:	430a      	orrs	r2, r1
 80053fa:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fc:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053fe:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8005400:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005402:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8005404:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005406:	609a      	str	r2, [r3, #8]
}
 8005408:	e7bb      	b.n	8005382 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 800540a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800540c:	4820      	ldr	r0, [pc, #128]	; (8005490 <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800540e:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005410:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005412:	688a      	ldr	r2, [r1, #8]
 8005414:	68c9      	ldr	r1, [r1, #12]
 8005416:	4322      	orrs	r2, r4
 8005418:	0209      	lsls	r1, r1, #8
 800541a:	430a      	orrs	r2, r1
 800541c:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800541e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	6899      	ldr	r1, [r3, #8]
 8005424:	01d2      	lsls	r2, r2, #7
 8005426:	e7ec      	b.n	8005402 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005428:	6848      	ldr	r0, [r1, #4]
 800542a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542c:	2110      	movs	r1, #16
 800542e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005430:	4c18      	ldr	r4, [pc, #96]	; (8005494 <HAL_TIM_ConfigClockSource+0x158>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005432:	438a      	bics	r2, r1
 8005434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005436:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8005438:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800543a:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800543c:	24a0      	movs	r4, #160	; 0xa0
 800543e:	43a2      	bics	r2, r4
 8005440:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005442:	033f      	lsls	r7, r7, #12
 8005444:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 8005446:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005448:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 800544a:	0102      	lsls	r2, r0, #4
 800544c:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 800544e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8005450:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005452:	438a      	bics	r2, r1
 8005454:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005456:	2267      	movs	r2, #103	; 0x67
 8005458:	e7d3      	b.n	8005402 <HAL_TIM_ConfigClockSource+0xc6>
  tmpccer = TIMx->CCER;
 800545a:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545c:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005460:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005462:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005464:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005468:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800546a:	43a2      	bics	r2, r4
 800546c:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800546e:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005470:	210a      	movs	r1, #10
 8005472:	438f      	bics	r7, r1
 8005474:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005476:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8005478:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800547a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547c:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800547e:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8005480:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005482:	438a      	bics	r2, r1
 8005484:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005486:	2247      	movs	r2, #71	; 0x47
 8005488:	e7bb      	b.n	8005402 <HAL_TIM_ConfigClockSource+0xc6>
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	ffff0088 	.word	0xffff0088
 8005490:	ffff00ff 	.word	0xffff00ff
 8005494:	ffff0fff 	.word	0xffff0fff

08005498 <HAL_TIM_OC_DelayElapsedCallback>:
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_IC_CaptureCallback>:
 800549a:	4770      	bx	lr

0800549c <HAL_TIM_PWM_PulseFinishedCallback>:
 800549c:	4770      	bx	lr

0800549e <HAL_TIM_TriggerCallback>:
 800549e:	4770      	bx	lr

080054a0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a0:	2202      	movs	r2, #2
 80054a2:	6803      	ldr	r3, [r0, #0]
{
 80054a4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a6:	6919      	ldr	r1, [r3, #16]
{
 80054a8:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054aa:	4211      	tst	r1, r2
 80054ac:	d00d      	beq.n	80054ca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054ae:	68d9      	ldr	r1, [r3, #12]
 80054b0:	4211      	tst	r1, r2
 80054b2:	d00a      	beq.n	80054ca <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054b4:	3a05      	subs	r2, #5
 80054b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b8:	3204      	adds	r2, #4
 80054ba:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	079b      	lsls	r3, r3, #30
 80054c0:	d05e      	beq.n	8005580 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	f7ff ffea 	bl	800549a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c6:	2300      	movs	r3, #0
 80054c8:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054ca:	2204      	movs	r2, #4
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	6919      	ldr	r1, [r3, #16]
 80054d0:	4211      	tst	r1, r2
 80054d2:	d010      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	4211      	tst	r1, r2
 80054d8:	d00d      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054da:	3a09      	subs	r2, #9
 80054dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054de:	3207      	adds	r2, #7
 80054e0:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054e2:	699a      	ldr	r2, [r3, #24]
 80054e4:	23c0      	movs	r3, #192	; 0xc0
 80054e6:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80054e8:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ea:	421a      	tst	r2, r3
 80054ec:	d04e      	beq.n	800558c <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	f7ff ffd4 	bl	800549a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	2300      	movs	r3, #0
 80054f4:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054f6:	2208      	movs	r2, #8
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	6919      	ldr	r1, [r3, #16]
 80054fc:	4211      	tst	r1, r2
 80054fe:	d00e      	beq.n	800551e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005500:	68d9      	ldr	r1, [r3, #12]
 8005502:	4211      	tst	r1, r2
 8005504:	d00b      	beq.n	800551e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005506:	3a11      	subs	r2, #17
 8005508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800550a:	320d      	adds	r2, #13
 800550c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800550e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005510:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005512:	079b      	lsls	r3, r3, #30
 8005514:	d040      	beq.n	8005598 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	f7ff ffc0 	bl	800549a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	2300      	movs	r3, #0
 800551c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800551e:	2210      	movs	r2, #16
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	6919      	ldr	r1, [r3, #16]
 8005524:	4211      	tst	r1, r2
 8005526:	d010      	beq.n	800554a <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005528:	68d9      	ldr	r1, [r3, #12]
 800552a:	4211      	tst	r1, r2
 800552c:	d00d      	beq.n	800554a <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800552e:	3a21      	subs	r2, #33	; 0x21
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005532:	3219      	adds	r2, #25
 8005534:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	23c0      	movs	r3, #192	; 0xc0
 800553a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800553c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800553e:	421a      	tst	r2, r3
 8005540:	d030      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8005542:	f7ff ffaa 	bl	800549a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	2300      	movs	r3, #0
 8005548:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800554a:	2201      	movs	r2, #1
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	6919      	ldr	r1, [r3, #16]
 8005550:	4211      	tst	r1, r2
 8005552:	d007      	beq.n	8005564 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005554:	68d9      	ldr	r1, [r3, #12]
 8005556:	4211      	tst	r1, r2
 8005558:	d004      	beq.n	8005564 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800555a:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 800555c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800555e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005560:	f7fb fd0a 	bl	8000f78 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005564:	2240      	movs	r2, #64	; 0x40
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	6919      	ldr	r1, [r3, #16]
 800556a:	4211      	tst	r1, r2
 800556c:	d007      	beq.n	800557e <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800556e:	68d9      	ldr	r1, [r3, #12]
 8005570:	4211      	tst	r1, r2
 8005572:	d004      	beq.n	800557e <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005574:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8005576:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005578:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800557a:	f7ff ff90 	bl	800549e <HAL_TIM_TriggerCallback>
}
 800557e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005580:	f7ff ff8a 	bl	8005498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	0020      	movs	r0, r4
 8005586:	f7ff ff89 	bl	800549c <HAL_TIM_PWM_PulseFinishedCallback>
 800558a:	e79c      	b.n	80054c6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558c:	f7ff ff84 	bl	8005498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	0020      	movs	r0, r4
 8005592:	f7ff ff83 	bl	800549c <HAL_TIM_PWM_PulseFinishedCallback>
 8005596:	e7ac      	b.n	80054f2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005598:	f7ff ff7e 	bl	8005498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	0020      	movs	r0, r4
 800559e:	f7ff ff7d 	bl	800549c <HAL_TIM_PWM_PulseFinishedCallback>
 80055a2:	e7ba      	b.n	800551a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a4:	f7ff ff78 	bl	8005498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a8:	0020      	movs	r0, r4
 80055aa:	f7ff ff77 	bl	800549c <HAL_TIM_PWM_PulseFinishedCallback>
 80055ae:	e7ca      	b.n	8005546 <HAL_TIM_IRQHandler+0xa6>

080055b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b2:	0004      	movs	r4, r0
 80055b4:	2202      	movs	r2, #2
 80055b6:	3438      	adds	r4, #56	; 0x38
 80055b8:	7825      	ldrb	r5, [r4, #0]
{
 80055ba:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80055bc:	0010      	movs	r0, r2
 80055be:	2d01      	cmp	r5, #1
 80055c0:	d01d      	beq.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c2:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c4:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80055c6:	3539      	adds	r5, #57	; 0x39
 80055c8:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80055ce:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d0:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d2:	680e      	ldr	r6, [r1, #0]
 80055d4:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055d6:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d8:	2080      	movs	r0, #128	; 0x80
 80055da:	05c0      	lsls	r0, r0, #23
 80055dc:	4283      	cmp	r3, r0
 80055de:	d005      	beq.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80055e0:	4807      	ldr	r0, [pc, #28]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80055e2:	4283      	cmp	r3, r0
 80055e4:	d002      	beq.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80055e6:	4807      	ldr	r0, [pc, #28]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80055e8:	4283      	cmp	r3, r0
 80055ea:	d104      	bne.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ec:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ee:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055f0:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055f2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f6:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80055f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80055fa:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80055fc:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	40010800 	.word	0x40010800
 8005604:	40011400 	.word	0x40011400

08005608 <calloc>:
 8005608:	b510      	push	{r4, lr}
 800560a:	4b03      	ldr	r3, [pc, #12]	; (8005618 <calloc+0x10>)
 800560c:	000a      	movs	r2, r1
 800560e:	0001      	movs	r1, r0
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	f000 f865 	bl	80056e0 <_calloc_r>
 8005616:	bd10      	pop	{r4, pc}
 8005618:	20000028 	.word	0x20000028

0800561c <__errno>:
 800561c:	4b01      	ldr	r3, [pc, #4]	; (8005624 <__errno+0x8>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	4770      	bx	lr
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	20000028 	.word	0x20000028

08005628 <__libc_init_array>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	2600      	movs	r6, #0
 800562c:	4d0c      	ldr	r5, [pc, #48]	; (8005660 <__libc_init_array+0x38>)
 800562e:	4c0d      	ldr	r4, [pc, #52]	; (8005664 <__libc_init_array+0x3c>)
 8005630:	1b64      	subs	r4, r4, r5
 8005632:	10a4      	asrs	r4, r4, #2
 8005634:	42a6      	cmp	r6, r4
 8005636:	d109      	bne.n	800564c <__libc_init_array+0x24>
 8005638:	2600      	movs	r6, #0
 800563a:	f000 fcc9 	bl	8005fd0 <_init>
 800563e:	4d0a      	ldr	r5, [pc, #40]	; (8005668 <__libc_init_array+0x40>)
 8005640:	4c0a      	ldr	r4, [pc, #40]	; (800566c <__libc_init_array+0x44>)
 8005642:	1b64      	subs	r4, r4, r5
 8005644:	10a4      	asrs	r4, r4, #2
 8005646:	42a6      	cmp	r6, r4
 8005648:	d105      	bne.n	8005656 <__libc_init_array+0x2e>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	00b3      	lsls	r3, r6, #2
 800564e:	58eb      	ldr	r3, [r5, r3]
 8005650:	4798      	blx	r3
 8005652:	3601      	adds	r6, #1
 8005654:	e7ee      	b.n	8005634 <__libc_init_array+0xc>
 8005656:	00b3      	lsls	r3, r6, #2
 8005658:	58eb      	ldr	r3, [r5, r3]
 800565a:	4798      	blx	r3
 800565c:	3601      	adds	r6, #1
 800565e:	e7f2      	b.n	8005646 <__libc_init_array+0x1e>
 8005660:	08006d58 	.word	0x08006d58
 8005664:	08006d58 	.word	0x08006d58
 8005668:	08006d58 	.word	0x08006d58
 800566c:	08006d5c 	.word	0x08006d5c

08005670 <malloc>:
 8005670:	b510      	push	{r4, lr}
 8005672:	4b03      	ldr	r3, [pc, #12]	; (8005680 <malloc+0x10>)
 8005674:	0001      	movs	r1, r0
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	f000 f8ca 	bl	8005810 <_malloc_r>
 800567c:	bd10      	pop	{r4, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	20000028 	.word	0x20000028

08005684 <free>:
 8005684:	b510      	push	{r4, lr}
 8005686:	4b03      	ldr	r3, [pc, #12]	; (8005694 <free+0x10>)
 8005688:	0001      	movs	r1, r0
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	f000 f854 	bl	8005738 <_free_r>
 8005690:	bd10      	pop	{r4, pc}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	20000028 	.word	0x20000028

08005698 <memcpy>:
 8005698:	2300      	movs	r3, #0
 800569a:	b510      	push	{r4, lr}
 800569c:	429a      	cmp	r2, r3
 800569e:	d100      	bne.n	80056a2 <memcpy+0xa>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	5ccc      	ldrb	r4, [r1, r3]
 80056a4:	54c4      	strb	r4, [r0, r3]
 80056a6:	3301      	adds	r3, #1
 80056a8:	e7f8      	b.n	800569c <memcpy+0x4>

080056aa <memmove>:
 80056aa:	b510      	push	{r4, lr}
 80056ac:	4288      	cmp	r0, r1
 80056ae:	d902      	bls.n	80056b6 <memmove+0xc>
 80056b0:	188b      	adds	r3, r1, r2
 80056b2:	4298      	cmp	r0, r3
 80056b4:	d303      	bcc.n	80056be <memmove+0x14>
 80056b6:	2300      	movs	r3, #0
 80056b8:	e007      	b.n	80056ca <memmove+0x20>
 80056ba:	5c8b      	ldrb	r3, [r1, r2]
 80056bc:	5483      	strb	r3, [r0, r2]
 80056be:	3a01      	subs	r2, #1
 80056c0:	d2fb      	bcs.n	80056ba <memmove+0x10>
 80056c2:	bd10      	pop	{r4, pc}
 80056c4:	5ccc      	ldrb	r4, [r1, r3]
 80056c6:	54c4      	strb	r4, [r0, r3]
 80056c8:	3301      	adds	r3, #1
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d1fa      	bne.n	80056c4 <memmove+0x1a>
 80056ce:	e7f8      	b.n	80056c2 <memmove+0x18>

080056d0 <memset>:
 80056d0:	0003      	movs	r3, r0
 80056d2:	1882      	adds	r2, r0, r2
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d100      	bne.n	80056da <memset+0xa>
 80056d8:	4770      	bx	lr
 80056da:	7019      	strb	r1, [r3, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	e7f9      	b.n	80056d4 <memset+0x4>

080056e0 <_calloc_r>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	0c13      	lsrs	r3, r2, #16
 80056e4:	0c0d      	lsrs	r5, r1, #16
 80056e6:	d11e      	bne.n	8005726 <_calloc_r+0x46>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10c      	bne.n	8005706 <_calloc_r+0x26>
 80056ec:	b289      	uxth	r1, r1
 80056ee:	b294      	uxth	r4, r2
 80056f0:	434c      	muls	r4, r1
 80056f2:	0021      	movs	r1, r4
 80056f4:	f000 f88c 	bl	8005810 <_malloc_r>
 80056f8:	1e05      	subs	r5, r0, #0
 80056fa:	d01b      	beq.n	8005734 <_calloc_r+0x54>
 80056fc:	0022      	movs	r2, r4
 80056fe:	2100      	movs	r1, #0
 8005700:	f7ff ffe6 	bl	80056d0 <memset>
 8005704:	e016      	b.n	8005734 <_calloc_r+0x54>
 8005706:	1c1d      	adds	r5, r3, #0
 8005708:	1c0b      	adds	r3, r1, #0
 800570a:	b292      	uxth	r2, r2
 800570c:	b289      	uxth	r1, r1
 800570e:	b29c      	uxth	r4, r3
 8005710:	4351      	muls	r1, r2
 8005712:	b2ab      	uxth	r3, r5
 8005714:	4363      	muls	r3, r4
 8005716:	0c0c      	lsrs	r4, r1, #16
 8005718:	191c      	adds	r4, r3, r4
 800571a:	0c22      	lsrs	r2, r4, #16
 800571c:	d107      	bne.n	800572e <_calloc_r+0x4e>
 800571e:	0424      	lsls	r4, r4, #16
 8005720:	b289      	uxth	r1, r1
 8005722:	430c      	orrs	r4, r1
 8005724:	e7e5      	b.n	80056f2 <_calloc_r+0x12>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <_calloc_r+0x4e>
 800572a:	1c13      	adds	r3, r2, #0
 800572c:	e7ed      	b.n	800570a <_calloc_r+0x2a>
 800572e:	230c      	movs	r3, #12
 8005730:	2500      	movs	r5, #0
 8005732:	6003      	str	r3, [r0, #0]
 8005734:	0028      	movs	r0, r5
 8005736:	bd70      	pop	{r4, r5, r6, pc}

08005738 <_free_r>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	0005      	movs	r5, r0
 800573c:	2900      	cmp	r1, #0
 800573e:	d010      	beq.n	8005762 <_free_r+0x2a>
 8005740:	1f0c      	subs	r4, r1, #4
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	da00      	bge.n	800574a <_free_r+0x12>
 8005748:	18e4      	adds	r4, r4, r3
 800574a:	0028      	movs	r0, r5
 800574c:	f000 f908 	bl	8005960 <__malloc_lock>
 8005750:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <_free_r+0x90>)
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <_free_r+0x2c>
 8005758:	6063      	str	r3, [r4, #4]
 800575a:	6014      	str	r4, [r2, #0]
 800575c:	0028      	movs	r0, r5
 800575e:	f000 f907 	bl	8005970 <__malloc_unlock>
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	42a3      	cmp	r3, r4
 8005766:	d908      	bls.n	800577a <_free_r+0x42>
 8005768:	6821      	ldr	r1, [r4, #0]
 800576a:	1860      	adds	r0, r4, r1
 800576c:	4283      	cmp	r3, r0
 800576e:	d1f3      	bne.n	8005758 <_free_r+0x20>
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	1841      	adds	r1, r0, r1
 8005776:	6021      	str	r1, [r4, #0]
 8005778:	e7ee      	b.n	8005758 <_free_r+0x20>
 800577a:	001a      	movs	r2, r3
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <_free_r+0x4e>
 8005782:	42a3      	cmp	r3, r4
 8005784:	d9f9      	bls.n	800577a <_free_r+0x42>
 8005786:	6811      	ldr	r1, [r2, #0]
 8005788:	1850      	adds	r0, r2, r1
 800578a:	42a0      	cmp	r0, r4
 800578c:	d10b      	bne.n	80057a6 <_free_r+0x6e>
 800578e:	6820      	ldr	r0, [r4, #0]
 8005790:	1809      	adds	r1, r1, r0
 8005792:	1850      	adds	r0, r2, r1
 8005794:	6011      	str	r1, [r2, #0]
 8005796:	4283      	cmp	r3, r0
 8005798:	d1e0      	bne.n	800575c <_free_r+0x24>
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	1841      	adds	r1, r0, r1
 80057a0:	6011      	str	r1, [r2, #0]
 80057a2:	6053      	str	r3, [r2, #4]
 80057a4:	e7da      	b.n	800575c <_free_r+0x24>
 80057a6:	42a0      	cmp	r0, r4
 80057a8:	d902      	bls.n	80057b0 <_free_r+0x78>
 80057aa:	230c      	movs	r3, #12
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	e7d5      	b.n	800575c <_free_r+0x24>
 80057b0:	6821      	ldr	r1, [r4, #0]
 80057b2:	1860      	adds	r0, r4, r1
 80057b4:	4283      	cmp	r3, r0
 80057b6:	d103      	bne.n	80057c0 <_free_r+0x88>
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	1841      	adds	r1, r0, r1
 80057be:	6021      	str	r1, [r4, #0]
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	6054      	str	r4, [r2, #4]
 80057c4:	e7ca      	b.n	800575c <_free_r+0x24>
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	20000d88 	.word	0x20000d88

080057cc <sbrk_aligned>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	4e0f      	ldr	r6, [pc, #60]	; (800580c <sbrk_aligned+0x40>)
 80057d0:	000d      	movs	r5, r1
 80057d2:	6831      	ldr	r1, [r6, #0]
 80057d4:	0004      	movs	r4, r0
 80057d6:	2900      	cmp	r1, #0
 80057d8:	d102      	bne.n	80057e0 <sbrk_aligned+0x14>
 80057da:	f000 f88f 	bl	80058fc <_sbrk_r>
 80057de:	6030      	str	r0, [r6, #0]
 80057e0:	0029      	movs	r1, r5
 80057e2:	0020      	movs	r0, r4
 80057e4:	f000 f88a 	bl	80058fc <_sbrk_r>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d00a      	beq.n	8005802 <sbrk_aligned+0x36>
 80057ec:	2303      	movs	r3, #3
 80057ee:	1cc5      	adds	r5, r0, #3
 80057f0:	439d      	bics	r5, r3
 80057f2:	42a8      	cmp	r0, r5
 80057f4:	d007      	beq.n	8005806 <sbrk_aligned+0x3a>
 80057f6:	1a29      	subs	r1, r5, r0
 80057f8:	0020      	movs	r0, r4
 80057fa:	f000 f87f 	bl	80058fc <_sbrk_r>
 80057fe:	1c43      	adds	r3, r0, #1
 8005800:	d101      	bne.n	8005806 <sbrk_aligned+0x3a>
 8005802:	2501      	movs	r5, #1
 8005804:	426d      	negs	r5, r5
 8005806:	0028      	movs	r0, r5
 8005808:	bd70      	pop	{r4, r5, r6, pc}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	20000d8c 	.word	0x20000d8c

08005810 <_malloc_r>:
 8005810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005812:	2203      	movs	r2, #3
 8005814:	1ccb      	adds	r3, r1, #3
 8005816:	4393      	bics	r3, r2
 8005818:	3308      	adds	r3, #8
 800581a:	0006      	movs	r6, r0
 800581c:	001f      	movs	r7, r3
 800581e:	2b0c      	cmp	r3, #12
 8005820:	d232      	bcs.n	8005888 <_malloc_r+0x78>
 8005822:	270c      	movs	r7, #12
 8005824:	42b9      	cmp	r1, r7
 8005826:	d831      	bhi.n	800588c <_malloc_r+0x7c>
 8005828:	0030      	movs	r0, r6
 800582a:	f000 f899 	bl	8005960 <__malloc_lock>
 800582e:	4d32      	ldr	r5, [pc, #200]	; (80058f8 <_malloc_r+0xe8>)
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	001c      	movs	r4, r3
 8005834:	2c00      	cmp	r4, #0
 8005836:	d12e      	bne.n	8005896 <_malloc_r+0x86>
 8005838:	0039      	movs	r1, r7
 800583a:	0030      	movs	r0, r6
 800583c:	f7ff ffc6 	bl	80057cc <sbrk_aligned>
 8005840:	0004      	movs	r4, r0
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	d11e      	bne.n	8005884 <_malloc_r+0x74>
 8005846:	682c      	ldr	r4, [r5, #0]
 8005848:	0025      	movs	r5, r4
 800584a:	2d00      	cmp	r5, #0
 800584c:	d14a      	bne.n	80058e4 <_malloc_r+0xd4>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	0029      	movs	r1, r5
 8005852:	18e3      	adds	r3, r4, r3
 8005854:	0030      	movs	r0, r6
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	f000 f850 	bl	80058fc <_sbrk_r>
 800585c:	9b01      	ldr	r3, [sp, #4]
 800585e:	4283      	cmp	r3, r0
 8005860:	d143      	bne.n	80058ea <_malloc_r+0xda>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	3703      	adds	r7, #3
 8005866:	1aff      	subs	r7, r7, r3
 8005868:	2303      	movs	r3, #3
 800586a:	439f      	bics	r7, r3
 800586c:	3708      	adds	r7, #8
 800586e:	2f0c      	cmp	r7, #12
 8005870:	d200      	bcs.n	8005874 <_malloc_r+0x64>
 8005872:	270c      	movs	r7, #12
 8005874:	0039      	movs	r1, r7
 8005876:	0030      	movs	r0, r6
 8005878:	f7ff ffa8 	bl	80057cc <sbrk_aligned>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d034      	beq.n	80058ea <_malloc_r+0xda>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	19df      	adds	r7, r3, r7
 8005884:	6027      	str	r7, [r4, #0]
 8005886:	e013      	b.n	80058b0 <_malloc_r+0xa0>
 8005888:	2b00      	cmp	r3, #0
 800588a:	dacb      	bge.n	8005824 <_malloc_r+0x14>
 800588c:	230c      	movs	r3, #12
 800588e:	2500      	movs	r5, #0
 8005890:	6033      	str	r3, [r6, #0]
 8005892:	0028      	movs	r0, r5
 8005894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	1bd1      	subs	r1, r2, r7
 800589a:	d420      	bmi.n	80058de <_malloc_r+0xce>
 800589c:	290b      	cmp	r1, #11
 800589e:	d917      	bls.n	80058d0 <_malloc_r+0xc0>
 80058a0:	19e2      	adds	r2, r4, r7
 80058a2:	6027      	str	r7, [r4, #0]
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	d111      	bne.n	80058cc <_malloc_r+0xbc>
 80058a8:	602a      	str	r2, [r5, #0]
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	6011      	str	r1, [r2, #0]
 80058ae:	6053      	str	r3, [r2, #4]
 80058b0:	0030      	movs	r0, r6
 80058b2:	0025      	movs	r5, r4
 80058b4:	f000 f85c 	bl	8005970 <__malloc_unlock>
 80058b8:	2207      	movs	r2, #7
 80058ba:	350b      	adds	r5, #11
 80058bc:	1d23      	adds	r3, r4, #4
 80058be:	4395      	bics	r5, r2
 80058c0:	1aea      	subs	r2, r5, r3
 80058c2:	429d      	cmp	r5, r3
 80058c4:	d0e5      	beq.n	8005892 <_malloc_r+0x82>
 80058c6:	1b5b      	subs	r3, r3, r5
 80058c8:	50a3      	str	r3, [r4, r2]
 80058ca:	e7e2      	b.n	8005892 <_malloc_r+0x82>
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	e7ec      	b.n	80058aa <_malloc_r+0x9a>
 80058d0:	6862      	ldr	r2, [r4, #4]
 80058d2:	42a3      	cmp	r3, r4
 80058d4:	d101      	bne.n	80058da <_malloc_r+0xca>
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	e7ea      	b.n	80058b0 <_malloc_r+0xa0>
 80058da:	605a      	str	r2, [r3, #4]
 80058dc:	e7e8      	b.n	80058b0 <_malloc_r+0xa0>
 80058de:	0023      	movs	r3, r4
 80058e0:	6864      	ldr	r4, [r4, #4]
 80058e2:	e7a7      	b.n	8005834 <_malloc_r+0x24>
 80058e4:	002c      	movs	r4, r5
 80058e6:	686d      	ldr	r5, [r5, #4]
 80058e8:	e7af      	b.n	800584a <_malloc_r+0x3a>
 80058ea:	230c      	movs	r3, #12
 80058ec:	0030      	movs	r0, r6
 80058ee:	6033      	str	r3, [r6, #0]
 80058f0:	f000 f83e 	bl	8005970 <__malloc_unlock>
 80058f4:	e7cd      	b.n	8005892 <_malloc_r+0x82>
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	20000d88 	.word	0x20000d88

080058fc <_sbrk_r>:
 80058fc:	2300      	movs	r3, #0
 80058fe:	b570      	push	{r4, r5, r6, lr}
 8005900:	4d06      	ldr	r5, [pc, #24]	; (800591c <_sbrk_r+0x20>)
 8005902:	0004      	movs	r4, r0
 8005904:	0008      	movs	r0, r1
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	f7fd fd7e 	bl	8003408 <_sbrk>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d103      	bne.n	8005918 <_sbrk_r+0x1c>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d000      	beq.n	8005918 <_sbrk_r+0x1c>
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	bd70      	pop	{r4, r5, r6, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	20000d90 	.word	0x20000d90

08005920 <siprintf>:
 8005920:	b40e      	push	{r1, r2, r3}
 8005922:	b500      	push	{lr}
 8005924:	490b      	ldr	r1, [pc, #44]	; (8005954 <siprintf+0x34>)
 8005926:	b09c      	sub	sp, #112	; 0x70
 8005928:	ab1d      	add	r3, sp, #116	; 0x74
 800592a:	9002      	str	r0, [sp, #8]
 800592c:	9006      	str	r0, [sp, #24]
 800592e:	9107      	str	r1, [sp, #28]
 8005930:	9104      	str	r1, [sp, #16]
 8005932:	4809      	ldr	r0, [pc, #36]	; (8005958 <siprintf+0x38>)
 8005934:	4909      	ldr	r1, [pc, #36]	; (800595c <siprintf+0x3c>)
 8005936:	cb04      	ldmia	r3!, {r2}
 8005938:	9105      	str	r1, [sp, #20]
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	a902      	add	r1, sp, #8
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	f000 f880 	bl	8005a44 <_svfiprintf_r>
 8005944:	2300      	movs	r3, #0
 8005946:	9a02      	ldr	r2, [sp, #8]
 8005948:	7013      	strb	r3, [r2, #0]
 800594a:	b01c      	add	sp, #112	; 0x70
 800594c:	bc08      	pop	{r3}
 800594e:	b003      	add	sp, #12
 8005950:	4718      	bx	r3
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	7fffffff 	.word	0x7fffffff
 8005958:	20000028 	.word	0x20000028
 800595c:	ffff0208 	.word	0xffff0208

08005960 <__malloc_lock>:
 8005960:	b510      	push	{r4, lr}
 8005962:	4802      	ldr	r0, [pc, #8]	; (800596c <__malloc_lock+0xc>)
 8005964:	f000 faf0 	bl	8005f48 <__retarget_lock_acquire_recursive>
 8005968:	bd10      	pop	{r4, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	20000d94 	.word	0x20000d94

08005970 <__malloc_unlock>:
 8005970:	b510      	push	{r4, lr}
 8005972:	4802      	ldr	r0, [pc, #8]	; (800597c <__malloc_unlock+0xc>)
 8005974:	f000 fae9 	bl	8005f4a <__retarget_lock_release_recursive>
 8005978:	bd10      	pop	{r4, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	20000d94 	.word	0x20000d94

08005980 <__ssputs_r>:
 8005980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005982:	688e      	ldr	r6, [r1, #8]
 8005984:	b085      	sub	sp, #20
 8005986:	0007      	movs	r7, r0
 8005988:	000c      	movs	r4, r1
 800598a:	9203      	str	r2, [sp, #12]
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	429e      	cmp	r6, r3
 8005990:	d83c      	bhi.n	8005a0c <__ssputs_r+0x8c>
 8005992:	2390      	movs	r3, #144	; 0x90
 8005994:	898a      	ldrh	r2, [r1, #12]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	421a      	tst	r2, r3
 800599a:	d034      	beq.n	8005a06 <__ssputs_r+0x86>
 800599c:	6909      	ldr	r1, [r1, #16]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	6960      	ldr	r0, [r4, #20]
 80059a2:	1a5b      	subs	r3, r3, r1
 80059a4:	9302      	str	r3, [sp, #8]
 80059a6:	2303      	movs	r3, #3
 80059a8:	4343      	muls	r3, r0
 80059aa:	0fdd      	lsrs	r5, r3, #31
 80059ac:	18ed      	adds	r5, r5, r3
 80059ae:	9b01      	ldr	r3, [sp, #4]
 80059b0:	9802      	ldr	r0, [sp, #8]
 80059b2:	3301      	adds	r3, #1
 80059b4:	181b      	adds	r3, r3, r0
 80059b6:	106d      	asrs	r5, r5, #1
 80059b8:	42ab      	cmp	r3, r5
 80059ba:	d900      	bls.n	80059be <__ssputs_r+0x3e>
 80059bc:	001d      	movs	r5, r3
 80059be:	0553      	lsls	r3, r2, #21
 80059c0:	d532      	bpl.n	8005a28 <__ssputs_r+0xa8>
 80059c2:	0029      	movs	r1, r5
 80059c4:	0038      	movs	r0, r7
 80059c6:	f7ff ff23 	bl	8005810 <_malloc_r>
 80059ca:	1e06      	subs	r6, r0, #0
 80059cc:	d109      	bne.n	80059e2 <__ssputs_r+0x62>
 80059ce:	230c      	movs	r3, #12
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	2340      	movs	r3, #64	; 0x40
 80059d4:	2001      	movs	r0, #1
 80059d6:	89a2      	ldrh	r2, [r4, #12]
 80059d8:	4240      	negs	r0, r0
 80059da:	4313      	orrs	r3, r2
 80059dc:	81a3      	strh	r3, [r4, #12]
 80059de:	b005      	add	sp, #20
 80059e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e2:	9a02      	ldr	r2, [sp, #8]
 80059e4:	6921      	ldr	r1, [r4, #16]
 80059e6:	f7ff fe57 	bl	8005698 <memcpy>
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	4a14      	ldr	r2, [pc, #80]	; (8005a40 <__ssputs_r+0xc0>)
 80059ee:	401a      	ands	r2, r3
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	4313      	orrs	r3, r2
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	9b02      	ldr	r3, [sp, #8]
 80059f8:	6126      	str	r6, [r4, #16]
 80059fa:	18f6      	adds	r6, r6, r3
 80059fc:	6026      	str	r6, [r4, #0]
 80059fe:	6165      	str	r5, [r4, #20]
 8005a00:	9e01      	ldr	r6, [sp, #4]
 8005a02:	1aed      	subs	r5, r5, r3
 8005a04:	60a5      	str	r5, [r4, #8]
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	429e      	cmp	r6, r3
 8005a0a:	d900      	bls.n	8005a0e <__ssputs_r+0x8e>
 8005a0c:	9e01      	ldr	r6, [sp, #4]
 8005a0e:	0032      	movs	r2, r6
 8005a10:	9903      	ldr	r1, [sp, #12]
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	f7ff fe49 	bl	80056aa <memmove>
 8005a18:	68a3      	ldr	r3, [r4, #8]
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	1b9b      	subs	r3, r3, r6
 8005a1e:	60a3      	str	r3, [r4, #8]
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	199e      	adds	r6, r3, r6
 8005a24:	6026      	str	r6, [r4, #0]
 8005a26:	e7da      	b.n	80059de <__ssputs_r+0x5e>
 8005a28:	002a      	movs	r2, r5
 8005a2a:	0038      	movs	r0, r7
 8005a2c:	f000 fa99 	bl	8005f62 <_realloc_r>
 8005a30:	1e06      	subs	r6, r0, #0
 8005a32:	d1e0      	bne.n	80059f6 <__ssputs_r+0x76>
 8005a34:	0038      	movs	r0, r7
 8005a36:	6921      	ldr	r1, [r4, #16]
 8005a38:	f7ff fe7e 	bl	8005738 <_free_r>
 8005a3c:	e7c7      	b.n	80059ce <__ssputs_r+0x4e>
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	fffffb7f 	.word	0xfffffb7f

08005a44 <_svfiprintf_r>:
 8005a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a46:	b0a1      	sub	sp, #132	; 0x84
 8005a48:	9003      	str	r0, [sp, #12]
 8005a4a:	001d      	movs	r5, r3
 8005a4c:	898b      	ldrh	r3, [r1, #12]
 8005a4e:	000f      	movs	r7, r1
 8005a50:	0016      	movs	r6, r2
 8005a52:	061b      	lsls	r3, r3, #24
 8005a54:	d511      	bpl.n	8005a7a <_svfiprintf_r+0x36>
 8005a56:	690b      	ldr	r3, [r1, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10e      	bne.n	8005a7a <_svfiprintf_r+0x36>
 8005a5c:	2140      	movs	r1, #64	; 0x40
 8005a5e:	f7ff fed7 	bl	8005810 <_malloc_r>
 8005a62:	6038      	str	r0, [r7, #0]
 8005a64:	6138      	str	r0, [r7, #16]
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d105      	bne.n	8005a76 <_svfiprintf_r+0x32>
 8005a6a:	230c      	movs	r3, #12
 8005a6c:	9a03      	ldr	r2, [sp, #12]
 8005a6e:	3801      	subs	r0, #1
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	b021      	add	sp, #132	; 0x84
 8005a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a76:	2340      	movs	r3, #64	; 0x40
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	ac08      	add	r4, sp, #32
 8005a7e:	6163      	str	r3, [r4, #20]
 8005a80:	3320      	adds	r3, #32
 8005a82:	7663      	strb	r3, [r4, #25]
 8005a84:	3310      	adds	r3, #16
 8005a86:	76a3      	strb	r3, [r4, #26]
 8005a88:	9507      	str	r5, [sp, #28]
 8005a8a:	0035      	movs	r5, r6
 8005a8c:	782b      	ldrb	r3, [r5, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <_svfiprintf_r+0x52>
 8005a92:	2b25      	cmp	r3, #37	; 0x25
 8005a94:	d147      	bne.n	8005b26 <_svfiprintf_r+0xe2>
 8005a96:	1bab      	subs	r3, r5, r6
 8005a98:	9305      	str	r3, [sp, #20]
 8005a9a:	42b5      	cmp	r5, r6
 8005a9c:	d00c      	beq.n	8005ab8 <_svfiprintf_r+0x74>
 8005a9e:	0032      	movs	r2, r6
 8005aa0:	0039      	movs	r1, r7
 8005aa2:	9803      	ldr	r0, [sp, #12]
 8005aa4:	f7ff ff6c 	bl	8005980 <__ssputs_r>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d100      	bne.n	8005aae <_svfiprintf_r+0x6a>
 8005aac:	e0ae      	b.n	8005c0c <_svfiprintf_r+0x1c8>
 8005aae:	6962      	ldr	r2, [r4, #20]
 8005ab0:	9b05      	ldr	r3, [sp, #20]
 8005ab2:	4694      	mov	ip, r2
 8005ab4:	4463      	add	r3, ip
 8005ab6:	6163      	str	r3, [r4, #20]
 8005ab8:	782b      	ldrb	r3, [r5, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d100      	bne.n	8005ac0 <_svfiprintf_r+0x7c>
 8005abe:	e0a5      	b.n	8005c0c <_svfiprintf_r+0x1c8>
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4252      	negs	r2, r2
 8005ac6:	6062      	str	r2, [r4, #4]
 8005ac8:	a904      	add	r1, sp, #16
 8005aca:	3254      	adds	r2, #84	; 0x54
 8005acc:	1852      	adds	r2, r2, r1
 8005ace:	1c6e      	adds	r6, r5, #1
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	60e3      	str	r3, [r4, #12]
 8005ad4:	60a3      	str	r3, [r4, #8]
 8005ad6:	7013      	strb	r3, [r2, #0]
 8005ad8:	65a3      	str	r3, [r4, #88]	; 0x58
 8005ada:	2205      	movs	r2, #5
 8005adc:	7831      	ldrb	r1, [r6, #0]
 8005ade:	4854      	ldr	r0, [pc, #336]	; (8005c30 <_svfiprintf_r+0x1ec>)
 8005ae0:	f000 fa34 	bl	8005f4c <memchr>
 8005ae4:	1c75      	adds	r5, r6, #1
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d11f      	bne.n	8005b2a <_svfiprintf_r+0xe6>
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	06d3      	lsls	r3, r2, #27
 8005aee:	d504      	bpl.n	8005afa <_svfiprintf_r+0xb6>
 8005af0:	2353      	movs	r3, #83	; 0x53
 8005af2:	a904      	add	r1, sp, #16
 8005af4:	185b      	adds	r3, r3, r1
 8005af6:	2120      	movs	r1, #32
 8005af8:	7019      	strb	r1, [r3, #0]
 8005afa:	0713      	lsls	r3, r2, #28
 8005afc:	d504      	bpl.n	8005b08 <_svfiprintf_r+0xc4>
 8005afe:	2353      	movs	r3, #83	; 0x53
 8005b00:	a904      	add	r1, sp, #16
 8005b02:	185b      	adds	r3, r3, r1
 8005b04:	212b      	movs	r1, #43	; 0x2b
 8005b06:	7019      	strb	r1, [r3, #0]
 8005b08:	7833      	ldrb	r3, [r6, #0]
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	d016      	beq.n	8005b3c <_svfiprintf_r+0xf8>
 8005b0e:	0035      	movs	r5, r6
 8005b10:	2100      	movs	r1, #0
 8005b12:	200a      	movs	r0, #10
 8005b14:	68e3      	ldr	r3, [r4, #12]
 8005b16:	782a      	ldrb	r2, [r5, #0]
 8005b18:	1c6e      	adds	r6, r5, #1
 8005b1a:	3a30      	subs	r2, #48	; 0x30
 8005b1c:	2a09      	cmp	r2, #9
 8005b1e:	d94e      	bls.n	8005bbe <_svfiprintf_r+0x17a>
 8005b20:	2900      	cmp	r1, #0
 8005b22:	d111      	bne.n	8005b48 <_svfiprintf_r+0x104>
 8005b24:	e017      	b.n	8005b56 <_svfiprintf_r+0x112>
 8005b26:	3501      	adds	r5, #1
 8005b28:	e7b0      	b.n	8005a8c <_svfiprintf_r+0x48>
 8005b2a:	4b41      	ldr	r3, [pc, #260]	; (8005c30 <_svfiprintf_r+0x1ec>)
 8005b2c:	6822      	ldr	r2, [r4, #0]
 8005b2e:	1ac0      	subs	r0, r0, r3
 8005b30:	2301      	movs	r3, #1
 8005b32:	4083      	lsls	r3, r0
 8005b34:	4313      	orrs	r3, r2
 8005b36:	002e      	movs	r6, r5
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	e7ce      	b.n	8005ada <_svfiprintf_r+0x96>
 8005b3c:	9b07      	ldr	r3, [sp, #28]
 8005b3e:	1d19      	adds	r1, r3, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	9107      	str	r1, [sp, #28]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	db01      	blt.n	8005b4c <_svfiprintf_r+0x108>
 8005b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b4a:	e004      	b.n	8005b56 <_svfiprintf_r+0x112>
 8005b4c:	425b      	negs	r3, r3
 8005b4e:	60e3      	str	r3, [r4, #12]
 8005b50:	2302      	movs	r3, #2
 8005b52:	4313      	orrs	r3, r2
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	782b      	ldrb	r3, [r5, #0]
 8005b58:	2b2e      	cmp	r3, #46	; 0x2e
 8005b5a:	d10a      	bne.n	8005b72 <_svfiprintf_r+0x12e>
 8005b5c:	786b      	ldrb	r3, [r5, #1]
 8005b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b60:	d135      	bne.n	8005bce <_svfiprintf_r+0x18a>
 8005b62:	9b07      	ldr	r3, [sp, #28]
 8005b64:	3502      	adds	r5, #2
 8005b66:	1d1a      	adds	r2, r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	9207      	str	r2, [sp, #28]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db2b      	blt.n	8005bc8 <_svfiprintf_r+0x184>
 8005b70:	9309      	str	r3, [sp, #36]	; 0x24
 8005b72:	4e30      	ldr	r6, [pc, #192]	; (8005c34 <_svfiprintf_r+0x1f0>)
 8005b74:	2203      	movs	r2, #3
 8005b76:	0030      	movs	r0, r6
 8005b78:	7829      	ldrb	r1, [r5, #0]
 8005b7a:	f000 f9e7 	bl	8005f4c <memchr>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d006      	beq.n	8005b90 <_svfiprintf_r+0x14c>
 8005b82:	2340      	movs	r3, #64	; 0x40
 8005b84:	1b80      	subs	r0, r0, r6
 8005b86:	4083      	lsls	r3, r0
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	3501      	adds	r5, #1
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	7829      	ldrb	r1, [r5, #0]
 8005b92:	2206      	movs	r2, #6
 8005b94:	4828      	ldr	r0, [pc, #160]	; (8005c38 <_svfiprintf_r+0x1f4>)
 8005b96:	1c6e      	adds	r6, r5, #1
 8005b98:	7621      	strb	r1, [r4, #24]
 8005b9a:	f000 f9d7 	bl	8005f4c <memchr>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d03c      	beq.n	8005c1c <_svfiprintf_r+0x1d8>
 8005ba2:	4b26      	ldr	r3, [pc, #152]	; (8005c3c <_svfiprintf_r+0x1f8>)
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d125      	bne.n	8005bf4 <_svfiprintf_r+0x1b0>
 8005ba8:	2207      	movs	r2, #7
 8005baa:	9b07      	ldr	r3, [sp, #28]
 8005bac:	3307      	adds	r3, #7
 8005bae:	4393      	bics	r3, r2
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	9307      	str	r3, [sp, #28]
 8005bb4:	6963      	ldr	r3, [r4, #20]
 8005bb6:	9a04      	ldr	r2, [sp, #16]
 8005bb8:	189b      	adds	r3, r3, r2
 8005bba:	6163      	str	r3, [r4, #20]
 8005bbc:	e765      	b.n	8005a8a <_svfiprintf_r+0x46>
 8005bbe:	4343      	muls	r3, r0
 8005bc0:	0035      	movs	r5, r6
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	189b      	adds	r3, r3, r2
 8005bc6:	e7a6      	b.n	8005b16 <_svfiprintf_r+0xd2>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	425b      	negs	r3, r3
 8005bcc:	e7d0      	b.n	8005b70 <_svfiprintf_r+0x12c>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	200a      	movs	r0, #10
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	6063      	str	r3, [r4, #4]
 8005bd8:	7829      	ldrb	r1, [r5, #0]
 8005bda:	1c6e      	adds	r6, r5, #1
 8005bdc:	3930      	subs	r1, #48	; 0x30
 8005bde:	2909      	cmp	r1, #9
 8005be0:	d903      	bls.n	8005bea <_svfiprintf_r+0x1a6>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0c5      	beq.n	8005b72 <_svfiprintf_r+0x12e>
 8005be6:	9209      	str	r2, [sp, #36]	; 0x24
 8005be8:	e7c3      	b.n	8005b72 <_svfiprintf_r+0x12e>
 8005bea:	4342      	muls	r2, r0
 8005bec:	0035      	movs	r5, r6
 8005bee:	2301      	movs	r3, #1
 8005bf0:	1852      	adds	r2, r2, r1
 8005bf2:	e7f1      	b.n	8005bd8 <_svfiprintf_r+0x194>
 8005bf4:	ab07      	add	r3, sp, #28
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	003a      	movs	r2, r7
 8005bfa:	0021      	movs	r1, r4
 8005bfc:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <_svfiprintf_r+0x1fc>)
 8005bfe:	9803      	ldr	r0, [sp, #12]
 8005c00:	e000      	b.n	8005c04 <_svfiprintf_r+0x1c0>
 8005c02:	bf00      	nop
 8005c04:	9004      	str	r0, [sp, #16]
 8005c06:	9b04      	ldr	r3, [sp, #16]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	d1d3      	bne.n	8005bb4 <_svfiprintf_r+0x170>
 8005c0c:	89bb      	ldrh	r3, [r7, #12]
 8005c0e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c10:	065b      	lsls	r3, r3, #25
 8005c12:	d400      	bmi.n	8005c16 <_svfiprintf_r+0x1d2>
 8005c14:	e72d      	b.n	8005a72 <_svfiprintf_r+0x2e>
 8005c16:	2001      	movs	r0, #1
 8005c18:	4240      	negs	r0, r0
 8005c1a:	e72a      	b.n	8005a72 <_svfiprintf_r+0x2e>
 8005c1c:	ab07      	add	r3, sp, #28
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	003a      	movs	r2, r7
 8005c22:	0021      	movs	r1, r4
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <_svfiprintf_r+0x1fc>)
 8005c26:	9803      	ldr	r0, [sp, #12]
 8005c28:	f000 f87c 	bl	8005d24 <_printf_i>
 8005c2c:	e7ea      	b.n	8005c04 <_svfiprintf_r+0x1c0>
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	08006d1d 	.word	0x08006d1d
 8005c34:	08006d23 	.word	0x08006d23
 8005c38:	08006d27 	.word	0x08006d27
 8005c3c:	00000000 	.word	0x00000000
 8005c40:	08005981 	.word	0x08005981

08005c44 <_printf_common>:
 8005c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c46:	0015      	movs	r5, r2
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	688a      	ldr	r2, [r1, #8]
 8005c4c:	690b      	ldr	r3, [r1, #16]
 8005c4e:	000c      	movs	r4, r1
 8005c50:	9000      	str	r0, [sp, #0]
 8005c52:	4293      	cmp	r3, r2
 8005c54:	da00      	bge.n	8005c58 <_printf_common+0x14>
 8005c56:	0013      	movs	r3, r2
 8005c58:	0022      	movs	r2, r4
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	3243      	adds	r2, #67	; 0x43
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	2a00      	cmp	r2, #0
 8005c62:	d001      	beq.n	8005c68 <_printf_common+0x24>
 8005c64:	3301      	adds	r3, #1
 8005c66:	602b      	str	r3, [r5, #0]
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	069b      	lsls	r3, r3, #26
 8005c6c:	d502      	bpl.n	8005c74 <_printf_common+0x30>
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	3302      	adds	r3, #2
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	6822      	ldr	r2, [r4, #0]
 8005c76:	2306      	movs	r3, #6
 8005c78:	0017      	movs	r7, r2
 8005c7a:	401f      	ands	r7, r3
 8005c7c:	421a      	tst	r2, r3
 8005c7e:	d027      	beq.n	8005cd0 <_printf_common+0x8c>
 8005c80:	0023      	movs	r3, r4
 8005c82:	3343      	adds	r3, #67	; 0x43
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	1e5a      	subs	r2, r3, #1
 8005c88:	4193      	sbcs	r3, r2
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	0692      	lsls	r2, r2, #26
 8005c8e:	d430      	bmi.n	8005cf2 <_printf_common+0xae>
 8005c90:	0022      	movs	r2, r4
 8005c92:	9901      	ldr	r1, [sp, #4]
 8005c94:	9800      	ldr	r0, [sp, #0]
 8005c96:	9e08      	ldr	r6, [sp, #32]
 8005c98:	3243      	adds	r2, #67	; 0x43
 8005c9a:	47b0      	blx	r6
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d025      	beq.n	8005cec <_printf_common+0xa8>
 8005ca0:	2306      	movs	r3, #6
 8005ca2:	6820      	ldr	r0, [r4, #0]
 8005ca4:	682a      	ldr	r2, [r5, #0]
 8005ca6:	68e1      	ldr	r1, [r4, #12]
 8005ca8:	2500      	movs	r5, #0
 8005caa:	4003      	ands	r3, r0
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d103      	bne.n	8005cb8 <_printf_common+0x74>
 8005cb0:	1a8d      	subs	r5, r1, r2
 8005cb2:	43eb      	mvns	r3, r5
 8005cb4:	17db      	asrs	r3, r3, #31
 8005cb6:	401d      	ands	r5, r3
 8005cb8:	68a3      	ldr	r3, [r4, #8]
 8005cba:	6922      	ldr	r2, [r4, #16]
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	dd01      	ble.n	8005cc4 <_printf_common+0x80>
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	18ed      	adds	r5, r5, r3
 8005cc4:	2700      	movs	r7, #0
 8005cc6:	42bd      	cmp	r5, r7
 8005cc8:	d120      	bne.n	8005d0c <_printf_common+0xc8>
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e010      	b.n	8005cf0 <_printf_common+0xac>
 8005cce:	3701      	adds	r7, #1
 8005cd0:	68e3      	ldr	r3, [r4, #12]
 8005cd2:	682a      	ldr	r2, [r5, #0]
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	42bb      	cmp	r3, r7
 8005cd8:	ddd2      	ble.n	8005c80 <_printf_common+0x3c>
 8005cda:	0022      	movs	r2, r4
 8005cdc:	2301      	movs	r3, #1
 8005cde:	9901      	ldr	r1, [sp, #4]
 8005ce0:	9800      	ldr	r0, [sp, #0]
 8005ce2:	9e08      	ldr	r6, [sp, #32]
 8005ce4:	3219      	adds	r2, #25
 8005ce6:	47b0      	blx	r6
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d1f0      	bne.n	8005cce <_printf_common+0x8a>
 8005cec:	2001      	movs	r0, #1
 8005cee:	4240      	negs	r0, r0
 8005cf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cf2:	2030      	movs	r0, #48	; 0x30
 8005cf4:	18e1      	adds	r1, r4, r3
 8005cf6:	3143      	adds	r1, #67	; 0x43
 8005cf8:	7008      	strb	r0, [r1, #0]
 8005cfa:	0021      	movs	r1, r4
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	3145      	adds	r1, #69	; 0x45
 8005d00:	7809      	ldrb	r1, [r1, #0]
 8005d02:	18a2      	adds	r2, r4, r2
 8005d04:	3243      	adds	r2, #67	; 0x43
 8005d06:	3302      	adds	r3, #2
 8005d08:	7011      	strb	r1, [r2, #0]
 8005d0a:	e7c1      	b.n	8005c90 <_printf_common+0x4c>
 8005d0c:	0022      	movs	r2, r4
 8005d0e:	2301      	movs	r3, #1
 8005d10:	9901      	ldr	r1, [sp, #4]
 8005d12:	9800      	ldr	r0, [sp, #0]
 8005d14:	9e08      	ldr	r6, [sp, #32]
 8005d16:	321a      	adds	r2, #26
 8005d18:	47b0      	blx	r6
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	d0e6      	beq.n	8005cec <_printf_common+0xa8>
 8005d1e:	3701      	adds	r7, #1
 8005d20:	e7d1      	b.n	8005cc6 <_printf_common+0x82>
	...

08005d24 <_printf_i>:
 8005d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d26:	b08b      	sub	sp, #44	; 0x2c
 8005d28:	9206      	str	r2, [sp, #24]
 8005d2a:	000a      	movs	r2, r1
 8005d2c:	3243      	adds	r2, #67	; 0x43
 8005d2e:	9307      	str	r3, [sp, #28]
 8005d30:	9005      	str	r0, [sp, #20]
 8005d32:	9204      	str	r2, [sp, #16]
 8005d34:	7e0a      	ldrb	r2, [r1, #24]
 8005d36:	000c      	movs	r4, r1
 8005d38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d3a:	2a78      	cmp	r2, #120	; 0x78
 8005d3c:	d807      	bhi.n	8005d4e <_printf_i+0x2a>
 8005d3e:	2a62      	cmp	r2, #98	; 0x62
 8005d40:	d809      	bhi.n	8005d56 <_printf_i+0x32>
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	d100      	bne.n	8005d48 <_printf_i+0x24>
 8005d46:	e0c1      	b.n	8005ecc <_printf_i+0x1a8>
 8005d48:	2a58      	cmp	r2, #88	; 0x58
 8005d4a:	d100      	bne.n	8005d4e <_printf_i+0x2a>
 8005d4c:	e08c      	b.n	8005e68 <_printf_i+0x144>
 8005d4e:	0026      	movs	r6, r4
 8005d50:	3642      	adds	r6, #66	; 0x42
 8005d52:	7032      	strb	r2, [r6, #0]
 8005d54:	e022      	b.n	8005d9c <_printf_i+0x78>
 8005d56:	0010      	movs	r0, r2
 8005d58:	3863      	subs	r0, #99	; 0x63
 8005d5a:	2815      	cmp	r0, #21
 8005d5c:	d8f7      	bhi.n	8005d4e <_printf_i+0x2a>
 8005d5e:	f7fa f9e7 	bl	8000130 <__gnu_thumb1_case_shi>
 8005d62:	0016      	.short	0x0016
 8005d64:	fff6001f 	.word	0xfff6001f
 8005d68:	fff6fff6 	.word	0xfff6fff6
 8005d6c:	001ffff6 	.word	0x001ffff6
 8005d70:	fff6fff6 	.word	0xfff6fff6
 8005d74:	fff6fff6 	.word	0xfff6fff6
 8005d78:	003600a8 	.word	0x003600a8
 8005d7c:	fff6009a 	.word	0xfff6009a
 8005d80:	00b9fff6 	.word	0x00b9fff6
 8005d84:	0036fff6 	.word	0x0036fff6
 8005d88:	fff6fff6 	.word	0xfff6fff6
 8005d8c:	009e      	.short	0x009e
 8005d8e:	0026      	movs	r6, r4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	3642      	adds	r6, #66	; 0x42
 8005d94:	1d11      	adds	r1, r2, #4
 8005d96:	6019      	str	r1, [r3, #0]
 8005d98:	6813      	ldr	r3, [r2, #0]
 8005d9a:	7033      	strb	r3, [r6, #0]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0a7      	b.n	8005ef0 <_printf_i+0x1cc>
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	1d0a      	adds	r2, r1, #4
 8005da6:	0605      	lsls	r5, r0, #24
 8005da8:	d50b      	bpl.n	8005dc2 <_printf_i+0x9e>
 8005daa:	680d      	ldr	r5, [r1, #0]
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	2d00      	cmp	r5, #0
 8005db0:	da03      	bge.n	8005dba <_printf_i+0x96>
 8005db2:	232d      	movs	r3, #45	; 0x2d
 8005db4:	9a04      	ldr	r2, [sp, #16]
 8005db6:	426d      	negs	r5, r5
 8005db8:	7013      	strb	r3, [r2, #0]
 8005dba:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <_printf_i+0x21c>)
 8005dbc:	270a      	movs	r7, #10
 8005dbe:	9303      	str	r3, [sp, #12]
 8005dc0:	e01b      	b.n	8005dfa <_printf_i+0xd6>
 8005dc2:	680d      	ldr	r5, [r1, #0]
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	0641      	lsls	r1, r0, #25
 8005dc8:	d5f1      	bpl.n	8005dae <_printf_i+0x8a>
 8005dca:	b22d      	sxth	r5, r5
 8005dcc:	e7ef      	b.n	8005dae <_printf_i+0x8a>
 8005dce:	680d      	ldr	r5, [r1, #0]
 8005dd0:	6819      	ldr	r1, [r3, #0]
 8005dd2:	1d08      	adds	r0, r1, #4
 8005dd4:	6018      	str	r0, [r3, #0]
 8005dd6:	062e      	lsls	r6, r5, #24
 8005dd8:	d501      	bpl.n	8005dde <_printf_i+0xba>
 8005dda:	680d      	ldr	r5, [r1, #0]
 8005ddc:	e003      	b.n	8005de6 <_printf_i+0xc2>
 8005dde:	066d      	lsls	r5, r5, #25
 8005de0:	d5fb      	bpl.n	8005dda <_printf_i+0xb6>
 8005de2:	680d      	ldr	r5, [r1, #0]
 8005de4:	b2ad      	uxth	r5, r5
 8005de6:	4b56      	ldr	r3, [pc, #344]	; (8005f40 <_printf_i+0x21c>)
 8005de8:	2708      	movs	r7, #8
 8005dea:	9303      	str	r3, [sp, #12]
 8005dec:	2a6f      	cmp	r2, #111	; 0x6f
 8005dee:	d000      	beq.n	8005df2 <_printf_i+0xce>
 8005df0:	3702      	adds	r7, #2
 8005df2:	0023      	movs	r3, r4
 8005df4:	2200      	movs	r2, #0
 8005df6:	3343      	adds	r3, #67	; 0x43
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	6863      	ldr	r3, [r4, #4]
 8005dfc:	60a3      	str	r3, [r4, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	db03      	blt.n	8005e0a <_printf_i+0xe6>
 8005e02:	2204      	movs	r2, #4
 8005e04:	6821      	ldr	r1, [r4, #0]
 8005e06:	4391      	bics	r1, r2
 8005e08:	6021      	str	r1, [r4, #0]
 8005e0a:	2d00      	cmp	r5, #0
 8005e0c:	d102      	bne.n	8005e14 <_printf_i+0xf0>
 8005e0e:	9e04      	ldr	r6, [sp, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00c      	beq.n	8005e2e <_printf_i+0x10a>
 8005e14:	9e04      	ldr	r6, [sp, #16]
 8005e16:	0028      	movs	r0, r5
 8005e18:	0039      	movs	r1, r7
 8005e1a:	f7fa fa19 	bl	8000250 <__aeabi_uidivmod>
 8005e1e:	9b03      	ldr	r3, [sp, #12]
 8005e20:	3e01      	subs	r6, #1
 8005e22:	5c5b      	ldrb	r3, [r3, r1]
 8005e24:	7033      	strb	r3, [r6, #0]
 8005e26:	002b      	movs	r3, r5
 8005e28:	0005      	movs	r5, r0
 8005e2a:	429f      	cmp	r7, r3
 8005e2c:	d9f3      	bls.n	8005e16 <_printf_i+0xf2>
 8005e2e:	2f08      	cmp	r7, #8
 8005e30:	d109      	bne.n	8005e46 <_printf_i+0x122>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	07db      	lsls	r3, r3, #31
 8005e36:	d506      	bpl.n	8005e46 <_printf_i+0x122>
 8005e38:	6863      	ldr	r3, [r4, #4]
 8005e3a:	6922      	ldr	r2, [r4, #16]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	dc02      	bgt.n	8005e46 <_printf_i+0x122>
 8005e40:	2330      	movs	r3, #48	; 0x30
 8005e42:	3e01      	subs	r6, #1
 8005e44:	7033      	strb	r3, [r6, #0]
 8005e46:	9b04      	ldr	r3, [sp, #16]
 8005e48:	1b9b      	subs	r3, r3, r6
 8005e4a:	6123      	str	r3, [r4, #16]
 8005e4c:	9b07      	ldr	r3, [sp, #28]
 8005e4e:	0021      	movs	r1, r4
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	9805      	ldr	r0, [sp, #20]
 8005e54:	9b06      	ldr	r3, [sp, #24]
 8005e56:	aa09      	add	r2, sp, #36	; 0x24
 8005e58:	f7ff fef4 	bl	8005c44 <_printf_common>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	d14c      	bne.n	8005efa <_printf_i+0x1d6>
 8005e60:	2001      	movs	r0, #1
 8005e62:	4240      	negs	r0, r0
 8005e64:	b00b      	add	sp, #44	; 0x2c
 8005e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e68:	3145      	adds	r1, #69	; 0x45
 8005e6a:	700a      	strb	r2, [r1, #0]
 8005e6c:	4a34      	ldr	r2, [pc, #208]	; (8005f40 <_printf_i+0x21c>)
 8005e6e:	9203      	str	r2, [sp, #12]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	6821      	ldr	r1, [r4, #0]
 8005e74:	ca20      	ldmia	r2!, {r5}
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	0608      	lsls	r0, r1, #24
 8005e7a:	d516      	bpl.n	8005eaa <_printf_i+0x186>
 8005e7c:	07cb      	lsls	r3, r1, #31
 8005e7e:	d502      	bpl.n	8005e86 <_printf_i+0x162>
 8005e80:	2320      	movs	r3, #32
 8005e82:	4319      	orrs	r1, r3
 8005e84:	6021      	str	r1, [r4, #0]
 8005e86:	2710      	movs	r7, #16
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	d1b2      	bne.n	8005df2 <_printf_i+0xce>
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	439a      	bics	r2, r3
 8005e92:	6022      	str	r2, [r4, #0]
 8005e94:	e7ad      	b.n	8005df2 <_printf_i+0xce>
 8005e96:	2220      	movs	r2, #32
 8005e98:	6809      	ldr	r1, [r1, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	6022      	str	r2, [r4, #0]
 8005e9e:	0022      	movs	r2, r4
 8005ea0:	2178      	movs	r1, #120	; 0x78
 8005ea2:	3245      	adds	r2, #69	; 0x45
 8005ea4:	7011      	strb	r1, [r2, #0]
 8005ea6:	4a27      	ldr	r2, [pc, #156]	; (8005f44 <_printf_i+0x220>)
 8005ea8:	e7e1      	b.n	8005e6e <_printf_i+0x14a>
 8005eaa:	0648      	lsls	r0, r1, #25
 8005eac:	d5e6      	bpl.n	8005e7c <_printf_i+0x158>
 8005eae:	b2ad      	uxth	r5, r5
 8005eb0:	e7e4      	b.n	8005e7c <_printf_i+0x158>
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	680d      	ldr	r5, [r1, #0]
 8005eb6:	1d10      	adds	r0, r2, #4
 8005eb8:	6949      	ldr	r1, [r1, #20]
 8005eba:	6018      	str	r0, [r3, #0]
 8005ebc:	6813      	ldr	r3, [r2, #0]
 8005ebe:	062e      	lsls	r6, r5, #24
 8005ec0:	d501      	bpl.n	8005ec6 <_printf_i+0x1a2>
 8005ec2:	6019      	str	r1, [r3, #0]
 8005ec4:	e002      	b.n	8005ecc <_printf_i+0x1a8>
 8005ec6:	066d      	lsls	r5, r5, #25
 8005ec8:	d5fb      	bpl.n	8005ec2 <_printf_i+0x19e>
 8005eca:	8019      	strh	r1, [r3, #0]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9e04      	ldr	r6, [sp, #16]
 8005ed0:	6123      	str	r3, [r4, #16]
 8005ed2:	e7bb      	b.n	8005e4c <_printf_i+0x128>
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	1d11      	adds	r1, r2, #4
 8005ed8:	6019      	str	r1, [r3, #0]
 8005eda:	6816      	ldr	r6, [r2, #0]
 8005edc:	2100      	movs	r1, #0
 8005ede:	0030      	movs	r0, r6
 8005ee0:	6862      	ldr	r2, [r4, #4]
 8005ee2:	f000 f833 	bl	8005f4c <memchr>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d001      	beq.n	8005eee <_printf_i+0x1ca>
 8005eea:	1b80      	subs	r0, r0, r6
 8005eec:	6060      	str	r0, [r4, #4]
 8005eee:	6863      	ldr	r3, [r4, #4]
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9a04      	ldr	r2, [sp, #16]
 8005ef6:	7013      	strb	r3, [r2, #0]
 8005ef8:	e7a8      	b.n	8005e4c <_printf_i+0x128>
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	0032      	movs	r2, r6
 8005efe:	9906      	ldr	r1, [sp, #24]
 8005f00:	9805      	ldr	r0, [sp, #20]
 8005f02:	9d07      	ldr	r5, [sp, #28]
 8005f04:	47a8      	blx	r5
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	d0aa      	beq.n	8005e60 <_printf_i+0x13c>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	079b      	lsls	r3, r3, #30
 8005f0e:	d415      	bmi.n	8005f3c <_printf_i+0x218>
 8005f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f12:	68e0      	ldr	r0, [r4, #12]
 8005f14:	4298      	cmp	r0, r3
 8005f16:	daa5      	bge.n	8005e64 <_printf_i+0x140>
 8005f18:	0018      	movs	r0, r3
 8005f1a:	e7a3      	b.n	8005e64 <_printf_i+0x140>
 8005f1c:	0022      	movs	r2, r4
 8005f1e:	2301      	movs	r3, #1
 8005f20:	9906      	ldr	r1, [sp, #24]
 8005f22:	9805      	ldr	r0, [sp, #20]
 8005f24:	9e07      	ldr	r6, [sp, #28]
 8005f26:	3219      	adds	r2, #25
 8005f28:	47b0      	blx	r6
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	d098      	beq.n	8005e60 <_printf_i+0x13c>
 8005f2e:	3501      	adds	r5, #1
 8005f30:	68e3      	ldr	r3, [r4, #12]
 8005f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	42ab      	cmp	r3, r5
 8005f38:	dcf0      	bgt.n	8005f1c <_printf_i+0x1f8>
 8005f3a:	e7e9      	b.n	8005f10 <_printf_i+0x1ec>
 8005f3c:	2500      	movs	r5, #0
 8005f3e:	e7f7      	b.n	8005f30 <_printf_i+0x20c>
 8005f40:	08006d2e 	.word	0x08006d2e
 8005f44:	08006d3f 	.word	0x08006d3f

08005f48 <__retarget_lock_acquire_recursive>:
 8005f48:	4770      	bx	lr

08005f4a <__retarget_lock_release_recursive>:
 8005f4a:	4770      	bx	lr

08005f4c <memchr>:
 8005f4c:	b2c9      	uxtb	r1, r1
 8005f4e:	1882      	adds	r2, r0, r2
 8005f50:	4290      	cmp	r0, r2
 8005f52:	d101      	bne.n	8005f58 <memchr+0xc>
 8005f54:	2000      	movs	r0, #0
 8005f56:	4770      	bx	lr
 8005f58:	7803      	ldrb	r3, [r0, #0]
 8005f5a:	428b      	cmp	r3, r1
 8005f5c:	d0fb      	beq.n	8005f56 <memchr+0xa>
 8005f5e:	3001      	adds	r0, #1
 8005f60:	e7f6      	b.n	8005f50 <memchr+0x4>

08005f62 <_realloc_r>:
 8005f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f64:	0007      	movs	r7, r0
 8005f66:	000e      	movs	r6, r1
 8005f68:	0014      	movs	r4, r2
 8005f6a:	2900      	cmp	r1, #0
 8005f6c:	d105      	bne.n	8005f7a <_realloc_r+0x18>
 8005f6e:	0011      	movs	r1, r2
 8005f70:	f7ff fc4e 	bl	8005810 <_malloc_r>
 8005f74:	0005      	movs	r5, r0
 8005f76:	0028      	movs	r0, r5
 8005f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	d103      	bne.n	8005f86 <_realloc_r+0x24>
 8005f7e:	f7ff fbdb 	bl	8005738 <_free_r>
 8005f82:	0025      	movs	r5, r4
 8005f84:	e7f7      	b.n	8005f76 <_realloc_r+0x14>
 8005f86:	f000 f81b 	bl	8005fc0 <_malloc_usable_size_r>
 8005f8a:	9001      	str	r0, [sp, #4]
 8005f8c:	4284      	cmp	r4, r0
 8005f8e:	d803      	bhi.n	8005f98 <_realloc_r+0x36>
 8005f90:	0035      	movs	r5, r6
 8005f92:	0843      	lsrs	r3, r0, #1
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d3ee      	bcc.n	8005f76 <_realloc_r+0x14>
 8005f98:	0021      	movs	r1, r4
 8005f9a:	0038      	movs	r0, r7
 8005f9c:	f7ff fc38 	bl	8005810 <_malloc_r>
 8005fa0:	1e05      	subs	r5, r0, #0
 8005fa2:	d0e8      	beq.n	8005f76 <_realloc_r+0x14>
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	0022      	movs	r2, r4
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	d900      	bls.n	8005fae <_realloc_r+0x4c>
 8005fac:	001a      	movs	r2, r3
 8005fae:	0031      	movs	r1, r6
 8005fb0:	0028      	movs	r0, r5
 8005fb2:	f7ff fb71 	bl	8005698 <memcpy>
 8005fb6:	0031      	movs	r1, r6
 8005fb8:	0038      	movs	r0, r7
 8005fba:	f7ff fbbd 	bl	8005738 <_free_r>
 8005fbe:	e7da      	b.n	8005f76 <_realloc_r+0x14>

08005fc0 <_malloc_usable_size_r>:
 8005fc0:	1f0b      	subs	r3, r1, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	1f18      	subs	r0, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da01      	bge.n	8005fce <_malloc_usable_size_r+0xe>
 8005fca:	580b      	ldr	r3, [r1, r0]
 8005fcc:	18c0      	adds	r0, r0, r3
 8005fce:	4770      	bx	lr

08005fd0 <_init>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr

08005fdc <_fini>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr
